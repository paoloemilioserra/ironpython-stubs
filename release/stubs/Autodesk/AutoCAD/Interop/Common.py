# encoding: utf-8
# module Autodesk.AutoCAD.Interop.Common calls itself Common
# from Autodesk.AutoCAD.Interop.Common, Version=23.1.0.0, Culture=neutral, PublicKeyToken=null
# by generator 1.145
# no doc
# no imports

# no functions
# classes

class Ac3DPolylineType(Enum):
    """ enum Ac3DPolylineType, values: acCubicSpline3DPoly (2), acQuadSpline3DPoly (1), acSimple3DPoly (0) """
    acCubicSpline3DPoly = None
    acQuadSpline3DPoly = None
    acSimple3DPoly = None
    value__ = None


class AcActiveSpace(Enum):
    """ enum AcActiveSpace, values: acModelSpace (1), acPaperSpace (0) """
    acModelSpace = None
    acPaperSpace = None
    value__ = None


class IAcadObject:
    # no doc
    def Delete(self):
        """ Delete(self: IAcadObject) """
        pass

    def Erase(self):
        """ Erase(self: IAcadObject) """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: IAcadObject) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: IAcadObject, AppName: str) -> (object, object) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: IAcadObject, XDataType: object, XDataValue: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IAcadObject) -> object

"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: IAcadObject) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: IAcadObject) -> object

"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: IAcadObject) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: IAcadObject) -> bool

"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: IAcadObject) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: IAcadObject) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: IAcadObject) -> Int64

"""



class IAcadEntity(IAcadObject):
    # no doc
    def ArrayPolar(self, NumberOfObjects, AngleToFill, CenterPoint):
        """ ArrayPolar(self: IAcadEntity, NumberOfObjects: int, AngleToFill: float, CenterPoint: object) -> object """
        pass

    def ArrayRectangular(self, NumberOfRows, NumberOfColumns, NumberOfLevels, DistBetweenRows, DistBetweenCols, DistBetweenLevels):
        """ ArrayRectangular(self: IAcadEntity, NumberOfRows: int, NumberOfColumns: int, NumberOfLevels: int, DistBetweenRows: float, DistBetweenCols: float, DistBetweenLevels: float) -> object """
        pass

    def Copy(self):
        """ Copy(self: IAcadEntity) -> object """
        pass

    def Delete(self):
        """ Delete(self: IAcadEntity) """
        pass

    def Erase(self):
        """ Erase(self: IAcadEntity) """
        pass

    def GetBoundingBox(self, MinPoint, MaxPoint):
        """ GetBoundingBox(self: IAcadEntity) -> (object, object) """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: IAcadEntity) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: IAcadEntity, AppName: str) -> (object, object) """
        pass

    def Highlight(self, HighlightFlag):
        """ Highlight(self: IAcadEntity, HighlightFlag: bool) """
        pass

    def IntersectWith(self, IntersectObject, option):
        """ IntersectWith(self: IAcadEntity, IntersectObject: object, option: AcExtendOption) -> object """
        pass

    def Mirror(self, Point1, Point2):
        """ Mirror(self: IAcadEntity, Point1: object, Point2: object) -> object """
        pass

    def Mirror3D(self, Point1, Point2, point3):
        """ Mirror3D(self: IAcadEntity, Point1: object, Point2: object, point3: object) -> object """
        pass

    def Move(self, FromPoint, ToPoint):
        """ Move(self: IAcadEntity, FromPoint: object, ToPoint: object) """
        pass

    def Rotate(self, BasePoint, RotationAngle):
        """ Rotate(self: IAcadEntity, BasePoint: object, RotationAngle: float) """
        pass

    def Rotate3D(self, Point1, Point2, RotationAngle):
        """ Rotate3D(self: IAcadEntity, Point1: object, Point2: object, RotationAngle: float) """
        pass

    def ScaleEntity(self, BasePoint, ScaleFactor):
        """ ScaleEntity(self: IAcadEntity, BasePoint: object, ScaleFactor: float) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: IAcadEntity, XDataType: object, XDataValue: object) """
        pass

    def TransformBy(self, TransformationMatrix):
        """ TransformBy(self: IAcadEntity, TransformationMatrix: object) """
        pass

    def Update(self):
        """ Update(self: IAcadEntity) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IAcadEntity) -> object

"""

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: IAcadEntity) -> ACAD_COLOR

Set: color(self: IAcadEntity) = value
"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: IAcadEntity) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: IAcadEntity) -> object

"""

    EntityName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityName(self: IAcadEntity) -> str

"""

    EntityTransparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityTransparency(self: IAcadEntity) -> str

Set: EntityTransparency(self: IAcadEntity) = value
"""

    EntityType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityType(self: IAcadEntity) -> int

"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: IAcadEntity) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: IAcadEntity) -> bool

"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: IAcadEntity) -> AcadHyperlinks

"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layer(self: IAcadEntity) -> str

Set: Layer(self: IAcadEntity) = value
"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: IAcadEntity) -> str

Set: Linetype(self: IAcadEntity) = value
"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeScale(self: IAcadEntity) -> float

Set: LinetypeScale(self: IAcadEntity) = value
"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: IAcadEntity) -> ACAD_LWEIGHT

Set: Lineweight(self: IAcadEntity) = value
"""

    Material = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Material(self: IAcadEntity) -> str

Set: Material(self: IAcadEntity) = value
"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: IAcadEntity) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: IAcadEntity) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: IAcadEntity) -> Int64

"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: IAcadEntity) -> str

Set: PlotStyleName(self: IAcadEntity) = value
"""

    TrueColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TrueColor(self: IAcadEntity) -> AcadAcCmColor

Set: TrueColor(self: IAcadEntity) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: IAcadEntity) -> bool

Set: Visible(self: IAcadEntity) = value
"""



class IAcad3DFace(IAcadEntity, IAcadObject):
    # no doc
    def ArrayPolar(self, NumberOfObjects, AngleToFill, CenterPoint):
        """ ArrayPolar(self: IAcad3DFace, NumberOfObjects: int, AngleToFill: float, CenterPoint: object) -> object """
        pass

    def ArrayRectangular(self, NumberOfRows, NumberOfColumns, NumberOfLevels, DistBetweenRows, DistBetweenCols, DistBetweenLevels):
        """ ArrayRectangular(self: IAcad3DFace, NumberOfRows: int, NumberOfColumns: int, NumberOfLevels: int, DistBetweenRows: float, DistBetweenCols: float, DistBetweenLevels: float) -> object """
        pass

    def Copy(self):
        """ Copy(self: IAcad3DFace) -> object """
        pass

    def Delete(self):
        """ Delete(self: IAcad3DFace) """
        pass

    def Erase(self):
        """ Erase(self: IAcad3DFace) """
        pass

    def GetBoundingBox(self, MinPoint, MaxPoint):
        """ GetBoundingBox(self: IAcad3DFace) -> (object, object) """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: IAcad3DFace) -> AcadDictionary """
        pass

    def GetInvisibleEdge(self, Index):
        """ GetInvisibleEdge(self: IAcad3DFace, Index: int) -> bool """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: IAcad3DFace, AppName: str) -> (object, object) """
        pass

    def Highlight(self, HighlightFlag):
        """ Highlight(self: IAcad3DFace, HighlightFlag: bool) """
        pass

    def IntersectWith(self, IntersectObject, option):
        """ IntersectWith(self: IAcad3DFace, IntersectObject: object, option: AcExtendOption) -> object """
        pass

    def Mirror(self, Point1, Point2):
        """ Mirror(self: IAcad3DFace, Point1: object, Point2: object) -> object """
        pass

    def Mirror3D(self, Point1, Point2, point3):
        """ Mirror3D(self: IAcad3DFace, Point1: object, Point2: object, point3: object) -> object """
        pass

    def Move(self, FromPoint, ToPoint):
        """ Move(self: IAcad3DFace, FromPoint: object, ToPoint: object) """
        pass

    def Rotate(self, BasePoint, RotationAngle):
        """ Rotate(self: IAcad3DFace, BasePoint: object, RotationAngle: float) """
        pass

    def Rotate3D(self, Point1, Point2, RotationAngle):
        """ Rotate3D(self: IAcad3DFace, Point1: object, Point2: object, RotationAngle: float) """
        pass

    def ScaleEntity(self, BasePoint, ScaleFactor):
        """ ScaleEntity(self: IAcad3DFace, BasePoint: object, ScaleFactor: float) """
        pass

    def SetInvisibleEdge(self, Index, State):
        """ SetInvisibleEdge(self: IAcad3DFace, Index: int, State: bool) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: IAcad3DFace, XDataType: object, XDataValue: object) """
        pass

    def TransformBy(self, TransformationMatrix):
        """ TransformBy(self: IAcad3DFace, TransformationMatrix: object) """
        pass

    def Update(self):
        """ Update(self: IAcad3DFace) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IAcad3DFace) -> object

"""

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: IAcad3DFace) -> ACAD_COLOR

Set: color(self: IAcad3DFace) = value
"""

    Coordinates = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Coordinates(self: IAcad3DFace) -> object

Set: Coordinates(self: IAcad3DFace) = value
"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: IAcad3DFace) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: IAcad3DFace) -> object

"""

    EntityName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityName(self: IAcad3DFace) -> str

"""

    EntityTransparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityTransparency(self: IAcad3DFace) -> str

Set: EntityTransparency(self: IAcad3DFace) = value
"""

    EntityType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityType(self: IAcad3DFace) -> int

"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: IAcad3DFace) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: IAcad3DFace) -> bool

"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: IAcad3DFace) -> AcadHyperlinks

"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layer(self: IAcad3DFace) -> str

Set: Layer(self: IAcad3DFace) = value
"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: IAcad3DFace) -> str

Set: Linetype(self: IAcad3DFace) = value
"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeScale(self: IAcad3DFace) -> float

Set: LinetypeScale(self: IAcad3DFace) = value
"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: IAcad3DFace) -> ACAD_LWEIGHT

Set: Lineweight(self: IAcad3DFace) = value
"""

    Material = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Material(self: IAcad3DFace) -> str

Set: Material(self: IAcad3DFace) = value
"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: IAcad3DFace) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: IAcad3DFace) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: IAcad3DFace) -> Int64

"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: IAcad3DFace) -> str

Set: PlotStyleName(self: IAcad3DFace) = value
"""

    TrueColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TrueColor(self: IAcad3DFace) -> AcadAcCmColor

Set: TrueColor(self: IAcad3DFace) = value
"""

    VisibilityEdge1 = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VisibilityEdge1(self: IAcad3DFace) -> bool

Set: VisibilityEdge1(self: IAcad3DFace) = value
"""

    VisibilityEdge2 = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VisibilityEdge2(self: IAcad3DFace) -> bool

Set: VisibilityEdge2(self: IAcad3DFace) = value
"""

    VisibilityEdge3 = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VisibilityEdge3(self: IAcad3DFace) -> bool

Set: VisibilityEdge3(self: IAcad3DFace) = value
"""

    VisibilityEdge4 = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VisibilityEdge4(self: IAcad3DFace) -> bool

Set: VisibilityEdge4(self: IAcad3DFace) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: IAcad3DFace) -> bool

Set: Visible(self: IAcad3DFace) = value
"""



class IAcadObjectEvents_Event:
    # no doc
    def add_Modified(self, A_1):
        """ add_Modified(self: IAcadObjectEvents_Event, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def remove_Modified(self, A_1):
        """ remove_Modified(self: IAcadObjectEvents_Event, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Modified = None


class Acad3DFace(IAcad3DFace, IAcadEntity, IAcadObject, IAcadObjectEvents_Event):
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class Acad3DFaceClass(__ComObject):
    # no doc
    def add_Modified(self, A_1):
        """ add_Modified(self: Acad3DFaceClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def ArrayPolar(self, NumberOfObjects, AngleToFill, CenterPoint):
        """ ArrayPolar(self: Acad3DFaceClass, NumberOfObjects: int, AngleToFill: float, CenterPoint: object) -> object """
        pass

    def ArrayRectangular(self, NumberOfRows, NumberOfColumns, NumberOfLevels, DistBetweenRows, DistBetweenCols, DistBetweenLevels):
        """ ArrayRectangular(self: Acad3DFaceClass, NumberOfRows: int, NumberOfColumns: int, NumberOfLevels: int, DistBetweenRows: float, DistBetweenCols: float, DistBetweenLevels: float) -> object """
        pass

    def Copy(self):
        """ Copy(self: Acad3DFaceClass) -> object """
        pass

    def Delete(self):
        """ Delete(self: Acad3DFaceClass) """
        pass

    def Erase(self):
        """ Erase(self: Acad3DFaceClass) """
        pass

    def GetBoundingBox(self, MinPoint, MaxPoint):
        """ GetBoundingBox(self: Acad3DFaceClass) -> (object, object) """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: Acad3DFaceClass) -> AcadDictionary """
        pass

    def GetInvisibleEdge(self, Index):
        """ GetInvisibleEdge(self: Acad3DFaceClass, Index: int) -> bool """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: Acad3DFaceClass, AppName: str) -> (object, object) """
        pass

    def Highlight(self, HighlightFlag):
        """ Highlight(self: Acad3DFaceClass, HighlightFlag: bool) """
        pass

    def IntersectWith(self, IntersectObject, option):
        """ IntersectWith(self: Acad3DFaceClass, IntersectObject: object, option: AcExtendOption) -> object """
        pass

    def Mirror(self, Point1, Point2):
        """ Mirror(self: Acad3DFaceClass, Point1: object, Point2: object) -> object """
        pass

    def Mirror3D(self, Point1, Point2, point3):
        """ Mirror3D(self: Acad3DFaceClass, Point1: object, Point2: object, point3: object) -> object """
        pass

    def Move(self, FromPoint, ToPoint):
        """ Move(self: Acad3DFaceClass, FromPoint: object, ToPoint: object) """
        pass

    def remove_Modified(self, A_1):
        """ remove_Modified(self: Acad3DFaceClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def Rotate(self, BasePoint, RotationAngle):
        """ Rotate(self: Acad3DFaceClass, BasePoint: object, RotationAngle: float) """
        pass

    def Rotate3D(self, Point1, Point2, RotationAngle):
        """ Rotate3D(self: Acad3DFaceClass, Point1: object, Point2: object, RotationAngle: float) """
        pass

    def ScaleEntity(self, BasePoint, ScaleFactor):
        """ ScaleEntity(self: Acad3DFaceClass, BasePoint: object, ScaleFactor: float) """
        pass

    def SetInvisibleEdge(self, Index, State):
        """ SetInvisibleEdge(self: Acad3DFaceClass, Index: int, State: bool) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: Acad3DFaceClass, XDataType: object, XDataValue: object) """
        pass

    def TransformBy(self, TransformationMatrix):
        """ TransformBy(self: Acad3DFaceClass, TransformationMatrix: object) """
        pass

    def Update(self):
        """ Update(self: Acad3DFaceClass) """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: Acad3DFaceClass) -> object

"""

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: Acad3DFaceClass) -> ACAD_COLOR

Set: color(self: Acad3DFaceClass) = value
"""

    Coordinates = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Coordinates(self: Acad3DFaceClass) -> object

Set: Coordinates(self: Acad3DFaceClass) = value
"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: Acad3DFaceClass) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: Acad3DFaceClass) -> object

"""

    EntityName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityName(self: Acad3DFaceClass) -> str

"""

    EntityTransparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityTransparency(self: Acad3DFaceClass) -> str

Set: EntityTransparency(self: Acad3DFaceClass) = value
"""

    EntityType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityType(self: Acad3DFaceClass) -> int

"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: Acad3DFaceClass) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: Acad3DFaceClass) -> bool

"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: Acad3DFaceClass) -> AcadHyperlinks

"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layer(self: Acad3DFaceClass) -> str

Set: Layer(self: Acad3DFaceClass) = value
"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: Acad3DFaceClass) -> str

Set: Linetype(self: Acad3DFaceClass) = value
"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeScale(self: Acad3DFaceClass) -> float

Set: LinetypeScale(self: Acad3DFaceClass) = value
"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: Acad3DFaceClass) -> ACAD_LWEIGHT

Set: Lineweight(self: Acad3DFaceClass) = value
"""

    Material = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Material(self: Acad3DFaceClass) -> str

Set: Material(self: Acad3DFaceClass) = value
"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: Acad3DFaceClass) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: Acad3DFaceClass) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: Acad3DFaceClass) -> Int64

"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: Acad3DFaceClass) -> str

Set: PlotStyleName(self: Acad3DFaceClass) = value
"""

    TrueColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TrueColor(self: Acad3DFaceClass) -> AcadAcCmColor

Set: TrueColor(self: Acad3DFaceClass) = value
"""

    VisibilityEdge1 = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VisibilityEdge1(self: Acad3DFaceClass) -> bool

Set: VisibilityEdge1(self: Acad3DFaceClass) = value
"""

    VisibilityEdge2 = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VisibilityEdge2(self: Acad3DFaceClass) -> bool

Set: VisibilityEdge2(self: Acad3DFaceClass) = value
"""

    VisibilityEdge3 = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VisibilityEdge3(self: Acad3DFaceClass) -> bool

Set: VisibilityEdge3(self: Acad3DFaceClass) = value
"""

    VisibilityEdge4 = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VisibilityEdge4(self: Acad3DFaceClass) -> bool

Set: VisibilityEdge4(self: Acad3DFaceClass) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: Acad3DFaceClass) -> bool

Set: Visible(self: Acad3DFaceClass) = value
"""


    Modified = None


class IAcad3DPolyline(IAcadEntity, IAcadObject):
    # no doc
    def AppendVertex(self, vertex):
        """ AppendVertex(self: IAcad3DPolyline, vertex: object) """
        pass

    def ArrayPolar(self, NumberOfObjects, AngleToFill, CenterPoint):
        """ ArrayPolar(self: IAcad3DPolyline, NumberOfObjects: int, AngleToFill: float, CenterPoint: object) -> object """
        pass

    def ArrayRectangular(self, NumberOfRows, NumberOfColumns, NumberOfLevels, DistBetweenRows, DistBetweenCols, DistBetweenLevels):
        """ ArrayRectangular(self: IAcad3DPolyline, NumberOfRows: int, NumberOfColumns: int, NumberOfLevels: int, DistBetweenRows: float, DistBetweenCols: float, DistBetweenLevels: float) -> object """
        pass

    def Copy(self):
        """ Copy(self: IAcad3DPolyline) -> object """
        pass

    def Delete(self):
        """ Delete(self: IAcad3DPolyline) """
        pass

    def Erase(self):
        """ Erase(self: IAcad3DPolyline) """
        pass

    def Explode(self):
        """ Explode(self: IAcad3DPolyline) -> object """
        pass

    def GetBoundingBox(self, MinPoint, MaxPoint):
        """ GetBoundingBox(self: IAcad3DPolyline) -> (object, object) """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: IAcad3DPolyline) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: IAcad3DPolyline, AppName: str) -> (object, object) """
        pass

    def Highlight(self, HighlightFlag):
        """ Highlight(self: IAcad3DPolyline, HighlightFlag: bool) """
        pass

    def IntersectWith(self, IntersectObject, option):
        """ IntersectWith(self: IAcad3DPolyline, IntersectObject: object, option: AcExtendOption) -> object """
        pass

    def Mirror(self, Point1, Point2):
        """ Mirror(self: IAcad3DPolyline, Point1: object, Point2: object) -> object """
        pass

    def Mirror3D(self, Point1, Point2, point3):
        """ Mirror3D(self: IAcad3DPolyline, Point1: object, Point2: object, point3: object) -> object """
        pass

    def Move(self, FromPoint, ToPoint):
        """ Move(self: IAcad3DPolyline, FromPoint: object, ToPoint: object) """
        pass

    def Rotate(self, BasePoint, RotationAngle):
        """ Rotate(self: IAcad3DPolyline, BasePoint: object, RotationAngle: float) """
        pass

    def Rotate3D(self, Point1, Point2, RotationAngle):
        """ Rotate3D(self: IAcad3DPolyline, Point1: object, Point2: object, RotationAngle: float) """
        pass

    def ScaleEntity(self, BasePoint, ScaleFactor):
        """ ScaleEntity(self: IAcad3DPolyline, BasePoint: object, ScaleFactor: float) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: IAcad3DPolyline, XDataType: object, XDataValue: object) """
        pass

    def TransformBy(self, TransformationMatrix):
        """ TransformBy(self: IAcad3DPolyline, TransformationMatrix: object) """
        pass

    def Update(self):
        """ Update(self: IAcad3DPolyline) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IAcad3DPolyline) -> object

"""

    Closed = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Closed(self: IAcad3DPolyline) -> bool

Set: Closed(self: IAcad3DPolyline) = value
"""

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: IAcad3DPolyline) -> ACAD_COLOR

Set: color(self: IAcad3DPolyline) = value
"""

    Coordinates = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Coordinates(self: IAcad3DPolyline) -> object

Set: Coordinates(self: IAcad3DPolyline) = value
"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: IAcad3DPolyline) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: IAcad3DPolyline) -> object

"""

    EntityName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityName(self: IAcad3DPolyline) -> str

"""

    EntityTransparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityTransparency(self: IAcad3DPolyline) -> str

Set: EntityTransparency(self: IAcad3DPolyline) = value
"""

    EntityType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityType(self: IAcad3DPolyline) -> int

"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: IAcad3DPolyline) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: IAcad3DPolyline) -> bool

"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: IAcad3DPolyline) -> AcadHyperlinks

"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layer(self: IAcad3DPolyline) -> str

Set: Layer(self: IAcad3DPolyline) = value
"""

    Length = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Length(self: IAcad3DPolyline) -> float

"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: IAcad3DPolyline) -> str

Set: Linetype(self: IAcad3DPolyline) = value
"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeScale(self: IAcad3DPolyline) -> float

Set: LinetypeScale(self: IAcad3DPolyline) = value
"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: IAcad3DPolyline) -> ACAD_LWEIGHT

Set: Lineweight(self: IAcad3DPolyline) = value
"""

    Material = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Material(self: IAcad3DPolyline) -> str

Set: Material(self: IAcad3DPolyline) = value
"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: IAcad3DPolyline) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: IAcad3DPolyline) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: IAcad3DPolyline) -> Int64

"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: IAcad3DPolyline) -> str

Set: PlotStyleName(self: IAcad3DPolyline) = value
"""

    TrueColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TrueColor(self: IAcad3DPolyline) -> AcadAcCmColor

Set: TrueColor(self: IAcad3DPolyline) = value
"""

    Type = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Type(self: IAcad3DPolyline) -> Ac3DPolylineType

Set: Type(self: IAcad3DPolyline) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: IAcad3DPolyline) -> bool

Set: Visible(self: IAcad3DPolyline) = value
"""



class Acad3DPolyline(IAcad3DPolyline, IAcadEntity, IAcadObject, IAcadObjectEvents_Event):
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class Acad3DPolylineClass(__ComObject):
    # no doc
    def add_Modified(self, A_1):
        """ add_Modified(self: Acad3DPolylineClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def AppendVertex(self, vertex):
        """ AppendVertex(self: Acad3DPolylineClass, vertex: object) """
        pass

    def ArrayPolar(self, NumberOfObjects, AngleToFill, CenterPoint):
        """ ArrayPolar(self: Acad3DPolylineClass, NumberOfObjects: int, AngleToFill: float, CenterPoint: object) -> object """
        pass

    def ArrayRectangular(self, NumberOfRows, NumberOfColumns, NumberOfLevels, DistBetweenRows, DistBetweenCols, DistBetweenLevels):
        """ ArrayRectangular(self: Acad3DPolylineClass, NumberOfRows: int, NumberOfColumns: int, NumberOfLevels: int, DistBetweenRows: float, DistBetweenCols: float, DistBetweenLevels: float) -> object """
        pass

    def Copy(self):
        """ Copy(self: Acad3DPolylineClass) -> object """
        pass

    def Delete(self):
        """ Delete(self: Acad3DPolylineClass) """
        pass

    def Erase(self):
        """ Erase(self: Acad3DPolylineClass) """
        pass

    def Explode(self):
        """ Explode(self: Acad3DPolylineClass) -> object """
        pass

    def GetBoundingBox(self, MinPoint, MaxPoint):
        """ GetBoundingBox(self: Acad3DPolylineClass) -> (object, object) """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: Acad3DPolylineClass) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: Acad3DPolylineClass, AppName: str) -> (object, object) """
        pass

    def Highlight(self, HighlightFlag):
        """ Highlight(self: Acad3DPolylineClass, HighlightFlag: bool) """
        pass

    def IntersectWith(self, IntersectObject, option):
        """ IntersectWith(self: Acad3DPolylineClass, IntersectObject: object, option: AcExtendOption) -> object """
        pass

    def Mirror(self, Point1, Point2):
        """ Mirror(self: Acad3DPolylineClass, Point1: object, Point2: object) -> object """
        pass

    def Mirror3D(self, Point1, Point2, point3):
        """ Mirror3D(self: Acad3DPolylineClass, Point1: object, Point2: object, point3: object) -> object """
        pass

    def Move(self, FromPoint, ToPoint):
        """ Move(self: Acad3DPolylineClass, FromPoint: object, ToPoint: object) """
        pass

    def remove_Modified(self, A_1):
        """ remove_Modified(self: Acad3DPolylineClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def Rotate(self, BasePoint, RotationAngle):
        """ Rotate(self: Acad3DPolylineClass, BasePoint: object, RotationAngle: float) """
        pass

    def Rotate3D(self, Point1, Point2, RotationAngle):
        """ Rotate3D(self: Acad3DPolylineClass, Point1: object, Point2: object, RotationAngle: float) """
        pass

    def ScaleEntity(self, BasePoint, ScaleFactor):
        """ ScaleEntity(self: Acad3DPolylineClass, BasePoint: object, ScaleFactor: float) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: Acad3DPolylineClass, XDataType: object, XDataValue: object) """
        pass

    def TransformBy(self, TransformationMatrix):
        """ TransformBy(self: Acad3DPolylineClass, TransformationMatrix: object) """
        pass

    def Update(self):
        """ Update(self: Acad3DPolylineClass) """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: Acad3DPolylineClass) -> object

"""

    Closed = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Closed(self: Acad3DPolylineClass) -> bool

Set: Closed(self: Acad3DPolylineClass) = value
"""

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: Acad3DPolylineClass) -> ACAD_COLOR

Set: color(self: Acad3DPolylineClass) = value
"""

    Coordinates = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Coordinates(self: Acad3DPolylineClass) -> object

Set: Coordinates(self: Acad3DPolylineClass) = value
"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: Acad3DPolylineClass) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: Acad3DPolylineClass) -> object

"""

    EntityName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityName(self: Acad3DPolylineClass) -> str

"""

    EntityTransparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityTransparency(self: Acad3DPolylineClass) -> str

Set: EntityTransparency(self: Acad3DPolylineClass) = value
"""

    EntityType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityType(self: Acad3DPolylineClass) -> int

"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: Acad3DPolylineClass) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: Acad3DPolylineClass) -> bool

"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: Acad3DPolylineClass) -> AcadHyperlinks

"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layer(self: Acad3DPolylineClass) -> str

Set: Layer(self: Acad3DPolylineClass) = value
"""

    Length = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Length(self: Acad3DPolylineClass) -> float

"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: Acad3DPolylineClass) -> str

Set: Linetype(self: Acad3DPolylineClass) = value
"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeScale(self: Acad3DPolylineClass) -> float

Set: LinetypeScale(self: Acad3DPolylineClass) = value
"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: Acad3DPolylineClass) -> ACAD_LWEIGHT

Set: Lineweight(self: Acad3DPolylineClass) = value
"""

    Material = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Material(self: Acad3DPolylineClass) -> str

Set: Material(self: Acad3DPolylineClass) = value
"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: Acad3DPolylineClass) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: Acad3DPolylineClass) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: Acad3DPolylineClass) -> Int64

"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: Acad3DPolylineClass) -> str

Set: PlotStyleName(self: Acad3DPolylineClass) = value
"""

    TrueColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TrueColor(self: Acad3DPolylineClass) -> AcadAcCmColor

Set: TrueColor(self: Acad3DPolylineClass) = value
"""

    Type = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Type(self: Acad3DPolylineClass) -> Ac3DPolylineType

Set: Type(self: Acad3DPolylineClass) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: Acad3DPolylineClass) -> bool

Set: Visible(self: Acad3DPolylineClass) = value
"""


    Modified = None


class IAcad3DSolid(IAcadEntity, IAcadObject):
    # no doc
    def ArrayPolar(self, NumberOfObjects, AngleToFill, CenterPoint):
        """ ArrayPolar(self: IAcad3DSolid, NumberOfObjects: int, AngleToFill: float, CenterPoint: object) -> object """
        pass

    def ArrayRectangular(self, NumberOfRows, NumberOfColumns, NumberOfLevels, DistBetweenRows, DistBetweenCols, DistBetweenLevels):
        """ ArrayRectangular(self: IAcad3DSolid, NumberOfRows: int, NumberOfColumns: int, NumberOfLevels: int, DistBetweenRows: float, DistBetweenCols: float, DistBetweenLevels: float) -> object """
        pass

    def Boolean(self, Operation, SolidObject):
        """ Boolean(self: IAcad3DSolid, Operation: AcBooleanType, SolidObject: Acad3DSolid) """
        pass

    def CheckInterference(self, Object, CreateInterferenceSolid, SolidsInterfere):
        """ CheckInterference(self: IAcad3DSolid, Object: Acad3DSolid, CreateInterferenceSolid: bool) -> (Acad3DSolid, bool) """
        pass

    def Copy(self):
        """ Copy(self: IAcad3DSolid) -> object """
        pass

    def Delete(self):
        """ Delete(self: IAcad3DSolid) """
        pass

    def Erase(self):
        """ Erase(self: IAcad3DSolid) """
        pass

    def GetBoundingBox(self, MinPoint, MaxPoint):
        """ GetBoundingBox(self: IAcad3DSolid) -> (object, object) """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: IAcad3DSolid) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: IAcad3DSolid, AppName: str) -> (object, object) """
        pass

    def Highlight(self, HighlightFlag):
        """ Highlight(self: IAcad3DSolid, HighlightFlag: bool) """
        pass

    def IntersectWith(self, IntersectObject, option):
        """ IntersectWith(self: IAcad3DSolid, IntersectObject: object, option: AcExtendOption) -> object """
        pass

    def Mirror(self, Point1, Point2):
        """ Mirror(self: IAcad3DSolid, Point1: object, Point2: object) -> object """
        pass

    def Mirror3D(self, Point1, Point2, point3):
        """ Mirror3D(self: IAcad3DSolid, Point1: object, Point2: object, point3: object) -> object """
        pass

    def Move(self, FromPoint, ToPoint):
        """ Move(self: IAcad3DSolid, FromPoint: object, ToPoint: object) """
        pass

    def Rotate(self, BasePoint, RotationAngle):
        """ Rotate(self: IAcad3DSolid, BasePoint: object, RotationAngle: float) """
        pass

    def Rotate3D(self, Point1, Point2, RotationAngle):
        """ Rotate3D(self: IAcad3DSolid, Point1: object, Point2: object, RotationAngle: float) """
        pass

    def ScaleEntity(self, BasePoint, ScaleFactor):
        """ ScaleEntity(self: IAcad3DSolid, BasePoint: object, ScaleFactor: float) """
        pass

    def SectionSolid(self, Point1, Point2, point3):
        """ SectionSolid(self: IAcad3DSolid, Point1: object, Point2: object, point3: object) -> AcadRegion """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: IAcad3DSolid, XDataType: object, XDataValue: object) """
        pass

    def SliceSolid(self, Point1, Point2, point3, Negative):
        """ SliceSolid(self: IAcad3DSolid, Point1: object, Point2: object, point3: object, Negative: bool) -> Acad3DSolid """
        pass

    def TransformBy(self, TransformationMatrix):
        """ TransformBy(self: IAcad3DSolid, TransformationMatrix: object) """
        pass

    def Update(self):
        """ Update(self: IAcad3DSolid) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IAcad3DSolid) -> object

"""

    Centroid = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Centroid(self: IAcad3DSolid) -> object

"""

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: IAcad3DSolid) -> ACAD_COLOR

Set: color(self: IAcad3DSolid) = value
"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: IAcad3DSolid) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: IAcad3DSolid) -> object

"""

    EntityName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityName(self: IAcad3DSolid) -> str

"""

    EntityTransparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityTransparency(self: IAcad3DSolid) -> str

Set: EntityTransparency(self: IAcad3DSolid) = value
"""

    EntityType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityType(self: IAcad3DSolid) -> int

"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: IAcad3DSolid) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: IAcad3DSolid) -> bool

"""

    History = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: History(self: IAcad3DSolid) -> bool

Set: History(self: IAcad3DSolid) = value
"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: IAcad3DSolid) -> AcadHyperlinks

"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layer(self: IAcad3DSolid) -> str

Set: Layer(self: IAcad3DSolid) = value
"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: IAcad3DSolid) -> str

Set: Linetype(self: IAcad3DSolid) = value
"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeScale(self: IAcad3DSolid) -> float

Set: LinetypeScale(self: IAcad3DSolid) = value
"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: IAcad3DSolid) -> ACAD_LWEIGHT

Set: Lineweight(self: IAcad3DSolid) = value
"""

    Material = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Material(self: IAcad3DSolid) -> str

Set: Material(self: IAcad3DSolid) = value
"""

    MomentOfInertia = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MomentOfInertia(self: IAcad3DSolid) -> object

"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: IAcad3DSolid) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: IAcad3DSolid) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: IAcad3DSolid) -> Int64

"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: IAcad3DSolid) -> str

Set: PlotStyleName(self: IAcad3DSolid) = value
"""

    Position = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Position(self: IAcad3DSolid) -> object

Set: Position(self: IAcad3DSolid) = value
"""

    PrincipalDirections = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PrincipalDirections(self: IAcad3DSolid) -> object

"""

    PrincipalMoments = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PrincipalMoments(self: IAcad3DSolid) -> object

"""

    ProductOfInertia = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ProductOfInertia(self: IAcad3DSolid) -> object

"""

    RadiiOfGyration = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RadiiOfGyration(self: IAcad3DSolid) -> object

"""

    ShowHistory = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowHistory(self: IAcad3DSolid) -> bool

Set: ShowHistory(self: IAcad3DSolid) = value
"""

    SolidType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SolidType(self: IAcad3DSolid) -> str

"""

    TrueColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TrueColor(self: IAcad3DSolid) -> AcadAcCmColor

Set: TrueColor(self: IAcad3DSolid) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: IAcad3DSolid) -> bool

Set: Visible(self: IAcad3DSolid) = value
"""

    Volume = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Volume(self: IAcad3DSolid) -> float

"""



class Acad3DSolid(IAcad3DSolid, IAcadEntity, IAcadObject, IAcadObjectEvents_Event):
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class Acad3DSolidClass(__ComObject):
    # no doc
    def add_Modified(self, A_1):
        """ add_Modified(self: Acad3DSolidClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def ArrayPolar(self, NumberOfObjects, AngleToFill, CenterPoint):
        """ ArrayPolar(self: Acad3DSolidClass, NumberOfObjects: int, AngleToFill: float, CenterPoint: object) -> object """
        pass

    def ArrayRectangular(self, NumberOfRows, NumberOfColumns, NumberOfLevels, DistBetweenRows, DistBetweenCols, DistBetweenLevels):
        """ ArrayRectangular(self: Acad3DSolidClass, NumberOfRows: int, NumberOfColumns: int, NumberOfLevels: int, DistBetweenRows: float, DistBetweenCols: float, DistBetweenLevels: float) -> object """
        pass

    def Boolean(self, Operation, SolidObject):
        """ Boolean(self: Acad3DSolidClass, Operation: AcBooleanType, SolidObject: Acad3DSolid) """
        pass

    def CheckInterference(self, Object, CreateInterferenceSolid, SolidsInterfere):
        """ CheckInterference(self: Acad3DSolidClass, Object: Acad3DSolid, CreateInterferenceSolid: bool) -> (Acad3DSolid, bool) """
        pass

    def Copy(self):
        """ Copy(self: Acad3DSolidClass) -> object """
        pass

    def Delete(self):
        """ Delete(self: Acad3DSolidClass) """
        pass

    def Erase(self):
        """ Erase(self: Acad3DSolidClass) """
        pass

    def GetBoundingBox(self, MinPoint, MaxPoint):
        """ GetBoundingBox(self: Acad3DSolidClass) -> (object, object) """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: Acad3DSolidClass) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: Acad3DSolidClass, AppName: str) -> (object, object) """
        pass

    def Highlight(self, HighlightFlag):
        """ Highlight(self: Acad3DSolidClass, HighlightFlag: bool) """
        pass

    def IntersectWith(self, IntersectObject, option):
        """ IntersectWith(self: Acad3DSolidClass, IntersectObject: object, option: AcExtendOption) -> object """
        pass

    def Mirror(self, Point1, Point2):
        """ Mirror(self: Acad3DSolidClass, Point1: object, Point2: object) -> object """
        pass

    def Mirror3D(self, Point1, Point2, point3):
        """ Mirror3D(self: Acad3DSolidClass, Point1: object, Point2: object, point3: object) -> object """
        pass

    def Move(self, FromPoint, ToPoint):
        """ Move(self: Acad3DSolidClass, FromPoint: object, ToPoint: object) """
        pass

    def remove_Modified(self, A_1):
        """ remove_Modified(self: Acad3DSolidClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def Rotate(self, BasePoint, RotationAngle):
        """ Rotate(self: Acad3DSolidClass, BasePoint: object, RotationAngle: float) """
        pass

    def Rotate3D(self, Point1, Point2, RotationAngle):
        """ Rotate3D(self: Acad3DSolidClass, Point1: object, Point2: object, RotationAngle: float) """
        pass

    def ScaleEntity(self, BasePoint, ScaleFactor):
        """ ScaleEntity(self: Acad3DSolidClass, BasePoint: object, ScaleFactor: float) """
        pass

    def SectionSolid(self, Point1, Point2, point3):
        """ SectionSolid(self: Acad3DSolidClass, Point1: object, Point2: object, point3: object) -> AcadRegion """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: Acad3DSolidClass, XDataType: object, XDataValue: object) """
        pass

    def SliceSolid(self, Point1, Point2, point3, Negative):
        """ SliceSolid(self: Acad3DSolidClass, Point1: object, Point2: object, point3: object, Negative: bool) -> Acad3DSolid """
        pass

    def TransformBy(self, TransformationMatrix):
        """ TransformBy(self: Acad3DSolidClass, TransformationMatrix: object) """
        pass

    def Update(self):
        """ Update(self: Acad3DSolidClass) """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: Acad3DSolidClass) -> object

"""

    Centroid = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Centroid(self: Acad3DSolidClass) -> object

"""

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: Acad3DSolidClass) -> ACAD_COLOR

Set: color(self: Acad3DSolidClass) = value
"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: Acad3DSolidClass) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: Acad3DSolidClass) -> object

"""

    EntityName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityName(self: Acad3DSolidClass) -> str

"""

    EntityTransparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityTransparency(self: Acad3DSolidClass) -> str

Set: EntityTransparency(self: Acad3DSolidClass) = value
"""

    EntityType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityType(self: Acad3DSolidClass) -> int

"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: Acad3DSolidClass) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: Acad3DSolidClass) -> bool

"""

    History = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: History(self: Acad3DSolidClass) -> bool

Set: History(self: Acad3DSolidClass) = value
"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: Acad3DSolidClass) -> AcadHyperlinks

"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layer(self: Acad3DSolidClass) -> str

Set: Layer(self: Acad3DSolidClass) = value
"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: Acad3DSolidClass) -> str

Set: Linetype(self: Acad3DSolidClass) = value
"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeScale(self: Acad3DSolidClass) -> float

Set: LinetypeScale(self: Acad3DSolidClass) = value
"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: Acad3DSolidClass) -> ACAD_LWEIGHT

Set: Lineweight(self: Acad3DSolidClass) = value
"""

    Material = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Material(self: Acad3DSolidClass) -> str

Set: Material(self: Acad3DSolidClass) = value
"""

    MomentOfInertia = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MomentOfInertia(self: Acad3DSolidClass) -> object

"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: Acad3DSolidClass) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: Acad3DSolidClass) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: Acad3DSolidClass) -> Int64

"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: Acad3DSolidClass) -> str

Set: PlotStyleName(self: Acad3DSolidClass) = value
"""

    Position = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Position(self: Acad3DSolidClass) -> object

Set: Position(self: Acad3DSolidClass) = value
"""

    PrincipalDirections = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PrincipalDirections(self: Acad3DSolidClass) -> object

"""

    PrincipalMoments = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PrincipalMoments(self: Acad3DSolidClass) -> object

"""

    ProductOfInertia = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ProductOfInertia(self: Acad3DSolidClass) -> object

"""

    RadiiOfGyration = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RadiiOfGyration(self: Acad3DSolidClass) -> object

"""

    ShowHistory = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowHistory(self: Acad3DSolidClass) -> bool

Set: ShowHistory(self: Acad3DSolidClass) = value
"""

    SolidType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SolidType(self: Acad3DSolidClass) -> str

"""

    TrueColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TrueColor(self: Acad3DSolidClass) -> AcadAcCmColor

Set: TrueColor(self: Acad3DSolidClass) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: Acad3DSolidClass) -> bool

Set: Visible(self: Acad3DSolidClass) = value
"""

    Volume = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Volume(self: Acad3DSolidClass) -> float

"""


    Modified = None


class IAcadAcCmColor:
    # no doc
    def Delete(self):
        """ Delete(self: IAcadAcCmColor) """
        pass

    def SetColorBookColor(self, BookName, ColorName):
        """ SetColorBookColor(self: IAcadAcCmColor, BookName: str, ColorName: str) """
        pass

    def SetNames(self, ColorName, BookName):
        """ SetNames(self: IAcadAcCmColor, ColorName: str, BookName: str) """
        pass

    def SetRGB(self, Red, Green, Blue):
        """ SetRGB(self: IAcadAcCmColor, Red: int, Green: int, Blue: int) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Blue = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Blue(self: IAcadAcCmColor) -> int

"""

    BookName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BookName(self: IAcadAcCmColor) -> str

"""

    ColorIndex = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ColorIndex(self: IAcadAcCmColor) -> AcColor

Set: ColorIndex(self: IAcadAcCmColor) = value
"""

    ColorMethod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ColorMethod(self: IAcadAcCmColor) -> AcColorMethod

Set: ColorMethod(self: IAcadAcCmColor) = value
"""

    ColorName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ColorName(self: IAcadAcCmColor) -> str

"""

    EntityColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityColor(self: IAcadAcCmColor) -> int

Set: EntityColor(self: IAcadAcCmColor) = value
"""

    Green = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Green(self: IAcadAcCmColor) -> int

"""

    Red = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Red(self: IAcadAcCmColor) -> int

"""



class AcadAcCmColor(IAcadAcCmColor):
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class AcadAcCmColorClass(__ComObject):
    """ AcadAcCmColorClass() """
    def Delete(self):
        """ Delete(self: AcadAcCmColorClass) """
        pass

    def SetColorBookColor(self, BookName, ColorName):
        """ SetColorBookColor(self: AcadAcCmColorClass, BookName: str, ColorName: str) """
        pass

    def SetNames(self, ColorName, BookName):
        """ SetNames(self: AcadAcCmColorClass, ColorName: str, BookName: str) """
        pass

    def SetRGB(self, Red, Green, Blue):
        """ SetRGB(self: AcadAcCmColorClass, Red: int, Green: int, Blue: int) """
        pass

    Blue = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Blue(self: AcadAcCmColorClass) -> int

"""

    BookName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BookName(self: AcadAcCmColorClass) -> str

"""

    ColorIndex = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ColorIndex(self: AcadAcCmColorClass) -> AcColor

Set: ColorIndex(self: AcadAcCmColorClass) = value
"""

    ColorMethod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ColorMethod(self: AcadAcCmColorClass) -> AcColorMethod

Set: ColorMethod(self: AcadAcCmColorClass) = value
"""

    ColorName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ColorName(self: AcadAcCmColorClass) -> str

"""

    EntityColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityColor(self: AcadAcCmColorClass) -> int

Set: EntityColor(self: AcadAcCmColorClass) = value
"""

    Green = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Green(self: AcadAcCmColorClass) -> int

"""

    Red = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Red(self: AcadAcCmColorClass) -> int

"""



class IAcadArc(IAcadEntity, IAcadObject):
    # no doc
    def ArrayPolar(self, NumberOfObjects, AngleToFill, CenterPoint):
        """ ArrayPolar(self: IAcadArc, NumberOfObjects: int, AngleToFill: float, CenterPoint: object) -> object """
        pass

    def ArrayRectangular(self, NumberOfRows, NumberOfColumns, NumberOfLevels, DistBetweenRows, DistBetweenCols, DistBetweenLevels):
        """ ArrayRectangular(self: IAcadArc, NumberOfRows: int, NumberOfColumns: int, NumberOfLevels: int, DistBetweenRows: float, DistBetweenCols: float, DistBetweenLevels: float) -> object """
        pass

    def Copy(self):
        """ Copy(self: IAcadArc) -> object """
        pass

    def Delete(self):
        """ Delete(self: IAcadArc) """
        pass

    def Erase(self):
        """ Erase(self: IAcadArc) """
        pass

    def GetBoundingBox(self, MinPoint, MaxPoint):
        """ GetBoundingBox(self: IAcadArc) -> (object, object) """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: IAcadArc) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: IAcadArc, AppName: str) -> (object, object) """
        pass

    def Highlight(self, HighlightFlag):
        """ Highlight(self: IAcadArc, HighlightFlag: bool) """
        pass

    def IntersectWith(self, IntersectObject, option):
        """ IntersectWith(self: IAcadArc, IntersectObject: object, option: AcExtendOption) -> object """
        pass

    def Mirror(self, Point1, Point2):
        """ Mirror(self: IAcadArc, Point1: object, Point2: object) -> object """
        pass

    def Mirror3D(self, Point1, Point2, point3):
        """ Mirror3D(self: IAcadArc, Point1: object, Point2: object, point3: object) -> object """
        pass

    def Move(self, FromPoint, ToPoint):
        """ Move(self: IAcadArc, FromPoint: object, ToPoint: object) """
        pass

    def Offset(self, Distance):
        """ Offset(self: IAcadArc, Distance: float) -> object """
        pass

    def Rotate(self, BasePoint, RotationAngle):
        """ Rotate(self: IAcadArc, BasePoint: object, RotationAngle: float) """
        pass

    def Rotate3D(self, Point1, Point2, RotationAngle):
        """ Rotate3D(self: IAcadArc, Point1: object, Point2: object, RotationAngle: float) """
        pass

    def ScaleEntity(self, BasePoint, ScaleFactor):
        """ ScaleEntity(self: IAcadArc, BasePoint: object, ScaleFactor: float) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: IAcadArc, XDataType: object, XDataValue: object) """
        pass

    def TransformBy(self, TransformationMatrix):
        """ TransformBy(self: IAcadArc, TransformationMatrix: object) """
        pass

    def Update(self):
        """ Update(self: IAcadArc) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IAcadArc) -> object

"""

    ArcLength = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ArcLength(self: IAcadArc) -> float

"""

    Area = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Area(self: IAcadArc) -> float

"""

    Center = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Center(self: IAcadArc) -> object

Set: Center(self: IAcadArc) = value
"""

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: IAcadArc) -> ACAD_COLOR

Set: color(self: IAcadArc) = value
"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: IAcadArc) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: IAcadArc) -> object

"""

    EndAngle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EndAngle(self: IAcadArc) -> float

Set: EndAngle(self: IAcadArc) = value
"""

    EndPoint = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EndPoint(self: IAcadArc) -> object

"""

    EntityName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityName(self: IAcadArc) -> str

"""

    EntityTransparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityTransparency(self: IAcadArc) -> str

Set: EntityTransparency(self: IAcadArc) = value
"""

    EntityType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityType(self: IAcadArc) -> int

"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: IAcadArc) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: IAcadArc) -> bool

"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: IAcadArc) -> AcadHyperlinks

"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layer(self: IAcadArc) -> str

Set: Layer(self: IAcadArc) = value
"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: IAcadArc) -> str

Set: Linetype(self: IAcadArc) = value
"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeScale(self: IAcadArc) -> float

Set: LinetypeScale(self: IAcadArc) = value
"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: IAcadArc) -> ACAD_LWEIGHT

Set: Lineweight(self: IAcadArc) = value
"""

    Material = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Material(self: IAcadArc) -> str

Set: Material(self: IAcadArc) = value
"""

    Normal = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Normal(self: IAcadArc) -> object

Set: Normal(self: IAcadArc) = value
"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: IAcadArc) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: IAcadArc) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: IAcadArc) -> Int64

"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: IAcadArc) -> str

Set: PlotStyleName(self: IAcadArc) = value
"""

    Radius = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Radius(self: IAcadArc) -> float

Set: Radius(self: IAcadArc) = value
"""

    StartAngle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: StartAngle(self: IAcadArc) -> float

Set: StartAngle(self: IAcadArc) = value
"""

    StartPoint = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: StartPoint(self: IAcadArc) -> object

"""

    Thickness = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Thickness(self: IAcadArc) -> float

Set: Thickness(self: IAcadArc) = value
"""

    TotalAngle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TotalAngle(self: IAcadArc) -> float

"""

    TrueColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TrueColor(self: IAcadArc) -> AcadAcCmColor

Set: TrueColor(self: IAcadArc) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: IAcadArc) -> bool

Set: Visible(self: IAcadArc) = value
"""



class AcadArc(IAcadArc, IAcadEntity, IAcadObject, IAcadObjectEvents_Event):
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class AcadArcClass(__ComObject):
    # no doc
    def add_Modified(self, A_1):
        """ add_Modified(self: AcadArcClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def ArrayPolar(self, NumberOfObjects, AngleToFill, CenterPoint):
        """ ArrayPolar(self: AcadArcClass, NumberOfObjects: int, AngleToFill: float, CenterPoint: object) -> object """
        pass

    def ArrayRectangular(self, NumberOfRows, NumberOfColumns, NumberOfLevels, DistBetweenRows, DistBetweenCols, DistBetweenLevels):
        """ ArrayRectangular(self: AcadArcClass, NumberOfRows: int, NumberOfColumns: int, NumberOfLevels: int, DistBetweenRows: float, DistBetweenCols: float, DistBetweenLevels: float) -> object """
        pass

    def Copy(self):
        """ Copy(self: AcadArcClass) -> object """
        pass

    def Delete(self):
        """ Delete(self: AcadArcClass) """
        pass

    def Erase(self):
        """ Erase(self: AcadArcClass) """
        pass

    def GetBoundingBox(self, MinPoint, MaxPoint):
        """ GetBoundingBox(self: AcadArcClass) -> (object, object) """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: AcadArcClass) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: AcadArcClass, AppName: str) -> (object, object) """
        pass

    def Highlight(self, HighlightFlag):
        """ Highlight(self: AcadArcClass, HighlightFlag: bool) """
        pass

    def IntersectWith(self, IntersectObject, option):
        """ IntersectWith(self: AcadArcClass, IntersectObject: object, option: AcExtendOption) -> object """
        pass

    def Mirror(self, Point1, Point2):
        """ Mirror(self: AcadArcClass, Point1: object, Point2: object) -> object """
        pass

    def Mirror3D(self, Point1, Point2, point3):
        """ Mirror3D(self: AcadArcClass, Point1: object, Point2: object, point3: object) -> object """
        pass

    def Move(self, FromPoint, ToPoint):
        """ Move(self: AcadArcClass, FromPoint: object, ToPoint: object) """
        pass

    def Offset(self, Distance):
        """ Offset(self: AcadArcClass, Distance: float) -> object """
        pass

    def remove_Modified(self, A_1):
        """ remove_Modified(self: AcadArcClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def Rotate(self, BasePoint, RotationAngle):
        """ Rotate(self: AcadArcClass, BasePoint: object, RotationAngle: float) """
        pass

    def Rotate3D(self, Point1, Point2, RotationAngle):
        """ Rotate3D(self: AcadArcClass, Point1: object, Point2: object, RotationAngle: float) """
        pass

    def ScaleEntity(self, BasePoint, ScaleFactor):
        """ ScaleEntity(self: AcadArcClass, BasePoint: object, ScaleFactor: float) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: AcadArcClass, XDataType: object, XDataValue: object) """
        pass

    def TransformBy(self, TransformationMatrix):
        """ TransformBy(self: AcadArcClass, TransformationMatrix: object) """
        pass

    def Update(self):
        """ Update(self: AcadArcClass) """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: AcadArcClass) -> object

"""

    ArcLength = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ArcLength(self: AcadArcClass) -> float

"""

    Area = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Area(self: AcadArcClass) -> float

"""

    Center = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Center(self: AcadArcClass) -> object

Set: Center(self: AcadArcClass) = value
"""

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: AcadArcClass) -> ACAD_COLOR

Set: color(self: AcadArcClass) = value
"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: AcadArcClass) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: AcadArcClass) -> object

"""

    EndAngle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EndAngle(self: AcadArcClass) -> float

Set: EndAngle(self: AcadArcClass) = value
"""

    EndPoint = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EndPoint(self: AcadArcClass) -> object

"""

    EntityName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityName(self: AcadArcClass) -> str

"""

    EntityTransparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityTransparency(self: AcadArcClass) -> str

Set: EntityTransparency(self: AcadArcClass) = value
"""

    EntityType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityType(self: AcadArcClass) -> int

"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: AcadArcClass) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: AcadArcClass) -> bool

"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: AcadArcClass) -> AcadHyperlinks

"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layer(self: AcadArcClass) -> str

Set: Layer(self: AcadArcClass) = value
"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: AcadArcClass) -> str

Set: Linetype(self: AcadArcClass) = value
"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeScale(self: AcadArcClass) -> float

Set: LinetypeScale(self: AcadArcClass) = value
"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: AcadArcClass) -> ACAD_LWEIGHT

Set: Lineweight(self: AcadArcClass) = value
"""

    Material = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Material(self: AcadArcClass) -> str

Set: Material(self: AcadArcClass) = value
"""

    Normal = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Normal(self: AcadArcClass) -> object

Set: Normal(self: AcadArcClass) = value
"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: AcadArcClass) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: AcadArcClass) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: AcadArcClass) -> Int64

"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: AcadArcClass) -> str

Set: PlotStyleName(self: AcadArcClass) = value
"""

    Radius = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Radius(self: AcadArcClass) -> float

Set: Radius(self: AcadArcClass) = value
"""

    StartAngle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: StartAngle(self: AcadArcClass) -> float

Set: StartAngle(self: AcadArcClass) = value
"""

    StartPoint = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: StartPoint(self: AcadArcClass) -> object

"""

    Thickness = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Thickness(self: AcadArcClass) -> float

Set: Thickness(self: AcadArcClass) = value
"""

    TotalAngle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TotalAngle(self: AcadArcClass) -> float

"""

    TrueColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TrueColor(self: AcadArcClass) -> AcadAcCmColor

Set: TrueColor(self: AcadArcClass) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: AcadArcClass) -> bool

Set: Visible(self: AcadArcClass) = value
"""


    Modified = None


class IAcadAttribute(IAcadEntity, IAcadObject):
    # no doc
    def ArrayPolar(self, NumberOfObjects, AngleToFill, CenterPoint):
        """ ArrayPolar(self: IAcadAttribute, NumberOfObjects: int, AngleToFill: float, CenterPoint: object) -> object """
        pass

    def ArrayRectangular(self, NumberOfRows, NumberOfColumns, NumberOfLevels, DistBetweenRows, DistBetweenCols, DistBetweenLevels):
        """ ArrayRectangular(self: IAcadAttribute, NumberOfRows: int, NumberOfColumns: int, NumberOfLevels: int, DistBetweenRows: float, DistBetweenCols: float, DistBetweenLevels: float) -> object """
        pass

    def Copy(self):
        """ Copy(self: IAcadAttribute) -> object """
        pass

    def Delete(self):
        """ Delete(self: IAcadAttribute) """
        pass

    def Erase(self):
        """ Erase(self: IAcadAttribute) """
        pass

    def GetBoundingBox(self, MinPoint, MaxPoint):
        """ GetBoundingBox(self: IAcadAttribute) -> (object, object) """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: IAcadAttribute) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: IAcadAttribute, AppName: str) -> (object, object) """
        pass

    def Highlight(self, HighlightFlag):
        """ Highlight(self: IAcadAttribute, HighlightFlag: bool) """
        pass

    def IntersectWith(self, IntersectObject, option):
        """ IntersectWith(self: IAcadAttribute, IntersectObject: object, option: AcExtendOption) -> object """
        pass

    def Mirror(self, Point1, Point2):
        """ Mirror(self: IAcadAttribute, Point1: object, Point2: object) -> object """
        pass

    def Mirror3D(self, Point1, Point2, point3):
        """ Mirror3D(self: IAcadAttribute, Point1: object, Point2: object, point3: object) -> object """
        pass

    def Move(self, FromPoint, ToPoint):
        """ Move(self: IAcadAttribute, FromPoint: object, ToPoint: object) """
        pass

    def Rotate(self, BasePoint, RotationAngle):
        """ Rotate(self: IAcadAttribute, BasePoint: object, RotationAngle: float) """
        pass

    def Rotate3D(self, Point1, Point2, RotationAngle):
        """ Rotate3D(self: IAcadAttribute, Point1: object, Point2: object, RotationAngle: float) """
        pass

    def ScaleEntity(self, BasePoint, ScaleFactor):
        """ ScaleEntity(self: IAcadAttribute, BasePoint: object, ScaleFactor: float) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: IAcadAttribute, XDataType: object, XDataValue: object) """
        pass

    def TransformBy(self, TransformationMatrix):
        """ TransformBy(self: IAcadAttribute, TransformationMatrix: object) """
        pass

    def Update(self):
        """ Update(self: IAcadAttribute) """
        pass

    def UpdateMTextAttribute(self):
        """ UpdateMTextAttribute(self: IAcadAttribute) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Alignment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Alignment(self: IAcadAttribute) -> AcAlignment

Set: Alignment(self: IAcadAttribute) = value
"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IAcadAttribute) -> object

"""

    Backward = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Backward(self: IAcadAttribute) -> bool

Set: Backward(self: IAcadAttribute) = value
"""

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: IAcadAttribute) -> ACAD_COLOR

Set: color(self: IAcadAttribute) = value
"""

    Constant = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Constant(self: IAcadAttribute) -> bool

Set: Constant(self: IAcadAttribute) = value
"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: IAcadAttribute) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: IAcadAttribute) -> object

"""

    EntityName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityName(self: IAcadAttribute) -> str

"""

    EntityTransparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityTransparency(self: IAcadAttribute) -> str

Set: EntityTransparency(self: IAcadAttribute) = value
"""

    EntityType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityType(self: IAcadAttribute) -> int

"""

    FieldLength = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FieldLength(self: IAcadAttribute) -> int

Set: FieldLength(self: IAcadAttribute) = value
"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: IAcadAttribute) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: IAcadAttribute) -> bool

"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: IAcadAttribute) -> float

Set: Height(self: IAcadAttribute) = value
"""

    HorizontalAlignment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HorizontalAlignment(self: IAcadAttribute) -> AcHorizontalAlignment

Set: HorizontalAlignment(self: IAcadAttribute) = value
"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: IAcadAttribute) -> AcadHyperlinks

"""

    InsertionPoint = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: InsertionPoint(self: IAcadAttribute) -> object

Set: InsertionPoint(self: IAcadAttribute) = value
"""

    Invisible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Invisible(self: IAcadAttribute) -> bool

Set: Invisible(self: IAcadAttribute) = value
"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layer(self: IAcadAttribute) -> str

Set: Layer(self: IAcadAttribute) = value
"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: IAcadAttribute) -> str

Set: Linetype(self: IAcadAttribute) = value
"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeScale(self: IAcadAttribute) -> float

Set: LinetypeScale(self: IAcadAttribute) = value
"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: IAcadAttribute) -> ACAD_LWEIGHT

Set: Lineweight(self: IAcadAttribute) = value
"""

    LockPosition = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LockPosition(self: IAcadAttribute) -> bool

Set: LockPosition(self: IAcadAttribute) = value
"""

    Material = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Material(self: IAcadAttribute) -> str

Set: Material(self: IAcadAttribute) = value
"""

    Mode = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Mode(self: IAcadAttribute) -> int

Set: Mode(self: IAcadAttribute) = value
"""

    MTextAttribute = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MTextAttribute(self: IAcadAttribute) -> bool

Set: MTextAttribute(self: IAcadAttribute) = value
"""

    MTextAttributeContent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MTextAttributeContent(self: IAcadAttribute) -> str

Set: MTextAttributeContent(self: IAcadAttribute) = value
"""

    MTextBoundaryWidth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MTextBoundaryWidth(self: IAcadAttribute) -> float

Set: MTextBoundaryWidth(self: IAcadAttribute) = value
"""

    MTextDrawingDirection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MTextDrawingDirection(self: IAcadAttribute) -> AcDrawingDirection

Set: MTextDrawingDirection(self: IAcadAttribute) = value
"""

    Normal = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Normal(self: IAcadAttribute) -> object

Set: Normal(self: IAcadAttribute) = value
"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: IAcadAttribute) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: IAcadAttribute) -> str

"""

    ObliqueAngle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObliqueAngle(self: IAcadAttribute) -> float

Set: ObliqueAngle(self: IAcadAttribute) = value
"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: IAcadAttribute) -> Int64

"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: IAcadAttribute) -> str

Set: PlotStyleName(self: IAcadAttribute) = value
"""

    Preset = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Preset(self: IAcadAttribute) -> bool

Set: Preset(self: IAcadAttribute) = value
"""

    PromptString = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PromptString(self: IAcadAttribute) -> str

Set: PromptString(self: IAcadAttribute) = value
"""

    Rotation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Rotation(self: IAcadAttribute) -> float

Set: Rotation(self: IAcadAttribute) = value
"""

    ScaleFactor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ScaleFactor(self: IAcadAttribute) -> float

Set: ScaleFactor(self: IAcadAttribute) = value
"""

    StyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: StyleName(self: IAcadAttribute) -> str

Set: StyleName(self: IAcadAttribute) = value
"""

    TagString = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TagString(self: IAcadAttribute) -> str

Set: TagString(self: IAcadAttribute) = value
"""

    TextAlignmentPoint = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextAlignmentPoint(self: IAcadAttribute) -> object

Set: TextAlignmentPoint(self: IAcadAttribute) = value
"""

    TextGenerationFlag = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextGenerationFlag(self: IAcadAttribute) -> int

Set: TextGenerationFlag(self: IAcadAttribute) = value
"""

    TextString = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextString(self: IAcadAttribute) -> str

Set: TextString(self: IAcadAttribute) = value
"""

    Thickness = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Thickness(self: IAcadAttribute) -> float

Set: Thickness(self: IAcadAttribute) = value
"""

    TrueColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TrueColor(self: IAcadAttribute) -> AcadAcCmColor

Set: TrueColor(self: IAcadAttribute) = value
"""

    UpsideDown = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: UpsideDown(self: IAcadAttribute) -> bool

Set: UpsideDown(self: IAcadAttribute) = value
"""

    Verify = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Verify(self: IAcadAttribute) -> bool

Set: Verify(self: IAcadAttribute) = value
"""

    VerticalAlignment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VerticalAlignment(self: IAcadAttribute) -> AcVerticalAlignment

Set: VerticalAlignment(self: IAcadAttribute) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: IAcadAttribute) -> bool

Set: Visible(self: IAcadAttribute) = value
"""



class AcadAttribute(IAcadAttribute, IAcadEntity, IAcadObject, IAcadObjectEvents_Event):
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class AcadAttributeClass(__ComObject):
    # no doc
    def add_Modified(self, A_1):
        """ add_Modified(self: AcadAttributeClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def ArrayPolar(self, NumberOfObjects, AngleToFill, CenterPoint):
        """ ArrayPolar(self: AcadAttributeClass, NumberOfObjects: int, AngleToFill: float, CenterPoint: object) -> object """
        pass

    def ArrayRectangular(self, NumberOfRows, NumberOfColumns, NumberOfLevels, DistBetweenRows, DistBetweenCols, DistBetweenLevels):
        """ ArrayRectangular(self: AcadAttributeClass, NumberOfRows: int, NumberOfColumns: int, NumberOfLevels: int, DistBetweenRows: float, DistBetweenCols: float, DistBetweenLevels: float) -> object """
        pass

    def Copy(self):
        """ Copy(self: AcadAttributeClass) -> object """
        pass

    def Delete(self):
        """ Delete(self: AcadAttributeClass) """
        pass

    def Erase(self):
        """ Erase(self: AcadAttributeClass) """
        pass

    def GetBoundingBox(self, MinPoint, MaxPoint):
        """ GetBoundingBox(self: AcadAttributeClass) -> (object, object) """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: AcadAttributeClass) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: AcadAttributeClass, AppName: str) -> (object, object) """
        pass

    def Highlight(self, HighlightFlag):
        """ Highlight(self: AcadAttributeClass, HighlightFlag: bool) """
        pass

    def IntersectWith(self, IntersectObject, option):
        """ IntersectWith(self: AcadAttributeClass, IntersectObject: object, option: AcExtendOption) -> object """
        pass

    def Mirror(self, Point1, Point2):
        """ Mirror(self: AcadAttributeClass, Point1: object, Point2: object) -> object """
        pass

    def Mirror3D(self, Point1, Point2, point3):
        """ Mirror3D(self: AcadAttributeClass, Point1: object, Point2: object, point3: object) -> object """
        pass

    def Move(self, FromPoint, ToPoint):
        """ Move(self: AcadAttributeClass, FromPoint: object, ToPoint: object) """
        pass

    def remove_Modified(self, A_1):
        """ remove_Modified(self: AcadAttributeClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def Rotate(self, BasePoint, RotationAngle):
        """ Rotate(self: AcadAttributeClass, BasePoint: object, RotationAngle: float) """
        pass

    def Rotate3D(self, Point1, Point2, RotationAngle):
        """ Rotate3D(self: AcadAttributeClass, Point1: object, Point2: object, RotationAngle: float) """
        pass

    def ScaleEntity(self, BasePoint, ScaleFactor):
        """ ScaleEntity(self: AcadAttributeClass, BasePoint: object, ScaleFactor: float) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: AcadAttributeClass, XDataType: object, XDataValue: object) """
        pass

    def TransformBy(self, TransformationMatrix):
        """ TransformBy(self: AcadAttributeClass, TransformationMatrix: object) """
        pass

    def Update(self):
        """ Update(self: AcadAttributeClass) """
        pass

    def UpdateMTextAttribute(self):
        """ UpdateMTextAttribute(self: AcadAttributeClass) """
        pass

    Alignment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Alignment(self: AcadAttributeClass) -> AcAlignment

Set: Alignment(self: AcadAttributeClass) = value
"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: AcadAttributeClass) -> object

"""

    Backward = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Backward(self: AcadAttributeClass) -> bool

Set: Backward(self: AcadAttributeClass) = value
"""

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: AcadAttributeClass) -> ACAD_COLOR

Set: color(self: AcadAttributeClass) = value
"""

    Constant = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Constant(self: AcadAttributeClass) -> bool

Set: Constant(self: AcadAttributeClass) = value
"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: AcadAttributeClass) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: AcadAttributeClass) -> object

"""

    EntityName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityName(self: AcadAttributeClass) -> str

"""

    EntityTransparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityTransparency(self: AcadAttributeClass) -> str

Set: EntityTransparency(self: AcadAttributeClass) = value
"""

    EntityType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityType(self: AcadAttributeClass) -> int

"""

    FieldLength = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FieldLength(self: AcadAttributeClass) -> int

Set: FieldLength(self: AcadAttributeClass) = value
"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: AcadAttributeClass) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: AcadAttributeClass) -> bool

"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: AcadAttributeClass) -> float

Set: Height(self: AcadAttributeClass) = value
"""

    HorizontalAlignment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HorizontalAlignment(self: AcadAttributeClass) -> AcHorizontalAlignment

Set: HorizontalAlignment(self: AcadAttributeClass) = value
"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: AcadAttributeClass) -> AcadHyperlinks

"""

    InsertionPoint = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: InsertionPoint(self: AcadAttributeClass) -> object

Set: InsertionPoint(self: AcadAttributeClass) = value
"""

    Invisible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Invisible(self: AcadAttributeClass) -> bool

Set: Invisible(self: AcadAttributeClass) = value
"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layer(self: AcadAttributeClass) -> str

Set: Layer(self: AcadAttributeClass) = value
"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: AcadAttributeClass) -> str

Set: Linetype(self: AcadAttributeClass) = value
"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeScale(self: AcadAttributeClass) -> float

Set: LinetypeScale(self: AcadAttributeClass) = value
"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: AcadAttributeClass) -> ACAD_LWEIGHT

Set: Lineweight(self: AcadAttributeClass) = value
"""

    LockPosition = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LockPosition(self: AcadAttributeClass) -> bool

Set: LockPosition(self: AcadAttributeClass) = value
"""

    Material = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Material(self: AcadAttributeClass) -> str

Set: Material(self: AcadAttributeClass) = value
"""

    Mode = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Mode(self: AcadAttributeClass) -> int

Set: Mode(self: AcadAttributeClass) = value
"""

    MTextAttribute = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MTextAttribute(self: AcadAttributeClass) -> bool

Set: MTextAttribute(self: AcadAttributeClass) = value
"""

    MTextAttributeContent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MTextAttributeContent(self: AcadAttributeClass) -> str

Set: MTextAttributeContent(self: AcadAttributeClass) = value
"""

    MTextBoundaryWidth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MTextBoundaryWidth(self: AcadAttributeClass) -> float

Set: MTextBoundaryWidth(self: AcadAttributeClass) = value
"""

    MTextDrawingDirection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MTextDrawingDirection(self: AcadAttributeClass) -> AcDrawingDirection

Set: MTextDrawingDirection(self: AcadAttributeClass) = value
"""

    Normal = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Normal(self: AcadAttributeClass) -> object

Set: Normal(self: AcadAttributeClass) = value
"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: AcadAttributeClass) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: AcadAttributeClass) -> str

"""

    ObliqueAngle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObliqueAngle(self: AcadAttributeClass) -> float

Set: ObliqueAngle(self: AcadAttributeClass) = value
"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: AcadAttributeClass) -> Int64

"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: AcadAttributeClass) -> str

Set: PlotStyleName(self: AcadAttributeClass) = value
"""

    Preset = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Preset(self: AcadAttributeClass) -> bool

Set: Preset(self: AcadAttributeClass) = value
"""

    PromptString = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PromptString(self: AcadAttributeClass) -> str

Set: PromptString(self: AcadAttributeClass) = value
"""

    Rotation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Rotation(self: AcadAttributeClass) -> float

Set: Rotation(self: AcadAttributeClass) = value
"""

    ScaleFactor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ScaleFactor(self: AcadAttributeClass) -> float

Set: ScaleFactor(self: AcadAttributeClass) = value
"""

    StyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: StyleName(self: AcadAttributeClass) -> str

Set: StyleName(self: AcadAttributeClass) = value
"""

    TagString = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TagString(self: AcadAttributeClass) -> str

Set: TagString(self: AcadAttributeClass) = value
"""

    TextAlignmentPoint = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextAlignmentPoint(self: AcadAttributeClass) -> object

Set: TextAlignmentPoint(self: AcadAttributeClass) = value
"""

    TextGenerationFlag = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextGenerationFlag(self: AcadAttributeClass) -> int

Set: TextGenerationFlag(self: AcadAttributeClass) = value
"""

    TextString = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextString(self: AcadAttributeClass) -> str

Set: TextString(self: AcadAttributeClass) = value
"""

    Thickness = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Thickness(self: AcadAttributeClass) -> float

Set: Thickness(self: AcadAttributeClass) = value
"""

    TrueColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TrueColor(self: AcadAttributeClass) -> AcadAcCmColor

Set: TrueColor(self: AcadAttributeClass) = value
"""

    UpsideDown = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: UpsideDown(self: AcadAttributeClass) -> bool

Set: UpsideDown(self: AcadAttributeClass) = value
"""

    Verify = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Verify(self: AcadAttributeClass) -> bool

Set: Verify(self: AcadAttributeClass) = value
"""

    VerticalAlignment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VerticalAlignment(self: AcadAttributeClass) -> AcVerticalAlignment

Set: VerticalAlignment(self: AcadAttributeClass) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: AcadAttributeClass) -> bool

Set: Visible(self: AcadAttributeClass) = value
"""


    Modified = None


class IAcadAttributeReference(IAcadEntity, IAcadObject):
    # no doc
    def ArrayPolar(self, NumberOfObjects, AngleToFill, CenterPoint):
        """ ArrayPolar(self: IAcadAttributeReference, NumberOfObjects: int, AngleToFill: float, CenterPoint: object) -> object """
        pass

    def ArrayRectangular(self, NumberOfRows, NumberOfColumns, NumberOfLevels, DistBetweenRows, DistBetweenCols, DistBetweenLevels):
        """ ArrayRectangular(self: IAcadAttributeReference, NumberOfRows: int, NumberOfColumns: int, NumberOfLevels: int, DistBetweenRows: float, DistBetweenCols: float, DistBetweenLevels: float) -> object """
        pass

    def Copy(self):
        """ Copy(self: IAcadAttributeReference) -> object """
        pass

    def Delete(self):
        """ Delete(self: IAcadAttributeReference) """
        pass

    def Erase(self):
        """ Erase(self: IAcadAttributeReference) """
        pass

    def GetBoundingBox(self, MinPoint, MaxPoint):
        """ GetBoundingBox(self: IAcadAttributeReference) -> (object, object) """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: IAcadAttributeReference) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: IAcadAttributeReference, AppName: str) -> (object, object) """
        pass

    def Highlight(self, HighlightFlag):
        """ Highlight(self: IAcadAttributeReference, HighlightFlag: bool) """
        pass

    def IntersectWith(self, IntersectObject, option):
        """ IntersectWith(self: IAcadAttributeReference, IntersectObject: object, option: AcExtendOption) -> object """
        pass

    def Mirror(self, Point1, Point2):
        """ Mirror(self: IAcadAttributeReference, Point1: object, Point2: object) -> object """
        pass

    def Mirror3D(self, Point1, Point2, point3):
        """ Mirror3D(self: IAcadAttributeReference, Point1: object, Point2: object, point3: object) -> object """
        pass

    def Move(self, FromPoint, ToPoint):
        """ Move(self: IAcadAttributeReference, FromPoint: object, ToPoint: object) """
        pass

    def Rotate(self, BasePoint, RotationAngle):
        """ Rotate(self: IAcadAttributeReference, BasePoint: object, RotationAngle: float) """
        pass

    def Rotate3D(self, Point1, Point2, RotationAngle):
        """ Rotate3D(self: IAcadAttributeReference, Point1: object, Point2: object, RotationAngle: float) """
        pass

    def ScaleEntity(self, BasePoint, ScaleFactor):
        """ ScaleEntity(self: IAcadAttributeReference, BasePoint: object, ScaleFactor: float) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: IAcadAttributeReference, XDataType: object, XDataValue: object) """
        pass

    def TransformBy(self, TransformationMatrix):
        """ TransformBy(self: IAcadAttributeReference, TransformationMatrix: object) """
        pass

    def Update(self):
        """ Update(self: IAcadAttributeReference) """
        pass

    def UpdateMTextAttribute(self):
        """ UpdateMTextAttribute(self: IAcadAttributeReference) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Alignment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Alignment(self: IAcadAttributeReference) -> AcAlignment

Set: Alignment(self: IAcadAttributeReference) = value
"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IAcadAttributeReference) -> object

"""

    Backward = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Backward(self: IAcadAttributeReference) -> bool

Set: Backward(self: IAcadAttributeReference) = value
"""

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: IAcadAttributeReference) -> ACAD_COLOR

Set: color(self: IAcadAttributeReference) = value
"""

    Constant = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Constant(self: IAcadAttributeReference) -> bool

"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: IAcadAttributeReference) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: IAcadAttributeReference) -> object

"""

    EntityName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityName(self: IAcadAttributeReference) -> str

"""

    EntityTransparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityTransparency(self: IAcadAttributeReference) -> str

Set: EntityTransparency(self: IAcadAttributeReference) = value
"""

    EntityType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityType(self: IAcadAttributeReference) -> int

"""

    FieldLength = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FieldLength(self: IAcadAttributeReference) -> int

Set: FieldLength(self: IAcadAttributeReference) = value
"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: IAcadAttributeReference) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: IAcadAttributeReference) -> bool

"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: IAcadAttributeReference) -> float

Set: Height(self: IAcadAttributeReference) = value
"""

    HorizontalAlignment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HorizontalAlignment(self: IAcadAttributeReference) -> AcHorizontalAlignment

Set: HorizontalAlignment(self: IAcadAttributeReference) = value
"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: IAcadAttributeReference) -> AcadHyperlinks

"""

    InsertionPoint = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: InsertionPoint(self: IAcadAttributeReference) -> object

Set: InsertionPoint(self: IAcadAttributeReference) = value
"""

    Invisible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Invisible(self: IAcadAttributeReference) -> bool

Set: Invisible(self: IAcadAttributeReference) = value
"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layer(self: IAcadAttributeReference) -> str

Set: Layer(self: IAcadAttributeReference) = value
"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: IAcadAttributeReference) -> str

Set: Linetype(self: IAcadAttributeReference) = value
"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeScale(self: IAcadAttributeReference) -> float

Set: LinetypeScale(self: IAcadAttributeReference) = value
"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: IAcadAttributeReference) -> ACAD_LWEIGHT

Set: Lineweight(self: IAcadAttributeReference) = value
"""

    LockPosition = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LockPosition(self: IAcadAttributeReference) -> bool

"""

    Material = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Material(self: IAcadAttributeReference) -> str

Set: Material(self: IAcadAttributeReference) = value
"""

    MTextAttribute = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MTextAttribute(self: IAcadAttributeReference) -> bool

Set: MTextAttribute(self: IAcadAttributeReference) = value
"""

    MTextAttributeContent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MTextAttributeContent(self: IAcadAttributeReference) -> str

Set: MTextAttributeContent(self: IAcadAttributeReference) = value
"""

    MTextBoundaryWidth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MTextBoundaryWidth(self: IAcadAttributeReference) -> float

Set: MTextBoundaryWidth(self: IAcadAttributeReference) = value
"""

    MTextDrawingDirection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MTextDrawingDirection(self: IAcadAttributeReference) -> AcDrawingDirection

Set: MTextDrawingDirection(self: IAcadAttributeReference) = value
"""

    Normal = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Normal(self: IAcadAttributeReference) -> object

Set: Normal(self: IAcadAttributeReference) = value
"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: IAcadAttributeReference) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: IAcadAttributeReference) -> str

"""

    ObliqueAngle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObliqueAngle(self: IAcadAttributeReference) -> float

Set: ObliqueAngle(self: IAcadAttributeReference) = value
"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: IAcadAttributeReference) -> Int64

"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: IAcadAttributeReference) -> str

Set: PlotStyleName(self: IAcadAttributeReference) = value
"""

    Rotation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Rotation(self: IAcadAttributeReference) -> float

Set: Rotation(self: IAcadAttributeReference) = value
"""

    ScaleFactor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ScaleFactor(self: IAcadAttributeReference) -> float

Set: ScaleFactor(self: IAcadAttributeReference) = value
"""

    StyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: StyleName(self: IAcadAttributeReference) -> str

Set: StyleName(self: IAcadAttributeReference) = value
"""

    TagString = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TagString(self: IAcadAttributeReference) -> str

Set: TagString(self: IAcadAttributeReference) = value
"""

    TextAlignmentPoint = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextAlignmentPoint(self: IAcadAttributeReference) -> object

Set: TextAlignmentPoint(self: IAcadAttributeReference) = value
"""

    TextGenerationFlag = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextGenerationFlag(self: IAcadAttributeReference) -> int

Set: TextGenerationFlag(self: IAcadAttributeReference) = value
"""

    TextString = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextString(self: IAcadAttributeReference) -> str

Set: TextString(self: IAcadAttributeReference) = value
"""

    Thickness = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Thickness(self: IAcadAttributeReference) -> float

Set: Thickness(self: IAcadAttributeReference) = value
"""

    TrueColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TrueColor(self: IAcadAttributeReference) -> AcadAcCmColor

Set: TrueColor(self: IAcadAttributeReference) = value
"""

    UpsideDown = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: UpsideDown(self: IAcadAttributeReference) -> bool

Set: UpsideDown(self: IAcadAttributeReference) = value
"""

    VerticalAlignment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VerticalAlignment(self: IAcadAttributeReference) -> AcVerticalAlignment

Set: VerticalAlignment(self: IAcadAttributeReference) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: IAcadAttributeReference) -> bool

Set: Visible(self: IAcadAttributeReference) = value
"""



class AcadAttributeReference(IAcadAttributeReference, IAcadEntity, IAcadObject, IAcadObjectEvents_Event):
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class AcadAttributeReferenceClass(__ComObject):
    # no doc
    def add_Modified(self, A_1):
        """ add_Modified(self: AcadAttributeReferenceClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def ArrayPolar(self, NumberOfObjects, AngleToFill, CenterPoint):
        """ ArrayPolar(self: AcadAttributeReferenceClass, NumberOfObjects: int, AngleToFill: float, CenterPoint: object) -> object """
        pass

    def ArrayRectangular(self, NumberOfRows, NumberOfColumns, NumberOfLevels, DistBetweenRows, DistBetweenCols, DistBetweenLevels):
        """ ArrayRectangular(self: AcadAttributeReferenceClass, NumberOfRows: int, NumberOfColumns: int, NumberOfLevels: int, DistBetweenRows: float, DistBetweenCols: float, DistBetweenLevels: float) -> object """
        pass

    def Copy(self):
        """ Copy(self: AcadAttributeReferenceClass) -> object """
        pass

    def Delete(self):
        """ Delete(self: AcadAttributeReferenceClass) """
        pass

    def Erase(self):
        """ Erase(self: AcadAttributeReferenceClass) """
        pass

    def GetBoundingBox(self, MinPoint, MaxPoint):
        """ GetBoundingBox(self: AcadAttributeReferenceClass) -> (object, object) """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: AcadAttributeReferenceClass) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: AcadAttributeReferenceClass, AppName: str) -> (object, object) """
        pass

    def Highlight(self, HighlightFlag):
        """ Highlight(self: AcadAttributeReferenceClass, HighlightFlag: bool) """
        pass

    def IntersectWith(self, IntersectObject, option):
        """ IntersectWith(self: AcadAttributeReferenceClass, IntersectObject: object, option: AcExtendOption) -> object """
        pass

    def Mirror(self, Point1, Point2):
        """ Mirror(self: AcadAttributeReferenceClass, Point1: object, Point2: object) -> object """
        pass

    def Mirror3D(self, Point1, Point2, point3):
        """ Mirror3D(self: AcadAttributeReferenceClass, Point1: object, Point2: object, point3: object) -> object """
        pass

    def Move(self, FromPoint, ToPoint):
        """ Move(self: AcadAttributeReferenceClass, FromPoint: object, ToPoint: object) """
        pass

    def remove_Modified(self, A_1):
        """ remove_Modified(self: AcadAttributeReferenceClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def Rotate(self, BasePoint, RotationAngle):
        """ Rotate(self: AcadAttributeReferenceClass, BasePoint: object, RotationAngle: float) """
        pass

    def Rotate3D(self, Point1, Point2, RotationAngle):
        """ Rotate3D(self: AcadAttributeReferenceClass, Point1: object, Point2: object, RotationAngle: float) """
        pass

    def ScaleEntity(self, BasePoint, ScaleFactor):
        """ ScaleEntity(self: AcadAttributeReferenceClass, BasePoint: object, ScaleFactor: float) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: AcadAttributeReferenceClass, XDataType: object, XDataValue: object) """
        pass

    def TransformBy(self, TransformationMatrix):
        """ TransformBy(self: AcadAttributeReferenceClass, TransformationMatrix: object) """
        pass

    def Update(self):
        """ Update(self: AcadAttributeReferenceClass) """
        pass

    def UpdateMTextAttribute(self):
        """ UpdateMTextAttribute(self: AcadAttributeReferenceClass) """
        pass

    Alignment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Alignment(self: AcadAttributeReferenceClass) -> AcAlignment

Set: Alignment(self: AcadAttributeReferenceClass) = value
"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: AcadAttributeReferenceClass) -> object

"""

    Backward = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Backward(self: AcadAttributeReferenceClass) -> bool

Set: Backward(self: AcadAttributeReferenceClass) = value
"""

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: AcadAttributeReferenceClass) -> ACAD_COLOR

Set: color(self: AcadAttributeReferenceClass) = value
"""

    Constant = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Constant(self: AcadAttributeReferenceClass) -> bool

"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: AcadAttributeReferenceClass) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: AcadAttributeReferenceClass) -> object

"""

    EntityName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityName(self: AcadAttributeReferenceClass) -> str

"""

    EntityTransparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityTransparency(self: AcadAttributeReferenceClass) -> str

Set: EntityTransparency(self: AcadAttributeReferenceClass) = value
"""

    EntityType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityType(self: AcadAttributeReferenceClass) -> int

"""

    FieldLength = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FieldLength(self: AcadAttributeReferenceClass) -> int

Set: FieldLength(self: AcadAttributeReferenceClass) = value
"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: AcadAttributeReferenceClass) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: AcadAttributeReferenceClass) -> bool

"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: AcadAttributeReferenceClass) -> float

Set: Height(self: AcadAttributeReferenceClass) = value
"""

    HorizontalAlignment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HorizontalAlignment(self: AcadAttributeReferenceClass) -> AcHorizontalAlignment

Set: HorizontalAlignment(self: AcadAttributeReferenceClass) = value
"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: AcadAttributeReferenceClass) -> AcadHyperlinks

"""

    InsertionPoint = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: InsertionPoint(self: AcadAttributeReferenceClass) -> object

Set: InsertionPoint(self: AcadAttributeReferenceClass) = value
"""

    Invisible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Invisible(self: AcadAttributeReferenceClass) -> bool

Set: Invisible(self: AcadAttributeReferenceClass) = value
"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layer(self: AcadAttributeReferenceClass) -> str

Set: Layer(self: AcadAttributeReferenceClass) = value
"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: AcadAttributeReferenceClass) -> str

Set: Linetype(self: AcadAttributeReferenceClass) = value
"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeScale(self: AcadAttributeReferenceClass) -> float

Set: LinetypeScale(self: AcadAttributeReferenceClass) = value
"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: AcadAttributeReferenceClass) -> ACAD_LWEIGHT

Set: Lineweight(self: AcadAttributeReferenceClass) = value
"""

    LockPosition = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LockPosition(self: AcadAttributeReferenceClass) -> bool

"""

    Material = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Material(self: AcadAttributeReferenceClass) -> str

Set: Material(self: AcadAttributeReferenceClass) = value
"""

    MTextAttribute = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MTextAttribute(self: AcadAttributeReferenceClass) -> bool

Set: MTextAttribute(self: AcadAttributeReferenceClass) = value
"""

    MTextAttributeContent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MTextAttributeContent(self: AcadAttributeReferenceClass) -> str

Set: MTextAttributeContent(self: AcadAttributeReferenceClass) = value
"""

    MTextBoundaryWidth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MTextBoundaryWidth(self: AcadAttributeReferenceClass) -> float

Set: MTextBoundaryWidth(self: AcadAttributeReferenceClass) = value
"""

    MTextDrawingDirection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MTextDrawingDirection(self: AcadAttributeReferenceClass) -> AcDrawingDirection

Set: MTextDrawingDirection(self: AcadAttributeReferenceClass) = value
"""

    Normal = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Normal(self: AcadAttributeReferenceClass) -> object

Set: Normal(self: AcadAttributeReferenceClass) = value
"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: AcadAttributeReferenceClass) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: AcadAttributeReferenceClass) -> str

"""

    ObliqueAngle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObliqueAngle(self: AcadAttributeReferenceClass) -> float

Set: ObliqueAngle(self: AcadAttributeReferenceClass) = value
"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: AcadAttributeReferenceClass) -> Int64

"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: AcadAttributeReferenceClass) -> str

Set: PlotStyleName(self: AcadAttributeReferenceClass) = value
"""

    Rotation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Rotation(self: AcadAttributeReferenceClass) -> float

Set: Rotation(self: AcadAttributeReferenceClass) = value
"""

    ScaleFactor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ScaleFactor(self: AcadAttributeReferenceClass) -> float

Set: ScaleFactor(self: AcadAttributeReferenceClass) = value
"""

    StyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: StyleName(self: AcadAttributeReferenceClass) -> str

Set: StyleName(self: AcadAttributeReferenceClass) = value
"""

    TagString = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TagString(self: AcadAttributeReferenceClass) -> str

Set: TagString(self: AcadAttributeReferenceClass) = value
"""

    TextAlignmentPoint = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextAlignmentPoint(self: AcadAttributeReferenceClass) -> object

Set: TextAlignmentPoint(self: AcadAttributeReferenceClass) = value
"""

    TextGenerationFlag = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextGenerationFlag(self: AcadAttributeReferenceClass) -> int

Set: TextGenerationFlag(self: AcadAttributeReferenceClass) = value
"""

    TextString = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextString(self: AcadAttributeReferenceClass) -> str

Set: TextString(self: AcadAttributeReferenceClass) = value
"""

    Thickness = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Thickness(self: AcadAttributeReferenceClass) -> float

Set: Thickness(self: AcadAttributeReferenceClass) = value
"""

    TrueColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TrueColor(self: AcadAttributeReferenceClass) -> AcadAcCmColor

Set: TrueColor(self: AcadAttributeReferenceClass) = value
"""

    UpsideDown = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: UpsideDown(self: AcadAttributeReferenceClass) -> bool

Set: UpsideDown(self: AcadAttributeReferenceClass) = value
"""

    VerticalAlignment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VerticalAlignment(self: AcadAttributeReferenceClass) -> AcVerticalAlignment

Set: VerticalAlignment(self: AcadAttributeReferenceClass) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: AcadAttributeReferenceClass) -> bool

Set: Visible(self: AcadAttributeReferenceClass) = value
"""


    Modified = None


class IAcadBlock(IAcadObject, IEnumerable):
    # no doc
    def Add3DFace(self, Point1, Point2, point3, Point4):
        """ Add3DFace(self: IAcadBlock, Point1: object, Point2: object, point3: object, Point4: object) -> Acad3DFace """
        pass

    def Add3DMesh(self, M, N, PointsMatrix):
        """ Add3DMesh(self: IAcadBlock, M: int, N: int, PointsMatrix: object) -> AcadPolygonMesh """
        pass

    def Add3DPoly(self, PointsArray):
        """ Add3DPoly(self: IAcadBlock, PointsArray: object) -> Acad3DPolyline """
        pass

    def AddArc(self, Center, Radius, StartAngle, EndAngle):
        """ AddArc(self: IAcadBlock, Center: object, Radius: float, StartAngle: float, EndAngle: float) -> AcadArc """
        pass

    def AddAttribute(self, Height, Mode, Prompt, InsertionPoint, Tag, Value):
        """ AddAttribute(self: IAcadBlock, Height: float, Mode: AcAttributeMode, Prompt: str, InsertionPoint: object, Tag: str, Value: str) -> AcadAttribute """
        pass

    def AddBox(self, Origin, Length, Width, Height):
        """ AddBox(self: IAcadBlock, Origin: object, Length: float, Width: float, Height: float) -> Acad3DSolid """
        pass

    def AddCircle(self, Center, Radius):
        """ AddCircle(self: IAcadBlock, Center: object, Radius: float) -> AcadCircle """
        pass

    def AddCone(self, Center, BaseRadius, Height):
        """ AddCone(self: IAcadBlock, Center: object, BaseRadius: float, Height: float) -> Acad3DSolid """
        pass

    def AddCustomObject(self, ClassName):
        """ AddCustomObject(self: IAcadBlock, ClassName: str) -> object """
        pass

    def AddCylinder(self, Center, Radius, Height):
        """ AddCylinder(self: IAcadBlock, Center: object, Radius: float, Height: float) -> Acad3DSolid """
        pass

    def AddDim3PointAngular(self, AngleVertex, FirstEndPoint, SecondEndPoint, TextPoint):
        """ AddDim3PointAngular(self: IAcadBlock, AngleVertex: object, FirstEndPoint: object, SecondEndPoint: object, TextPoint: object) -> AcadDim3PointAngular """
        pass

    def AddDimAligned(self, ExtLine1Point, ExtLine2Point, TextPosition):
        """ AddDimAligned(self: IAcadBlock, ExtLine1Point: object, ExtLine2Point: object, TextPosition: object) -> AcadDimAligned """
        pass

    def AddDimAngular(self, AngleVertex, FirstEndPoint, SecondEndPoint, TextPoint):
        """ AddDimAngular(self: IAcadBlock, AngleVertex: object, FirstEndPoint: object, SecondEndPoint: object, TextPoint: object) -> AcadDimAngular """
        pass

    def AddDimArc(self, ArcCenter, FirstEndPoint, SecondEndPoint, ArcPoint):
        """ AddDimArc(self: IAcadBlock, ArcCenter: object, FirstEndPoint: object, SecondEndPoint: object, ArcPoint: object) -> AcadDimArcLength """
        pass

    def AddDimDiametric(self, ChordPoint, FarChordPoint, LeaderLength):
        """ AddDimDiametric(self: IAcadBlock, ChordPoint: object, FarChordPoint: object, LeaderLength: float) -> AcadDimDiametric """
        pass

    def AddDimOrdinate(self, DefinitionPoint, LeaderEndPoint, UseXAxis):
        """ AddDimOrdinate(self: IAcadBlock, DefinitionPoint: object, LeaderEndPoint: object, UseXAxis: int) -> AcadDimOrdinate """
        pass

    def AddDimRadial(self, Center, ChordPoint, LeaderLength):
        """ AddDimRadial(self: IAcadBlock, Center: object, ChordPoint: object, LeaderLength: float) -> AcadDimRadial """
        pass

    def AddDimRadialLarge(self, Center, ChordPoint, OverrideCenter, JogPoint, JogAngle):
        """ AddDimRadialLarge(self: IAcadBlock, Center: object, ChordPoint: object, OverrideCenter: object, JogPoint: object, JogAngle: float) -> AcadDimRadialLarge """
        pass

    def AddDimRotated(self, ExtLine1Point, ExtLine2Point, DimLineLocation, RotationAngle):
        """ AddDimRotated(self: IAcadBlock, ExtLine1Point: object, ExtLine2Point: object, DimLineLocation: object, RotationAngle: float) -> AcadDimRotated """
        pass

    def AddEllipse(self, Center, MajorAxis, RadiusRatio):
        """ AddEllipse(self: IAcadBlock, Center: object, MajorAxis: object, RadiusRatio: float) -> AcadEllipse """
        pass

    def AddEllipticalCone(self, Center, MajorRadius, MinorRadius, Height):
        """ AddEllipticalCone(self: IAcadBlock, Center: object, MajorRadius: float, MinorRadius: float, Height: float) -> Acad3DSolid """
        pass

    def AddEllipticalCylinder(self, Center, MajorRadius, MinorRadius, Height):
        """ AddEllipticalCylinder(self: IAcadBlock, Center: object, MajorRadius: float, MinorRadius: float, Height: float) -> Acad3DSolid """
        pass

    def AddExtrudedSolid(self, Profile, Height, TaperAngle):
        """ AddExtrudedSolid(self: IAcadBlock, Profile: AcadRegion, Height: float, TaperAngle: float) -> Acad3DSolid """
        pass

    def AddExtrudedSolidAlongPath(self, Profile, Path):
        """ AddExtrudedSolidAlongPath(self: IAcadBlock, Profile: AcadRegion, Path: object) -> Acad3DSolid """
        pass

    def AddHatch(self, PatternType, PatternName, Associativity, HatchObjectType):
        """ AddHatch(self: IAcadBlock, PatternType: int, PatternName: str, Associativity: bool, HatchObjectType: object) -> AcadHatch """
        pass

    def AddLeader(self, PointsArray, Annotation, Type):
        """ AddLeader(self: IAcadBlock, PointsArray: object, Annotation: AcadEntity, Type: AcLeaderType) -> AcadLeader """
        pass

    def AddLightWeightPolyline(self, VerticesList):
        """ AddLightWeightPolyline(self: IAcadBlock, VerticesList: object) -> AcadLWPolyline """
        pass

    def AddLine(self, StartPoint, EndPoint):
        """ AddLine(self: IAcadBlock, StartPoint: object, EndPoint: object) -> AcadLine """
        pass

    def AddMInsertBlock(self, InsertionPoint, Name, Xscale, Yscale, Zscale, Rotation, NumRows, NumColumns, RowSpacing, ColumnSpacing, Password):
        """ AddMInsertBlock(self: IAcadBlock, InsertionPoint: object, Name: str, Xscale: float, Yscale: float, Zscale: float, Rotation: float, NumRows: int, NumColumns: int, RowSpacing: int, ColumnSpacing: int, Password: object) -> AcadMInsertBlock """
        pass

    def AddMLeader(self, PointsArray, leaderLineIndex):
        """ AddMLeader(self: IAcadBlock, PointsArray: object) -> (AcadMLeader, int) """
        pass

    def AddMLine(self, VertexList):
        """ AddMLine(self: IAcadBlock, VertexList: object) -> AcadMLine """
        pass

    def AddMText(self, InsertionPoint, Width, Text):
        """ AddMText(self: IAcadBlock, InsertionPoint: object, Width: float, Text: str) -> AcadMText """
        pass

    def AddPoint(self, Point):
        """ AddPoint(self: IAcadBlock, Point: object) -> AcadPoint """
        pass

    def AddPolyfaceMesh(self, VertexList, FaceList):
        """ AddPolyfaceMesh(self: IAcadBlock, VertexList: object, FaceList: object) -> AcadPolyfaceMesh """
        pass

    def AddPolyline(self, VerticesList):
        """ AddPolyline(self: IAcadBlock, VerticesList: object) -> AcadPolyline """
        pass

    def AddRaster(self, imageFileName, InsertionPoint, ScaleFactor, RotationAngle):
        """ AddRaster(self: IAcadBlock, imageFileName: str, InsertionPoint: object, ScaleFactor: float, RotationAngle: float) -> AcadRasterImage """
        pass

    def AddRay(self, Point1, Point2):
        """ AddRay(self: IAcadBlock, Point1: object, Point2: object) -> AcadRay """
        pass

    def AddRegion(self, ObjectList):
        """ AddRegion(self: IAcadBlock, ObjectList: object) -> object """
        pass

    def AddRevolvedSolid(self, Profile, AxisPoint, AxisDir, Angle):
        """ AddRevolvedSolid(self: IAcadBlock, Profile: AcadRegion, AxisPoint: object, AxisDir: object, Angle: float) -> Acad3DSolid """
        pass

    def AddSection(self, FromPoint, ToPoint, planeVector):
        """ AddSection(self: IAcadBlock, FromPoint: object, ToPoint: object, planeVector: object) -> IAcadSection """
        pass

    def AddShape(self, Name, InsertionPoint, ScaleFactor, RotationAngle):
        """ AddShape(self: IAcadBlock, Name: str, InsertionPoint: object, ScaleFactor: float, RotationAngle: float) -> AcadShape """
        pass

    def AddSolid(self, Point1, Point2, point3, Point4):
        """ AddSolid(self: IAcadBlock, Point1: object, Point2: object, point3: object, Point4: object) -> AcadSolid """
        pass

    def AddSphere(self, Center, Radius):
        """ AddSphere(self: IAcadBlock, Center: object, Radius: float) -> Acad3DSolid """
        pass

    def AddSpline(self, PointsArray, StartTangent, EndTangent):
        """ AddSpline(self: IAcadBlock, PointsArray: object, StartTangent: object, EndTangent: object) -> AcadSpline """
        pass

    def AddTable(self, InsertionPoint, NumRows, NumColumns, RowHeight, ColWidth):
        """ AddTable(self: IAcadBlock, InsertionPoint: object, NumRows: int, NumColumns: int, RowHeight: float, ColWidth: float) -> AcadTable """
        pass

    def AddText(self, TextString, InsertionPoint, Height):
        """ AddText(self: IAcadBlock, TextString: str, InsertionPoint: object, Height: float) -> AcadText """
        pass

    def AddTolerance(self, Text, InsertionPoint, Direction):
        """ AddTolerance(self: IAcadBlock, Text: str, InsertionPoint: object, Direction: object) -> AcadTolerance """
        pass

    def AddTorus(self, Center, TorusRadius, TubeRadius):
        """ AddTorus(self: IAcadBlock, Center: object, TorusRadius: float, TubeRadius: float) -> Acad3DSolid """
        pass

    def AddTrace(self, PointsArray):
        """ AddTrace(self: IAcadBlock, PointsArray: object) -> AcadTrace """
        pass

    def AddWedge(self, Center, Length, Width, Height):
        """ AddWedge(self: IAcadBlock, Center: object, Length: float, Width: float, Height: float) -> Acad3DSolid """
        pass

    def AddXline(self, Point1, Point2):
        """ AddXline(self: IAcadBlock, Point1: object, Point2: object) -> AcadXline """
        pass

    def AttachExternalReference(self, PathName, Name, InsertionPoint, Xscale, Yscale, Zscale, Rotation, bOverlay, Password):
        """ AttachExternalReference(self: IAcadBlock, PathName: str, Name: str, InsertionPoint: object, Xscale: float, Yscale: float, Zscale: float, Rotation: float, bOverlay: bool, Password: object) -> AcadExternalReference """
        pass

    def Bind(self, bPrefixName):
        """ Bind(self: IAcadBlock, bPrefixName: bool) """
        pass

    def Delete(self):
        """ Delete(self: IAcadBlock) """
        pass

    def Detach(self):
        """ Detach(self: IAcadBlock) """
        pass

    def Erase(self):
        """ Erase(self: IAcadBlock) """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: IAcadBlock) -> IEnumerator """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: IAcadBlock) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: IAcadBlock, AppName: str) -> (object, object) """
        pass

    def InsertBlock(self, InsertionPoint, Name, Xscale, Yscale, Zscale, Rotation, Password):
        """ InsertBlock(self: IAcadBlock, InsertionPoint: object, Name: str, Xscale: float, Yscale: float, Zscale: float, Rotation: float, Password: object) -> AcadBlockReference """
        pass

    def Item(self, Index):
        """ Item(self: IAcadBlock, Index: object) -> AcadEntity """
        pass

    def Reload(self):
        """ Reload(self: IAcadBlock) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: IAcadBlock, XDataType: object, XDataValue: object) """
        pass

    def Unload(self):
        """ Unload(self: IAcadBlock) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerable) -> object """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IAcadBlock) -> object

"""

    BlockScaling = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BlockScaling(self: IAcadBlock) -> AcBlockScaling

Set: BlockScaling(self: IAcadBlock) = value
"""

    Comments = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Comments(self: IAcadBlock) -> str

Set: Comments(self: IAcadBlock) = value
"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: IAcadBlock) -> int

"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: IAcadBlock) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: IAcadBlock) -> object

"""

    Explodable = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Explodable(self: IAcadBlock) -> bool

Set: Explodable(self: IAcadBlock) = value
"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: IAcadBlock) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: IAcadBlock) -> bool

"""

    IsDynamicBlock = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IsDynamicBlock(self: IAcadBlock) -> bool

"""

    IsLayout = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IsLayout(self: IAcadBlock) -> bool

"""

    IsXRef = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IsXRef(self: IAcadBlock) -> bool

"""

    Layout = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layout(self: IAcadBlock) -> AcadLayout

"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: IAcadBlock) -> str

Set: Name(self: IAcadBlock) = value
"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: IAcadBlock) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: IAcadBlock) -> str

"""

    Origin = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Origin(self: IAcadBlock) -> object

Set: Origin(self: IAcadBlock) = value
"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: IAcadBlock) -> Int64

"""

    Path = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Path(self: IAcadBlock) -> str

Set: Path(self: IAcadBlock) = value
"""

    Units = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Units(self: IAcadBlock) -> AcInsertUnits

Set: Units(self: IAcadBlock) = value
"""

    XRefDatabase = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: XRefDatabase(self: IAcadBlock) -> AcadDatabase

"""



class AcadBlock(IAcadBlock, IAcadObject, IEnumerable, IAcadObjectEvents_Event):
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerable) -> object """
        pass


class AcadBlockClass(__ComObject):
    # no doc
    def Add3DFace(self, Point1, Point2, point3, Point4):
        """ Add3DFace(self: AcadBlockClass, Point1: object, Point2: object, point3: object, Point4: object) -> Acad3DFace """
        pass

    def Add3DMesh(self, M, N, PointsMatrix):
        """ Add3DMesh(self: AcadBlockClass, M: int, N: int, PointsMatrix: object) -> AcadPolygonMesh """
        pass

    def Add3DPoly(self, PointsArray):
        """ Add3DPoly(self: AcadBlockClass, PointsArray: object) -> Acad3DPolyline """
        pass

    def AddArc(self, Center, Radius, StartAngle, EndAngle):
        """ AddArc(self: AcadBlockClass, Center: object, Radius: float, StartAngle: float, EndAngle: float) -> AcadArc """
        pass

    def AddAttribute(self, Height, Mode, Prompt, InsertionPoint, Tag, Value):
        """ AddAttribute(self: AcadBlockClass, Height: float, Mode: AcAttributeMode, Prompt: str, InsertionPoint: object, Tag: str, Value: str) -> AcadAttribute """
        pass

    def AddBox(self, Origin, Length, Width, Height):
        """ AddBox(self: AcadBlockClass, Origin: object, Length: float, Width: float, Height: float) -> Acad3DSolid """
        pass

    def AddCircle(self, Center, Radius):
        """ AddCircle(self: AcadBlockClass, Center: object, Radius: float) -> AcadCircle """
        pass

    def AddCone(self, Center, BaseRadius, Height):
        """ AddCone(self: AcadBlockClass, Center: object, BaseRadius: float, Height: float) -> Acad3DSolid """
        pass

    def AddCustomObject(self, ClassName):
        """ AddCustomObject(self: AcadBlockClass, ClassName: str) -> object """
        pass

    def AddCylinder(self, Center, Radius, Height):
        """ AddCylinder(self: AcadBlockClass, Center: object, Radius: float, Height: float) -> Acad3DSolid """
        pass

    def AddDim3PointAngular(self, AngleVertex, FirstEndPoint, SecondEndPoint, TextPoint):
        """ AddDim3PointAngular(self: AcadBlockClass, AngleVertex: object, FirstEndPoint: object, SecondEndPoint: object, TextPoint: object) -> AcadDim3PointAngular """
        pass

    def AddDimAligned(self, ExtLine1Point, ExtLine2Point, TextPosition):
        """ AddDimAligned(self: AcadBlockClass, ExtLine1Point: object, ExtLine2Point: object, TextPosition: object) -> AcadDimAligned """
        pass

    def AddDimAngular(self, AngleVertex, FirstEndPoint, SecondEndPoint, TextPoint):
        """ AddDimAngular(self: AcadBlockClass, AngleVertex: object, FirstEndPoint: object, SecondEndPoint: object, TextPoint: object) -> AcadDimAngular """
        pass

    def AddDimArc(self, ArcCenter, FirstEndPoint, SecondEndPoint, ArcPoint):
        """ AddDimArc(self: AcadBlockClass, ArcCenter: object, FirstEndPoint: object, SecondEndPoint: object, ArcPoint: object) -> AcadDimArcLength """
        pass

    def AddDimDiametric(self, ChordPoint, FarChordPoint, LeaderLength):
        """ AddDimDiametric(self: AcadBlockClass, ChordPoint: object, FarChordPoint: object, LeaderLength: float) -> AcadDimDiametric """
        pass

    def AddDimOrdinate(self, DefinitionPoint, LeaderEndPoint, UseXAxis):
        """ AddDimOrdinate(self: AcadBlockClass, DefinitionPoint: object, LeaderEndPoint: object, UseXAxis: int) -> AcadDimOrdinate """
        pass

    def AddDimRadial(self, Center, ChordPoint, LeaderLength):
        """ AddDimRadial(self: AcadBlockClass, Center: object, ChordPoint: object, LeaderLength: float) -> AcadDimRadial """
        pass

    def AddDimRadialLarge(self, Center, ChordPoint, OverrideCenter, JogPoint, JogAngle):
        """ AddDimRadialLarge(self: AcadBlockClass, Center: object, ChordPoint: object, OverrideCenter: object, JogPoint: object, JogAngle: float) -> AcadDimRadialLarge """
        pass

    def AddDimRotated(self, ExtLine1Point, ExtLine2Point, DimLineLocation, RotationAngle):
        """ AddDimRotated(self: AcadBlockClass, ExtLine1Point: object, ExtLine2Point: object, DimLineLocation: object, RotationAngle: float) -> AcadDimRotated """
        pass

    def AddEllipse(self, Center, MajorAxis, RadiusRatio):
        """ AddEllipse(self: AcadBlockClass, Center: object, MajorAxis: object, RadiusRatio: float) -> AcadEllipse """
        pass

    def AddEllipticalCone(self, Center, MajorRadius, MinorRadius, Height):
        """ AddEllipticalCone(self: AcadBlockClass, Center: object, MajorRadius: float, MinorRadius: float, Height: float) -> Acad3DSolid """
        pass

    def AddEllipticalCylinder(self, Center, MajorRadius, MinorRadius, Height):
        """ AddEllipticalCylinder(self: AcadBlockClass, Center: object, MajorRadius: float, MinorRadius: float, Height: float) -> Acad3DSolid """
        pass

    def AddExtrudedSolid(self, Profile, Height, TaperAngle):
        """ AddExtrudedSolid(self: AcadBlockClass, Profile: AcadRegion, Height: float, TaperAngle: float) -> Acad3DSolid """
        pass

    def AddExtrudedSolidAlongPath(self, Profile, Path):
        """ AddExtrudedSolidAlongPath(self: AcadBlockClass, Profile: AcadRegion, Path: object) -> Acad3DSolid """
        pass

    def AddHatch(self, PatternType, PatternName, Associativity, HatchObjectType):
        """ AddHatch(self: AcadBlockClass, PatternType: int, PatternName: str, Associativity: bool, HatchObjectType: object) -> AcadHatch """
        pass

    def AddLeader(self, PointsArray, Annotation, Type):
        """ AddLeader(self: AcadBlockClass, PointsArray: object, Annotation: AcadEntity, Type: AcLeaderType) -> AcadLeader """
        pass

    def AddLightWeightPolyline(self, VerticesList):
        """ AddLightWeightPolyline(self: AcadBlockClass, VerticesList: object) -> AcadLWPolyline """
        pass

    def AddLine(self, StartPoint, EndPoint):
        """ AddLine(self: AcadBlockClass, StartPoint: object, EndPoint: object) -> AcadLine """
        pass

    def AddMInsertBlock(self, InsertionPoint, Name, Xscale, Yscale, Zscale, Rotation, NumRows, NumColumns, RowSpacing, ColumnSpacing, Password):
        """ AddMInsertBlock(self: AcadBlockClass, InsertionPoint: object, Name: str, Xscale: float, Yscale: float, Zscale: float, Rotation: float, NumRows: int, NumColumns: int, RowSpacing: int, ColumnSpacing: int, Password: object) -> AcadMInsertBlock """
        pass

    def AddMLeader(self, PointsArray, leaderLineIndex):
        """ AddMLeader(self: AcadBlockClass, PointsArray: object) -> (AcadMLeader, int) """
        pass

    def AddMLine(self, VertexList):
        """ AddMLine(self: AcadBlockClass, VertexList: object) -> AcadMLine """
        pass

    def AddMText(self, InsertionPoint, Width, Text):
        """ AddMText(self: AcadBlockClass, InsertionPoint: object, Width: float, Text: str) -> AcadMText """
        pass

    def AddPoint(self, Point):
        """ AddPoint(self: AcadBlockClass, Point: object) -> AcadPoint """
        pass

    def AddPolyfaceMesh(self, VertexList, FaceList):
        """ AddPolyfaceMesh(self: AcadBlockClass, VertexList: object, FaceList: object) -> AcadPolyfaceMesh """
        pass

    def AddPolyline(self, VerticesList):
        """ AddPolyline(self: AcadBlockClass, VerticesList: object) -> AcadPolyline """
        pass

    def AddRaster(self, imageFileName, InsertionPoint, ScaleFactor, RotationAngle):
        """ AddRaster(self: AcadBlockClass, imageFileName: str, InsertionPoint: object, ScaleFactor: float, RotationAngle: float) -> AcadRasterImage """
        pass

    def AddRay(self, Point1, Point2):
        """ AddRay(self: AcadBlockClass, Point1: object, Point2: object) -> AcadRay """
        pass

    def AddRegion(self, ObjectList):
        """ AddRegion(self: AcadBlockClass, ObjectList: object) -> object """
        pass

    def AddRevolvedSolid(self, Profile, AxisPoint, AxisDir, Angle):
        """ AddRevolvedSolid(self: AcadBlockClass, Profile: AcadRegion, AxisPoint: object, AxisDir: object, Angle: float) -> Acad3DSolid """
        pass

    def AddSection(self, FromPoint, ToPoint, planeVector):
        """ AddSection(self: AcadBlockClass, FromPoint: object, ToPoint: object, planeVector: object) -> IAcadSection """
        pass

    def AddShape(self, Name, InsertionPoint, ScaleFactor, RotationAngle):
        """ AddShape(self: AcadBlockClass, Name: str, InsertionPoint: object, ScaleFactor: float, RotationAngle: float) -> AcadShape """
        pass

    def AddSolid(self, Point1, Point2, point3, Point4):
        """ AddSolid(self: AcadBlockClass, Point1: object, Point2: object, point3: object, Point4: object) -> AcadSolid """
        pass

    def AddSphere(self, Center, Radius):
        """ AddSphere(self: AcadBlockClass, Center: object, Radius: float) -> Acad3DSolid """
        pass

    def AddSpline(self, PointsArray, StartTangent, EndTangent):
        """ AddSpline(self: AcadBlockClass, PointsArray: object, StartTangent: object, EndTangent: object) -> AcadSpline """
        pass

    def AddTable(self, InsertionPoint, NumRows, NumColumns, RowHeight, ColWidth):
        """ AddTable(self: AcadBlockClass, InsertionPoint: object, NumRows: int, NumColumns: int, RowHeight: float, ColWidth: float) -> AcadTable """
        pass

    def AddText(self, TextString, InsertionPoint, Height):
        """ AddText(self: AcadBlockClass, TextString: str, InsertionPoint: object, Height: float) -> AcadText """
        pass

    def AddTolerance(self, Text, InsertionPoint, Direction):
        """ AddTolerance(self: AcadBlockClass, Text: str, InsertionPoint: object, Direction: object) -> AcadTolerance """
        pass

    def AddTorus(self, Center, TorusRadius, TubeRadius):
        """ AddTorus(self: AcadBlockClass, Center: object, TorusRadius: float, TubeRadius: float) -> Acad3DSolid """
        pass

    def AddTrace(self, PointsArray):
        """ AddTrace(self: AcadBlockClass, PointsArray: object) -> AcadTrace """
        pass

    def AddWedge(self, Center, Length, Width, Height):
        """ AddWedge(self: AcadBlockClass, Center: object, Length: float, Width: float, Height: float) -> Acad3DSolid """
        pass

    def AddXline(self, Point1, Point2):
        """ AddXline(self: AcadBlockClass, Point1: object, Point2: object) -> AcadXline """
        pass

    def add_Modified(self, A_1):
        """ add_Modified(self: AcadBlockClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def AttachExternalReference(self, PathName, Name, InsertionPoint, Xscale, Yscale, Zscale, Rotation, bOverlay, Password):
        """ AttachExternalReference(self: AcadBlockClass, PathName: str, Name: str, InsertionPoint: object, Xscale: float, Yscale: float, Zscale: float, Rotation: float, bOverlay: bool, Password: object) -> AcadExternalReference """
        pass

    def Bind(self, bPrefixName):
        """ Bind(self: AcadBlockClass, bPrefixName: bool) """
        pass

    def Delete(self):
        """ Delete(self: AcadBlockClass) """
        pass

    def Detach(self):
        """ Detach(self: AcadBlockClass) """
        pass

    def Erase(self):
        """ Erase(self: AcadBlockClass) """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: AcadBlockClass) -> IEnumerator """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: AcadBlockClass) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: AcadBlockClass, AppName: str) -> (object, object) """
        pass

    def InsertBlock(self, InsertionPoint, Name, Xscale, Yscale, Zscale, Rotation, Password):
        """ InsertBlock(self: AcadBlockClass, InsertionPoint: object, Name: str, Xscale: float, Yscale: float, Zscale: float, Rotation: float, Password: object) -> AcadBlockReference """
        pass

    def Item(self, Index):
        """ Item(self: AcadBlockClass, Index: object) -> AcadEntity """
        pass

    def Reload(self):
        """ Reload(self: AcadBlockClass) """
        pass

    def remove_Modified(self, A_1):
        """ remove_Modified(self: AcadBlockClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: AcadBlockClass, XDataType: object, XDataValue: object) """
        pass

    def Unload(self):
        """ Unload(self: AcadBlockClass) """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerable) -> object """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: AcadBlockClass) -> object

"""

    BlockScaling = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BlockScaling(self: AcadBlockClass) -> AcBlockScaling

Set: BlockScaling(self: AcadBlockClass) = value
"""

    Comments = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Comments(self: AcadBlockClass) -> str

Set: Comments(self: AcadBlockClass) = value
"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: AcadBlockClass) -> int

"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: AcadBlockClass) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: AcadBlockClass) -> object

"""

    Explodable = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Explodable(self: AcadBlockClass) -> bool

Set: Explodable(self: AcadBlockClass) = value
"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: AcadBlockClass) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: AcadBlockClass) -> bool

"""

    IsDynamicBlock = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IsDynamicBlock(self: AcadBlockClass) -> bool

"""

    IsLayout = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IsLayout(self: AcadBlockClass) -> bool

"""

    IsXRef = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IsXRef(self: AcadBlockClass) -> bool

"""

    Layout = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layout(self: AcadBlockClass) -> AcadLayout

"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: AcadBlockClass) -> str

Set: Name(self: AcadBlockClass) = value
"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: AcadBlockClass) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: AcadBlockClass) -> str

"""

    Origin = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Origin(self: AcadBlockClass) -> object

Set: Origin(self: AcadBlockClass) = value
"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: AcadBlockClass) -> Int64

"""

    Path = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Path(self: AcadBlockClass) -> str

Set: Path(self: AcadBlockClass) = value
"""

    Units = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Units(self: AcadBlockClass) -> AcInsertUnits

Set: Units(self: AcadBlockClass) = value
"""

    XRefDatabase = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: XRefDatabase(self: AcadBlockClass) -> AcadDatabase

"""


    Modified = None


class IAcadBlockReference(IAcadEntity, IAcadObject):
    # no doc
    def ArrayPolar(self, NumberOfObjects, AngleToFill, CenterPoint):
        """ ArrayPolar(self: IAcadBlockReference, NumberOfObjects: int, AngleToFill: float, CenterPoint: object) -> object """
        pass

    def ArrayRectangular(self, NumberOfRows, NumberOfColumns, NumberOfLevels, DistBetweenRows, DistBetweenCols, DistBetweenLevels):
        """ ArrayRectangular(self: IAcadBlockReference, NumberOfRows: int, NumberOfColumns: int, NumberOfLevels: int, DistBetweenRows: float, DistBetweenCols: float, DistBetweenLevels: float) -> object """
        pass

    def ConvertToAnonymousBlock(self):
        """ ConvertToAnonymousBlock(self: IAcadBlockReference) """
        pass

    def ConvertToStaticBlock(self, newBlockName):
        """ ConvertToStaticBlock(self: IAcadBlockReference, newBlockName: str) """
        pass

    def Copy(self):
        """ Copy(self: IAcadBlockReference) -> object """
        pass

    def Delete(self):
        """ Delete(self: IAcadBlockReference) """
        pass

    def Erase(self):
        """ Erase(self: IAcadBlockReference) """
        pass

    def Explode(self):
        """ Explode(self: IAcadBlockReference) -> object """
        pass

    def GetAttributes(self):
        """ GetAttributes(self: IAcadBlockReference) -> object """
        pass

    def GetBoundingBox(self, MinPoint, MaxPoint):
        """ GetBoundingBox(self: IAcadBlockReference) -> (object, object) """
        pass

    def GetConstantAttributes(self):
        """ GetConstantAttributes(self: IAcadBlockReference) -> object """
        pass

    def GetDynamicBlockProperties(self):
        """ GetDynamicBlockProperties(self: IAcadBlockReference) -> object """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: IAcadBlockReference) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: IAcadBlockReference, AppName: str) -> (object, object) """
        pass

    def Highlight(self, HighlightFlag):
        """ Highlight(self: IAcadBlockReference, HighlightFlag: bool) """
        pass

    def IntersectWith(self, IntersectObject, option):
        """ IntersectWith(self: IAcadBlockReference, IntersectObject: object, option: AcExtendOption) -> object """
        pass

    def Mirror(self, Point1, Point2):
        """ Mirror(self: IAcadBlockReference, Point1: object, Point2: object) -> object """
        pass

    def Mirror3D(self, Point1, Point2, point3):
        """ Mirror3D(self: IAcadBlockReference, Point1: object, Point2: object, point3: object) -> object """
        pass

    def Move(self, FromPoint, ToPoint):
        """ Move(self: IAcadBlockReference, FromPoint: object, ToPoint: object) """
        pass

    def ResetBlock(self):
        """ ResetBlock(self: IAcadBlockReference) """
        pass

    def Rotate(self, BasePoint, RotationAngle):
        """ Rotate(self: IAcadBlockReference, BasePoint: object, RotationAngle: float) """
        pass

    def Rotate3D(self, Point1, Point2, RotationAngle):
        """ Rotate3D(self: IAcadBlockReference, Point1: object, Point2: object, RotationAngle: float) """
        pass

    def ScaleEntity(self, BasePoint, ScaleFactor):
        """ ScaleEntity(self: IAcadBlockReference, BasePoint: object, ScaleFactor: float) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: IAcadBlockReference, XDataType: object, XDataValue: object) """
        pass

    def TransformBy(self, TransformationMatrix):
        """ TransformBy(self: IAcadBlockReference, TransformationMatrix: object) """
        pass

    def Update(self):
        """ Update(self: IAcadBlockReference) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IAcadBlockReference) -> object

"""

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: IAcadBlockReference) -> ACAD_COLOR

Set: color(self: IAcadBlockReference) = value
"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: IAcadBlockReference) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: IAcadBlockReference) -> object

"""

    EffectiveName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EffectiveName(self: IAcadBlockReference) -> str

"""

    EntityName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityName(self: IAcadBlockReference) -> str

"""

    EntityTransparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityTransparency(self: IAcadBlockReference) -> str

Set: EntityTransparency(self: IAcadBlockReference) = value
"""

    EntityType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityType(self: IAcadBlockReference) -> int

"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: IAcadBlockReference) -> str

"""

    HasAttributes = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasAttributes(self: IAcadBlockReference) -> bool

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: IAcadBlockReference) -> bool

"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: IAcadBlockReference) -> AcadHyperlinks

"""

    InsertionPoint = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: InsertionPoint(self: IAcadBlockReference) -> object

Set: InsertionPoint(self: IAcadBlockReference) = value
"""

    InsUnits = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: InsUnits(self: IAcadBlockReference) -> str

"""

    InsUnitsFactor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: InsUnitsFactor(self: IAcadBlockReference) -> float

"""

    IsDynamicBlock = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IsDynamicBlock(self: IAcadBlockReference) -> bool

"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layer(self: IAcadBlockReference) -> str

Set: Layer(self: IAcadBlockReference) = value
"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: IAcadBlockReference) -> str

Set: Linetype(self: IAcadBlockReference) = value
"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeScale(self: IAcadBlockReference) -> float

Set: LinetypeScale(self: IAcadBlockReference) = value
"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: IAcadBlockReference) -> ACAD_LWEIGHT

Set: Lineweight(self: IAcadBlockReference) = value
"""

    Material = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Material(self: IAcadBlockReference) -> str

Set: Material(self: IAcadBlockReference) = value
"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: IAcadBlockReference) -> str

Set: Name(self: IAcadBlockReference) = value
"""

    Normal = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Normal(self: IAcadBlockReference) -> object

Set: Normal(self: IAcadBlockReference) = value
"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: IAcadBlockReference) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: IAcadBlockReference) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: IAcadBlockReference) -> Int64

"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: IAcadBlockReference) -> str

Set: PlotStyleName(self: IAcadBlockReference) = value
"""

    Rotation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Rotation(self: IAcadBlockReference) -> float

Set: Rotation(self: IAcadBlockReference) = value
"""

    TrueColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TrueColor(self: IAcadBlockReference) -> AcadAcCmColor

Set: TrueColor(self: IAcadBlockReference) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: IAcadBlockReference) -> bool

Set: Visible(self: IAcadBlockReference) = value
"""

    XEffectiveScaleFactor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: XEffectiveScaleFactor(self: IAcadBlockReference) -> float

Set: XEffectiveScaleFactor(self: IAcadBlockReference) = value
"""

    XScaleFactor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: XScaleFactor(self: IAcadBlockReference) -> float

Set: XScaleFactor(self: IAcadBlockReference) = value
"""

    YEffectiveScaleFactor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: YEffectiveScaleFactor(self: IAcadBlockReference) -> float

Set: YEffectiveScaleFactor(self: IAcadBlockReference) = value
"""

    YScaleFactor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: YScaleFactor(self: IAcadBlockReference) -> float

Set: YScaleFactor(self: IAcadBlockReference) = value
"""

    ZEffectiveScaleFactor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ZEffectiveScaleFactor(self: IAcadBlockReference) -> float

Set: ZEffectiveScaleFactor(self: IAcadBlockReference) = value
"""

    ZScaleFactor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ZScaleFactor(self: IAcadBlockReference) -> float

Set: ZScaleFactor(self: IAcadBlockReference) = value
"""



class AcadBlockReference(IAcadBlockReference, IAcadEntity, IAcadObject, IAcadObjectEvents_Event):
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class AcadBlockReferenceClass(__ComObject):
    # no doc
    def add_Modified(self, A_1):
        """ add_Modified(self: AcadBlockReferenceClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def ArrayPolar(self, NumberOfObjects, AngleToFill, CenterPoint):
        """ ArrayPolar(self: AcadBlockReferenceClass, NumberOfObjects: int, AngleToFill: float, CenterPoint: object) -> object """
        pass

    def ArrayRectangular(self, NumberOfRows, NumberOfColumns, NumberOfLevels, DistBetweenRows, DistBetweenCols, DistBetweenLevels):
        """ ArrayRectangular(self: AcadBlockReferenceClass, NumberOfRows: int, NumberOfColumns: int, NumberOfLevels: int, DistBetweenRows: float, DistBetweenCols: float, DistBetweenLevels: float) -> object """
        pass

    def ConvertToAnonymousBlock(self):
        """ ConvertToAnonymousBlock(self: AcadBlockReferenceClass) """
        pass

    def ConvertToStaticBlock(self, newBlockName):
        """ ConvertToStaticBlock(self: AcadBlockReferenceClass, newBlockName: str) """
        pass

    def Copy(self):
        """ Copy(self: AcadBlockReferenceClass) -> object """
        pass

    def Delete(self):
        """ Delete(self: AcadBlockReferenceClass) """
        pass

    def Erase(self):
        """ Erase(self: AcadBlockReferenceClass) """
        pass

    def Explode(self):
        """ Explode(self: AcadBlockReferenceClass) -> object """
        pass

    def GetAttributes(self):
        """ GetAttributes(self: AcadBlockReferenceClass) -> object """
        pass

    def GetBoundingBox(self, MinPoint, MaxPoint):
        """ GetBoundingBox(self: AcadBlockReferenceClass) -> (object, object) """
        pass

    def GetConstantAttributes(self):
        """ GetConstantAttributes(self: AcadBlockReferenceClass) -> object """
        pass

    def GetDynamicBlockProperties(self):
        """ GetDynamicBlockProperties(self: AcadBlockReferenceClass) -> object """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: AcadBlockReferenceClass) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: AcadBlockReferenceClass, AppName: str) -> (object, object) """
        pass

    def Highlight(self, HighlightFlag):
        """ Highlight(self: AcadBlockReferenceClass, HighlightFlag: bool) """
        pass

    def IntersectWith(self, IntersectObject, option):
        """ IntersectWith(self: AcadBlockReferenceClass, IntersectObject: object, option: AcExtendOption) -> object """
        pass

    def Mirror(self, Point1, Point2):
        """ Mirror(self: AcadBlockReferenceClass, Point1: object, Point2: object) -> object """
        pass

    def Mirror3D(self, Point1, Point2, point3):
        """ Mirror3D(self: AcadBlockReferenceClass, Point1: object, Point2: object, point3: object) -> object """
        pass

    def Move(self, FromPoint, ToPoint):
        """ Move(self: AcadBlockReferenceClass, FromPoint: object, ToPoint: object) """
        pass

    def remove_Modified(self, A_1):
        """ remove_Modified(self: AcadBlockReferenceClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def ResetBlock(self):
        """ ResetBlock(self: AcadBlockReferenceClass) """
        pass

    def Rotate(self, BasePoint, RotationAngle):
        """ Rotate(self: AcadBlockReferenceClass, BasePoint: object, RotationAngle: float) """
        pass

    def Rotate3D(self, Point1, Point2, RotationAngle):
        """ Rotate3D(self: AcadBlockReferenceClass, Point1: object, Point2: object, RotationAngle: float) """
        pass

    def ScaleEntity(self, BasePoint, ScaleFactor):
        """ ScaleEntity(self: AcadBlockReferenceClass, BasePoint: object, ScaleFactor: float) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: AcadBlockReferenceClass, XDataType: object, XDataValue: object) """
        pass

    def TransformBy(self, TransformationMatrix):
        """ TransformBy(self: AcadBlockReferenceClass, TransformationMatrix: object) """
        pass

    def Update(self):
        """ Update(self: AcadBlockReferenceClass) """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: AcadBlockReferenceClass) -> object

"""

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: AcadBlockReferenceClass) -> ACAD_COLOR

Set: color(self: AcadBlockReferenceClass) = value
"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: AcadBlockReferenceClass) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: AcadBlockReferenceClass) -> object

"""

    EffectiveName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EffectiveName(self: AcadBlockReferenceClass) -> str

"""

    EntityName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityName(self: AcadBlockReferenceClass) -> str

"""

    EntityTransparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityTransparency(self: AcadBlockReferenceClass) -> str

Set: EntityTransparency(self: AcadBlockReferenceClass) = value
"""

    EntityType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityType(self: AcadBlockReferenceClass) -> int

"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: AcadBlockReferenceClass) -> str

"""

    HasAttributes = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasAttributes(self: AcadBlockReferenceClass) -> bool

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: AcadBlockReferenceClass) -> bool

"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: AcadBlockReferenceClass) -> AcadHyperlinks

"""

    InsertionPoint = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: InsertionPoint(self: AcadBlockReferenceClass) -> object

Set: InsertionPoint(self: AcadBlockReferenceClass) = value
"""

    InsUnits = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: InsUnits(self: AcadBlockReferenceClass) -> str

"""

    InsUnitsFactor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: InsUnitsFactor(self: AcadBlockReferenceClass) -> float

"""

    IsDynamicBlock = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IsDynamicBlock(self: AcadBlockReferenceClass) -> bool

"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layer(self: AcadBlockReferenceClass) -> str

Set: Layer(self: AcadBlockReferenceClass) = value
"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: AcadBlockReferenceClass) -> str

Set: Linetype(self: AcadBlockReferenceClass) = value
"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeScale(self: AcadBlockReferenceClass) -> float

Set: LinetypeScale(self: AcadBlockReferenceClass) = value
"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: AcadBlockReferenceClass) -> ACAD_LWEIGHT

Set: Lineweight(self: AcadBlockReferenceClass) = value
"""

    Material = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Material(self: AcadBlockReferenceClass) -> str

Set: Material(self: AcadBlockReferenceClass) = value
"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: AcadBlockReferenceClass) -> str

Set: Name(self: AcadBlockReferenceClass) = value
"""

    Normal = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Normal(self: AcadBlockReferenceClass) -> object

Set: Normal(self: AcadBlockReferenceClass) = value
"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: AcadBlockReferenceClass) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: AcadBlockReferenceClass) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: AcadBlockReferenceClass) -> Int64

"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: AcadBlockReferenceClass) -> str

Set: PlotStyleName(self: AcadBlockReferenceClass) = value
"""

    Rotation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Rotation(self: AcadBlockReferenceClass) -> float

Set: Rotation(self: AcadBlockReferenceClass) = value
"""

    TrueColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TrueColor(self: AcadBlockReferenceClass) -> AcadAcCmColor

Set: TrueColor(self: AcadBlockReferenceClass) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: AcadBlockReferenceClass) -> bool

Set: Visible(self: AcadBlockReferenceClass) = value
"""

    XEffectiveScaleFactor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: XEffectiveScaleFactor(self: AcadBlockReferenceClass) -> float

Set: XEffectiveScaleFactor(self: AcadBlockReferenceClass) = value
"""

    XScaleFactor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: XScaleFactor(self: AcadBlockReferenceClass) -> float

Set: XScaleFactor(self: AcadBlockReferenceClass) = value
"""

    YEffectiveScaleFactor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: YEffectiveScaleFactor(self: AcadBlockReferenceClass) -> float

Set: YEffectiveScaleFactor(self: AcadBlockReferenceClass) = value
"""

    YScaleFactor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: YScaleFactor(self: AcadBlockReferenceClass) -> float

Set: YScaleFactor(self: AcadBlockReferenceClass) = value
"""

    ZEffectiveScaleFactor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ZEffectiveScaleFactor(self: AcadBlockReferenceClass) -> float

Set: ZEffectiveScaleFactor(self: AcadBlockReferenceClass) = value
"""

    ZScaleFactor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ZScaleFactor(self: AcadBlockReferenceClass) -> float

Set: ZScaleFactor(self: AcadBlockReferenceClass) = value
"""


    Modified = None


class IAcadBlocks(IAcadObject, IEnumerable):
    # no doc
    def Add(self, InsertionPoint, Name):
        """ Add(self: IAcadBlocks, InsertionPoint: object, Name: str) -> AcadBlock """
        pass

    def Delete(self):
        """ Delete(self: IAcadBlocks) """
        pass

    def Erase(self):
        """ Erase(self: IAcadBlocks) """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: IAcadBlocks) -> IEnumerator """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: IAcadBlocks) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: IAcadBlocks, AppName: str) -> (object, object) """
        pass

    def Item(self, Index):
        """ Item(self: IAcadBlocks, Index: object) -> AcadBlock """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: IAcadBlocks, XDataType: object, XDataValue: object) """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerable) -> object """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IAcadBlocks) -> object

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: IAcadBlocks) -> int

"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: IAcadBlocks) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: IAcadBlocks) -> object

"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: IAcadBlocks) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: IAcadBlocks) -> bool

"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: IAcadBlocks) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: IAcadBlocks) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: IAcadBlocks) -> Int64

"""



class AcadBlocks(IAcadBlocks, IAcadObject, IEnumerable, IAcadObjectEvents_Event):
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerable) -> object """
        pass


class AcadBlocksClass(__ComObject):
    # no doc
    def Add(self, InsertionPoint, Name):
        """ Add(self: AcadBlocksClass, InsertionPoint: object, Name: str) -> AcadBlock """
        pass

    def add_Modified(self, A_1):
        """ add_Modified(self: AcadBlocksClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def Delete(self):
        """ Delete(self: AcadBlocksClass) """
        pass

    def Erase(self):
        """ Erase(self: AcadBlocksClass) """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: AcadBlocksClass) -> IEnumerator """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: AcadBlocksClass) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: AcadBlocksClass, AppName: str) -> (object, object) """
        pass

    def Item(self, Index):
        """ Item(self: AcadBlocksClass, Index: object) -> AcadBlock """
        pass

    def remove_Modified(self, A_1):
        """ remove_Modified(self: AcadBlocksClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: AcadBlocksClass, XDataType: object, XDataValue: object) """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerable) -> object """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: AcadBlocksClass) -> object

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: AcadBlocksClass) -> int

"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: AcadBlocksClass) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: AcadBlocksClass) -> object

"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: AcadBlocksClass) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: AcadBlocksClass) -> bool

"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: AcadBlocksClass) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: AcadBlocksClass) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: AcadBlocksClass) -> Int64

"""


    Modified = None


class IAcadCircle(IAcadEntity, IAcadObject):
    # no doc
    def ArrayPolar(self, NumberOfObjects, AngleToFill, CenterPoint):
        """ ArrayPolar(self: IAcadCircle, NumberOfObjects: int, AngleToFill: float, CenterPoint: object) -> object """
        pass

    def ArrayRectangular(self, NumberOfRows, NumberOfColumns, NumberOfLevels, DistBetweenRows, DistBetweenCols, DistBetweenLevels):
        """ ArrayRectangular(self: IAcadCircle, NumberOfRows: int, NumberOfColumns: int, NumberOfLevels: int, DistBetweenRows: float, DistBetweenCols: float, DistBetweenLevels: float) -> object """
        pass

    def Copy(self):
        """ Copy(self: IAcadCircle) -> object """
        pass

    def Delete(self):
        """ Delete(self: IAcadCircle) """
        pass

    def Erase(self):
        """ Erase(self: IAcadCircle) """
        pass

    def GetBoundingBox(self, MinPoint, MaxPoint):
        """ GetBoundingBox(self: IAcadCircle) -> (object, object) """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: IAcadCircle) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: IAcadCircle, AppName: str) -> (object, object) """
        pass

    def Highlight(self, HighlightFlag):
        """ Highlight(self: IAcadCircle, HighlightFlag: bool) """
        pass

    def IntersectWith(self, IntersectObject, option):
        """ IntersectWith(self: IAcadCircle, IntersectObject: object, option: AcExtendOption) -> object """
        pass

    def Mirror(self, Point1, Point2):
        """ Mirror(self: IAcadCircle, Point1: object, Point2: object) -> object """
        pass

    def Mirror3D(self, Point1, Point2, point3):
        """ Mirror3D(self: IAcadCircle, Point1: object, Point2: object, point3: object) -> object """
        pass

    def Move(self, FromPoint, ToPoint):
        """ Move(self: IAcadCircle, FromPoint: object, ToPoint: object) """
        pass

    def Offset(self, Distance):
        """ Offset(self: IAcadCircle, Distance: float) -> object """
        pass

    def Rotate(self, BasePoint, RotationAngle):
        """ Rotate(self: IAcadCircle, BasePoint: object, RotationAngle: float) """
        pass

    def Rotate3D(self, Point1, Point2, RotationAngle):
        """ Rotate3D(self: IAcadCircle, Point1: object, Point2: object, RotationAngle: float) """
        pass

    def ScaleEntity(self, BasePoint, ScaleFactor):
        """ ScaleEntity(self: IAcadCircle, BasePoint: object, ScaleFactor: float) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: IAcadCircle, XDataType: object, XDataValue: object) """
        pass

    def TransformBy(self, TransformationMatrix):
        """ TransformBy(self: IAcadCircle, TransformationMatrix: object) """
        pass

    def Update(self):
        """ Update(self: IAcadCircle) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IAcadCircle) -> object

"""

    Area = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Area(self: IAcadCircle) -> float

Set: Area(self: IAcadCircle) = value
"""

    Center = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Center(self: IAcadCircle) -> object

Set: Center(self: IAcadCircle) = value
"""

    Circumference = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Circumference(self: IAcadCircle) -> float

Set: Circumference(self: IAcadCircle) = value
"""

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: IAcadCircle) -> ACAD_COLOR

Set: color(self: IAcadCircle) = value
"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: IAcadCircle) -> AcadDatabase

"""

    Diameter = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Diameter(self: IAcadCircle) -> float

Set: Diameter(self: IAcadCircle) = value
"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: IAcadCircle) -> object

"""

    EntityName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityName(self: IAcadCircle) -> str

"""

    EntityTransparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityTransparency(self: IAcadCircle) -> str

Set: EntityTransparency(self: IAcadCircle) = value
"""

    EntityType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityType(self: IAcadCircle) -> int

"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: IAcadCircle) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: IAcadCircle) -> bool

"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: IAcadCircle) -> AcadHyperlinks

"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layer(self: IAcadCircle) -> str

Set: Layer(self: IAcadCircle) = value
"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: IAcadCircle) -> str

Set: Linetype(self: IAcadCircle) = value
"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeScale(self: IAcadCircle) -> float

Set: LinetypeScale(self: IAcadCircle) = value
"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: IAcadCircle) -> ACAD_LWEIGHT

Set: Lineweight(self: IAcadCircle) = value
"""

    Material = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Material(self: IAcadCircle) -> str

Set: Material(self: IAcadCircle) = value
"""

    Normal = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Normal(self: IAcadCircle) -> object

Set: Normal(self: IAcadCircle) = value
"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: IAcadCircle) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: IAcadCircle) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: IAcadCircle) -> Int64

"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: IAcadCircle) -> str

Set: PlotStyleName(self: IAcadCircle) = value
"""

    Radius = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Radius(self: IAcadCircle) -> float

Set: Radius(self: IAcadCircle) = value
"""

    Thickness = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Thickness(self: IAcadCircle) -> float

Set: Thickness(self: IAcadCircle) = value
"""

    TrueColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TrueColor(self: IAcadCircle) -> AcadAcCmColor

Set: TrueColor(self: IAcadCircle) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: IAcadCircle) -> bool

Set: Visible(self: IAcadCircle) = value
"""



class AcadCircle(IAcadCircle, IAcadEntity, IAcadObject, IAcadObjectEvents_Event):
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class AcadCircleClass(__ComObject):
    # no doc
    def add_Modified(self, A_1):
        """ add_Modified(self: AcadCircleClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def ArrayPolar(self, NumberOfObjects, AngleToFill, CenterPoint):
        """ ArrayPolar(self: AcadCircleClass, NumberOfObjects: int, AngleToFill: float, CenterPoint: object) -> object """
        pass

    def ArrayRectangular(self, NumberOfRows, NumberOfColumns, NumberOfLevels, DistBetweenRows, DistBetweenCols, DistBetweenLevels):
        """ ArrayRectangular(self: AcadCircleClass, NumberOfRows: int, NumberOfColumns: int, NumberOfLevels: int, DistBetweenRows: float, DistBetweenCols: float, DistBetweenLevels: float) -> object """
        pass

    def Copy(self):
        """ Copy(self: AcadCircleClass) -> object """
        pass

    def Delete(self):
        """ Delete(self: AcadCircleClass) """
        pass

    def Erase(self):
        """ Erase(self: AcadCircleClass) """
        pass

    def GetBoundingBox(self, MinPoint, MaxPoint):
        """ GetBoundingBox(self: AcadCircleClass) -> (object, object) """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: AcadCircleClass) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: AcadCircleClass, AppName: str) -> (object, object) """
        pass

    def Highlight(self, HighlightFlag):
        """ Highlight(self: AcadCircleClass, HighlightFlag: bool) """
        pass

    def IntersectWith(self, IntersectObject, option):
        """ IntersectWith(self: AcadCircleClass, IntersectObject: object, option: AcExtendOption) -> object """
        pass

    def Mirror(self, Point1, Point2):
        """ Mirror(self: AcadCircleClass, Point1: object, Point2: object) -> object """
        pass

    def Mirror3D(self, Point1, Point2, point3):
        """ Mirror3D(self: AcadCircleClass, Point1: object, Point2: object, point3: object) -> object """
        pass

    def Move(self, FromPoint, ToPoint):
        """ Move(self: AcadCircleClass, FromPoint: object, ToPoint: object) """
        pass

    def Offset(self, Distance):
        """ Offset(self: AcadCircleClass, Distance: float) -> object """
        pass

    def remove_Modified(self, A_1):
        """ remove_Modified(self: AcadCircleClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def Rotate(self, BasePoint, RotationAngle):
        """ Rotate(self: AcadCircleClass, BasePoint: object, RotationAngle: float) """
        pass

    def Rotate3D(self, Point1, Point2, RotationAngle):
        """ Rotate3D(self: AcadCircleClass, Point1: object, Point2: object, RotationAngle: float) """
        pass

    def ScaleEntity(self, BasePoint, ScaleFactor):
        """ ScaleEntity(self: AcadCircleClass, BasePoint: object, ScaleFactor: float) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: AcadCircleClass, XDataType: object, XDataValue: object) """
        pass

    def TransformBy(self, TransformationMatrix):
        """ TransformBy(self: AcadCircleClass, TransformationMatrix: object) """
        pass

    def Update(self):
        """ Update(self: AcadCircleClass) """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: AcadCircleClass) -> object

"""

    Area = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Area(self: AcadCircleClass) -> float

Set: Area(self: AcadCircleClass) = value
"""

    Center = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Center(self: AcadCircleClass) -> object

Set: Center(self: AcadCircleClass) = value
"""

    Circumference = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Circumference(self: AcadCircleClass) -> float

Set: Circumference(self: AcadCircleClass) = value
"""

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: AcadCircleClass) -> ACAD_COLOR

Set: color(self: AcadCircleClass) = value
"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: AcadCircleClass) -> AcadDatabase

"""

    Diameter = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Diameter(self: AcadCircleClass) -> float

Set: Diameter(self: AcadCircleClass) = value
"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: AcadCircleClass) -> object

"""

    EntityName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityName(self: AcadCircleClass) -> str

"""

    EntityTransparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityTransparency(self: AcadCircleClass) -> str

Set: EntityTransparency(self: AcadCircleClass) = value
"""

    EntityType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityType(self: AcadCircleClass) -> int

"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: AcadCircleClass) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: AcadCircleClass) -> bool

"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: AcadCircleClass) -> AcadHyperlinks

"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layer(self: AcadCircleClass) -> str

Set: Layer(self: AcadCircleClass) = value
"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: AcadCircleClass) -> str

Set: Linetype(self: AcadCircleClass) = value
"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeScale(self: AcadCircleClass) -> float

Set: LinetypeScale(self: AcadCircleClass) = value
"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: AcadCircleClass) -> ACAD_LWEIGHT

Set: Lineweight(self: AcadCircleClass) = value
"""

    Material = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Material(self: AcadCircleClass) -> str

Set: Material(self: AcadCircleClass) = value
"""

    Normal = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Normal(self: AcadCircleClass) -> object

Set: Normal(self: AcadCircleClass) = value
"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: AcadCircleClass) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: AcadCircleClass) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: AcadCircleClass) -> Int64

"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: AcadCircleClass) -> str

Set: PlotStyleName(self: AcadCircleClass) = value
"""

    Radius = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Radius(self: AcadCircleClass) -> float

Set: Radius(self: AcadCircleClass) = value
"""

    Thickness = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Thickness(self: AcadCircleClass) -> float

Set: Thickness(self: AcadCircleClass) = value
"""

    TrueColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TrueColor(self: AcadCircleClass) -> AcadAcCmColor

Set: TrueColor(self: AcadCircleClass) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: AcadCircleClass) -> bool

Set: Visible(self: AcadCircleClass) = value
"""


    Modified = None


class IAcadExternalReference(IAcadBlockReference, IAcadEntity, IAcadObject):
    # no doc
    def ArrayPolar(self, NumberOfObjects, AngleToFill, CenterPoint):
        """ ArrayPolar(self: IAcadExternalReference, NumberOfObjects: int, AngleToFill: float, CenterPoint: object) -> object """
        pass

    def ArrayRectangular(self, NumberOfRows, NumberOfColumns, NumberOfLevels, DistBetweenRows, DistBetweenCols, DistBetweenLevels):
        """ ArrayRectangular(self: IAcadExternalReference, NumberOfRows: int, NumberOfColumns: int, NumberOfLevels: int, DistBetweenRows: float, DistBetweenCols: float, DistBetweenLevels: float) -> object """
        pass

    def ConvertToAnonymousBlock(self):
        """ ConvertToAnonymousBlock(self: IAcadExternalReference) """
        pass

    def ConvertToStaticBlock(self, newBlockName):
        """ ConvertToStaticBlock(self: IAcadExternalReference, newBlockName: str) """
        pass

    def Copy(self):
        """ Copy(self: IAcadExternalReference) -> object """
        pass

    def Delete(self):
        """ Delete(self: IAcadExternalReference) """
        pass

    def Erase(self):
        """ Erase(self: IAcadExternalReference) """
        pass

    def Explode(self):
        """ Explode(self: IAcadExternalReference) -> object """
        pass

    def GetAttributes(self):
        """ GetAttributes(self: IAcadExternalReference) -> object """
        pass

    def GetBoundingBox(self, MinPoint, MaxPoint):
        """ GetBoundingBox(self: IAcadExternalReference) -> (object, object) """
        pass

    def GetConstantAttributes(self):
        """ GetConstantAttributes(self: IAcadExternalReference) -> object """
        pass

    def GetDynamicBlockProperties(self):
        """ GetDynamicBlockProperties(self: IAcadExternalReference) -> object """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: IAcadExternalReference) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: IAcadExternalReference, AppName: str) -> (object, object) """
        pass

    def Highlight(self, HighlightFlag):
        """ Highlight(self: IAcadExternalReference, HighlightFlag: bool) """
        pass

    def IntersectWith(self, IntersectObject, option):
        """ IntersectWith(self: IAcadExternalReference, IntersectObject: object, option: AcExtendOption) -> object """
        pass

    def Mirror(self, Point1, Point2):
        """ Mirror(self: IAcadExternalReference, Point1: object, Point2: object) -> object """
        pass

    def Mirror3D(self, Point1, Point2, point3):
        """ Mirror3D(self: IAcadExternalReference, Point1: object, Point2: object, point3: object) -> object """
        pass

    def Move(self, FromPoint, ToPoint):
        """ Move(self: IAcadExternalReference, FromPoint: object, ToPoint: object) """
        pass

    def ResetBlock(self):
        """ ResetBlock(self: IAcadExternalReference) """
        pass

    def Rotate(self, BasePoint, RotationAngle):
        """ Rotate(self: IAcadExternalReference, BasePoint: object, RotationAngle: float) """
        pass

    def Rotate3D(self, Point1, Point2, RotationAngle):
        """ Rotate3D(self: IAcadExternalReference, Point1: object, Point2: object, RotationAngle: float) """
        pass

    def ScaleEntity(self, BasePoint, ScaleFactor):
        """ ScaleEntity(self: IAcadExternalReference, BasePoint: object, ScaleFactor: float) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: IAcadExternalReference, XDataType: object, XDataValue: object) """
        pass

    def TransformBy(self, TransformationMatrix):
        """ TransformBy(self: IAcadExternalReference, TransformationMatrix: object) """
        pass

    def Update(self):
        """ Update(self: IAcadExternalReference) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IAcadExternalReference) -> object

"""

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: IAcadExternalReference) -> ACAD_COLOR

Set: color(self: IAcadExternalReference) = value
"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: IAcadExternalReference) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: IAcadExternalReference) -> object

"""

    EffectiveName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EffectiveName(self: IAcadExternalReference) -> str

"""

    EntityName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityName(self: IAcadExternalReference) -> str

"""

    EntityTransparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityTransparency(self: IAcadExternalReference) -> str

Set: EntityTransparency(self: IAcadExternalReference) = value
"""

    EntityType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityType(self: IAcadExternalReference) -> int

"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: IAcadExternalReference) -> str

"""

    HasAttributes = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasAttributes(self: IAcadExternalReference) -> bool

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: IAcadExternalReference) -> bool

"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: IAcadExternalReference) -> AcadHyperlinks

"""

    InsertionPoint = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: InsertionPoint(self: IAcadExternalReference) -> object

Set: InsertionPoint(self: IAcadExternalReference) = value
"""

    InsUnits = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: InsUnits(self: IAcadExternalReference) -> str

"""

    InsUnitsFactor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: InsUnitsFactor(self: IAcadExternalReference) -> float

"""

    IsDynamicBlock = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IsDynamicBlock(self: IAcadExternalReference) -> bool

"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layer(self: IAcadExternalReference) -> str

Set: Layer(self: IAcadExternalReference) = value
"""

    LayerPropertyOverrides = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LayerPropertyOverrides(self: IAcadExternalReference) -> bool

"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: IAcadExternalReference) -> str

Set: Linetype(self: IAcadExternalReference) = value
"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeScale(self: IAcadExternalReference) -> float

Set: LinetypeScale(self: IAcadExternalReference) = value
"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: IAcadExternalReference) -> ACAD_LWEIGHT

Set: Lineweight(self: IAcadExternalReference) = value
"""

    Material = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Material(self: IAcadExternalReference) -> str

Set: Material(self: IAcadExternalReference) = value
"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: IAcadExternalReference) -> str

Set: Name(self: IAcadExternalReference) = value
"""

    Normal = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Normal(self: IAcadExternalReference) -> object

Set: Normal(self: IAcadExternalReference) = value
"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: IAcadExternalReference) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: IAcadExternalReference) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: IAcadExternalReference) -> Int64

"""

    Path = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Path(self: IAcadExternalReference) -> str

Set: Path(self: IAcadExternalReference) = value
"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: IAcadExternalReference) -> str

Set: PlotStyleName(self: IAcadExternalReference) = value
"""

    Rotation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Rotation(self: IAcadExternalReference) -> float

Set: Rotation(self: IAcadExternalReference) = value
"""

    TrueColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TrueColor(self: IAcadExternalReference) -> AcadAcCmColor

Set: TrueColor(self: IAcadExternalReference) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: IAcadExternalReference) -> bool

Set: Visible(self: IAcadExternalReference) = value
"""

    XEffectiveScaleFactor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: XEffectiveScaleFactor(self: IAcadExternalReference) -> float

Set: XEffectiveScaleFactor(self: IAcadExternalReference) = value
"""

    XScaleFactor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: XScaleFactor(self: IAcadExternalReference) -> float

Set: XScaleFactor(self: IAcadExternalReference) = value
"""

    YEffectiveScaleFactor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: YEffectiveScaleFactor(self: IAcadExternalReference) -> float

Set: YEffectiveScaleFactor(self: IAcadExternalReference) = value
"""

    YScaleFactor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: YScaleFactor(self: IAcadExternalReference) -> float

Set: YScaleFactor(self: IAcadExternalReference) = value
"""

    ZEffectiveScaleFactor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ZEffectiveScaleFactor(self: IAcadExternalReference) -> float

Set: ZEffectiveScaleFactor(self: IAcadExternalReference) = value
"""

    ZScaleFactor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ZScaleFactor(self: IAcadExternalReference) -> float

Set: ZScaleFactor(self: IAcadExternalReference) = value
"""



class IAcadComparedReference(IAcadExternalReference, IAcadBlockReference, IAcadEntity, IAcadObject):
    # no doc
    def ArrayPolar(self, NumberOfObjects, AngleToFill, CenterPoint):
        """ ArrayPolar(self: IAcadComparedReference, NumberOfObjects: int, AngleToFill: float, CenterPoint: object) -> object """
        pass

    def ArrayRectangular(self, NumberOfRows, NumberOfColumns, NumberOfLevels, DistBetweenRows, DistBetweenCols, DistBetweenLevels):
        """ ArrayRectangular(self: IAcadComparedReference, NumberOfRows: int, NumberOfColumns: int, NumberOfLevels: int, DistBetweenRows: float, DistBetweenCols: float, DistBetweenLevels: float) -> object """
        pass

    def ConvertToAnonymousBlock(self):
        """ ConvertToAnonymousBlock(self: IAcadComparedReference) """
        pass

    def ConvertToStaticBlock(self, newBlockName):
        """ ConvertToStaticBlock(self: IAcadComparedReference, newBlockName: str) """
        pass

    def Copy(self):
        """ Copy(self: IAcadComparedReference) -> object """
        pass

    def Delete(self):
        """ Delete(self: IAcadComparedReference) """
        pass

    def Erase(self):
        """ Erase(self: IAcadComparedReference) """
        pass

    def Explode(self):
        """ Explode(self: IAcadComparedReference) -> object """
        pass

    def GetAttributes(self):
        """ GetAttributes(self: IAcadComparedReference) -> object """
        pass

    def GetBoundingBox(self, MinPoint, MaxPoint):
        """ GetBoundingBox(self: IAcadComparedReference) -> (object, object) """
        pass

    def GetConstantAttributes(self):
        """ GetConstantAttributes(self: IAcadComparedReference) -> object """
        pass

    def GetDynamicBlockProperties(self):
        """ GetDynamicBlockProperties(self: IAcadComparedReference) -> object """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: IAcadComparedReference) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: IAcadComparedReference, AppName: str) -> (object, object) """
        pass

    def Highlight(self, HighlightFlag):
        """ Highlight(self: IAcadComparedReference, HighlightFlag: bool) """
        pass

    def IntersectWith(self, IntersectObject, option):
        """ IntersectWith(self: IAcadComparedReference, IntersectObject: object, option: AcExtendOption) -> object """
        pass

    def Mirror(self, Point1, Point2):
        """ Mirror(self: IAcadComparedReference, Point1: object, Point2: object) -> object """
        pass

    def Mirror3D(self, Point1, Point2, point3):
        """ Mirror3D(self: IAcadComparedReference, Point1: object, Point2: object, point3: object) -> object """
        pass

    def Move(self, FromPoint, ToPoint):
        """ Move(self: IAcadComparedReference, FromPoint: object, ToPoint: object) """
        pass

    def ResetBlock(self):
        """ ResetBlock(self: IAcadComparedReference) """
        pass

    def Rotate(self, BasePoint, RotationAngle):
        """ Rotate(self: IAcadComparedReference, BasePoint: object, RotationAngle: float) """
        pass

    def Rotate3D(self, Point1, Point2, RotationAngle):
        """ Rotate3D(self: IAcadComparedReference, Point1: object, Point2: object, RotationAngle: float) """
        pass

    def ScaleEntity(self, BasePoint, ScaleFactor):
        """ ScaleEntity(self: IAcadComparedReference, BasePoint: object, ScaleFactor: float) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: IAcadComparedReference, XDataType: object, XDataValue: object) """
        pass

    def TransformBy(self, TransformationMatrix):
        """ TransformBy(self: IAcadComparedReference, TransformationMatrix: object) """
        pass

    def Update(self):
        """ Update(self: IAcadComparedReference) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IAcadComparedReference) -> object

"""

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: IAcadComparedReference) -> ACAD_COLOR

Set: color(self: IAcadComparedReference) = value
"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: IAcadComparedReference) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: IAcadComparedReference) -> object

"""

    EffectiveName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EffectiveName(self: IAcadComparedReference) -> str

"""

    EntityName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityName(self: IAcadComparedReference) -> str

"""

    EntityTransparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityTransparency(self: IAcadComparedReference) -> str

Set: EntityTransparency(self: IAcadComparedReference) = value
"""

    EntityType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityType(self: IAcadComparedReference) -> int

"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: IAcadComparedReference) -> str

"""

    HasAttributes = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasAttributes(self: IAcadComparedReference) -> bool

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: IAcadComparedReference) -> bool

"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: IAcadComparedReference) -> AcadHyperlinks

"""

    InsertionPoint = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: InsertionPoint(self: IAcadComparedReference) -> object

Set: InsertionPoint(self: IAcadComparedReference) = value
"""

    InsUnits = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: InsUnits(self: IAcadComparedReference) -> str

"""

    InsUnitsFactor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: InsUnitsFactor(self: IAcadComparedReference) -> float

"""

    IsDynamicBlock = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IsDynamicBlock(self: IAcadComparedReference) -> bool

"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layer(self: IAcadComparedReference) -> str

Set: Layer(self: IAcadComparedReference) = value
"""

    LayerPropertyOverrides = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LayerPropertyOverrides(self: IAcadComparedReference) -> bool

"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: IAcadComparedReference) -> str

Set: Linetype(self: IAcadComparedReference) = value
"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeScale(self: IAcadComparedReference) -> float

Set: LinetypeScale(self: IAcadComparedReference) = value
"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: IAcadComparedReference) -> ACAD_LWEIGHT

Set: Lineweight(self: IAcadComparedReference) = value
"""

    Material = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Material(self: IAcadComparedReference) -> str

Set: Material(self: IAcadComparedReference) = value
"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: IAcadComparedReference) -> str

Set: Name(self: IAcadComparedReference) = value
"""

    Normal = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Normal(self: IAcadComparedReference) -> object

Set: Normal(self: IAcadComparedReference) = value
"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: IAcadComparedReference) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: IAcadComparedReference) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: IAcadComparedReference) -> Int64

"""

    Path = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Path(self: IAcadComparedReference) -> str

Set: Path(self: IAcadComparedReference) = value
"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: IAcadComparedReference) -> str

Set: PlotStyleName(self: IAcadComparedReference) = value
"""

    Rotation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Rotation(self: IAcadComparedReference) -> float

Set: Rotation(self: IAcadComparedReference) = value
"""

    TrueColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TrueColor(self: IAcadComparedReference) -> AcadAcCmColor

Set: TrueColor(self: IAcadComparedReference) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: IAcadComparedReference) -> bool

Set: Visible(self: IAcadComparedReference) = value
"""

    XEffectiveScaleFactor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: XEffectiveScaleFactor(self: IAcadComparedReference) -> float

Set: XEffectiveScaleFactor(self: IAcadComparedReference) = value
"""

    XScaleFactor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: XScaleFactor(self: IAcadComparedReference) -> float

Set: XScaleFactor(self: IAcadComparedReference) = value
"""

    YEffectiveScaleFactor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: YEffectiveScaleFactor(self: IAcadComparedReference) -> float

Set: YEffectiveScaleFactor(self: IAcadComparedReference) = value
"""

    YScaleFactor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: YScaleFactor(self: IAcadComparedReference) -> float

Set: YScaleFactor(self: IAcadComparedReference) = value
"""

    ZEffectiveScaleFactor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ZEffectiveScaleFactor(self: IAcadComparedReference) -> float

Set: ZEffectiveScaleFactor(self: IAcadComparedReference) = value
"""

    ZScaleFactor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ZScaleFactor(self: IAcadComparedReference) -> float

Set: ZScaleFactor(self: IAcadComparedReference) = value
"""



class AcadComparedReference(IAcadComparedReference, IAcadExternalReference, IAcadBlockReference, IAcadEntity, IAcadObject, IAcadObjectEvents_Event):
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class AcadComparedReferenceClass(__ComObject):
    # no doc
    def add_Modified(self, A_1):
        """ add_Modified(self: AcadComparedReferenceClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def ArrayPolar(self, NumberOfObjects, AngleToFill, CenterPoint):
        """ ArrayPolar(self: AcadComparedReferenceClass, NumberOfObjects: int, AngleToFill: float, CenterPoint: object) -> object """
        pass

    def ArrayRectangular(self, NumberOfRows, NumberOfColumns, NumberOfLevels, DistBetweenRows, DistBetweenCols, DistBetweenLevels):
        """ ArrayRectangular(self: AcadComparedReferenceClass, NumberOfRows: int, NumberOfColumns: int, NumberOfLevels: int, DistBetweenRows: float, DistBetweenCols: float, DistBetweenLevels: float) -> object """
        pass

    def ConvertToAnonymousBlock(self):
        """ ConvertToAnonymousBlock(self: AcadComparedReferenceClass) """
        pass

    def ConvertToStaticBlock(self, newBlockName):
        """ ConvertToStaticBlock(self: AcadComparedReferenceClass, newBlockName: str) """
        pass

    def Copy(self):
        """ Copy(self: AcadComparedReferenceClass) -> object """
        pass

    def Delete(self):
        """ Delete(self: AcadComparedReferenceClass) """
        pass

    def Erase(self):
        """ Erase(self: AcadComparedReferenceClass) """
        pass

    def Explode(self):
        """ Explode(self: AcadComparedReferenceClass) -> object """
        pass

    def GetAttributes(self):
        """ GetAttributes(self: AcadComparedReferenceClass) -> object """
        pass

    def GetBoundingBox(self, MinPoint, MaxPoint):
        """ GetBoundingBox(self: AcadComparedReferenceClass) -> (object, object) """
        pass

    def GetConstantAttributes(self):
        """ GetConstantAttributes(self: AcadComparedReferenceClass) -> object """
        pass

    def GetDynamicBlockProperties(self):
        """ GetDynamicBlockProperties(self: AcadComparedReferenceClass) -> object """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: AcadComparedReferenceClass) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: AcadComparedReferenceClass, AppName: str) -> (object, object) """
        pass

    def Highlight(self, HighlightFlag):
        """ Highlight(self: AcadComparedReferenceClass, HighlightFlag: bool) """
        pass

    def IntersectWith(self, IntersectObject, option):
        """ IntersectWith(self: AcadComparedReferenceClass, IntersectObject: object, option: AcExtendOption) -> object """
        pass

    def Mirror(self, Point1, Point2):
        """ Mirror(self: AcadComparedReferenceClass, Point1: object, Point2: object) -> object """
        pass

    def Mirror3D(self, Point1, Point2, point3):
        """ Mirror3D(self: AcadComparedReferenceClass, Point1: object, Point2: object, point3: object) -> object """
        pass

    def Move(self, FromPoint, ToPoint):
        """ Move(self: AcadComparedReferenceClass, FromPoint: object, ToPoint: object) """
        pass

    def remove_Modified(self, A_1):
        """ remove_Modified(self: AcadComparedReferenceClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def ResetBlock(self):
        """ ResetBlock(self: AcadComparedReferenceClass) """
        pass

    def Rotate(self, BasePoint, RotationAngle):
        """ Rotate(self: AcadComparedReferenceClass, BasePoint: object, RotationAngle: float) """
        pass

    def Rotate3D(self, Point1, Point2, RotationAngle):
        """ Rotate3D(self: AcadComparedReferenceClass, Point1: object, Point2: object, RotationAngle: float) """
        pass

    def ScaleEntity(self, BasePoint, ScaleFactor):
        """ ScaleEntity(self: AcadComparedReferenceClass, BasePoint: object, ScaleFactor: float) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: AcadComparedReferenceClass, XDataType: object, XDataValue: object) """
        pass

    def TransformBy(self, TransformationMatrix):
        """ TransformBy(self: AcadComparedReferenceClass, TransformationMatrix: object) """
        pass

    def Update(self):
        """ Update(self: AcadComparedReferenceClass) """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: AcadComparedReferenceClass) -> object

"""

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: AcadComparedReferenceClass) -> ACAD_COLOR

Set: color(self: AcadComparedReferenceClass) = value
"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: AcadComparedReferenceClass) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: AcadComparedReferenceClass) -> object

"""

    EffectiveName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EffectiveName(self: AcadComparedReferenceClass) -> str

"""

    EntityName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityName(self: AcadComparedReferenceClass) -> str

"""

    EntityTransparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityTransparency(self: AcadComparedReferenceClass) -> str

Set: EntityTransparency(self: AcadComparedReferenceClass) = value
"""

    EntityType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityType(self: AcadComparedReferenceClass) -> int

"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: AcadComparedReferenceClass) -> str

"""

    HasAttributes = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasAttributes(self: AcadComparedReferenceClass) -> bool

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: AcadComparedReferenceClass) -> bool

"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: AcadComparedReferenceClass) -> AcadHyperlinks

"""

    InsertionPoint = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: InsertionPoint(self: AcadComparedReferenceClass) -> object

Set: InsertionPoint(self: AcadComparedReferenceClass) = value
"""

    InsUnits = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: InsUnits(self: AcadComparedReferenceClass) -> str

"""

    InsUnitsFactor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: InsUnitsFactor(self: AcadComparedReferenceClass) -> float

"""

    IsDynamicBlock = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IsDynamicBlock(self: AcadComparedReferenceClass) -> bool

"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layer(self: AcadComparedReferenceClass) -> str

Set: Layer(self: AcadComparedReferenceClass) = value
"""

    LayerPropertyOverrides = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LayerPropertyOverrides(self: AcadComparedReferenceClass) -> bool

"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: AcadComparedReferenceClass) -> str

Set: Linetype(self: AcadComparedReferenceClass) = value
"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeScale(self: AcadComparedReferenceClass) -> float

Set: LinetypeScale(self: AcadComparedReferenceClass) = value
"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: AcadComparedReferenceClass) -> ACAD_LWEIGHT

Set: Lineweight(self: AcadComparedReferenceClass) = value
"""

    Material = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Material(self: AcadComparedReferenceClass) -> str

Set: Material(self: AcadComparedReferenceClass) = value
"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: AcadComparedReferenceClass) -> str

Set: Name(self: AcadComparedReferenceClass) = value
"""

    Normal = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Normal(self: AcadComparedReferenceClass) -> object

Set: Normal(self: AcadComparedReferenceClass) = value
"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: AcadComparedReferenceClass) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: AcadComparedReferenceClass) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: AcadComparedReferenceClass) -> Int64

"""

    Path = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Path(self: AcadComparedReferenceClass) -> str

Set: Path(self: AcadComparedReferenceClass) = value
"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: AcadComparedReferenceClass) -> str

Set: PlotStyleName(self: AcadComparedReferenceClass) = value
"""

    Rotation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Rotation(self: AcadComparedReferenceClass) -> float

Set: Rotation(self: AcadComparedReferenceClass) = value
"""

    TrueColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TrueColor(self: AcadComparedReferenceClass) -> AcadAcCmColor

Set: TrueColor(self: AcadComparedReferenceClass) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: AcadComparedReferenceClass) -> bool

Set: Visible(self: AcadComparedReferenceClass) = value
"""

    XEffectiveScaleFactor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: XEffectiveScaleFactor(self: AcadComparedReferenceClass) -> float

Set: XEffectiveScaleFactor(self: AcadComparedReferenceClass) = value
"""

    XScaleFactor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: XScaleFactor(self: AcadComparedReferenceClass) -> float

Set: XScaleFactor(self: AcadComparedReferenceClass) = value
"""

    YEffectiveScaleFactor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: YEffectiveScaleFactor(self: AcadComparedReferenceClass) -> float

Set: YEffectiveScaleFactor(self: AcadComparedReferenceClass) = value
"""

    YScaleFactor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: YScaleFactor(self: AcadComparedReferenceClass) -> float

Set: YScaleFactor(self: AcadComparedReferenceClass) = value
"""

    ZEffectiveScaleFactor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ZEffectiveScaleFactor(self: AcadComparedReferenceClass) -> float

Set: ZEffectiveScaleFactor(self: AcadComparedReferenceClass) = value
"""

    ZScaleFactor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ZScaleFactor(self: AcadComparedReferenceClass) -> float

Set: ZScaleFactor(self: AcadComparedReferenceClass) = value
"""


    Modified = None


class IAcadDatabase:
    # no doc
    def CopyObjects(self, Objects, Owner, IdPairs):
        """ CopyObjects(self: IAcadDatabase, Objects: object, Owner: object) -> (object, object) """
        pass

    def HandleToObject(self, Handle):
        """ HandleToObject(self: IAcadDatabase, Handle: str) -> object """
        pass

    def ObjectIdToObject(self, ObjectID):
        """ ObjectIdToObject(self: IAcadDatabase, ObjectID: Int64) -> object """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Blocks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Blocks(self: IAcadDatabase) -> AcadBlocks

"""

    Dictionaries = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Dictionaries(self: IAcadDatabase) -> AcadDictionaries

"""

    DimStyles = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimStyles(self: IAcadDatabase) -> AcadDimStyles

"""

    ElevationModelSpace = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ElevationModelSpace(self: IAcadDatabase) -> float

Set: ElevationModelSpace(self: IAcadDatabase) = value
"""

    ElevationPaperSpace = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ElevationPaperSpace(self: IAcadDatabase) -> float

Set: ElevationPaperSpace(self: IAcadDatabase) = value
"""

    Groups = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Groups(self: IAcadDatabase) -> AcadGroups

"""

    Layers = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layers(self: IAcadDatabase) -> AcadLayers

"""

    Layouts = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layouts(self: IAcadDatabase) -> AcadLayouts

"""

    Limits = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Limits(self: IAcadDatabase) -> object

Set: Limits(self: IAcadDatabase) = value
"""

    Linetypes = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetypes(self: IAcadDatabase) -> AcadLineTypes

"""

    Materials = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Materials(self: IAcadDatabase) -> AcadMaterials

"""

    ModelSpace = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ModelSpace(self: IAcadDatabase) -> AcadModelSpace

"""

    PaperSpace = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PaperSpace(self: IAcadDatabase) -> AcadPaperSpace

"""

    PlotConfigurations = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotConfigurations(self: IAcadDatabase) -> AcadPlotConfigurations

"""

    Preferences = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Preferences(self: IAcadDatabase) -> AcadDatabasePreferences

"""

    RegisteredApplications = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RegisteredApplications(self: IAcadDatabase) -> AcadRegisteredApplications

"""

    SectionManager = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SectionManager(self: IAcadDatabase) -> AcadSectionManager

"""

    SummaryInfo = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SummaryInfo(self: IAcadDatabase) -> AcadSummaryInfo

"""

    TextStyles = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextStyles(self: IAcadDatabase) -> AcadTextStyles

"""

    UserCoordinateSystems = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: UserCoordinateSystems(self: IAcadDatabase) -> AcadUCSs

"""

    Viewports = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Viewports(self: IAcadDatabase) -> AcadViewports

"""

    Views = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Views(self: IAcadDatabase) -> AcadViews

"""



class AcadDatabase(IAcadDatabase):
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class AcadDatabaseClass(__ComObject):
    """ AcadDatabaseClass() """
    def CopyObjects(self, Objects, Owner, IdPairs):
        """ CopyObjects(self: AcadDatabaseClass, Objects: object, Owner: object) -> (object, object) """
        pass

    def HandleToObject(self, Handle):
        """ HandleToObject(self: AcadDatabaseClass, Handle: str) -> object """
        pass

    def ObjectIdToObject(self, ObjectID):
        """ ObjectIdToObject(self: AcadDatabaseClass, ObjectID: Int64) -> object """
        pass

    Blocks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Blocks(self: AcadDatabaseClass) -> AcadBlocks

"""

    Dictionaries = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Dictionaries(self: AcadDatabaseClass) -> AcadDictionaries

"""

    DimStyles = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimStyles(self: AcadDatabaseClass) -> AcadDimStyles

"""

    ElevationModelSpace = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ElevationModelSpace(self: AcadDatabaseClass) -> float

Set: ElevationModelSpace(self: AcadDatabaseClass) = value
"""

    ElevationPaperSpace = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ElevationPaperSpace(self: AcadDatabaseClass) -> float

Set: ElevationPaperSpace(self: AcadDatabaseClass) = value
"""

    Groups = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Groups(self: AcadDatabaseClass) -> AcadGroups

"""

    Layers = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layers(self: AcadDatabaseClass) -> AcadLayers

"""

    Layouts = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layouts(self: AcadDatabaseClass) -> AcadLayouts

"""

    Limits = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Limits(self: AcadDatabaseClass) -> object

Set: Limits(self: AcadDatabaseClass) = value
"""

    Linetypes = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetypes(self: AcadDatabaseClass) -> AcadLineTypes

"""

    Materials = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Materials(self: AcadDatabaseClass) -> AcadMaterials

"""

    ModelSpace = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ModelSpace(self: AcadDatabaseClass) -> AcadModelSpace

"""

    PaperSpace = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PaperSpace(self: AcadDatabaseClass) -> AcadPaperSpace

"""

    PlotConfigurations = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotConfigurations(self: AcadDatabaseClass) -> AcadPlotConfigurations

"""

    Preferences = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Preferences(self: AcadDatabaseClass) -> AcadDatabasePreferences

"""

    RegisteredApplications = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RegisteredApplications(self: AcadDatabaseClass) -> AcadRegisteredApplications

"""

    SectionManager = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SectionManager(self: AcadDatabaseClass) -> AcadSectionManager

"""

    SummaryInfo = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SummaryInfo(self: AcadDatabaseClass) -> AcadSummaryInfo

"""

    TextStyles = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextStyles(self: AcadDatabaseClass) -> AcadTextStyles

"""

    UserCoordinateSystems = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: UserCoordinateSystems(self: AcadDatabaseClass) -> AcadUCSs

"""

    Viewports = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Viewports(self: AcadDatabaseClass) -> AcadViewports

"""

    Views = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Views(self: AcadDatabaseClass) -> AcadViews

"""



class IAcadDatabasePreferences:
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    AllowLongSymbolNames = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AllowLongSymbolNames(self: IAcadDatabasePreferences) -> bool

Set: AllowLongSymbolNames(self: IAcadDatabasePreferences) = value
"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IAcadDatabasePreferences) -> object

"""

    ContourLinesPerSurface = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ContourLinesPerSurface(self: IAcadDatabasePreferences) -> int

Set: ContourLinesPerSurface(self: IAcadDatabasePreferences) = value
"""

    DisplaySilhouette = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DisplaySilhouette(self: IAcadDatabasePreferences) -> bool

Set: DisplaySilhouette(self: IAcadDatabasePreferences) = value
"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: IAcadDatabasePreferences) -> AcLineWeight

Set: Lineweight(self: IAcadDatabasePreferences) = value
"""

    LineWeightDisplay = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LineWeightDisplay(self: IAcadDatabasePreferences) -> bool

Set: LineWeightDisplay(self: IAcadDatabasePreferences) = value
"""

    MaxActiveViewports = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MaxActiveViewports(self: IAcadDatabasePreferences) -> int

Set: MaxActiveViewports(self: IAcadDatabasePreferences) = value
"""

    ObjectSortByPlotting = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectSortByPlotting(self: IAcadDatabasePreferences) -> bool

Set: ObjectSortByPlotting(self: IAcadDatabasePreferences) = value
"""

    ObjectSortByPSOutput = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectSortByPSOutput(self: IAcadDatabasePreferences) -> bool

Set: ObjectSortByPSOutput(self: IAcadDatabasePreferences) = value
"""

    ObjectSortByRedraws = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectSortByRedraws(self: IAcadDatabasePreferences) -> bool

Set: ObjectSortByRedraws(self: IAcadDatabasePreferences) = value
"""

    ObjectSortByRegens = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectSortByRegens(self: IAcadDatabasePreferences) -> bool

Set: ObjectSortByRegens(self: IAcadDatabasePreferences) = value
"""

    ObjectSortBySelection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectSortBySelection(self: IAcadDatabasePreferences) -> bool

Set: ObjectSortBySelection(self: IAcadDatabasePreferences) = value
"""

    ObjectSortBySnap = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectSortBySnap(self: IAcadDatabasePreferences) -> bool

Set: ObjectSortBySnap(self: IAcadDatabasePreferences) = value
"""

    OLELaunch = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OLELaunch(self: IAcadDatabasePreferences) -> bool

Set: OLELaunch(self: IAcadDatabasePreferences) = value
"""

    RenderSmoothness = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RenderSmoothness(self: IAcadDatabasePreferences) -> float

Set: RenderSmoothness(self: IAcadDatabasePreferences) = value
"""

    SegmentPerPolyline = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SegmentPerPolyline(self: IAcadDatabasePreferences) -> int

Set: SegmentPerPolyline(self: IAcadDatabasePreferences) = value
"""

    SolidFill = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SolidFill(self: IAcadDatabasePreferences) -> bool

Set: SolidFill(self: IAcadDatabasePreferences) = value
"""

    TextFrameDisplay = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextFrameDisplay(self: IAcadDatabasePreferences) -> bool

Set: TextFrameDisplay(self: IAcadDatabasePreferences) = value
"""

    XRefEdit = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: XRefEdit(self: IAcadDatabasePreferences) -> bool

Set: XRefEdit(self: IAcadDatabasePreferences) = value
"""

    XRefLayerVisibility = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: XRefLayerVisibility(self: IAcadDatabasePreferences) -> bool

Set: XRefLayerVisibility(self: IAcadDatabasePreferences) = value
"""



class AcadDatabasePreferences(IAcadDatabasePreferences):
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class AcadDatabasePreferencesClass(__ComObject):
    # no doc
    AllowLongSymbolNames = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AllowLongSymbolNames(self: AcadDatabasePreferencesClass) -> bool

Set: AllowLongSymbolNames(self: AcadDatabasePreferencesClass) = value
"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: AcadDatabasePreferencesClass) -> object

"""

    ContourLinesPerSurface = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ContourLinesPerSurface(self: AcadDatabasePreferencesClass) -> int

Set: ContourLinesPerSurface(self: AcadDatabasePreferencesClass) = value
"""

    DisplaySilhouette = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DisplaySilhouette(self: AcadDatabasePreferencesClass) -> bool

Set: DisplaySilhouette(self: AcadDatabasePreferencesClass) = value
"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: AcadDatabasePreferencesClass) -> AcLineWeight

Set: Lineweight(self: AcadDatabasePreferencesClass) = value
"""

    LineWeightDisplay = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LineWeightDisplay(self: AcadDatabasePreferencesClass) -> bool

Set: LineWeightDisplay(self: AcadDatabasePreferencesClass) = value
"""

    MaxActiveViewports = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MaxActiveViewports(self: AcadDatabasePreferencesClass) -> int

Set: MaxActiveViewports(self: AcadDatabasePreferencesClass) = value
"""

    ObjectSortByPlotting = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectSortByPlotting(self: AcadDatabasePreferencesClass) -> bool

Set: ObjectSortByPlotting(self: AcadDatabasePreferencesClass) = value
"""

    ObjectSortByPSOutput = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectSortByPSOutput(self: AcadDatabasePreferencesClass) -> bool

Set: ObjectSortByPSOutput(self: AcadDatabasePreferencesClass) = value
"""

    ObjectSortByRedraws = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectSortByRedraws(self: AcadDatabasePreferencesClass) -> bool

Set: ObjectSortByRedraws(self: AcadDatabasePreferencesClass) = value
"""

    ObjectSortByRegens = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectSortByRegens(self: AcadDatabasePreferencesClass) -> bool

Set: ObjectSortByRegens(self: AcadDatabasePreferencesClass) = value
"""

    ObjectSortBySelection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectSortBySelection(self: AcadDatabasePreferencesClass) -> bool

Set: ObjectSortBySelection(self: AcadDatabasePreferencesClass) = value
"""

    ObjectSortBySnap = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectSortBySnap(self: AcadDatabasePreferencesClass) -> bool

Set: ObjectSortBySnap(self: AcadDatabasePreferencesClass) = value
"""

    OLELaunch = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OLELaunch(self: AcadDatabasePreferencesClass) -> bool

Set: OLELaunch(self: AcadDatabasePreferencesClass) = value
"""

    RenderSmoothness = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RenderSmoothness(self: AcadDatabasePreferencesClass) -> float

Set: RenderSmoothness(self: AcadDatabasePreferencesClass) = value
"""

    SegmentPerPolyline = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SegmentPerPolyline(self: AcadDatabasePreferencesClass) -> int

Set: SegmentPerPolyline(self: AcadDatabasePreferencesClass) = value
"""

    SolidFill = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SolidFill(self: AcadDatabasePreferencesClass) -> bool

Set: SolidFill(self: AcadDatabasePreferencesClass) = value
"""

    TextFrameDisplay = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextFrameDisplay(self: AcadDatabasePreferencesClass) -> bool

Set: TextFrameDisplay(self: AcadDatabasePreferencesClass) = value
"""

    XRefEdit = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: XRefEdit(self: AcadDatabasePreferencesClass) -> bool

Set: XRefEdit(self: AcadDatabasePreferencesClass) = value
"""

    XRefLayerVisibility = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: XRefLayerVisibility(self: AcadDatabasePreferencesClass) -> bool

Set: XRefLayerVisibility(self: AcadDatabasePreferencesClass) = value
"""



class IAcadUnderlay(IAcadEntity, IAcadObject):
    # no doc
    def ArrayPolar(self, NumberOfObjects, AngleToFill, CenterPoint):
        """ ArrayPolar(self: IAcadUnderlay, NumberOfObjects: int, AngleToFill: float, CenterPoint: object) -> object """
        pass

    def ArrayRectangular(self, NumberOfRows, NumberOfColumns, NumberOfLevels, DistBetweenRows, DistBetweenCols, DistBetweenLevels):
        """ ArrayRectangular(self: IAcadUnderlay, NumberOfRows: int, NumberOfColumns: int, NumberOfLevels: int, DistBetweenRows: float, DistBetweenCols: float, DistBetweenLevels: float) -> object """
        pass

    def ClipBoundary(self, boundry):
        """ ClipBoundary(self: IAcadUnderlay, boundry: object) """
        pass

    def Copy(self):
        """ Copy(self: IAcadUnderlay) -> object """
        pass

    def Delete(self):
        """ Delete(self: IAcadUnderlay) """
        pass

    def Erase(self):
        """ Erase(self: IAcadUnderlay) """
        pass

    def GetBoundingBox(self, MinPoint, MaxPoint):
        """ GetBoundingBox(self: IAcadUnderlay) -> (object, object) """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: IAcadUnderlay) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: IAcadUnderlay, AppName: str) -> (object, object) """
        pass

    def Highlight(self, HighlightFlag):
        """ Highlight(self: IAcadUnderlay, HighlightFlag: bool) """
        pass

    def IntersectWith(self, IntersectObject, option):
        """ IntersectWith(self: IAcadUnderlay, IntersectObject: object, option: AcExtendOption) -> object """
        pass

    def Mirror(self, Point1, Point2):
        """ Mirror(self: IAcadUnderlay, Point1: object, Point2: object) -> object """
        pass

    def Mirror3D(self, Point1, Point2, point3):
        """ Mirror3D(self: IAcadUnderlay, Point1: object, Point2: object, point3: object) -> object """
        pass

    def Move(self, FromPoint, ToPoint):
        """ Move(self: IAcadUnderlay, FromPoint: object, ToPoint: object) """
        pass

    def Rotate(self, BasePoint, RotationAngle):
        """ Rotate(self: IAcadUnderlay, BasePoint: object, RotationAngle: float) """
        pass

    def Rotate3D(self, Point1, Point2, RotationAngle):
        """ Rotate3D(self: IAcadUnderlay, Point1: object, Point2: object, RotationAngle: float) """
        pass

    def ScaleEntity(self, BasePoint, ScaleFactor):
        """ ScaleEntity(self: IAcadUnderlay, BasePoint: object, ScaleFactor: float) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: IAcadUnderlay, XDataType: object, XDataValue: object) """
        pass

    def TransformBy(self, TransformationMatrix):
        """ TransformBy(self: IAcadUnderlay, TransformationMatrix: object) """
        pass

    def Update(self):
        """ Update(self: IAcadUnderlay) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    AdjustForBackground = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AdjustForBackground(self: IAcadUnderlay) -> bool

Set: AdjustForBackground(self: IAcadUnderlay) = value
"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IAcadUnderlay) -> object

"""

    ClippingEnabled = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ClippingEnabled(self: IAcadUnderlay) -> bool

Set: ClippingEnabled(self: IAcadUnderlay) = value
"""

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: IAcadUnderlay) -> ACAD_COLOR

Set: color(self: IAcadUnderlay) = value
"""

    Contrast = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Contrast(self: IAcadUnderlay) -> int

Set: Contrast(self: IAcadUnderlay) = value
"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: IAcadUnderlay) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: IAcadUnderlay) -> object

"""

    EntityName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityName(self: IAcadUnderlay) -> str

"""

    EntityTransparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityTransparency(self: IAcadUnderlay) -> str

Set: EntityTransparency(self: IAcadUnderlay) = value
"""

    EntityType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityType(self: IAcadUnderlay) -> int

"""

    Fade = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Fade(self: IAcadUnderlay) -> int

Set: Fade(self: IAcadUnderlay) = value
"""

    File = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: File(self: IAcadUnderlay) -> str

Set: File(self: IAcadUnderlay) = value
"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: IAcadUnderlay) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: IAcadUnderlay) -> bool

"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: IAcadUnderlay) -> float

Set: Height(self: IAcadUnderlay) = value
"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: IAcadUnderlay) -> AcadHyperlinks

"""

    ItemName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ItemName(self: IAcadUnderlay) -> str

Set: ItemName(self: IAcadUnderlay) = value
"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layer(self: IAcadUnderlay) -> str

Set: Layer(self: IAcadUnderlay) = value
"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: IAcadUnderlay) -> str

Set: Linetype(self: IAcadUnderlay) = value
"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeScale(self: IAcadUnderlay) -> float

Set: LinetypeScale(self: IAcadUnderlay) = value
"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: IAcadUnderlay) -> ACAD_LWEIGHT

Set: Lineweight(self: IAcadUnderlay) = value
"""

    Material = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Material(self: IAcadUnderlay) -> str

Set: Material(self: IAcadUnderlay) = value
"""

    Monochrome = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Monochrome(self: IAcadUnderlay) -> bool

Set: Monochrome(self: IAcadUnderlay) = value
"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: IAcadUnderlay) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: IAcadUnderlay) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: IAcadUnderlay) -> Int64

"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: IAcadUnderlay) -> str

Set: PlotStyleName(self: IAcadUnderlay) = value
"""

    Position = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Position(self: IAcadUnderlay) -> object

Set: Position(self: IAcadUnderlay) = value
"""

    Rotation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Rotation(self: IAcadUnderlay) -> float

Set: Rotation(self: IAcadUnderlay) = value
"""

    ScaleFactor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ScaleFactor(self: IAcadUnderlay) -> float

Set: ScaleFactor(self: IAcadUnderlay) = value
"""

    TrueColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TrueColor(self: IAcadUnderlay) -> AcadAcCmColor

Set: TrueColor(self: IAcadUnderlay) = value
"""

    UnderlayLayerOverrideApplied = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: UnderlayLayerOverrideApplied(self: IAcadUnderlay) -> AcUnderlayLayerOverrideType

Set: UnderlayLayerOverrideApplied(self: IAcadUnderlay) = value
"""

    UnderlayName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: UnderlayName(self: IAcadUnderlay) -> str

Set: UnderlayName(self: IAcadUnderlay) = value
"""

    UnderlayVisibility = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: UnderlayVisibility(self: IAcadUnderlay) -> bool

Set: UnderlayVisibility(self: IAcadUnderlay) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: IAcadUnderlay) -> bool

Set: Visible(self: IAcadUnderlay) = value
"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: IAcadUnderlay) -> float

Set: Width(self: IAcadUnderlay) = value
"""



class AcadDgnUnderlay(IAcadUnderlay, IAcadEntity, IAcadObject, IAcadObjectEvents_Event):
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class AcadDgnUnderlayClass(__ComObject):
    # no doc
    def add_Modified(self, A_1):
        """ add_Modified(self: AcadDgnUnderlayClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def ArrayPolar(self, NumberOfObjects, AngleToFill, CenterPoint):
        """ ArrayPolar(self: AcadDgnUnderlayClass, NumberOfObjects: int, AngleToFill: float, CenterPoint: object) -> object """
        pass

    def ArrayRectangular(self, NumberOfRows, NumberOfColumns, NumberOfLevels, DistBetweenRows, DistBetweenCols, DistBetweenLevels):
        """ ArrayRectangular(self: AcadDgnUnderlayClass, NumberOfRows: int, NumberOfColumns: int, NumberOfLevels: int, DistBetweenRows: float, DistBetweenCols: float, DistBetweenLevels: float) -> object """
        pass

    def ClipBoundary(self, boundry):
        """ ClipBoundary(self: AcadDgnUnderlayClass, boundry: object) """
        pass

    def Copy(self):
        """ Copy(self: AcadDgnUnderlayClass) -> object """
        pass

    def Delete(self):
        """ Delete(self: AcadDgnUnderlayClass) """
        pass

    def Erase(self):
        """ Erase(self: AcadDgnUnderlayClass) """
        pass

    def GetBoundingBox(self, MinPoint, MaxPoint):
        """ GetBoundingBox(self: AcadDgnUnderlayClass) -> (object, object) """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: AcadDgnUnderlayClass) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: AcadDgnUnderlayClass, AppName: str) -> (object, object) """
        pass

    def Highlight(self, HighlightFlag):
        """ Highlight(self: AcadDgnUnderlayClass, HighlightFlag: bool) """
        pass

    def IntersectWith(self, IntersectObject, option):
        """ IntersectWith(self: AcadDgnUnderlayClass, IntersectObject: object, option: AcExtendOption) -> object """
        pass

    def Mirror(self, Point1, Point2):
        """ Mirror(self: AcadDgnUnderlayClass, Point1: object, Point2: object) -> object """
        pass

    def Mirror3D(self, Point1, Point2, point3):
        """ Mirror3D(self: AcadDgnUnderlayClass, Point1: object, Point2: object, point3: object) -> object """
        pass

    def Move(self, FromPoint, ToPoint):
        """ Move(self: AcadDgnUnderlayClass, FromPoint: object, ToPoint: object) """
        pass

    def remove_Modified(self, A_1):
        """ remove_Modified(self: AcadDgnUnderlayClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def Rotate(self, BasePoint, RotationAngle):
        """ Rotate(self: AcadDgnUnderlayClass, BasePoint: object, RotationAngle: float) """
        pass

    def Rotate3D(self, Point1, Point2, RotationAngle):
        """ Rotate3D(self: AcadDgnUnderlayClass, Point1: object, Point2: object, RotationAngle: float) """
        pass

    def ScaleEntity(self, BasePoint, ScaleFactor):
        """ ScaleEntity(self: AcadDgnUnderlayClass, BasePoint: object, ScaleFactor: float) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: AcadDgnUnderlayClass, XDataType: object, XDataValue: object) """
        pass

    def TransformBy(self, TransformationMatrix):
        """ TransformBy(self: AcadDgnUnderlayClass, TransformationMatrix: object) """
        pass

    def Update(self):
        """ Update(self: AcadDgnUnderlayClass) """
        pass

    AdjustForBackground = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AdjustForBackground(self: AcadDgnUnderlayClass) -> bool

Set: AdjustForBackground(self: AcadDgnUnderlayClass) = value
"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: AcadDgnUnderlayClass) -> object

"""

    ClippingEnabled = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ClippingEnabled(self: AcadDgnUnderlayClass) -> bool

Set: ClippingEnabled(self: AcadDgnUnderlayClass) = value
"""

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: AcadDgnUnderlayClass) -> ACAD_COLOR

Set: color(self: AcadDgnUnderlayClass) = value
"""

    Contrast = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Contrast(self: AcadDgnUnderlayClass) -> int

Set: Contrast(self: AcadDgnUnderlayClass) = value
"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: AcadDgnUnderlayClass) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: AcadDgnUnderlayClass) -> object

"""

    EntityName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityName(self: AcadDgnUnderlayClass) -> str

"""

    EntityTransparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityTransparency(self: AcadDgnUnderlayClass) -> str

Set: EntityTransparency(self: AcadDgnUnderlayClass) = value
"""

    EntityType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityType(self: AcadDgnUnderlayClass) -> int

"""

    Fade = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Fade(self: AcadDgnUnderlayClass) -> int

Set: Fade(self: AcadDgnUnderlayClass) = value
"""

    File = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: File(self: AcadDgnUnderlayClass) -> str

Set: File(self: AcadDgnUnderlayClass) = value
"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: AcadDgnUnderlayClass) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: AcadDgnUnderlayClass) -> bool

"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: AcadDgnUnderlayClass) -> float

Set: Height(self: AcadDgnUnderlayClass) = value
"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: AcadDgnUnderlayClass) -> AcadHyperlinks

"""

    ItemName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ItemName(self: AcadDgnUnderlayClass) -> str

Set: ItemName(self: AcadDgnUnderlayClass) = value
"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layer(self: AcadDgnUnderlayClass) -> str

Set: Layer(self: AcadDgnUnderlayClass) = value
"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: AcadDgnUnderlayClass) -> str

Set: Linetype(self: AcadDgnUnderlayClass) = value
"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeScale(self: AcadDgnUnderlayClass) -> float

Set: LinetypeScale(self: AcadDgnUnderlayClass) = value
"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: AcadDgnUnderlayClass) -> ACAD_LWEIGHT

Set: Lineweight(self: AcadDgnUnderlayClass) = value
"""

    Material = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Material(self: AcadDgnUnderlayClass) -> str

Set: Material(self: AcadDgnUnderlayClass) = value
"""

    Monochrome = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Monochrome(self: AcadDgnUnderlayClass) -> bool

Set: Monochrome(self: AcadDgnUnderlayClass) = value
"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: AcadDgnUnderlayClass) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: AcadDgnUnderlayClass) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: AcadDgnUnderlayClass) -> Int64

"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: AcadDgnUnderlayClass) -> str

Set: PlotStyleName(self: AcadDgnUnderlayClass) = value
"""

    Position = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Position(self: AcadDgnUnderlayClass) -> object

Set: Position(self: AcadDgnUnderlayClass) = value
"""

    Rotation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Rotation(self: AcadDgnUnderlayClass) -> float

Set: Rotation(self: AcadDgnUnderlayClass) = value
"""

    ScaleFactor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ScaleFactor(self: AcadDgnUnderlayClass) -> float

Set: ScaleFactor(self: AcadDgnUnderlayClass) = value
"""

    TrueColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TrueColor(self: AcadDgnUnderlayClass) -> AcadAcCmColor

Set: TrueColor(self: AcadDgnUnderlayClass) = value
"""

    UnderlayLayerOverrideApplied = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: UnderlayLayerOverrideApplied(self: AcadDgnUnderlayClass) -> AcUnderlayLayerOverrideType

Set: UnderlayLayerOverrideApplied(self: AcadDgnUnderlayClass) = value
"""

    UnderlayName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: UnderlayName(self: AcadDgnUnderlayClass) -> str

Set: UnderlayName(self: AcadDgnUnderlayClass) = value
"""

    UnderlayVisibility = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: UnderlayVisibility(self: AcadDgnUnderlayClass) -> bool

Set: UnderlayVisibility(self: AcadDgnUnderlayClass) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: AcadDgnUnderlayClass) -> bool

Set: Visible(self: AcadDgnUnderlayClass) = value
"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: AcadDgnUnderlayClass) -> float

Set: Width(self: AcadDgnUnderlayClass) = value
"""


    Modified = None


class IAcadDictionaries(IAcadObject, IEnumerable):
    # no doc
    def Add(self, Name):
        """ Add(self: IAcadDictionaries, Name: str) -> AcadDictionary """
        pass

    def Delete(self):
        """ Delete(self: IAcadDictionaries) """
        pass

    def Erase(self):
        """ Erase(self: IAcadDictionaries) """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: IAcadDictionaries) -> IEnumerator """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: IAcadDictionaries) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: IAcadDictionaries, AppName: str) -> (object, object) """
        pass

    def Item(self, Index):
        """ Item(self: IAcadDictionaries, Index: object) -> AcadObject """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: IAcadDictionaries, XDataType: object, XDataValue: object) """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerable) -> object """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IAcadDictionaries) -> object

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: IAcadDictionaries) -> int

"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: IAcadDictionaries) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: IAcadDictionaries) -> object

"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: IAcadDictionaries) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: IAcadDictionaries) -> bool

"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: IAcadDictionaries) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: IAcadDictionaries) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: IAcadDictionaries) -> Int64

"""



class AcadDictionaries(IAcadDictionaries, IAcadObject, IEnumerable, IAcadObjectEvents_Event):
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerable) -> object """
        pass


class AcadDictionariesClass(__ComObject):
    # no doc
    def Add(self, Name):
        """ Add(self: AcadDictionariesClass, Name: str) -> AcadDictionary """
        pass

    def add_Modified(self, A_1):
        """ add_Modified(self: AcadDictionariesClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def Delete(self):
        """ Delete(self: AcadDictionariesClass) """
        pass

    def Erase(self):
        """ Erase(self: AcadDictionariesClass) """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: AcadDictionariesClass) -> IEnumerator """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: AcadDictionariesClass) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: AcadDictionariesClass, AppName: str) -> (object, object) """
        pass

    def Item(self, Index):
        """ Item(self: AcadDictionariesClass, Index: object) -> AcadObject """
        pass

    def remove_Modified(self, A_1):
        """ remove_Modified(self: AcadDictionariesClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: AcadDictionariesClass, XDataType: object, XDataValue: object) """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerable) -> object """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: AcadDictionariesClass) -> object

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: AcadDictionariesClass) -> int

"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: AcadDictionariesClass) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: AcadDictionariesClass) -> object

"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: AcadDictionariesClass) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: AcadDictionariesClass) -> bool

"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: AcadDictionariesClass) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: AcadDictionariesClass) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: AcadDictionariesClass) -> Int64

"""


    Modified = None


class IAcadDictionary(IAcadObject, IEnumerable):
    # no doc
    def AddObject(self, Keyword, ObjectName):
        """ AddObject(self: IAcadDictionary, Keyword: str, ObjectName: str) -> AcadObject """
        pass

    def AddXRecord(self, Keyword):
        """ AddXRecord(self: IAcadDictionary, Keyword: str) -> AcadXRecord """
        pass

    def Delete(self):
        """ Delete(self: IAcadDictionary) """
        pass

    def Erase(self):
        """ Erase(self: IAcadDictionary) """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: IAcadDictionary) -> IEnumerator """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: IAcadDictionary) -> AcadDictionary """
        pass

    def GetName(self, Object):
        """ GetName(self: IAcadDictionary, Object: AcadObject) -> str """
        pass

    def GetObject(self, Name):
        """ GetObject(self: IAcadDictionary, Name: str) -> AcadObject """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: IAcadDictionary, AppName: str) -> (object, object) """
        pass

    def Item(self, Index):
        """ Item(self: IAcadDictionary, Index: object) -> AcadObject """
        pass

    def Remove(self, Name):
        """ Remove(self: IAcadDictionary, Name: str) -> AcadObject """
        pass

    def Rename(self, OldName, NewName):
        """ Rename(self: IAcadDictionary, OldName: str, NewName: str) """
        pass

    def Replace(self, OldName, pObj):
        """ Replace(self: IAcadDictionary, OldName: str, pObj: AcadObject) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: IAcadDictionary, XDataType: object, XDataValue: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerable) -> object """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IAcadDictionary) -> object

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: IAcadDictionary) -> int

"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: IAcadDictionary) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: IAcadDictionary) -> object

"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: IAcadDictionary) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: IAcadDictionary) -> bool

"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: IAcadDictionary) -> str

Set: Name(self: IAcadDictionary) = value
"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: IAcadDictionary) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: IAcadDictionary) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: IAcadDictionary) -> Int64

"""



class AcadDictionary(IAcadDictionary, IAcadObject, IEnumerable, IAcadObjectEvents_Event):
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerable) -> object """
        pass


class AcadDictionaryClass(__ComObject):
    # no doc
    def AddObject(self, Keyword, ObjectName):
        """ AddObject(self: AcadDictionaryClass, Keyword: str, ObjectName: str) -> AcadObject """
        pass

    def AddXRecord(self, Keyword):
        """ AddXRecord(self: AcadDictionaryClass, Keyword: str) -> AcadXRecord """
        pass

    def add_Modified(self, A_1):
        """ add_Modified(self: AcadDictionaryClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def Delete(self):
        """ Delete(self: AcadDictionaryClass) """
        pass

    def Erase(self):
        """ Erase(self: AcadDictionaryClass) """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: AcadDictionaryClass) -> IEnumerator """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: AcadDictionaryClass) -> AcadDictionary """
        pass

    def GetName(self, Object):
        """ GetName(self: AcadDictionaryClass, Object: AcadObject) -> str """
        pass

    def GetObject(self, Name):
        """ GetObject(self: AcadDictionaryClass, Name: str) -> AcadObject """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: AcadDictionaryClass, AppName: str) -> (object, object) """
        pass

    def Item(self, Index):
        """ Item(self: AcadDictionaryClass, Index: object) -> AcadObject """
        pass

    def Remove(self, Name):
        """ Remove(self: AcadDictionaryClass, Name: str) -> AcadObject """
        pass

    def remove_Modified(self, A_1):
        """ remove_Modified(self: AcadDictionaryClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def Rename(self, OldName, NewName):
        """ Rename(self: AcadDictionaryClass, OldName: str, NewName: str) """
        pass

    def Replace(self, OldName, pObj):
        """ Replace(self: AcadDictionaryClass, OldName: str, pObj: AcadObject) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: AcadDictionaryClass, XDataType: object, XDataValue: object) """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerable) -> object """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: AcadDictionaryClass) -> object

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: AcadDictionaryClass) -> int

"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: AcadDictionaryClass) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: AcadDictionaryClass) -> object

"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: AcadDictionaryClass) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: AcadDictionaryClass) -> bool

"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: AcadDictionaryClass) -> str

Set: Name(self: AcadDictionaryClass) = value
"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: AcadDictionaryClass) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: AcadDictionaryClass) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: AcadDictionaryClass) -> Int64

"""


    Modified = None


class IAcadDimension(IAcadEntity, IAcadObject):
    # no doc
    def ArrayPolar(self, NumberOfObjects, AngleToFill, CenterPoint):
        """ ArrayPolar(self: IAcadDimension, NumberOfObjects: int, AngleToFill: float, CenterPoint: object) -> object """
        pass

    def ArrayRectangular(self, NumberOfRows, NumberOfColumns, NumberOfLevels, DistBetweenRows, DistBetweenCols, DistBetweenLevels):
        """ ArrayRectangular(self: IAcadDimension, NumberOfRows: int, NumberOfColumns: int, NumberOfLevels: int, DistBetweenRows: float, DistBetweenCols: float, DistBetweenLevels: float) -> object """
        pass

    def Copy(self):
        """ Copy(self: IAcadDimension) -> object """
        pass

    def Delete(self):
        """ Delete(self: IAcadDimension) """
        pass

    def Erase(self):
        """ Erase(self: IAcadDimension) """
        pass

    def GetBoundingBox(self, MinPoint, MaxPoint):
        """ GetBoundingBox(self: IAcadDimension) -> (object, object) """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: IAcadDimension) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: IAcadDimension, AppName: str) -> (object, object) """
        pass

    def Highlight(self, HighlightFlag):
        """ Highlight(self: IAcadDimension, HighlightFlag: bool) """
        pass

    def IntersectWith(self, IntersectObject, option):
        """ IntersectWith(self: IAcadDimension, IntersectObject: object, option: AcExtendOption) -> object """
        pass

    def Mirror(self, Point1, Point2):
        """ Mirror(self: IAcadDimension, Point1: object, Point2: object) -> object """
        pass

    def Mirror3D(self, Point1, Point2, point3):
        """ Mirror3D(self: IAcadDimension, Point1: object, Point2: object, point3: object) -> object """
        pass

    def Move(self, FromPoint, ToPoint):
        """ Move(self: IAcadDimension, FromPoint: object, ToPoint: object) """
        pass

    def Rotate(self, BasePoint, RotationAngle):
        """ Rotate(self: IAcadDimension, BasePoint: object, RotationAngle: float) """
        pass

    def Rotate3D(self, Point1, Point2, RotationAngle):
        """ Rotate3D(self: IAcadDimension, Point1: object, Point2: object, RotationAngle: float) """
        pass

    def ScaleEntity(self, BasePoint, ScaleFactor):
        """ ScaleEntity(self: IAcadDimension, BasePoint: object, ScaleFactor: float) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: IAcadDimension, XDataType: object, XDataValue: object) """
        pass

    def TransformBy(self, TransformationMatrix):
        """ TransformBy(self: IAcadDimension, TransformationMatrix: object) """
        pass

    def Update(self):
        """ Update(self: IAcadDimension) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IAcadDimension) -> object

"""

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: IAcadDimension) -> ACAD_COLOR

Set: color(self: IAcadDimension) = value
"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: IAcadDimension) -> AcadDatabase

"""

    DecimalSeparator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DecimalSeparator(self: IAcadDimension) -> str

Set: DecimalSeparator(self: IAcadDimension) = value
"""

    DimTxtDirection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimTxtDirection(self: IAcadDimension) -> bool

Set: DimTxtDirection(self: IAcadDimension) = value
"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: IAcadDimension) -> object

"""

    EntityName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityName(self: IAcadDimension) -> str

"""

    EntityTransparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityTransparency(self: IAcadDimension) -> str

Set: EntityTransparency(self: IAcadDimension) = value
"""

    EntityType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityType(self: IAcadDimension) -> int

"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: IAcadDimension) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: IAcadDimension) -> bool

"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: IAcadDimension) -> AcadHyperlinks

"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layer(self: IAcadDimension) -> str

Set: Layer(self: IAcadDimension) = value
"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: IAcadDimension) -> str

Set: Linetype(self: IAcadDimension) = value
"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeScale(self: IAcadDimension) -> float

Set: LinetypeScale(self: IAcadDimension) = value
"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: IAcadDimension) -> ACAD_LWEIGHT

Set: Lineweight(self: IAcadDimension) = value
"""

    Material = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Material(self: IAcadDimension) -> str

Set: Material(self: IAcadDimension) = value
"""

    Normal = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Normal(self: IAcadDimension) -> object

Set: Normal(self: IAcadDimension) = value
"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: IAcadDimension) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: IAcadDimension) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: IAcadDimension) -> Int64

"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: IAcadDimension) -> str

Set: PlotStyleName(self: IAcadDimension) = value
"""

    Rotation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Rotation(self: IAcadDimension) -> float

Set: Rotation(self: IAcadDimension) = value
"""

    ScaleFactor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ScaleFactor(self: IAcadDimension) -> float

Set: ScaleFactor(self: IAcadDimension) = value
"""

    StyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: StyleName(self: IAcadDimension) -> str

Set: StyleName(self: IAcadDimension) = value
"""

    SuppressLeadingZeros = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SuppressLeadingZeros(self: IAcadDimension) -> bool

Set: SuppressLeadingZeros(self: IAcadDimension) = value
"""

    SuppressTrailingZeros = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SuppressTrailingZeros(self: IAcadDimension) -> bool

Set: SuppressTrailingZeros(self: IAcadDimension) = value
"""

    TextColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextColor(self: IAcadDimension) -> ACAD_COLOR

Set: TextColor(self: IAcadDimension) = value
"""

    TextFill = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextFill(self: IAcadDimension) -> bool

Set: TextFill(self: IAcadDimension) = value
"""

    TextFillColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextFillColor(self: IAcadDimension) -> ACAD_COLOR

Set: TextFillColor(self: IAcadDimension) = value
"""

    TextGap = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextGap(self: IAcadDimension) -> float

Set: TextGap(self: IAcadDimension) = value
"""

    TextHeight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextHeight(self: IAcadDimension) -> float

Set: TextHeight(self: IAcadDimension) = value
"""

    TextMovement = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextMovement(self: IAcadDimension) -> AcDimTextMovement

Set: TextMovement(self: IAcadDimension) = value
"""

    TextOverride = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextOverride(self: IAcadDimension) -> str

Set: TextOverride(self: IAcadDimension) = value
"""

    TextPosition = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextPosition(self: IAcadDimension) -> object

Set: TextPosition(self: IAcadDimension) = value
"""

    TextPrefix = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextPrefix(self: IAcadDimension) -> str

Set: TextPrefix(self: IAcadDimension) = value
"""

    TextRotation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextRotation(self: IAcadDimension) -> float

Set: TextRotation(self: IAcadDimension) = value
"""

    TextStyle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextStyle(self: IAcadDimension) -> str

Set: TextStyle(self: IAcadDimension) = value
"""

    TextSuffix = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextSuffix(self: IAcadDimension) -> str

Set: TextSuffix(self: IAcadDimension) = value
"""

    ToleranceDisplay = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceDisplay(self: IAcadDimension) -> AcDimToleranceMethod

Set: ToleranceDisplay(self: IAcadDimension) = value
"""

    ToleranceHeightScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceHeightScale(self: IAcadDimension) -> float

Set: ToleranceHeightScale(self: IAcadDimension) = value
"""

    ToleranceJustification = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceJustification(self: IAcadDimension) -> AcDimToleranceJustify

Set: ToleranceJustification(self: IAcadDimension) = value
"""

    ToleranceLowerLimit = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceLowerLimit(self: IAcadDimension) -> float

Set: ToleranceLowerLimit(self: IAcadDimension) = value
"""

    TolerancePrecision = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TolerancePrecision(self: IAcadDimension) -> AcDimPrecision

Set: TolerancePrecision(self: IAcadDimension) = value
"""

    ToleranceSuppressLeadingZeros = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceSuppressLeadingZeros(self: IAcadDimension) -> bool

Set: ToleranceSuppressLeadingZeros(self: IAcadDimension) = value
"""

    ToleranceSuppressTrailingZeros = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceSuppressTrailingZeros(self: IAcadDimension) -> bool

Set: ToleranceSuppressTrailingZeros(self: IAcadDimension) = value
"""

    ToleranceUpperLimit = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceUpperLimit(self: IAcadDimension) -> float

Set: ToleranceUpperLimit(self: IAcadDimension) = value
"""

    TrueColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TrueColor(self: IAcadDimension) -> AcadAcCmColor

Set: TrueColor(self: IAcadDimension) = value
"""

    VerticalTextPosition = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VerticalTextPosition(self: IAcadDimension) -> AcDimVerticalJustification

Set: VerticalTextPosition(self: IAcadDimension) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: IAcadDimension) -> bool

Set: Visible(self: IAcadDimension) = value
"""



class IAcadDim3PointAngular(IAcadDimension, IAcadEntity, IAcadObject):
    # no doc
    def ArrayPolar(self, NumberOfObjects, AngleToFill, CenterPoint):
        """ ArrayPolar(self: IAcadDim3PointAngular, NumberOfObjects: int, AngleToFill: float, CenterPoint: object) -> object """
        pass

    def ArrayRectangular(self, NumberOfRows, NumberOfColumns, NumberOfLevels, DistBetweenRows, DistBetweenCols, DistBetweenLevels):
        """ ArrayRectangular(self: IAcadDim3PointAngular, NumberOfRows: int, NumberOfColumns: int, NumberOfLevels: int, DistBetweenRows: float, DistBetweenCols: float, DistBetweenLevels: float) -> object """
        pass

    def Copy(self):
        """ Copy(self: IAcadDim3PointAngular) -> object """
        pass

    def Delete(self):
        """ Delete(self: IAcadDim3PointAngular) """
        pass

    def Erase(self):
        """ Erase(self: IAcadDim3PointAngular) """
        pass

    def GetBoundingBox(self, MinPoint, MaxPoint):
        """ GetBoundingBox(self: IAcadDim3PointAngular) -> (object, object) """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: IAcadDim3PointAngular) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: IAcadDim3PointAngular, AppName: str) -> (object, object) """
        pass

    def Highlight(self, HighlightFlag):
        """ Highlight(self: IAcadDim3PointAngular, HighlightFlag: bool) """
        pass

    def IntersectWith(self, IntersectObject, option):
        """ IntersectWith(self: IAcadDim3PointAngular, IntersectObject: object, option: AcExtendOption) -> object """
        pass

    def Mirror(self, Point1, Point2):
        """ Mirror(self: IAcadDim3PointAngular, Point1: object, Point2: object) -> object """
        pass

    def Mirror3D(self, Point1, Point2, point3):
        """ Mirror3D(self: IAcadDim3PointAngular, Point1: object, Point2: object, point3: object) -> object """
        pass

    def Move(self, FromPoint, ToPoint):
        """ Move(self: IAcadDim3PointAngular, FromPoint: object, ToPoint: object) """
        pass

    def Rotate(self, BasePoint, RotationAngle):
        """ Rotate(self: IAcadDim3PointAngular, BasePoint: object, RotationAngle: float) """
        pass

    def Rotate3D(self, Point1, Point2, RotationAngle):
        """ Rotate3D(self: IAcadDim3PointAngular, Point1: object, Point2: object, RotationAngle: float) """
        pass

    def ScaleEntity(self, BasePoint, ScaleFactor):
        """ ScaleEntity(self: IAcadDim3PointAngular, BasePoint: object, ScaleFactor: float) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: IAcadDim3PointAngular, XDataType: object, XDataValue: object) """
        pass

    def TransformBy(self, TransformationMatrix):
        """ TransformBy(self: IAcadDim3PointAngular, TransformationMatrix: object) """
        pass

    def Update(self):
        """ Update(self: IAcadDim3PointAngular) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    AngleFormat = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AngleFormat(self: IAcadDim3PointAngular) -> AcAngleUnits

Set: AngleFormat(self: IAcadDim3PointAngular) = value
"""

    AngleVertex = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AngleVertex(self: IAcadDim3PointAngular) -> object

Set: AngleVertex(self: IAcadDim3PointAngular) = value
"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IAcadDim3PointAngular) -> object

"""

    Arrowhead1Block = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Arrowhead1Block(self: IAcadDim3PointAngular) -> str

Set: Arrowhead1Block(self: IAcadDim3PointAngular) = value
"""

    Arrowhead1Type = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Arrowhead1Type(self: IAcadDim3PointAngular) -> AcDimArrowheadType

Set: Arrowhead1Type(self: IAcadDim3PointAngular) = value
"""

    Arrowhead2Block = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Arrowhead2Block(self: IAcadDim3PointAngular) -> str

Set: Arrowhead2Block(self: IAcadDim3PointAngular) = value
"""

    Arrowhead2Type = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Arrowhead2Type(self: IAcadDim3PointAngular) -> AcDimArrowheadType

Set: Arrowhead2Type(self: IAcadDim3PointAngular) = value
"""

    ArrowheadSize = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ArrowheadSize(self: IAcadDim3PointAngular) -> float

Set: ArrowheadSize(self: IAcadDim3PointAngular) = value
"""

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: IAcadDim3PointAngular) -> ACAD_COLOR

Set: color(self: IAcadDim3PointAngular) = value
"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: IAcadDim3PointAngular) -> AcadDatabase

"""

    DecimalSeparator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DecimalSeparator(self: IAcadDim3PointAngular) -> str

Set: DecimalSeparator(self: IAcadDim3PointAngular) = value
"""

    DimConstrDesc = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimConstrDesc(self: IAcadDim3PointAngular) -> str

Set: DimConstrDesc(self: IAcadDim3PointAngular) = value
"""

    DimConstrExpression = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimConstrExpression(self: IAcadDim3PointAngular) -> str

Set: DimConstrExpression(self: IAcadDim3PointAngular) = value
"""

    DimConstrForm = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimConstrForm(self: IAcadDim3PointAngular) -> bool

Set: DimConstrForm(self: IAcadDim3PointAngular) = value
"""

    DimConstrName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimConstrName(self: IAcadDim3PointAngular) -> str

Set: DimConstrName(self: IAcadDim3PointAngular) = value
"""

    DimConstrReference = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimConstrReference(self: IAcadDim3PointAngular) -> bool

Set: DimConstrReference(self: IAcadDim3PointAngular) = value
"""

    DimConstrValue = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimConstrValue(self: IAcadDim3PointAngular) -> str

Set: DimConstrValue(self: IAcadDim3PointAngular) = value
"""

    DimensionLineColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimensionLineColor(self: IAcadDim3PointAngular) -> ACAD_COLOR

Set: DimensionLineColor(self: IAcadDim3PointAngular) = value
"""

    DimensionLinetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimensionLinetype(self: IAcadDim3PointAngular) -> str

Set: DimensionLinetype(self: IAcadDim3PointAngular) = value
"""

    DimensionLineWeight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimensionLineWeight(self: IAcadDim3PointAngular) -> ACAD_LWEIGHT

Set: DimensionLineWeight(self: IAcadDim3PointAngular) = value
"""

    DimLine1Suppress = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimLine1Suppress(self: IAcadDim3PointAngular) -> bool

Set: DimLine1Suppress(self: IAcadDim3PointAngular) = value
"""

    DimLine2Suppress = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimLine2Suppress(self: IAcadDim3PointAngular) -> bool

Set: DimLine2Suppress(self: IAcadDim3PointAngular) = value
"""

    DimLineInside = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimLineInside(self: IAcadDim3PointAngular) -> bool

Set: DimLineInside(self: IAcadDim3PointAngular) = value
"""

    DimTxtDirection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimTxtDirection(self: IAcadDim3PointAngular) -> bool

Set: DimTxtDirection(self: IAcadDim3PointAngular) = value
"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: IAcadDim3PointAngular) -> object

"""

    EntityName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityName(self: IAcadDim3PointAngular) -> str

"""

    EntityTransparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityTransparency(self: IAcadDim3PointAngular) -> str

Set: EntityTransparency(self: IAcadDim3PointAngular) = value
"""

    EntityType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityType(self: IAcadDim3PointAngular) -> int

"""

    ExtensionLineColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ExtensionLineColor(self: IAcadDim3PointAngular) -> ACAD_COLOR

Set: ExtensionLineColor(self: IAcadDim3PointAngular) = value
"""

    ExtensionLineExtend = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ExtensionLineExtend(self: IAcadDim3PointAngular) -> float

Set: ExtensionLineExtend(self: IAcadDim3PointAngular) = value
"""

    ExtensionLineOffset = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ExtensionLineOffset(self: IAcadDim3PointAngular) -> float

Set: ExtensionLineOffset(self: IAcadDim3PointAngular) = value
"""

    ExtensionLineWeight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ExtensionLineWeight(self: IAcadDim3PointAngular) -> ACAD_LWEIGHT

Set: ExtensionLineWeight(self: IAcadDim3PointAngular) = value
"""

    ExtLine1EndPoint = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ExtLine1EndPoint(self: IAcadDim3PointAngular) -> object

Set: ExtLine1EndPoint(self: IAcadDim3PointAngular) = value
"""

    ExtLine1Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ExtLine1Linetype(self: IAcadDim3PointAngular) -> str

Set: ExtLine1Linetype(self: IAcadDim3PointAngular) = value
"""

    ExtLine1Suppress = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ExtLine1Suppress(self: IAcadDim3PointAngular) -> bool

Set: ExtLine1Suppress(self: IAcadDim3PointAngular) = value
"""

    ExtLine2EndPoint = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ExtLine2EndPoint(self: IAcadDim3PointAngular) -> object

Set: ExtLine2EndPoint(self: IAcadDim3PointAngular) = value
"""

    ExtLine2Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ExtLine2Linetype(self: IAcadDim3PointAngular) -> str

Set: ExtLine2Linetype(self: IAcadDim3PointAngular) = value
"""

    ExtLine2Suppress = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ExtLine2Suppress(self: IAcadDim3PointAngular) -> bool

Set: ExtLine2Suppress(self: IAcadDim3PointAngular) = value
"""

    ExtLineFixedLen = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ExtLineFixedLen(self: IAcadDim3PointAngular) -> float

Set: ExtLineFixedLen(self: IAcadDim3PointAngular) = value
"""

    ExtLineFixedLenSuppress = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ExtLineFixedLenSuppress(self: IAcadDim3PointAngular) -> bool

Set: ExtLineFixedLenSuppress(self: IAcadDim3PointAngular) = value
"""

    Fit = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Fit(self: IAcadDim3PointAngular) -> AcDimFit

Set: Fit(self: IAcadDim3PointAngular) = value
"""

    ForceLineInside = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ForceLineInside(self: IAcadDim3PointAngular) -> bool

Set: ForceLineInside(self: IAcadDim3PointAngular) = value
"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: IAcadDim3PointAngular) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: IAcadDim3PointAngular) -> bool

"""

    HorizontalTextPosition = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HorizontalTextPosition(self: IAcadDim3PointAngular) -> AcDimHorizontalJustification

Set: HorizontalTextPosition(self: IAcadDim3PointAngular) = value
"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: IAcadDim3PointAngular) -> AcadHyperlinks

"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layer(self: IAcadDim3PointAngular) -> str

Set: Layer(self: IAcadDim3PointAngular) = value
"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: IAcadDim3PointAngular) -> str

Set: Linetype(self: IAcadDim3PointAngular) = value
"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeScale(self: IAcadDim3PointAngular) -> float

Set: LinetypeScale(self: IAcadDim3PointAngular) = value
"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: IAcadDim3PointAngular) -> ACAD_LWEIGHT

Set: Lineweight(self: IAcadDim3PointAngular) = value
"""

    Material = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Material(self: IAcadDim3PointAngular) -> str

Set: Material(self: IAcadDim3PointAngular) = value
"""

    Measurement = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Measurement(self: IAcadDim3PointAngular) -> float

"""

    Normal = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Normal(self: IAcadDim3PointAngular) -> object

Set: Normal(self: IAcadDim3PointAngular) = value
"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: IAcadDim3PointAngular) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: IAcadDim3PointAngular) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: IAcadDim3PointAngular) -> Int64

"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: IAcadDim3PointAngular) -> str

Set: PlotStyleName(self: IAcadDim3PointAngular) = value
"""

    Rotation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Rotation(self: IAcadDim3PointAngular) -> float

Set: Rotation(self: IAcadDim3PointAngular) = value
"""

    ScaleFactor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ScaleFactor(self: IAcadDim3PointAngular) -> float

Set: ScaleFactor(self: IAcadDim3PointAngular) = value
"""

    StyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: StyleName(self: IAcadDim3PointAngular) -> str

Set: StyleName(self: IAcadDim3PointAngular) = value
"""

    SuppressLeadingZeros = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SuppressLeadingZeros(self: IAcadDim3PointAngular) -> bool

Set: SuppressLeadingZeros(self: IAcadDim3PointAngular) = value
"""

    SuppressTrailingZeros = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SuppressTrailingZeros(self: IAcadDim3PointAngular) -> bool

Set: SuppressTrailingZeros(self: IAcadDim3PointAngular) = value
"""

    TextColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextColor(self: IAcadDim3PointAngular) -> ACAD_COLOR

Set: TextColor(self: IAcadDim3PointAngular) = value
"""

    TextFill = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextFill(self: IAcadDim3PointAngular) -> bool

Set: TextFill(self: IAcadDim3PointAngular) = value
"""

    TextFillColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextFillColor(self: IAcadDim3PointAngular) -> ACAD_COLOR

Set: TextFillColor(self: IAcadDim3PointAngular) = value
"""

    TextGap = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextGap(self: IAcadDim3PointAngular) -> float

Set: TextGap(self: IAcadDim3PointAngular) = value
"""

    TextHeight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextHeight(self: IAcadDim3PointAngular) -> float

Set: TextHeight(self: IAcadDim3PointAngular) = value
"""

    TextInside = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextInside(self: IAcadDim3PointAngular) -> bool

Set: TextInside(self: IAcadDim3PointAngular) = value
"""

    TextInsideAlign = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextInsideAlign(self: IAcadDim3PointAngular) -> bool

Set: TextInsideAlign(self: IAcadDim3PointAngular) = value
"""

    TextMovement = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextMovement(self: IAcadDim3PointAngular) -> AcDimTextMovement

Set: TextMovement(self: IAcadDim3PointAngular) = value
"""

    TextOutsideAlign = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextOutsideAlign(self: IAcadDim3PointAngular) -> bool

Set: TextOutsideAlign(self: IAcadDim3PointAngular) = value
"""

    TextOverride = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextOverride(self: IAcadDim3PointAngular) -> str

Set: TextOverride(self: IAcadDim3PointAngular) = value
"""

    TextPosition = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextPosition(self: IAcadDim3PointAngular) -> object

Set: TextPosition(self: IAcadDim3PointAngular) = value
"""

    TextPrecision = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextPrecision(self: IAcadDim3PointAngular) -> AcDimPrecision

Set: TextPrecision(self: IAcadDim3PointAngular) = value
"""

    TextPrefix = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextPrefix(self: IAcadDim3PointAngular) -> str

Set: TextPrefix(self: IAcadDim3PointAngular) = value
"""

    TextRotation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextRotation(self: IAcadDim3PointAngular) -> float

Set: TextRotation(self: IAcadDim3PointAngular) = value
"""

    TextStyle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextStyle(self: IAcadDim3PointAngular) -> str

Set: TextStyle(self: IAcadDim3PointAngular) = value
"""

    TextSuffix = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextSuffix(self: IAcadDim3PointAngular) -> str

Set: TextSuffix(self: IAcadDim3PointAngular) = value
"""

    ToleranceDisplay = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceDisplay(self: IAcadDim3PointAngular) -> AcDimToleranceMethod

Set: ToleranceDisplay(self: IAcadDim3PointAngular) = value
"""

    ToleranceHeightScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceHeightScale(self: IAcadDim3PointAngular) -> float

Set: ToleranceHeightScale(self: IAcadDim3PointAngular) = value
"""

    ToleranceJustification = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceJustification(self: IAcadDim3PointAngular) -> AcDimToleranceJustify

Set: ToleranceJustification(self: IAcadDim3PointAngular) = value
"""

    ToleranceLowerLimit = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceLowerLimit(self: IAcadDim3PointAngular) -> float

Set: ToleranceLowerLimit(self: IAcadDim3PointAngular) = value
"""

    TolerancePrecision = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TolerancePrecision(self: IAcadDim3PointAngular) -> AcDimPrecision

Set: TolerancePrecision(self: IAcadDim3PointAngular) = value
"""

    ToleranceSuppressLeadingZeros = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceSuppressLeadingZeros(self: IAcadDim3PointAngular) -> bool

Set: ToleranceSuppressLeadingZeros(self: IAcadDim3PointAngular) = value
"""

    ToleranceSuppressTrailingZeros = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceSuppressTrailingZeros(self: IAcadDim3PointAngular) -> bool

Set: ToleranceSuppressTrailingZeros(self: IAcadDim3PointAngular) = value
"""

    ToleranceUpperLimit = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceUpperLimit(self: IAcadDim3PointAngular) -> float

Set: ToleranceUpperLimit(self: IAcadDim3PointAngular) = value
"""

    TrueColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TrueColor(self: IAcadDim3PointAngular) -> AcadAcCmColor

Set: TrueColor(self: IAcadDim3PointAngular) = value
"""

    VerticalTextPosition = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VerticalTextPosition(self: IAcadDim3PointAngular) -> AcDimVerticalJustification

Set: VerticalTextPosition(self: IAcadDim3PointAngular) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: IAcadDim3PointAngular) -> bool

Set: Visible(self: IAcadDim3PointAngular) = value
"""



class AcadDim3PointAngular(IAcadDim3PointAngular, IAcadDimension, IAcadEntity, IAcadObject, IAcadObjectEvents_Event):
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class AcadDim3PointAngularClass(__ComObject):
    # no doc
    def add_Modified(self, A_1):
        """ add_Modified(self: AcadDim3PointAngularClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def ArrayPolar(self, NumberOfObjects, AngleToFill, CenterPoint):
        """ ArrayPolar(self: AcadDim3PointAngularClass, NumberOfObjects: int, AngleToFill: float, CenterPoint: object) -> object """
        pass

    def ArrayRectangular(self, NumberOfRows, NumberOfColumns, NumberOfLevels, DistBetweenRows, DistBetweenCols, DistBetweenLevels):
        """ ArrayRectangular(self: AcadDim3PointAngularClass, NumberOfRows: int, NumberOfColumns: int, NumberOfLevels: int, DistBetweenRows: float, DistBetweenCols: float, DistBetweenLevels: float) -> object """
        pass

    def Copy(self):
        """ Copy(self: AcadDim3PointAngularClass) -> object """
        pass

    def Delete(self):
        """ Delete(self: AcadDim3PointAngularClass) """
        pass

    def Erase(self):
        """ Erase(self: AcadDim3PointAngularClass) """
        pass

    def GetBoundingBox(self, MinPoint, MaxPoint):
        """ GetBoundingBox(self: AcadDim3PointAngularClass) -> (object, object) """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: AcadDim3PointAngularClass) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: AcadDim3PointAngularClass, AppName: str) -> (object, object) """
        pass

    def Highlight(self, HighlightFlag):
        """ Highlight(self: AcadDim3PointAngularClass, HighlightFlag: bool) """
        pass

    def IntersectWith(self, IntersectObject, option):
        """ IntersectWith(self: AcadDim3PointAngularClass, IntersectObject: object, option: AcExtendOption) -> object """
        pass

    def Mirror(self, Point1, Point2):
        """ Mirror(self: AcadDim3PointAngularClass, Point1: object, Point2: object) -> object """
        pass

    def Mirror3D(self, Point1, Point2, point3):
        """ Mirror3D(self: AcadDim3PointAngularClass, Point1: object, Point2: object, point3: object) -> object """
        pass

    def Move(self, FromPoint, ToPoint):
        """ Move(self: AcadDim3PointAngularClass, FromPoint: object, ToPoint: object) """
        pass

    def remove_Modified(self, A_1):
        """ remove_Modified(self: AcadDim3PointAngularClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def Rotate(self, BasePoint, RotationAngle):
        """ Rotate(self: AcadDim3PointAngularClass, BasePoint: object, RotationAngle: float) """
        pass

    def Rotate3D(self, Point1, Point2, RotationAngle):
        """ Rotate3D(self: AcadDim3PointAngularClass, Point1: object, Point2: object, RotationAngle: float) """
        pass

    def ScaleEntity(self, BasePoint, ScaleFactor):
        """ ScaleEntity(self: AcadDim3PointAngularClass, BasePoint: object, ScaleFactor: float) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: AcadDim3PointAngularClass, XDataType: object, XDataValue: object) """
        pass

    def TransformBy(self, TransformationMatrix):
        """ TransformBy(self: AcadDim3PointAngularClass, TransformationMatrix: object) """
        pass

    def Update(self):
        """ Update(self: AcadDim3PointAngularClass) """
        pass

    AngleFormat = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AngleFormat(self: AcadDim3PointAngularClass) -> AcAngleUnits

Set: AngleFormat(self: AcadDim3PointAngularClass) = value
"""

    AngleVertex = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AngleVertex(self: AcadDim3PointAngularClass) -> object

Set: AngleVertex(self: AcadDim3PointAngularClass) = value
"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: AcadDim3PointAngularClass) -> object

"""

    Arrowhead1Block = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Arrowhead1Block(self: AcadDim3PointAngularClass) -> str

Set: Arrowhead1Block(self: AcadDim3PointAngularClass) = value
"""

    Arrowhead1Type = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Arrowhead1Type(self: AcadDim3PointAngularClass) -> AcDimArrowheadType

Set: Arrowhead1Type(self: AcadDim3PointAngularClass) = value
"""

    Arrowhead2Block = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Arrowhead2Block(self: AcadDim3PointAngularClass) -> str

Set: Arrowhead2Block(self: AcadDim3PointAngularClass) = value
"""

    Arrowhead2Type = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Arrowhead2Type(self: AcadDim3PointAngularClass) -> AcDimArrowheadType

Set: Arrowhead2Type(self: AcadDim3PointAngularClass) = value
"""

    ArrowheadSize = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ArrowheadSize(self: AcadDim3PointAngularClass) -> float

Set: ArrowheadSize(self: AcadDim3PointAngularClass) = value
"""

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: AcadDim3PointAngularClass) -> ACAD_COLOR

Set: color(self: AcadDim3PointAngularClass) = value
"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: AcadDim3PointAngularClass) -> AcadDatabase

"""

    DecimalSeparator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DecimalSeparator(self: AcadDim3PointAngularClass) -> str

Set: DecimalSeparator(self: AcadDim3PointAngularClass) = value
"""

    DimConstrDesc = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimConstrDesc(self: AcadDim3PointAngularClass) -> str

Set: DimConstrDesc(self: AcadDim3PointAngularClass) = value
"""

    DimConstrExpression = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimConstrExpression(self: AcadDim3PointAngularClass) -> str

Set: DimConstrExpression(self: AcadDim3PointAngularClass) = value
"""

    DimConstrForm = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimConstrForm(self: AcadDim3PointAngularClass) -> bool

Set: DimConstrForm(self: AcadDim3PointAngularClass) = value
"""

    DimConstrName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimConstrName(self: AcadDim3PointAngularClass) -> str

Set: DimConstrName(self: AcadDim3PointAngularClass) = value
"""

    DimConstrReference = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimConstrReference(self: AcadDim3PointAngularClass) -> bool

Set: DimConstrReference(self: AcadDim3PointAngularClass) = value
"""

    DimConstrValue = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimConstrValue(self: AcadDim3PointAngularClass) -> str

Set: DimConstrValue(self: AcadDim3PointAngularClass) = value
"""

    DimensionLineColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimensionLineColor(self: AcadDim3PointAngularClass) -> ACAD_COLOR

Set: DimensionLineColor(self: AcadDim3PointAngularClass) = value
"""

    DimensionLinetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimensionLinetype(self: AcadDim3PointAngularClass) -> str

Set: DimensionLinetype(self: AcadDim3PointAngularClass) = value
"""

    DimensionLineWeight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimensionLineWeight(self: AcadDim3PointAngularClass) -> ACAD_LWEIGHT

Set: DimensionLineWeight(self: AcadDim3PointAngularClass) = value
"""

    DimLine1Suppress = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimLine1Suppress(self: AcadDim3PointAngularClass) -> bool

Set: DimLine1Suppress(self: AcadDim3PointAngularClass) = value
"""

    DimLine2Suppress = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimLine2Suppress(self: AcadDim3PointAngularClass) -> bool

Set: DimLine2Suppress(self: AcadDim3PointAngularClass) = value
"""

    DimLineInside = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimLineInside(self: AcadDim3PointAngularClass) -> bool

Set: DimLineInside(self: AcadDim3PointAngularClass) = value
"""

    DimTxtDirection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimTxtDirection(self: AcadDim3PointAngularClass) -> bool

Set: DimTxtDirection(self: AcadDim3PointAngularClass) = value
"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: AcadDim3PointAngularClass) -> object

"""

    EntityName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityName(self: AcadDim3PointAngularClass) -> str

"""

    EntityTransparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityTransparency(self: AcadDim3PointAngularClass) -> str

Set: EntityTransparency(self: AcadDim3PointAngularClass) = value
"""

    EntityType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityType(self: AcadDim3PointAngularClass) -> int

"""

    ExtensionLineColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ExtensionLineColor(self: AcadDim3PointAngularClass) -> ACAD_COLOR

Set: ExtensionLineColor(self: AcadDim3PointAngularClass) = value
"""

    ExtensionLineExtend = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ExtensionLineExtend(self: AcadDim3PointAngularClass) -> float

Set: ExtensionLineExtend(self: AcadDim3PointAngularClass) = value
"""

    ExtensionLineOffset = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ExtensionLineOffset(self: AcadDim3PointAngularClass) -> float

Set: ExtensionLineOffset(self: AcadDim3PointAngularClass) = value
"""

    ExtensionLineWeight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ExtensionLineWeight(self: AcadDim3PointAngularClass) -> ACAD_LWEIGHT

Set: ExtensionLineWeight(self: AcadDim3PointAngularClass) = value
"""

    ExtLine1EndPoint = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ExtLine1EndPoint(self: AcadDim3PointAngularClass) -> object

Set: ExtLine1EndPoint(self: AcadDim3PointAngularClass) = value
"""

    ExtLine1Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ExtLine1Linetype(self: AcadDim3PointAngularClass) -> str

Set: ExtLine1Linetype(self: AcadDim3PointAngularClass) = value
"""

    ExtLine1Suppress = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ExtLine1Suppress(self: AcadDim3PointAngularClass) -> bool

Set: ExtLine1Suppress(self: AcadDim3PointAngularClass) = value
"""

    ExtLine2EndPoint = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ExtLine2EndPoint(self: AcadDim3PointAngularClass) -> object

Set: ExtLine2EndPoint(self: AcadDim3PointAngularClass) = value
"""

    ExtLine2Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ExtLine2Linetype(self: AcadDim3PointAngularClass) -> str

Set: ExtLine2Linetype(self: AcadDim3PointAngularClass) = value
"""

    ExtLine2Suppress = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ExtLine2Suppress(self: AcadDim3PointAngularClass) -> bool

Set: ExtLine2Suppress(self: AcadDim3PointAngularClass) = value
"""

    ExtLineFixedLen = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ExtLineFixedLen(self: AcadDim3PointAngularClass) -> float

Set: ExtLineFixedLen(self: AcadDim3PointAngularClass) = value
"""

    ExtLineFixedLenSuppress = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ExtLineFixedLenSuppress(self: AcadDim3PointAngularClass) -> bool

Set: ExtLineFixedLenSuppress(self: AcadDim3PointAngularClass) = value
"""

    Fit = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Fit(self: AcadDim3PointAngularClass) -> AcDimFit

Set: Fit(self: AcadDim3PointAngularClass) = value
"""

    ForceLineInside = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ForceLineInside(self: AcadDim3PointAngularClass) -> bool

Set: ForceLineInside(self: AcadDim3PointAngularClass) = value
"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: AcadDim3PointAngularClass) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: AcadDim3PointAngularClass) -> bool

"""

    HorizontalTextPosition = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HorizontalTextPosition(self: AcadDim3PointAngularClass) -> AcDimHorizontalJustification

Set: HorizontalTextPosition(self: AcadDim3PointAngularClass) = value
"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: AcadDim3PointAngularClass) -> AcadHyperlinks

"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layer(self: AcadDim3PointAngularClass) -> str

Set: Layer(self: AcadDim3PointAngularClass) = value
"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: AcadDim3PointAngularClass) -> str

Set: Linetype(self: AcadDim3PointAngularClass) = value
"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeScale(self: AcadDim3PointAngularClass) -> float

Set: LinetypeScale(self: AcadDim3PointAngularClass) = value
"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: AcadDim3PointAngularClass) -> ACAD_LWEIGHT

Set: Lineweight(self: AcadDim3PointAngularClass) = value
"""

    Material = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Material(self: AcadDim3PointAngularClass) -> str

Set: Material(self: AcadDim3PointAngularClass) = value
"""

    Measurement = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Measurement(self: AcadDim3PointAngularClass) -> float

"""

    Normal = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Normal(self: AcadDim3PointAngularClass) -> object

Set: Normal(self: AcadDim3PointAngularClass) = value
"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: AcadDim3PointAngularClass) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: AcadDim3PointAngularClass) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: AcadDim3PointAngularClass) -> Int64

"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: AcadDim3PointAngularClass) -> str

Set: PlotStyleName(self: AcadDim3PointAngularClass) = value
"""

    Rotation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Rotation(self: AcadDim3PointAngularClass) -> float

Set: Rotation(self: AcadDim3PointAngularClass) = value
"""

    ScaleFactor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ScaleFactor(self: AcadDim3PointAngularClass) -> float

Set: ScaleFactor(self: AcadDim3PointAngularClass) = value
"""

    StyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: StyleName(self: AcadDim3PointAngularClass) -> str

Set: StyleName(self: AcadDim3PointAngularClass) = value
"""

    SuppressLeadingZeros = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SuppressLeadingZeros(self: AcadDim3PointAngularClass) -> bool

Set: SuppressLeadingZeros(self: AcadDim3PointAngularClass) = value
"""

    SuppressTrailingZeros = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SuppressTrailingZeros(self: AcadDim3PointAngularClass) -> bool

Set: SuppressTrailingZeros(self: AcadDim3PointAngularClass) = value
"""

    TextColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextColor(self: AcadDim3PointAngularClass) -> ACAD_COLOR

Set: TextColor(self: AcadDim3PointAngularClass) = value
"""

    TextFill = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextFill(self: AcadDim3PointAngularClass) -> bool

Set: TextFill(self: AcadDim3PointAngularClass) = value
"""

    TextFillColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextFillColor(self: AcadDim3PointAngularClass) -> ACAD_COLOR

Set: TextFillColor(self: AcadDim3PointAngularClass) = value
"""

    TextGap = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextGap(self: AcadDim3PointAngularClass) -> float

Set: TextGap(self: AcadDim3PointAngularClass) = value
"""

    TextHeight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextHeight(self: AcadDim3PointAngularClass) -> float

Set: TextHeight(self: AcadDim3PointAngularClass) = value
"""

    TextInside = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextInside(self: AcadDim3PointAngularClass) -> bool

Set: TextInside(self: AcadDim3PointAngularClass) = value
"""

    TextInsideAlign = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextInsideAlign(self: AcadDim3PointAngularClass) -> bool

Set: TextInsideAlign(self: AcadDim3PointAngularClass) = value
"""

    TextMovement = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextMovement(self: AcadDim3PointAngularClass) -> AcDimTextMovement

Set: TextMovement(self: AcadDim3PointAngularClass) = value
"""

    TextOutsideAlign = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextOutsideAlign(self: AcadDim3PointAngularClass) -> bool

Set: TextOutsideAlign(self: AcadDim3PointAngularClass) = value
"""

    TextOverride = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextOverride(self: AcadDim3PointAngularClass) -> str

Set: TextOverride(self: AcadDim3PointAngularClass) = value
"""

    TextPosition = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextPosition(self: AcadDim3PointAngularClass) -> object

Set: TextPosition(self: AcadDim3PointAngularClass) = value
"""

    TextPrecision = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextPrecision(self: AcadDim3PointAngularClass) -> AcDimPrecision

Set: TextPrecision(self: AcadDim3PointAngularClass) = value
"""

    TextPrefix = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextPrefix(self: AcadDim3PointAngularClass) -> str

Set: TextPrefix(self: AcadDim3PointAngularClass) = value
"""

    TextRotation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextRotation(self: AcadDim3PointAngularClass) -> float

Set: TextRotation(self: AcadDim3PointAngularClass) = value
"""

    TextStyle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextStyle(self: AcadDim3PointAngularClass) -> str

Set: TextStyle(self: AcadDim3PointAngularClass) = value
"""

    TextSuffix = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextSuffix(self: AcadDim3PointAngularClass) -> str

Set: TextSuffix(self: AcadDim3PointAngularClass) = value
"""

    ToleranceDisplay = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceDisplay(self: AcadDim3PointAngularClass) -> AcDimToleranceMethod

Set: ToleranceDisplay(self: AcadDim3PointAngularClass) = value
"""

    ToleranceHeightScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceHeightScale(self: AcadDim3PointAngularClass) -> float

Set: ToleranceHeightScale(self: AcadDim3PointAngularClass) = value
"""

    ToleranceJustification = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceJustification(self: AcadDim3PointAngularClass) -> AcDimToleranceJustify

Set: ToleranceJustification(self: AcadDim3PointAngularClass) = value
"""

    ToleranceLowerLimit = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceLowerLimit(self: AcadDim3PointAngularClass) -> float

Set: ToleranceLowerLimit(self: AcadDim3PointAngularClass) = value
"""

    TolerancePrecision = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TolerancePrecision(self: AcadDim3PointAngularClass) -> AcDimPrecision

Set: TolerancePrecision(self: AcadDim3PointAngularClass) = value
"""

    ToleranceSuppressLeadingZeros = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceSuppressLeadingZeros(self: AcadDim3PointAngularClass) -> bool

Set: ToleranceSuppressLeadingZeros(self: AcadDim3PointAngularClass) = value
"""

    ToleranceSuppressTrailingZeros = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceSuppressTrailingZeros(self: AcadDim3PointAngularClass) -> bool

Set: ToleranceSuppressTrailingZeros(self: AcadDim3PointAngularClass) = value
"""

    ToleranceUpperLimit = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceUpperLimit(self: AcadDim3PointAngularClass) -> float

Set: ToleranceUpperLimit(self: AcadDim3PointAngularClass) = value
"""

    TrueColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TrueColor(self: AcadDim3PointAngularClass) -> AcadAcCmColor

Set: TrueColor(self: AcadDim3PointAngularClass) = value
"""

    VerticalTextPosition = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VerticalTextPosition(self: AcadDim3PointAngularClass) -> AcDimVerticalJustification

Set: VerticalTextPosition(self: AcadDim3PointAngularClass) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: AcadDim3PointAngularClass) -> bool

Set: Visible(self: AcadDim3PointAngularClass) = value
"""


    Modified = None


class IAcadDimAligned(IAcadDimension, IAcadEntity, IAcadObject):
    # no doc
    def ArrayPolar(self, NumberOfObjects, AngleToFill, CenterPoint):
        """ ArrayPolar(self: IAcadDimAligned, NumberOfObjects: int, AngleToFill: float, CenterPoint: object) -> object """
        pass

    def ArrayRectangular(self, NumberOfRows, NumberOfColumns, NumberOfLevels, DistBetweenRows, DistBetweenCols, DistBetweenLevels):
        """ ArrayRectangular(self: IAcadDimAligned, NumberOfRows: int, NumberOfColumns: int, NumberOfLevels: int, DistBetweenRows: float, DistBetweenCols: float, DistBetweenLevels: float) -> object """
        pass

    def Copy(self):
        """ Copy(self: IAcadDimAligned) -> object """
        pass

    def Delete(self):
        """ Delete(self: IAcadDimAligned) """
        pass

    def Erase(self):
        """ Erase(self: IAcadDimAligned) """
        pass

    def GetBoundingBox(self, MinPoint, MaxPoint):
        """ GetBoundingBox(self: IAcadDimAligned) -> (object, object) """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: IAcadDimAligned) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: IAcadDimAligned, AppName: str) -> (object, object) """
        pass

    def Highlight(self, HighlightFlag):
        """ Highlight(self: IAcadDimAligned, HighlightFlag: bool) """
        pass

    def IntersectWith(self, IntersectObject, option):
        """ IntersectWith(self: IAcadDimAligned, IntersectObject: object, option: AcExtendOption) -> object """
        pass

    def Mirror(self, Point1, Point2):
        """ Mirror(self: IAcadDimAligned, Point1: object, Point2: object) -> object """
        pass

    def Mirror3D(self, Point1, Point2, point3):
        """ Mirror3D(self: IAcadDimAligned, Point1: object, Point2: object, point3: object) -> object """
        pass

    def Move(self, FromPoint, ToPoint):
        """ Move(self: IAcadDimAligned, FromPoint: object, ToPoint: object) """
        pass

    def Rotate(self, BasePoint, RotationAngle):
        """ Rotate(self: IAcadDimAligned, BasePoint: object, RotationAngle: float) """
        pass

    def Rotate3D(self, Point1, Point2, RotationAngle):
        """ Rotate3D(self: IAcadDimAligned, Point1: object, Point2: object, RotationAngle: float) """
        pass

    def ScaleEntity(self, BasePoint, ScaleFactor):
        """ ScaleEntity(self: IAcadDimAligned, BasePoint: object, ScaleFactor: float) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: IAcadDimAligned, XDataType: object, XDataValue: object) """
        pass

    def TransformBy(self, TransformationMatrix):
        """ TransformBy(self: IAcadDimAligned, TransformationMatrix: object) """
        pass

    def Update(self):
        """ Update(self: IAcadDimAligned) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    AltRoundDistance = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltRoundDistance(self: IAcadDimAligned) -> float

Set: AltRoundDistance(self: IAcadDimAligned) = value
"""

    AltSubUnitsFactor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltSubUnitsFactor(self: IAcadDimAligned) -> float

Set: AltSubUnitsFactor(self: IAcadDimAligned) = value
"""

    AltSubUnitsSuffix = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltSubUnitsSuffix(self: IAcadDimAligned) -> str

Set: AltSubUnitsSuffix(self: IAcadDimAligned) = value
"""

    AltSuppressLeadingZeros = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltSuppressLeadingZeros(self: IAcadDimAligned) -> bool

Set: AltSuppressLeadingZeros(self: IAcadDimAligned) = value
"""

    AltSuppressTrailingZeros = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltSuppressTrailingZeros(self: IAcadDimAligned) -> bool

Set: AltSuppressTrailingZeros(self: IAcadDimAligned) = value
"""

    AltSuppressZeroFeet = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltSuppressZeroFeet(self: IAcadDimAligned) -> bool

Set: AltSuppressZeroFeet(self: IAcadDimAligned) = value
"""

    AltSuppressZeroInches = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltSuppressZeroInches(self: IAcadDimAligned) -> bool

Set: AltSuppressZeroInches(self: IAcadDimAligned) = value
"""

    AltTextPrefix = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltTextPrefix(self: IAcadDimAligned) -> str

Set: AltTextPrefix(self: IAcadDimAligned) = value
"""

    AltTextSuffix = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltTextSuffix(self: IAcadDimAligned) -> str

Set: AltTextSuffix(self: IAcadDimAligned) = value
"""

    AltTolerancePrecision = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltTolerancePrecision(self: IAcadDimAligned) -> AcDimPrecision

Set: AltTolerancePrecision(self: IAcadDimAligned) = value
"""

    AltToleranceSuppressLeadingZeros = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltToleranceSuppressLeadingZeros(self: IAcadDimAligned) -> bool

Set: AltToleranceSuppressLeadingZeros(self: IAcadDimAligned) = value
"""

    AltToleranceSuppressTrailingZeros = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltToleranceSuppressTrailingZeros(self: IAcadDimAligned) -> bool

Set: AltToleranceSuppressTrailingZeros(self: IAcadDimAligned) = value
"""

    AltToleranceSuppressZeroFeet = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltToleranceSuppressZeroFeet(self: IAcadDimAligned) -> bool

Set: AltToleranceSuppressZeroFeet(self: IAcadDimAligned) = value
"""

    AltToleranceSuppressZeroInches = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltToleranceSuppressZeroInches(self: IAcadDimAligned) -> bool

Set: AltToleranceSuppressZeroInches(self: IAcadDimAligned) = value
"""

    AltUnits = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltUnits(self: IAcadDimAligned) -> bool

Set: AltUnits(self: IAcadDimAligned) = value
"""

    AltUnitsFormat = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltUnitsFormat(self: IAcadDimAligned) -> AcDimUnits

Set: AltUnitsFormat(self: IAcadDimAligned) = value
"""

    AltUnitsPrecision = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltUnitsPrecision(self: IAcadDimAligned) -> AcDimPrecision

Set: AltUnitsPrecision(self: IAcadDimAligned) = value
"""

    AltUnitsScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltUnitsScale(self: IAcadDimAligned) -> float

Set: AltUnitsScale(self: IAcadDimAligned) = value
"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IAcadDimAligned) -> object

"""

    Arrowhead1Block = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Arrowhead1Block(self: IAcadDimAligned) -> str

Set: Arrowhead1Block(self: IAcadDimAligned) = value
"""

    Arrowhead1Type = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Arrowhead1Type(self: IAcadDimAligned) -> AcDimArrowheadType

Set: Arrowhead1Type(self: IAcadDimAligned) = value
"""

    Arrowhead2Block = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Arrowhead2Block(self: IAcadDimAligned) -> str

Set: Arrowhead2Block(self: IAcadDimAligned) = value
"""

    Arrowhead2Type = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Arrowhead2Type(self: IAcadDimAligned) -> AcDimArrowheadType

Set: Arrowhead2Type(self: IAcadDimAligned) = value
"""

    ArrowheadSize = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ArrowheadSize(self: IAcadDimAligned) -> float

Set: ArrowheadSize(self: IAcadDimAligned) = value
"""

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: IAcadDimAligned) -> ACAD_COLOR

Set: color(self: IAcadDimAligned) = value
"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: IAcadDimAligned) -> AcadDatabase

"""

    DecimalSeparator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DecimalSeparator(self: IAcadDimAligned) -> str

Set: DecimalSeparator(self: IAcadDimAligned) = value
"""

    DimConstrDesc = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimConstrDesc(self: IAcadDimAligned) -> str

Set: DimConstrDesc(self: IAcadDimAligned) = value
"""

    DimConstrExpression = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimConstrExpression(self: IAcadDimAligned) -> str

Set: DimConstrExpression(self: IAcadDimAligned) = value
"""

    DimConstrForm = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimConstrForm(self: IAcadDimAligned) -> bool

Set: DimConstrForm(self: IAcadDimAligned) = value
"""

    DimConstrName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimConstrName(self: IAcadDimAligned) -> str

Set: DimConstrName(self: IAcadDimAligned) = value
"""

    DimConstrReference = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimConstrReference(self: IAcadDimAligned) -> bool

Set: DimConstrReference(self: IAcadDimAligned) = value
"""

    DimConstrValue = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimConstrValue(self: IAcadDimAligned) -> str

Set: DimConstrValue(self: IAcadDimAligned) = value
"""

    DimensionLineColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimensionLineColor(self: IAcadDimAligned) -> ACAD_COLOR

Set: DimensionLineColor(self: IAcadDimAligned) = value
"""

    DimensionLineExtend = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimensionLineExtend(self: IAcadDimAligned) -> float

Set: DimensionLineExtend(self: IAcadDimAligned) = value
"""

    DimensionLinetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimensionLinetype(self: IAcadDimAligned) -> str

Set: DimensionLinetype(self: IAcadDimAligned) = value
"""

    DimensionLineWeight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimensionLineWeight(self: IAcadDimAligned) -> ACAD_LWEIGHT

Set: DimensionLineWeight(self: IAcadDimAligned) = value
"""

    DimLine1Suppress = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimLine1Suppress(self: IAcadDimAligned) -> bool

Set: DimLine1Suppress(self: IAcadDimAligned) = value
"""

    DimLine2Suppress = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimLine2Suppress(self: IAcadDimAligned) -> bool

Set: DimLine2Suppress(self: IAcadDimAligned) = value
"""

    DimLineInside = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimLineInside(self: IAcadDimAligned) -> bool

Set: DimLineInside(self: IAcadDimAligned) = value
"""

    DimTxtDirection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimTxtDirection(self: IAcadDimAligned) -> bool

Set: DimTxtDirection(self: IAcadDimAligned) = value
"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: IAcadDimAligned) -> object

"""

    EntityName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityName(self: IAcadDimAligned) -> str

"""

    EntityTransparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityTransparency(self: IAcadDimAligned) -> str

Set: EntityTransparency(self: IAcadDimAligned) = value
"""

    EntityType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityType(self: IAcadDimAligned) -> int

"""

    ExtensionLineColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ExtensionLineColor(self: IAcadDimAligned) -> ACAD_COLOR

Set: ExtensionLineColor(self: IAcadDimAligned) = value
"""

    ExtensionLineExtend = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ExtensionLineExtend(self: IAcadDimAligned) -> float

Set: ExtensionLineExtend(self: IAcadDimAligned) = value
"""

    ExtensionLineOffset = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ExtensionLineOffset(self: IAcadDimAligned) -> float

Set: ExtensionLineOffset(self: IAcadDimAligned) = value
"""

    ExtensionLineWeight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ExtensionLineWeight(self: IAcadDimAligned) -> ACAD_LWEIGHT

Set: ExtensionLineWeight(self: IAcadDimAligned) = value
"""

    ExtLine1Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ExtLine1Linetype(self: IAcadDimAligned) -> str

Set: ExtLine1Linetype(self: IAcadDimAligned) = value
"""

    ExtLine1Point = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ExtLine1Point(self: IAcadDimAligned) -> object

Set: ExtLine1Point(self: IAcadDimAligned) = value
"""

    ExtLine1Suppress = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ExtLine1Suppress(self: IAcadDimAligned) -> bool

Set: ExtLine1Suppress(self: IAcadDimAligned) = value
"""

    ExtLine2Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ExtLine2Linetype(self: IAcadDimAligned) -> str

Set: ExtLine2Linetype(self: IAcadDimAligned) = value
"""

    ExtLine2Point = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ExtLine2Point(self: IAcadDimAligned) -> object

Set: ExtLine2Point(self: IAcadDimAligned) = value
"""

    ExtLine2Suppress = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ExtLine2Suppress(self: IAcadDimAligned) -> bool

Set: ExtLine2Suppress(self: IAcadDimAligned) = value
"""

    ExtLineFixedLen = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ExtLineFixedLen(self: IAcadDimAligned) -> float

Set: ExtLineFixedLen(self: IAcadDimAligned) = value
"""

    ExtLineFixedLenSuppress = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ExtLineFixedLenSuppress(self: IAcadDimAligned) -> bool

Set: ExtLineFixedLenSuppress(self: IAcadDimAligned) = value
"""

    Fit = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Fit(self: IAcadDimAligned) -> AcDimFit

Set: Fit(self: IAcadDimAligned) = value
"""

    ForceLineInside = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ForceLineInside(self: IAcadDimAligned) -> bool

Set: ForceLineInside(self: IAcadDimAligned) = value
"""

    FractionFormat = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FractionFormat(self: IAcadDimAligned) -> AcDimFractionType

Set: FractionFormat(self: IAcadDimAligned) = value
"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: IAcadDimAligned) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: IAcadDimAligned) -> bool

"""

    HorizontalTextPosition = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HorizontalTextPosition(self: IAcadDimAligned) -> AcDimHorizontalJustification

Set: HorizontalTextPosition(self: IAcadDimAligned) = value
"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: IAcadDimAligned) -> AcadHyperlinks

"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layer(self: IAcadDimAligned) -> str

Set: Layer(self: IAcadDimAligned) = value
"""

    LinearScaleFactor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinearScaleFactor(self: IAcadDimAligned) -> float

Set: LinearScaleFactor(self: IAcadDimAligned) = value
"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: IAcadDimAligned) -> str

Set: Linetype(self: IAcadDimAligned) = value
"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeScale(self: IAcadDimAligned) -> float

Set: LinetypeScale(self: IAcadDimAligned) = value
"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: IAcadDimAligned) -> ACAD_LWEIGHT

Set: Lineweight(self: IAcadDimAligned) = value
"""

    Material = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Material(self: IAcadDimAligned) -> str

Set: Material(self: IAcadDimAligned) = value
"""

    Measurement = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Measurement(self: IAcadDimAligned) -> float

"""

    Normal = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Normal(self: IAcadDimAligned) -> object

Set: Normal(self: IAcadDimAligned) = value
"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: IAcadDimAligned) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: IAcadDimAligned) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: IAcadDimAligned) -> Int64

"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: IAcadDimAligned) -> str

Set: PlotStyleName(self: IAcadDimAligned) = value
"""

    PrimaryUnitsPrecision = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PrimaryUnitsPrecision(self: IAcadDimAligned) -> AcDimPrecision

Set: PrimaryUnitsPrecision(self: IAcadDimAligned) = value
"""

    Rotation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Rotation(self: IAcadDimAligned) -> float

Set: Rotation(self: IAcadDimAligned) = value
"""

    RoundDistance = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RoundDistance(self: IAcadDimAligned) -> float

Set: RoundDistance(self: IAcadDimAligned) = value
"""

    ScaleFactor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ScaleFactor(self: IAcadDimAligned) -> float

Set: ScaleFactor(self: IAcadDimAligned) = value
"""

    StyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: StyleName(self: IAcadDimAligned) -> str

Set: StyleName(self: IAcadDimAligned) = value
"""

    SubUnitsFactor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SubUnitsFactor(self: IAcadDimAligned) -> float

Set: SubUnitsFactor(self: IAcadDimAligned) = value
"""

    SubUnitsSuffix = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SubUnitsSuffix(self: IAcadDimAligned) -> str

Set: SubUnitsSuffix(self: IAcadDimAligned) = value
"""

    SuppressLeadingZeros = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SuppressLeadingZeros(self: IAcadDimAligned) -> bool

Set: SuppressLeadingZeros(self: IAcadDimAligned) = value
"""

    SuppressTrailingZeros = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SuppressTrailingZeros(self: IAcadDimAligned) -> bool

Set: SuppressTrailingZeros(self: IAcadDimAligned) = value
"""

    SuppressZeroFeet = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SuppressZeroFeet(self: IAcadDimAligned) -> bool

Set: SuppressZeroFeet(self: IAcadDimAligned) = value
"""

    SuppressZeroInches = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SuppressZeroInches(self: IAcadDimAligned) -> bool

Set: SuppressZeroInches(self: IAcadDimAligned) = value
"""

    TextColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextColor(self: IAcadDimAligned) -> ACAD_COLOR

Set: TextColor(self: IAcadDimAligned) = value
"""

    TextFill = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextFill(self: IAcadDimAligned) -> bool

Set: TextFill(self: IAcadDimAligned) = value
"""

    TextFillColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextFillColor(self: IAcadDimAligned) -> ACAD_COLOR

Set: TextFillColor(self: IAcadDimAligned) = value
"""

    TextGap = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextGap(self: IAcadDimAligned) -> float

Set: TextGap(self: IAcadDimAligned) = value
"""

    TextHeight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextHeight(self: IAcadDimAligned) -> float

Set: TextHeight(self: IAcadDimAligned) = value
"""

    TextInside = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextInside(self: IAcadDimAligned) -> bool

Set: TextInside(self: IAcadDimAligned) = value
"""

    TextInsideAlign = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextInsideAlign(self: IAcadDimAligned) -> bool

Set: TextInsideAlign(self: IAcadDimAligned) = value
"""

    TextMovement = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextMovement(self: IAcadDimAligned) -> AcDimTextMovement

Set: TextMovement(self: IAcadDimAligned) = value
"""

    TextOutsideAlign = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextOutsideAlign(self: IAcadDimAligned) -> bool

Set: TextOutsideAlign(self: IAcadDimAligned) = value
"""

    TextOverride = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextOverride(self: IAcadDimAligned) -> str

Set: TextOverride(self: IAcadDimAligned) = value
"""

    TextPosition = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextPosition(self: IAcadDimAligned) -> object

Set: TextPosition(self: IAcadDimAligned) = value
"""

    TextPrefix = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextPrefix(self: IAcadDimAligned) -> str

Set: TextPrefix(self: IAcadDimAligned) = value
"""

    TextRotation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextRotation(self: IAcadDimAligned) -> float

Set: TextRotation(self: IAcadDimAligned) = value
"""

    TextStyle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextStyle(self: IAcadDimAligned) -> str

Set: TextStyle(self: IAcadDimAligned) = value
"""

    TextSuffix = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextSuffix(self: IAcadDimAligned) -> str

Set: TextSuffix(self: IAcadDimAligned) = value
"""

    ToleranceDisplay = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceDisplay(self: IAcadDimAligned) -> AcDimToleranceMethod

Set: ToleranceDisplay(self: IAcadDimAligned) = value
"""

    ToleranceHeightScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceHeightScale(self: IAcadDimAligned) -> float

Set: ToleranceHeightScale(self: IAcadDimAligned) = value
"""

    ToleranceJustification = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceJustification(self: IAcadDimAligned) -> AcDimToleranceJustify

Set: ToleranceJustification(self: IAcadDimAligned) = value
"""

    ToleranceLowerLimit = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceLowerLimit(self: IAcadDimAligned) -> float

Set: ToleranceLowerLimit(self: IAcadDimAligned) = value
"""

    TolerancePrecision = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TolerancePrecision(self: IAcadDimAligned) -> AcDimPrecision

Set: TolerancePrecision(self: IAcadDimAligned) = value
"""

    ToleranceSuppressLeadingZeros = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceSuppressLeadingZeros(self: IAcadDimAligned) -> bool

Set: ToleranceSuppressLeadingZeros(self: IAcadDimAligned) = value
"""

    ToleranceSuppressTrailingZeros = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceSuppressTrailingZeros(self: IAcadDimAligned) -> bool

Set: ToleranceSuppressTrailingZeros(self: IAcadDimAligned) = value
"""

    ToleranceSuppressZeroFeet = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceSuppressZeroFeet(self: IAcadDimAligned) -> bool

Set: ToleranceSuppressZeroFeet(self: IAcadDimAligned) = value
"""

    ToleranceSuppressZeroInches = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceSuppressZeroInches(self: IAcadDimAligned) -> bool

Set: ToleranceSuppressZeroInches(self: IAcadDimAligned) = value
"""

    ToleranceUpperLimit = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceUpperLimit(self: IAcadDimAligned) -> float

Set: ToleranceUpperLimit(self: IAcadDimAligned) = value
"""

    TrueColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TrueColor(self: IAcadDimAligned) -> AcadAcCmColor

Set: TrueColor(self: IAcadDimAligned) = value
"""

    UnitsFormat = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: UnitsFormat(self: IAcadDimAligned) -> AcDimLUnits

Set: UnitsFormat(self: IAcadDimAligned) = value
"""

    VerticalTextPosition = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VerticalTextPosition(self: IAcadDimAligned) -> AcDimVerticalJustification

Set: VerticalTextPosition(self: IAcadDimAligned) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: IAcadDimAligned) -> bool

Set: Visible(self: IAcadDimAligned) = value
"""



class AcadDimAligned(IAcadDimAligned, IAcadDimension, IAcadEntity, IAcadObject, IAcadObjectEvents_Event):
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class AcadDimAlignedClass(__ComObject):
    # no doc
    def add_Modified(self, A_1):
        """ add_Modified(self: AcadDimAlignedClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def ArrayPolar(self, NumberOfObjects, AngleToFill, CenterPoint):
        """ ArrayPolar(self: AcadDimAlignedClass, NumberOfObjects: int, AngleToFill: float, CenterPoint: object) -> object """
        pass

    def ArrayRectangular(self, NumberOfRows, NumberOfColumns, NumberOfLevels, DistBetweenRows, DistBetweenCols, DistBetweenLevels):
        """ ArrayRectangular(self: AcadDimAlignedClass, NumberOfRows: int, NumberOfColumns: int, NumberOfLevels: int, DistBetweenRows: float, DistBetweenCols: float, DistBetweenLevels: float) -> object """
        pass

    def Copy(self):
        """ Copy(self: AcadDimAlignedClass) -> object """
        pass

    def Delete(self):
        """ Delete(self: AcadDimAlignedClass) """
        pass

    def Erase(self):
        """ Erase(self: AcadDimAlignedClass) """
        pass

    def GetBoundingBox(self, MinPoint, MaxPoint):
        """ GetBoundingBox(self: AcadDimAlignedClass) -> (object, object) """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: AcadDimAlignedClass) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: AcadDimAlignedClass, AppName: str) -> (object, object) """
        pass

    def Highlight(self, HighlightFlag):
        """ Highlight(self: AcadDimAlignedClass, HighlightFlag: bool) """
        pass

    def IntersectWith(self, IntersectObject, option):
        """ IntersectWith(self: AcadDimAlignedClass, IntersectObject: object, option: AcExtendOption) -> object """
        pass

    def Mirror(self, Point1, Point2):
        """ Mirror(self: AcadDimAlignedClass, Point1: object, Point2: object) -> object """
        pass

    def Mirror3D(self, Point1, Point2, point3):
        """ Mirror3D(self: AcadDimAlignedClass, Point1: object, Point2: object, point3: object) -> object """
        pass

    def Move(self, FromPoint, ToPoint):
        """ Move(self: AcadDimAlignedClass, FromPoint: object, ToPoint: object) """
        pass

    def remove_Modified(self, A_1):
        """ remove_Modified(self: AcadDimAlignedClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def Rotate(self, BasePoint, RotationAngle):
        """ Rotate(self: AcadDimAlignedClass, BasePoint: object, RotationAngle: float) """
        pass

    def Rotate3D(self, Point1, Point2, RotationAngle):
        """ Rotate3D(self: AcadDimAlignedClass, Point1: object, Point2: object, RotationAngle: float) """
        pass

    def ScaleEntity(self, BasePoint, ScaleFactor):
        """ ScaleEntity(self: AcadDimAlignedClass, BasePoint: object, ScaleFactor: float) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: AcadDimAlignedClass, XDataType: object, XDataValue: object) """
        pass

    def TransformBy(self, TransformationMatrix):
        """ TransformBy(self: AcadDimAlignedClass, TransformationMatrix: object) """
        pass

    def Update(self):
        """ Update(self: AcadDimAlignedClass) """
        pass

    AltRoundDistance = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltRoundDistance(self: AcadDimAlignedClass) -> float

Set: AltRoundDistance(self: AcadDimAlignedClass) = value
"""

    AltSubUnitsFactor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltSubUnitsFactor(self: AcadDimAlignedClass) -> float

Set: AltSubUnitsFactor(self: AcadDimAlignedClass) = value
"""

    AltSubUnitsSuffix = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltSubUnitsSuffix(self: AcadDimAlignedClass) -> str

Set: AltSubUnitsSuffix(self: AcadDimAlignedClass) = value
"""

    AltSuppressLeadingZeros = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltSuppressLeadingZeros(self: AcadDimAlignedClass) -> bool

Set: AltSuppressLeadingZeros(self: AcadDimAlignedClass) = value
"""

    AltSuppressTrailingZeros = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltSuppressTrailingZeros(self: AcadDimAlignedClass) -> bool

Set: AltSuppressTrailingZeros(self: AcadDimAlignedClass) = value
"""

    AltSuppressZeroFeet = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltSuppressZeroFeet(self: AcadDimAlignedClass) -> bool

Set: AltSuppressZeroFeet(self: AcadDimAlignedClass) = value
"""

    AltSuppressZeroInches = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltSuppressZeroInches(self: AcadDimAlignedClass) -> bool

Set: AltSuppressZeroInches(self: AcadDimAlignedClass) = value
"""

    AltTextPrefix = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltTextPrefix(self: AcadDimAlignedClass) -> str

Set: AltTextPrefix(self: AcadDimAlignedClass) = value
"""

    AltTextSuffix = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltTextSuffix(self: AcadDimAlignedClass) -> str

Set: AltTextSuffix(self: AcadDimAlignedClass) = value
"""

    AltTolerancePrecision = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltTolerancePrecision(self: AcadDimAlignedClass) -> AcDimPrecision

Set: AltTolerancePrecision(self: AcadDimAlignedClass) = value
"""

    AltToleranceSuppressLeadingZeros = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltToleranceSuppressLeadingZeros(self: AcadDimAlignedClass) -> bool

Set: AltToleranceSuppressLeadingZeros(self: AcadDimAlignedClass) = value
"""

    AltToleranceSuppressTrailingZeros = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltToleranceSuppressTrailingZeros(self: AcadDimAlignedClass) -> bool

Set: AltToleranceSuppressTrailingZeros(self: AcadDimAlignedClass) = value
"""

    AltToleranceSuppressZeroFeet = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltToleranceSuppressZeroFeet(self: AcadDimAlignedClass) -> bool

Set: AltToleranceSuppressZeroFeet(self: AcadDimAlignedClass) = value
"""

    AltToleranceSuppressZeroInches = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltToleranceSuppressZeroInches(self: AcadDimAlignedClass) -> bool

Set: AltToleranceSuppressZeroInches(self: AcadDimAlignedClass) = value
"""

    AltUnits = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltUnits(self: AcadDimAlignedClass) -> bool

Set: AltUnits(self: AcadDimAlignedClass) = value
"""

    AltUnitsFormat = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltUnitsFormat(self: AcadDimAlignedClass) -> AcDimUnits

Set: AltUnitsFormat(self: AcadDimAlignedClass) = value
"""

    AltUnitsPrecision = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltUnitsPrecision(self: AcadDimAlignedClass) -> AcDimPrecision

Set: AltUnitsPrecision(self: AcadDimAlignedClass) = value
"""

    AltUnitsScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltUnitsScale(self: AcadDimAlignedClass) -> float

Set: AltUnitsScale(self: AcadDimAlignedClass) = value
"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: AcadDimAlignedClass) -> object

"""

    Arrowhead1Block = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Arrowhead1Block(self: AcadDimAlignedClass) -> str

Set: Arrowhead1Block(self: AcadDimAlignedClass) = value
"""

    Arrowhead1Type = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Arrowhead1Type(self: AcadDimAlignedClass) -> AcDimArrowheadType

Set: Arrowhead1Type(self: AcadDimAlignedClass) = value
"""

    Arrowhead2Block = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Arrowhead2Block(self: AcadDimAlignedClass) -> str

Set: Arrowhead2Block(self: AcadDimAlignedClass) = value
"""

    Arrowhead2Type = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Arrowhead2Type(self: AcadDimAlignedClass) -> AcDimArrowheadType

Set: Arrowhead2Type(self: AcadDimAlignedClass) = value
"""

    ArrowheadSize = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ArrowheadSize(self: AcadDimAlignedClass) -> float

Set: ArrowheadSize(self: AcadDimAlignedClass) = value
"""

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: AcadDimAlignedClass) -> ACAD_COLOR

Set: color(self: AcadDimAlignedClass) = value
"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: AcadDimAlignedClass) -> AcadDatabase

"""

    DecimalSeparator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DecimalSeparator(self: AcadDimAlignedClass) -> str

Set: DecimalSeparator(self: AcadDimAlignedClass) = value
"""

    DimConstrDesc = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimConstrDesc(self: AcadDimAlignedClass) -> str

Set: DimConstrDesc(self: AcadDimAlignedClass) = value
"""

    DimConstrExpression = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimConstrExpression(self: AcadDimAlignedClass) -> str

Set: DimConstrExpression(self: AcadDimAlignedClass) = value
"""

    DimConstrForm = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimConstrForm(self: AcadDimAlignedClass) -> bool

Set: DimConstrForm(self: AcadDimAlignedClass) = value
"""

    DimConstrName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimConstrName(self: AcadDimAlignedClass) -> str

Set: DimConstrName(self: AcadDimAlignedClass) = value
"""

    DimConstrReference = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimConstrReference(self: AcadDimAlignedClass) -> bool

Set: DimConstrReference(self: AcadDimAlignedClass) = value
"""

    DimConstrValue = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimConstrValue(self: AcadDimAlignedClass) -> str

Set: DimConstrValue(self: AcadDimAlignedClass) = value
"""

    DimensionLineColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimensionLineColor(self: AcadDimAlignedClass) -> ACAD_COLOR

Set: DimensionLineColor(self: AcadDimAlignedClass) = value
"""

    DimensionLineExtend = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimensionLineExtend(self: AcadDimAlignedClass) -> float

Set: DimensionLineExtend(self: AcadDimAlignedClass) = value
"""

    DimensionLinetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimensionLinetype(self: AcadDimAlignedClass) -> str

Set: DimensionLinetype(self: AcadDimAlignedClass) = value
"""

    DimensionLineWeight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimensionLineWeight(self: AcadDimAlignedClass) -> ACAD_LWEIGHT

Set: DimensionLineWeight(self: AcadDimAlignedClass) = value
"""

    DimLine1Suppress = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimLine1Suppress(self: AcadDimAlignedClass) -> bool

Set: DimLine1Suppress(self: AcadDimAlignedClass) = value
"""

    DimLine2Suppress = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimLine2Suppress(self: AcadDimAlignedClass) -> bool

Set: DimLine2Suppress(self: AcadDimAlignedClass) = value
"""

    DimLineInside = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimLineInside(self: AcadDimAlignedClass) -> bool

Set: DimLineInside(self: AcadDimAlignedClass) = value
"""

    DimTxtDirection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimTxtDirection(self: AcadDimAlignedClass) -> bool

Set: DimTxtDirection(self: AcadDimAlignedClass) = value
"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: AcadDimAlignedClass) -> object

"""

    EntityName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityName(self: AcadDimAlignedClass) -> str

"""

    EntityTransparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityTransparency(self: AcadDimAlignedClass) -> str

Set: EntityTransparency(self: AcadDimAlignedClass) = value
"""

    EntityType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityType(self: AcadDimAlignedClass) -> int

"""

    ExtensionLineColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ExtensionLineColor(self: AcadDimAlignedClass) -> ACAD_COLOR

Set: ExtensionLineColor(self: AcadDimAlignedClass) = value
"""

    ExtensionLineExtend = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ExtensionLineExtend(self: AcadDimAlignedClass) -> float

Set: ExtensionLineExtend(self: AcadDimAlignedClass) = value
"""

    ExtensionLineOffset = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ExtensionLineOffset(self: AcadDimAlignedClass) -> float

Set: ExtensionLineOffset(self: AcadDimAlignedClass) = value
"""

    ExtensionLineWeight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ExtensionLineWeight(self: AcadDimAlignedClass) -> ACAD_LWEIGHT

Set: ExtensionLineWeight(self: AcadDimAlignedClass) = value
"""

    ExtLine1Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ExtLine1Linetype(self: AcadDimAlignedClass) -> str

Set: ExtLine1Linetype(self: AcadDimAlignedClass) = value
"""

    ExtLine1Point = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ExtLine1Point(self: AcadDimAlignedClass) -> object

Set: ExtLine1Point(self: AcadDimAlignedClass) = value
"""

    ExtLine1Suppress = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ExtLine1Suppress(self: AcadDimAlignedClass) -> bool

Set: ExtLine1Suppress(self: AcadDimAlignedClass) = value
"""

    ExtLine2Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ExtLine2Linetype(self: AcadDimAlignedClass) -> str

Set: ExtLine2Linetype(self: AcadDimAlignedClass) = value
"""

    ExtLine2Point = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ExtLine2Point(self: AcadDimAlignedClass) -> object

Set: ExtLine2Point(self: AcadDimAlignedClass) = value
"""

    ExtLine2Suppress = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ExtLine2Suppress(self: AcadDimAlignedClass) -> bool

Set: ExtLine2Suppress(self: AcadDimAlignedClass) = value
"""

    ExtLineFixedLen = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ExtLineFixedLen(self: AcadDimAlignedClass) -> float

Set: ExtLineFixedLen(self: AcadDimAlignedClass) = value
"""

    ExtLineFixedLenSuppress = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ExtLineFixedLenSuppress(self: AcadDimAlignedClass) -> bool

Set: ExtLineFixedLenSuppress(self: AcadDimAlignedClass) = value
"""

    Fit = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Fit(self: AcadDimAlignedClass) -> AcDimFit

Set: Fit(self: AcadDimAlignedClass) = value
"""

    ForceLineInside = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ForceLineInside(self: AcadDimAlignedClass) -> bool

Set: ForceLineInside(self: AcadDimAlignedClass) = value
"""

    FractionFormat = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FractionFormat(self: AcadDimAlignedClass) -> AcDimFractionType

Set: FractionFormat(self: AcadDimAlignedClass) = value
"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: AcadDimAlignedClass) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: AcadDimAlignedClass) -> bool

"""

    HorizontalTextPosition = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HorizontalTextPosition(self: AcadDimAlignedClass) -> AcDimHorizontalJustification

Set: HorizontalTextPosition(self: AcadDimAlignedClass) = value
"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: AcadDimAlignedClass) -> AcadHyperlinks

"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layer(self: AcadDimAlignedClass) -> str

Set: Layer(self: AcadDimAlignedClass) = value
"""

    LinearScaleFactor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinearScaleFactor(self: AcadDimAlignedClass) -> float

Set: LinearScaleFactor(self: AcadDimAlignedClass) = value
"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: AcadDimAlignedClass) -> str

Set: Linetype(self: AcadDimAlignedClass) = value
"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeScale(self: AcadDimAlignedClass) -> float

Set: LinetypeScale(self: AcadDimAlignedClass) = value
"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: AcadDimAlignedClass) -> ACAD_LWEIGHT

Set: Lineweight(self: AcadDimAlignedClass) = value
"""

    Material = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Material(self: AcadDimAlignedClass) -> str

Set: Material(self: AcadDimAlignedClass) = value
"""

    Measurement = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Measurement(self: AcadDimAlignedClass) -> float

"""

    Normal = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Normal(self: AcadDimAlignedClass) -> object

Set: Normal(self: AcadDimAlignedClass) = value
"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: AcadDimAlignedClass) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: AcadDimAlignedClass) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: AcadDimAlignedClass) -> Int64

"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: AcadDimAlignedClass) -> str

Set: PlotStyleName(self: AcadDimAlignedClass) = value
"""

    PrimaryUnitsPrecision = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PrimaryUnitsPrecision(self: AcadDimAlignedClass) -> AcDimPrecision

Set: PrimaryUnitsPrecision(self: AcadDimAlignedClass) = value
"""

    Rotation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Rotation(self: AcadDimAlignedClass) -> float

Set: Rotation(self: AcadDimAlignedClass) = value
"""

    RoundDistance = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RoundDistance(self: AcadDimAlignedClass) -> float

Set: RoundDistance(self: AcadDimAlignedClass) = value
"""

    ScaleFactor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ScaleFactor(self: AcadDimAlignedClass) -> float

Set: ScaleFactor(self: AcadDimAlignedClass) = value
"""

    StyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: StyleName(self: AcadDimAlignedClass) -> str

Set: StyleName(self: AcadDimAlignedClass) = value
"""

    SubUnitsFactor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SubUnitsFactor(self: AcadDimAlignedClass) -> float

Set: SubUnitsFactor(self: AcadDimAlignedClass) = value
"""

    SubUnitsSuffix = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SubUnitsSuffix(self: AcadDimAlignedClass) -> str

Set: SubUnitsSuffix(self: AcadDimAlignedClass) = value
"""

    SuppressLeadingZeros = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SuppressLeadingZeros(self: AcadDimAlignedClass) -> bool

Set: SuppressLeadingZeros(self: AcadDimAlignedClass) = value
"""

    SuppressTrailingZeros = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SuppressTrailingZeros(self: AcadDimAlignedClass) -> bool

Set: SuppressTrailingZeros(self: AcadDimAlignedClass) = value
"""

    SuppressZeroFeet = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SuppressZeroFeet(self: AcadDimAlignedClass) -> bool

Set: SuppressZeroFeet(self: AcadDimAlignedClass) = value
"""

    SuppressZeroInches = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SuppressZeroInches(self: AcadDimAlignedClass) -> bool

Set: SuppressZeroInches(self: AcadDimAlignedClass) = value
"""

    TextColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextColor(self: AcadDimAlignedClass) -> ACAD_COLOR

Set: TextColor(self: AcadDimAlignedClass) = value
"""

    TextFill = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextFill(self: AcadDimAlignedClass) -> bool

Set: TextFill(self: AcadDimAlignedClass) = value
"""

    TextFillColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextFillColor(self: AcadDimAlignedClass) -> ACAD_COLOR

Set: TextFillColor(self: AcadDimAlignedClass) = value
"""

    TextGap = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextGap(self: AcadDimAlignedClass) -> float

Set: TextGap(self: AcadDimAlignedClass) = value
"""

    TextHeight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextHeight(self: AcadDimAlignedClass) -> float

Set: TextHeight(self: AcadDimAlignedClass) = value
"""

    TextInside = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextInside(self: AcadDimAlignedClass) -> bool

Set: TextInside(self: AcadDimAlignedClass) = value
"""

    TextInsideAlign = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextInsideAlign(self: AcadDimAlignedClass) -> bool

Set: TextInsideAlign(self: AcadDimAlignedClass) = value
"""

    TextMovement = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextMovement(self: AcadDimAlignedClass) -> AcDimTextMovement

Set: TextMovement(self: AcadDimAlignedClass) = value
"""

    TextOutsideAlign = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextOutsideAlign(self: AcadDimAlignedClass) -> bool

Set: TextOutsideAlign(self: AcadDimAlignedClass) = value
"""

    TextOverride = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextOverride(self: AcadDimAlignedClass) -> str

Set: TextOverride(self: AcadDimAlignedClass) = value
"""

    TextPosition = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextPosition(self: AcadDimAlignedClass) -> object

Set: TextPosition(self: AcadDimAlignedClass) = value
"""

    TextPrefix = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextPrefix(self: AcadDimAlignedClass) -> str

Set: TextPrefix(self: AcadDimAlignedClass) = value
"""

    TextRotation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextRotation(self: AcadDimAlignedClass) -> float

Set: TextRotation(self: AcadDimAlignedClass) = value
"""

    TextStyle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextStyle(self: AcadDimAlignedClass) -> str

Set: TextStyle(self: AcadDimAlignedClass) = value
"""

    TextSuffix = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextSuffix(self: AcadDimAlignedClass) -> str

Set: TextSuffix(self: AcadDimAlignedClass) = value
"""

    ToleranceDisplay = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceDisplay(self: AcadDimAlignedClass) -> AcDimToleranceMethod

Set: ToleranceDisplay(self: AcadDimAlignedClass) = value
"""

    ToleranceHeightScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceHeightScale(self: AcadDimAlignedClass) -> float

Set: ToleranceHeightScale(self: AcadDimAlignedClass) = value
"""

    ToleranceJustification = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceJustification(self: AcadDimAlignedClass) -> AcDimToleranceJustify

Set: ToleranceJustification(self: AcadDimAlignedClass) = value
"""

    ToleranceLowerLimit = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceLowerLimit(self: AcadDimAlignedClass) -> float

Set: ToleranceLowerLimit(self: AcadDimAlignedClass) = value
"""

    TolerancePrecision = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TolerancePrecision(self: AcadDimAlignedClass) -> AcDimPrecision

Set: TolerancePrecision(self: AcadDimAlignedClass) = value
"""

    ToleranceSuppressLeadingZeros = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceSuppressLeadingZeros(self: AcadDimAlignedClass) -> bool

Set: ToleranceSuppressLeadingZeros(self: AcadDimAlignedClass) = value
"""

    ToleranceSuppressTrailingZeros = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceSuppressTrailingZeros(self: AcadDimAlignedClass) -> bool

Set: ToleranceSuppressTrailingZeros(self: AcadDimAlignedClass) = value
"""

    ToleranceSuppressZeroFeet = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceSuppressZeroFeet(self: AcadDimAlignedClass) -> bool

Set: ToleranceSuppressZeroFeet(self: AcadDimAlignedClass) = value
"""

    ToleranceSuppressZeroInches = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceSuppressZeroInches(self: AcadDimAlignedClass) -> bool

Set: ToleranceSuppressZeroInches(self: AcadDimAlignedClass) = value
"""

    ToleranceUpperLimit = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceUpperLimit(self: AcadDimAlignedClass) -> float

Set: ToleranceUpperLimit(self: AcadDimAlignedClass) = value
"""

    TrueColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TrueColor(self: AcadDimAlignedClass) -> AcadAcCmColor

Set: TrueColor(self: AcadDimAlignedClass) = value
"""

    UnitsFormat = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: UnitsFormat(self: AcadDimAlignedClass) -> AcDimLUnits

Set: UnitsFormat(self: AcadDimAlignedClass) = value
"""

    VerticalTextPosition = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VerticalTextPosition(self: AcadDimAlignedClass) -> AcDimVerticalJustification

Set: VerticalTextPosition(self: AcadDimAlignedClass) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: AcadDimAlignedClass) -> bool

Set: Visible(self: AcadDimAlignedClass) = value
"""


    Modified = None


class IAcadDimAngular(IAcadDimension, IAcadEntity, IAcadObject):
    # no doc
    def ArrayPolar(self, NumberOfObjects, AngleToFill, CenterPoint):
        """ ArrayPolar(self: IAcadDimAngular, NumberOfObjects: int, AngleToFill: float, CenterPoint: object) -> object """
        pass

    def ArrayRectangular(self, NumberOfRows, NumberOfColumns, NumberOfLevels, DistBetweenRows, DistBetweenCols, DistBetweenLevels):
        """ ArrayRectangular(self: IAcadDimAngular, NumberOfRows: int, NumberOfColumns: int, NumberOfLevels: int, DistBetweenRows: float, DistBetweenCols: float, DistBetweenLevels: float) -> object """
        pass

    def Copy(self):
        """ Copy(self: IAcadDimAngular) -> object """
        pass

    def Delete(self):
        """ Delete(self: IAcadDimAngular) """
        pass

    def Erase(self):
        """ Erase(self: IAcadDimAngular) """
        pass

    def GetBoundingBox(self, MinPoint, MaxPoint):
        """ GetBoundingBox(self: IAcadDimAngular) -> (object, object) """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: IAcadDimAngular) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: IAcadDimAngular, AppName: str) -> (object, object) """
        pass

    def Highlight(self, HighlightFlag):
        """ Highlight(self: IAcadDimAngular, HighlightFlag: bool) """
        pass

    def IntersectWith(self, IntersectObject, option):
        """ IntersectWith(self: IAcadDimAngular, IntersectObject: object, option: AcExtendOption) -> object """
        pass

    def Mirror(self, Point1, Point2):
        """ Mirror(self: IAcadDimAngular, Point1: object, Point2: object) -> object """
        pass

    def Mirror3D(self, Point1, Point2, point3):
        """ Mirror3D(self: IAcadDimAngular, Point1: object, Point2: object, point3: object) -> object """
        pass

    def Move(self, FromPoint, ToPoint):
        """ Move(self: IAcadDimAngular, FromPoint: object, ToPoint: object) """
        pass

    def Rotate(self, BasePoint, RotationAngle):
        """ Rotate(self: IAcadDimAngular, BasePoint: object, RotationAngle: float) """
        pass

    def Rotate3D(self, Point1, Point2, RotationAngle):
        """ Rotate3D(self: IAcadDimAngular, Point1: object, Point2: object, RotationAngle: float) """
        pass

    def ScaleEntity(self, BasePoint, ScaleFactor):
        """ ScaleEntity(self: IAcadDimAngular, BasePoint: object, ScaleFactor: float) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: IAcadDimAngular, XDataType: object, XDataValue: object) """
        pass

    def TransformBy(self, TransformationMatrix):
        """ TransformBy(self: IAcadDimAngular, TransformationMatrix: object) """
        pass

    def Update(self):
        """ Update(self: IAcadDimAngular) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    AngleFormat = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AngleFormat(self: IAcadDimAngular) -> AcAngleUnits

Set: AngleFormat(self: IAcadDimAngular) = value
"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IAcadDimAngular) -> object

"""

    Arrowhead1Block = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Arrowhead1Block(self: IAcadDimAngular) -> str

Set: Arrowhead1Block(self: IAcadDimAngular) = value
"""

    Arrowhead1Type = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Arrowhead1Type(self: IAcadDimAngular) -> AcDimArrowheadType

Set: Arrowhead1Type(self: IAcadDimAngular) = value
"""

    Arrowhead2Block = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Arrowhead2Block(self: IAcadDimAngular) -> str

Set: Arrowhead2Block(self: IAcadDimAngular) = value
"""

    Arrowhead2Type = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Arrowhead2Type(self: IAcadDimAngular) -> AcDimArrowheadType

Set: Arrowhead2Type(self: IAcadDimAngular) = value
"""

    ArrowheadSize = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ArrowheadSize(self: IAcadDimAngular) -> float

Set: ArrowheadSize(self: IAcadDimAngular) = value
"""

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: IAcadDimAngular) -> ACAD_COLOR

Set: color(self: IAcadDimAngular) = value
"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: IAcadDimAngular) -> AcadDatabase

"""

    DecimalSeparator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DecimalSeparator(self: IAcadDimAngular) -> str

Set: DecimalSeparator(self: IAcadDimAngular) = value
"""

    DimConstrDesc = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimConstrDesc(self: IAcadDimAngular) -> str

Set: DimConstrDesc(self: IAcadDimAngular) = value
"""

    DimConstrExpression = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimConstrExpression(self: IAcadDimAngular) -> str

Set: DimConstrExpression(self: IAcadDimAngular) = value
"""

    DimConstrForm = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimConstrForm(self: IAcadDimAngular) -> bool

Set: DimConstrForm(self: IAcadDimAngular) = value
"""

    DimConstrName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimConstrName(self: IAcadDimAngular) -> str

Set: DimConstrName(self: IAcadDimAngular) = value
"""

    DimConstrReference = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimConstrReference(self: IAcadDimAngular) -> bool

Set: DimConstrReference(self: IAcadDimAngular) = value
"""

    DimConstrValue = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimConstrValue(self: IAcadDimAngular) -> str

Set: DimConstrValue(self: IAcadDimAngular) = value
"""

    DimensionLineColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimensionLineColor(self: IAcadDimAngular) -> ACAD_COLOR

Set: DimensionLineColor(self: IAcadDimAngular) = value
"""

    DimensionLinetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimensionLinetype(self: IAcadDimAngular) -> str

Set: DimensionLinetype(self: IAcadDimAngular) = value
"""

    DimensionLineWeight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimensionLineWeight(self: IAcadDimAngular) -> ACAD_LWEIGHT

Set: DimensionLineWeight(self: IAcadDimAngular) = value
"""

    DimLine1Suppress = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimLine1Suppress(self: IAcadDimAngular) -> bool

Set: DimLine1Suppress(self: IAcadDimAngular) = value
"""

    DimLine2Suppress = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimLine2Suppress(self: IAcadDimAngular) -> bool

Set: DimLine2Suppress(self: IAcadDimAngular) = value
"""

    DimLineInside = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimLineInside(self: IAcadDimAngular) -> bool

Set: DimLineInside(self: IAcadDimAngular) = value
"""

    DimTxtDirection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimTxtDirection(self: IAcadDimAngular) -> bool

Set: DimTxtDirection(self: IAcadDimAngular) = value
"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: IAcadDimAngular) -> object

"""

    EntityName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityName(self: IAcadDimAngular) -> str

"""

    EntityTransparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityTransparency(self: IAcadDimAngular) -> str

Set: EntityTransparency(self: IAcadDimAngular) = value
"""

    EntityType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityType(self: IAcadDimAngular) -> int

"""

    ExtensionLineColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ExtensionLineColor(self: IAcadDimAngular) -> ACAD_COLOR

Set: ExtensionLineColor(self: IAcadDimAngular) = value
"""

    ExtensionLineExtend = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ExtensionLineExtend(self: IAcadDimAngular) -> float

Set: ExtensionLineExtend(self: IAcadDimAngular) = value
"""

    ExtensionLineOffset = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ExtensionLineOffset(self: IAcadDimAngular) -> float

Set: ExtensionLineOffset(self: IAcadDimAngular) = value
"""

    ExtensionLineWeight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ExtensionLineWeight(self: IAcadDimAngular) -> ACAD_LWEIGHT

Set: ExtensionLineWeight(self: IAcadDimAngular) = value
"""

    ExtLine1EndPoint = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ExtLine1EndPoint(self: IAcadDimAngular) -> object

Set: ExtLine1EndPoint(self: IAcadDimAngular) = value
"""

    ExtLine1Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ExtLine1Linetype(self: IAcadDimAngular) -> str

Set: ExtLine1Linetype(self: IAcadDimAngular) = value
"""

    ExtLine1StartPoint = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ExtLine1StartPoint(self: IAcadDimAngular) -> object

Set: ExtLine1StartPoint(self: IAcadDimAngular) = value
"""

    ExtLine1Suppress = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ExtLine1Suppress(self: IAcadDimAngular) -> bool

Set: ExtLine1Suppress(self: IAcadDimAngular) = value
"""

    ExtLine2EndPoint = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ExtLine2EndPoint(self: IAcadDimAngular) -> object

Set: ExtLine2EndPoint(self: IAcadDimAngular) = value
"""

    ExtLine2Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ExtLine2Linetype(self: IAcadDimAngular) -> str

Set: ExtLine2Linetype(self: IAcadDimAngular) = value
"""

    ExtLine2StartPoint = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ExtLine2StartPoint(self: IAcadDimAngular) -> object

Set: ExtLine2StartPoint(self: IAcadDimAngular) = value
"""

    ExtLine2Suppress = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ExtLine2Suppress(self: IAcadDimAngular) -> bool

Set: ExtLine2Suppress(self: IAcadDimAngular) = value
"""

    ExtLineFixedLen = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ExtLineFixedLen(self: IAcadDimAngular) -> float

Set: ExtLineFixedLen(self: IAcadDimAngular) = value
"""

    ExtLineFixedLenSuppress = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ExtLineFixedLenSuppress(self: IAcadDimAngular) -> bool

Set: ExtLineFixedLenSuppress(self: IAcadDimAngular) = value
"""

    Fit = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Fit(self: IAcadDimAngular) -> AcDimFit

Set: Fit(self: IAcadDimAngular) = value
"""

    ForceLineInside = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ForceLineInside(self: IAcadDimAngular) -> bool

Set: ForceLineInside(self: IAcadDimAngular) = value
"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: IAcadDimAngular) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: IAcadDimAngular) -> bool

"""

    HorizontalTextPosition = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HorizontalTextPosition(self: IAcadDimAngular) -> AcDimHorizontalJustification

Set: HorizontalTextPosition(self: IAcadDimAngular) = value
"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: IAcadDimAngular) -> AcadHyperlinks

"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layer(self: IAcadDimAngular) -> str

Set: Layer(self: IAcadDimAngular) = value
"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: IAcadDimAngular) -> str

Set: Linetype(self: IAcadDimAngular) = value
"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeScale(self: IAcadDimAngular) -> float

Set: LinetypeScale(self: IAcadDimAngular) = value
"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: IAcadDimAngular) -> ACAD_LWEIGHT

Set: Lineweight(self: IAcadDimAngular) = value
"""

    Material = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Material(self: IAcadDimAngular) -> str

Set: Material(self: IAcadDimAngular) = value
"""

    Measurement = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Measurement(self: IAcadDimAngular) -> float

"""

    Normal = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Normal(self: IAcadDimAngular) -> object

Set: Normal(self: IAcadDimAngular) = value
"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: IAcadDimAngular) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: IAcadDimAngular) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: IAcadDimAngular) -> Int64

"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: IAcadDimAngular) -> str

Set: PlotStyleName(self: IAcadDimAngular) = value
"""

    Rotation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Rotation(self: IAcadDimAngular) -> float

Set: Rotation(self: IAcadDimAngular) = value
"""

    ScaleFactor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ScaleFactor(self: IAcadDimAngular) -> float

Set: ScaleFactor(self: IAcadDimAngular) = value
"""

    StyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: StyleName(self: IAcadDimAngular) -> str

Set: StyleName(self: IAcadDimAngular) = value
"""

    SuppressLeadingZeros = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SuppressLeadingZeros(self: IAcadDimAngular) -> bool

Set: SuppressLeadingZeros(self: IAcadDimAngular) = value
"""

    SuppressTrailingZeros = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SuppressTrailingZeros(self: IAcadDimAngular) -> bool

Set: SuppressTrailingZeros(self: IAcadDimAngular) = value
"""

    TextColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextColor(self: IAcadDimAngular) -> ACAD_COLOR

Set: TextColor(self: IAcadDimAngular) = value
"""

    TextFill = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextFill(self: IAcadDimAngular) -> bool

Set: TextFill(self: IAcadDimAngular) = value
"""

    TextFillColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextFillColor(self: IAcadDimAngular) -> ACAD_COLOR

Set: TextFillColor(self: IAcadDimAngular) = value
"""

    TextGap = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextGap(self: IAcadDimAngular) -> float

Set: TextGap(self: IAcadDimAngular) = value
"""

    TextHeight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextHeight(self: IAcadDimAngular) -> float

Set: TextHeight(self: IAcadDimAngular) = value
"""

    TextInside = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextInside(self: IAcadDimAngular) -> bool

Set: TextInside(self: IAcadDimAngular) = value
"""

    TextInsideAlign = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextInsideAlign(self: IAcadDimAngular) -> bool

Set: TextInsideAlign(self: IAcadDimAngular) = value
"""

    TextMovement = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextMovement(self: IAcadDimAngular) -> AcDimTextMovement

Set: TextMovement(self: IAcadDimAngular) = value
"""

    TextOutsideAlign = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextOutsideAlign(self: IAcadDimAngular) -> bool

Set: TextOutsideAlign(self: IAcadDimAngular) = value
"""

    TextOverride = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextOverride(self: IAcadDimAngular) -> str

Set: TextOverride(self: IAcadDimAngular) = value
"""

    TextPosition = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextPosition(self: IAcadDimAngular) -> object

Set: TextPosition(self: IAcadDimAngular) = value
"""

    TextPrecision = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextPrecision(self: IAcadDimAngular) -> AcDimPrecision

Set: TextPrecision(self: IAcadDimAngular) = value
"""

    TextPrefix = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextPrefix(self: IAcadDimAngular) -> str

Set: TextPrefix(self: IAcadDimAngular) = value
"""

    TextRotation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextRotation(self: IAcadDimAngular) -> float

Set: TextRotation(self: IAcadDimAngular) = value
"""

    TextStyle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextStyle(self: IAcadDimAngular) -> str

Set: TextStyle(self: IAcadDimAngular) = value
"""

    TextSuffix = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextSuffix(self: IAcadDimAngular) -> str

Set: TextSuffix(self: IAcadDimAngular) = value
"""

    ToleranceDisplay = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceDisplay(self: IAcadDimAngular) -> AcDimToleranceMethod

Set: ToleranceDisplay(self: IAcadDimAngular) = value
"""

    ToleranceHeightScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceHeightScale(self: IAcadDimAngular) -> float

Set: ToleranceHeightScale(self: IAcadDimAngular) = value
"""

    ToleranceJustification = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceJustification(self: IAcadDimAngular) -> AcDimToleranceJustify

Set: ToleranceJustification(self: IAcadDimAngular) = value
"""

    ToleranceLowerLimit = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceLowerLimit(self: IAcadDimAngular) -> float

Set: ToleranceLowerLimit(self: IAcadDimAngular) = value
"""

    TolerancePrecision = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TolerancePrecision(self: IAcadDimAngular) -> AcDimPrecision

Set: TolerancePrecision(self: IAcadDimAngular) = value
"""

    ToleranceSuppressLeadingZeros = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceSuppressLeadingZeros(self: IAcadDimAngular) -> bool

Set: ToleranceSuppressLeadingZeros(self: IAcadDimAngular) = value
"""

    ToleranceSuppressTrailingZeros = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceSuppressTrailingZeros(self: IAcadDimAngular) -> bool

Set: ToleranceSuppressTrailingZeros(self: IAcadDimAngular) = value
"""

    ToleranceUpperLimit = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceUpperLimit(self: IAcadDimAngular) -> float

Set: ToleranceUpperLimit(self: IAcadDimAngular) = value
"""

    TrueColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TrueColor(self: IAcadDimAngular) -> AcadAcCmColor

Set: TrueColor(self: IAcadDimAngular) = value
"""

    VerticalTextPosition = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VerticalTextPosition(self: IAcadDimAngular) -> AcDimVerticalJustification

Set: VerticalTextPosition(self: IAcadDimAngular) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: IAcadDimAngular) -> bool

Set: Visible(self: IAcadDimAngular) = value
"""



class AcadDimAngular(IAcadDimAngular, IAcadDimension, IAcadEntity, IAcadObject, IAcadObjectEvents_Event):
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class AcadDimAngularClass(__ComObject):
    # no doc
    def add_Modified(self, A_1):
        """ add_Modified(self: AcadDimAngularClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def ArrayPolar(self, NumberOfObjects, AngleToFill, CenterPoint):
        """ ArrayPolar(self: AcadDimAngularClass, NumberOfObjects: int, AngleToFill: float, CenterPoint: object) -> object """
        pass

    def ArrayRectangular(self, NumberOfRows, NumberOfColumns, NumberOfLevels, DistBetweenRows, DistBetweenCols, DistBetweenLevels):
        """ ArrayRectangular(self: AcadDimAngularClass, NumberOfRows: int, NumberOfColumns: int, NumberOfLevels: int, DistBetweenRows: float, DistBetweenCols: float, DistBetweenLevels: float) -> object """
        pass

    def Copy(self):
        """ Copy(self: AcadDimAngularClass) -> object """
        pass

    def Delete(self):
        """ Delete(self: AcadDimAngularClass) """
        pass

    def Erase(self):
        """ Erase(self: AcadDimAngularClass) """
        pass

    def GetBoundingBox(self, MinPoint, MaxPoint):
        """ GetBoundingBox(self: AcadDimAngularClass) -> (object, object) """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: AcadDimAngularClass) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: AcadDimAngularClass, AppName: str) -> (object, object) """
        pass

    def Highlight(self, HighlightFlag):
        """ Highlight(self: AcadDimAngularClass, HighlightFlag: bool) """
        pass

    def IntersectWith(self, IntersectObject, option):
        """ IntersectWith(self: AcadDimAngularClass, IntersectObject: object, option: AcExtendOption) -> object """
        pass

    def Mirror(self, Point1, Point2):
        """ Mirror(self: AcadDimAngularClass, Point1: object, Point2: object) -> object """
        pass

    def Mirror3D(self, Point1, Point2, point3):
        """ Mirror3D(self: AcadDimAngularClass, Point1: object, Point2: object, point3: object) -> object """
        pass

    def Move(self, FromPoint, ToPoint):
        """ Move(self: AcadDimAngularClass, FromPoint: object, ToPoint: object) """
        pass

    def remove_Modified(self, A_1):
        """ remove_Modified(self: AcadDimAngularClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def Rotate(self, BasePoint, RotationAngle):
        """ Rotate(self: AcadDimAngularClass, BasePoint: object, RotationAngle: float) """
        pass

    def Rotate3D(self, Point1, Point2, RotationAngle):
        """ Rotate3D(self: AcadDimAngularClass, Point1: object, Point2: object, RotationAngle: float) """
        pass

    def ScaleEntity(self, BasePoint, ScaleFactor):
        """ ScaleEntity(self: AcadDimAngularClass, BasePoint: object, ScaleFactor: float) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: AcadDimAngularClass, XDataType: object, XDataValue: object) """
        pass

    def TransformBy(self, TransformationMatrix):
        """ TransformBy(self: AcadDimAngularClass, TransformationMatrix: object) """
        pass

    def Update(self):
        """ Update(self: AcadDimAngularClass) """
        pass

    AngleFormat = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AngleFormat(self: AcadDimAngularClass) -> AcAngleUnits

Set: AngleFormat(self: AcadDimAngularClass) = value
"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: AcadDimAngularClass) -> object

"""

    Arrowhead1Block = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Arrowhead1Block(self: AcadDimAngularClass) -> str

Set: Arrowhead1Block(self: AcadDimAngularClass) = value
"""

    Arrowhead1Type = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Arrowhead1Type(self: AcadDimAngularClass) -> AcDimArrowheadType

Set: Arrowhead1Type(self: AcadDimAngularClass) = value
"""

    Arrowhead2Block = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Arrowhead2Block(self: AcadDimAngularClass) -> str

Set: Arrowhead2Block(self: AcadDimAngularClass) = value
"""

    Arrowhead2Type = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Arrowhead2Type(self: AcadDimAngularClass) -> AcDimArrowheadType

Set: Arrowhead2Type(self: AcadDimAngularClass) = value
"""

    ArrowheadSize = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ArrowheadSize(self: AcadDimAngularClass) -> float

Set: ArrowheadSize(self: AcadDimAngularClass) = value
"""

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: AcadDimAngularClass) -> ACAD_COLOR

Set: color(self: AcadDimAngularClass) = value
"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: AcadDimAngularClass) -> AcadDatabase

"""

    DecimalSeparator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DecimalSeparator(self: AcadDimAngularClass) -> str

Set: DecimalSeparator(self: AcadDimAngularClass) = value
"""

    DimConstrDesc = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimConstrDesc(self: AcadDimAngularClass) -> str

Set: DimConstrDesc(self: AcadDimAngularClass) = value
"""

    DimConstrExpression = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimConstrExpression(self: AcadDimAngularClass) -> str

Set: DimConstrExpression(self: AcadDimAngularClass) = value
"""

    DimConstrForm = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimConstrForm(self: AcadDimAngularClass) -> bool

Set: DimConstrForm(self: AcadDimAngularClass) = value
"""

    DimConstrName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimConstrName(self: AcadDimAngularClass) -> str

Set: DimConstrName(self: AcadDimAngularClass) = value
"""

    DimConstrReference = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimConstrReference(self: AcadDimAngularClass) -> bool

Set: DimConstrReference(self: AcadDimAngularClass) = value
"""

    DimConstrValue = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimConstrValue(self: AcadDimAngularClass) -> str

Set: DimConstrValue(self: AcadDimAngularClass) = value
"""

    DimensionLineColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimensionLineColor(self: AcadDimAngularClass) -> ACAD_COLOR

Set: DimensionLineColor(self: AcadDimAngularClass) = value
"""

    DimensionLinetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimensionLinetype(self: AcadDimAngularClass) -> str

Set: DimensionLinetype(self: AcadDimAngularClass) = value
"""

    DimensionLineWeight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimensionLineWeight(self: AcadDimAngularClass) -> ACAD_LWEIGHT

Set: DimensionLineWeight(self: AcadDimAngularClass) = value
"""

    DimLine1Suppress = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimLine1Suppress(self: AcadDimAngularClass) -> bool

Set: DimLine1Suppress(self: AcadDimAngularClass) = value
"""

    DimLine2Suppress = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimLine2Suppress(self: AcadDimAngularClass) -> bool

Set: DimLine2Suppress(self: AcadDimAngularClass) = value
"""

    DimLineInside = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimLineInside(self: AcadDimAngularClass) -> bool

Set: DimLineInside(self: AcadDimAngularClass) = value
"""

    DimTxtDirection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimTxtDirection(self: AcadDimAngularClass) -> bool

Set: DimTxtDirection(self: AcadDimAngularClass) = value
"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: AcadDimAngularClass) -> object

"""

    EntityName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityName(self: AcadDimAngularClass) -> str

"""

    EntityTransparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityTransparency(self: AcadDimAngularClass) -> str

Set: EntityTransparency(self: AcadDimAngularClass) = value
"""

    EntityType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityType(self: AcadDimAngularClass) -> int

"""

    ExtensionLineColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ExtensionLineColor(self: AcadDimAngularClass) -> ACAD_COLOR

Set: ExtensionLineColor(self: AcadDimAngularClass) = value
"""

    ExtensionLineExtend = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ExtensionLineExtend(self: AcadDimAngularClass) -> float

Set: ExtensionLineExtend(self: AcadDimAngularClass) = value
"""

    ExtensionLineOffset = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ExtensionLineOffset(self: AcadDimAngularClass) -> float

Set: ExtensionLineOffset(self: AcadDimAngularClass) = value
"""

    ExtensionLineWeight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ExtensionLineWeight(self: AcadDimAngularClass) -> ACAD_LWEIGHT

Set: ExtensionLineWeight(self: AcadDimAngularClass) = value
"""

    ExtLine1EndPoint = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ExtLine1EndPoint(self: AcadDimAngularClass) -> object

Set: ExtLine1EndPoint(self: AcadDimAngularClass) = value
"""

    ExtLine1Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ExtLine1Linetype(self: AcadDimAngularClass) -> str

Set: ExtLine1Linetype(self: AcadDimAngularClass) = value
"""

    ExtLine1StartPoint = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ExtLine1StartPoint(self: AcadDimAngularClass) -> object

Set: ExtLine1StartPoint(self: AcadDimAngularClass) = value
"""

    ExtLine1Suppress = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ExtLine1Suppress(self: AcadDimAngularClass) -> bool

Set: ExtLine1Suppress(self: AcadDimAngularClass) = value
"""

    ExtLine2EndPoint = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ExtLine2EndPoint(self: AcadDimAngularClass) -> object

Set: ExtLine2EndPoint(self: AcadDimAngularClass) = value
"""

    ExtLine2Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ExtLine2Linetype(self: AcadDimAngularClass) -> str

Set: ExtLine2Linetype(self: AcadDimAngularClass) = value
"""

    ExtLine2StartPoint = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ExtLine2StartPoint(self: AcadDimAngularClass) -> object

Set: ExtLine2StartPoint(self: AcadDimAngularClass) = value
"""

    ExtLine2Suppress = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ExtLine2Suppress(self: AcadDimAngularClass) -> bool

Set: ExtLine2Suppress(self: AcadDimAngularClass) = value
"""

    ExtLineFixedLen = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ExtLineFixedLen(self: AcadDimAngularClass) -> float

Set: ExtLineFixedLen(self: AcadDimAngularClass) = value
"""

    ExtLineFixedLenSuppress = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ExtLineFixedLenSuppress(self: AcadDimAngularClass) -> bool

Set: ExtLineFixedLenSuppress(self: AcadDimAngularClass) = value
"""

    Fit = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Fit(self: AcadDimAngularClass) -> AcDimFit

Set: Fit(self: AcadDimAngularClass) = value
"""

    ForceLineInside = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ForceLineInside(self: AcadDimAngularClass) -> bool

Set: ForceLineInside(self: AcadDimAngularClass) = value
"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: AcadDimAngularClass) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: AcadDimAngularClass) -> bool

"""

    HorizontalTextPosition = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HorizontalTextPosition(self: AcadDimAngularClass) -> AcDimHorizontalJustification

Set: HorizontalTextPosition(self: AcadDimAngularClass) = value
"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: AcadDimAngularClass) -> AcadHyperlinks

"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layer(self: AcadDimAngularClass) -> str

Set: Layer(self: AcadDimAngularClass) = value
"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: AcadDimAngularClass) -> str

Set: Linetype(self: AcadDimAngularClass) = value
"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeScale(self: AcadDimAngularClass) -> float

Set: LinetypeScale(self: AcadDimAngularClass) = value
"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: AcadDimAngularClass) -> ACAD_LWEIGHT

Set: Lineweight(self: AcadDimAngularClass) = value
"""

    Material = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Material(self: AcadDimAngularClass) -> str

Set: Material(self: AcadDimAngularClass) = value
"""

    Measurement = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Measurement(self: AcadDimAngularClass) -> float

"""

    Normal = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Normal(self: AcadDimAngularClass) -> object

Set: Normal(self: AcadDimAngularClass) = value
"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: AcadDimAngularClass) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: AcadDimAngularClass) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: AcadDimAngularClass) -> Int64

"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: AcadDimAngularClass) -> str

Set: PlotStyleName(self: AcadDimAngularClass) = value
"""

    Rotation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Rotation(self: AcadDimAngularClass) -> float

Set: Rotation(self: AcadDimAngularClass) = value
"""

    ScaleFactor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ScaleFactor(self: AcadDimAngularClass) -> float

Set: ScaleFactor(self: AcadDimAngularClass) = value
"""

    StyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: StyleName(self: AcadDimAngularClass) -> str

Set: StyleName(self: AcadDimAngularClass) = value
"""

    SuppressLeadingZeros = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SuppressLeadingZeros(self: AcadDimAngularClass) -> bool

Set: SuppressLeadingZeros(self: AcadDimAngularClass) = value
"""

    SuppressTrailingZeros = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SuppressTrailingZeros(self: AcadDimAngularClass) -> bool

Set: SuppressTrailingZeros(self: AcadDimAngularClass) = value
"""

    TextColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextColor(self: AcadDimAngularClass) -> ACAD_COLOR

Set: TextColor(self: AcadDimAngularClass) = value
"""

    TextFill = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextFill(self: AcadDimAngularClass) -> bool

Set: TextFill(self: AcadDimAngularClass) = value
"""

    TextFillColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextFillColor(self: AcadDimAngularClass) -> ACAD_COLOR

Set: TextFillColor(self: AcadDimAngularClass) = value
"""

    TextGap = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextGap(self: AcadDimAngularClass) -> float

Set: TextGap(self: AcadDimAngularClass) = value
"""

    TextHeight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextHeight(self: AcadDimAngularClass) -> float

Set: TextHeight(self: AcadDimAngularClass) = value
"""

    TextInside = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextInside(self: AcadDimAngularClass) -> bool

Set: TextInside(self: AcadDimAngularClass) = value
"""

    TextInsideAlign = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextInsideAlign(self: AcadDimAngularClass) -> bool

Set: TextInsideAlign(self: AcadDimAngularClass) = value
"""

    TextMovement = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextMovement(self: AcadDimAngularClass) -> AcDimTextMovement

Set: TextMovement(self: AcadDimAngularClass) = value
"""

    TextOutsideAlign = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextOutsideAlign(self: AcadDimAngularClass) -> bool

Set: TextOutsideAlign(self: AcadDimAngularClass) = value
"""

    TextOverride = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextOverride(self: AcadDimAngularClass) -> str

Set: TextOverride(self: AcadDimAngularClass) = value
"""

    TextPosition = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextPosition(self: AcadDimAngularClass) -> object

Set: TextPosition(self: AcadDimAngularClass) = value
"""

    TextPrecision = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextPrecision(self: AcadDimAngularClass) -> AcDimPrecision

Set: TextPrecision(self: AcadDimAngularClass) = value
"""

    TextPrefix = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextPrefix(self: AcadDimAngularClass) -> str

Set: TextPrefix(self: AcadDimAngularClass) = value
"""

    TextRotation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextRotation(self: AcadDimAngularClass) -> float

Set: TextRotation(self: AcadDimAngularClass) = value
"""

    TextStyle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextStyle(self: AcadDimAngularClass) -> str

Set: TextStyle(self: AcadDimAngularClass) = value
"""

    TextSuffix = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextSuffix(self: AcadDimAngularClass) -> str

Set: TextSuffix(self: AcadDimAngularClass) = value
"""

    ToleranceDisplay = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceDisplay(self: AcadDimAngularClass) -> AcDimToleranceMethod

Set: ToleranceDisplay(self: AcadDimAngularClass) = value
"""

    ToleranceHeightScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceHeightScale(self: AcadDimAngularClass) -> float

Set: ToleranceHeightScale(self: AcadDimAngularClass) = value
"""

    ToleranceJustification = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceJustification(self: AcadDimAngularClass) -> AcDimToleranceJustify

Set: ToleranceJustification(self: AcadDimAngularClass) = value
"""

    ToleranceLowerLimit = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceLowerLimit(self: AcadDimAngularClass) -> float

Set: ToleranceLowerLimit(self: AcadDimAngularClass) = value
"""

    TolerancePrecision = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TolerancePrecision(self: AcadDimAngularClass) -> AcDimPrecision

Set: TolerancePrecision(self: AcadDimAngularClass) = value
"""

    ToleranceSuppressLeadingZeros = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceSuppressLeadingZeros(self: AcadDimAngularClass) -> bool

Set: ToleranceSuppressLeadingZeros(self: AcadDimAngularClass) = value
"""

    ToleranceSuppressTrailingZeros = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceSuppressTrailingZeros(self: AcadDimAngularClass) -> bool

Set: ToleranceSuppressTrailingZeros(self: AcadDimAngularClass) = value
"""

    ToleranceUpperLimit = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceUpperLimit(self: AcadDimAngularClass) -> float

Set: ToleranceUpperLimit(self: AcadDimAngularClass) = value
"""

    TrueColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TrueColor(self: AcadDimAngularClass) -> AcadAcCmColor

Set: TrueColor(self: AcadDimAngularClass) = value
"""

    VerticalTextPosition = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VerticalTextPosition(self: AcadDimAngularClass) -> AcDimVerticalJustification

Set: VerticalTextPosition(self: AcadDimAngularClass) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: AcadDimAngularClass) -> bool

Set: Visible(self: AcadDimAngularClass) = value
"""


    Modified = None


class IAcadDimArcLength(IAcadDimension, IAcadEntity, IAcadObject):
    # no doc
    def ArrayPolar(self, NumberOfObjects, AngleToFill, CenterPoint):
        """ ArrayPolar(self: IAcadDimArcLength, NumberOfObjects: int, AngleToFill: float, CenterPoint: object) -> object """
        pass

    def ArrayRectangular(self, NumberOfRows, NumberOfColumns, NumberOfLevels, DistBetweenRows, DistBetweenCols, DistBetweenLevels):
        """ ArrayRectangular(self: IAcadDimArcLength, NumberOfRows: int, NumberOfColumns: int, NumberOfLevels: int, DistBetweenRows: float, DistBetweenCols: float, DistBetweenLevels: float) -> object """
        pass

    def Copy(self):
        """ Copy(self: IAcadDimArcLength) -> object """
        pass

    def Delete(self):
        """ Delete(self: IAcadDimArcLength) """
        pass

    def Erase(self):
        """ Erase(self: IAcadDimArcLength) """
        pass

    def GetBoundingBox(self, MinPoint, MaxPoint):
        """ GetBoundingBox(self: IAcadDimArcLength) -> (object, object) """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: IAcadDimArcLength) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: IAcadDimArcLength, AppName: str) -> (object, object) """
        pass

    def Highlight(self, HighlightFlag):
        """ Highlight(self: IAcadDimArcLength, HighlightFlag: bool) """
        pass

    def IntersectWith(self, IntersectObject, option):
        """ IntersectWith(self: IAcadDimArcLength, IntersectObject: object, option: AcExtendOption) -> object """
        pass

    def Mirror(self, Point1, Point2):
        """ Mirror(self: IAcadDimArcLength, Point1: object, Point2: object) -> object """
        pass

    def Mirror3D(self, Point1, Point2, point3):
        """ Mirror3D(self: IAcadDimArcLength, Point1: object, Point2: object, point3: object) -> object """
        pass

    def Move(self, FromPoint, ToPoint):
        """ Move(self: IAcadDimArcLength, FromPoint: object, ToPoint: object) """
        pass

    def Rotate(self, BasePoint, RotationAngle):
        """ Rotate(self: IAcadDimArcLength, BasePoint: object, RotationAngle: float) """
        pass

    def Rotate3D(self, Point1, Point2, RotationAngle):
        """ Rotate3D(self: IAcadDimArcLength, Point1: object, Point2: object, RotationAngle: float) """
        pass

    def ScaleEntity(self, BasePoint, ScaleFactor):
        """ ScaleEntity(self: IAcadDimArcLength, BasePoint: object, ScaleFactor: float) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: IAcadDimArcLength, XDataType: object, XDataValue: object) """
        pass

    def TransformBy(self, TransformationMatrix):
        """ TransformBy(self: IAcadDimArcLength, TransformationMatrix: object) """
        pass

    def Update(self):
        """ Update(self: IAcadDimArcLength) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    AltRoundDistance = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltRoundDistance(self: IAcadDimArcLength) -> float

Set: AltRoundDistance(self: IAcadDimArcLength) = value
"""

    AltSubUnitsFactor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltSubUnitsFactor(self: IAcadDimArcLength) -> float

Set: AltSubUnitsFactor(self: IAcadDimArcLength) = value
"""

    AltSubUnitsSuffix = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltSubUnitsSuffix(self: IAcadDimArcLength) -> str

Set: AltSubUnitsSuffix(self: IAcadDimArcLength) = value
"""

    AltSuppressLeadingZeros = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltSuppressLeadingZeros(self: IAcadDimArcLength) -> bool

Set: AltSuppressLeadingZeros(self: IAcadDimArcLength) = value
"""

    AltSuppressTrailingZeros = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltSuppressTrailingZeros(self: IAcadDimArcLength) -> bool

Set: AltSuppressTrailingZeros(self: IAcadDimArcLength) = value
"""

    AltSuppressZeroFeet = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltSuppressZeroFeet(self: IAcadDimArcLength) -> bool

Set: AltSuppressZeroFeet(self: IAcadDimArcLength) = value
"""

    AltSuppressZeroInches = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltSuppressZeroInches(self: IAcadDimArcLength) -> bool

Set: AltSuppressZeroInches(self: IAcadDimArcLength) = value
"""

    AltTextPrefix = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltTextPrefix(self: IAcadDimArcLength) -> str

Set: AltTextPrefix(self: IAcadDimArcLength) = value
"""

    AltTextSuffix = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltTextSuffix(self: IAcadDimArcLength) -> str

Set: AltTextSuffix(self: IAcadDimArcLength) = value
"""

    AltTolerancePrecision = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltTolerancePrecision(self: IAcadDimArcLength) -> AcDimPrecision

Set: AltTolerancePrecision(self: IAcadDimArcLength) = value
"""

    AltToleranceSuppressLeadingZeros = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltToleranceSuppressLeadingZeros(self: IAcadDimArcLength) -> bool

Set: AltToleranceSuppressLeadingZeros(self: IAcadDimArcLength) = value
"""

    AltToleranceSuppressTrailingZeros = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltToleranceSuppressTrailingZeros(self: IAcadDimArcLength) -> bool

Set: AltToleranceSuppressTrailingZeros(self: IAcadDimArcLength) = value
"""

    AltToleranceSuppressZeroFeet = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltToleranceSuppressZeroFeet(self: IAcadDimArcLength) -> bool

Set: AltToleranceSuppressZeroFeet(self: IAcadDimArcLength) = value
"""

    AltToleranceSuppressZeroInches = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltToleranceSuppressZeroInches(self: IAcadDimArcLength) -> bool

Set: AltToleranceSuppressZeroInches(self: IAcadDimArcLength) = value
"""

    AltUnits = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltUnits(self: IAcadDimArcLength) -> bool

Set: AltUnits(self: IAcadDimArcLength) = value
"""

    AltUnitsFormat = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltUnitsFormat(self: IAcadDimArcLength) -> AcDimUnits

Set: AltUnitsFormat(self: IAcadDimArcLength) = value
"""

    AltUnitsPrecision = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltUnitsPrecision(self: IAcadDimArcLength) -> AcDimPrecision

Set: AltUnitsPrecision(self: IAcadDimArcLength) = value
"""

    AltUnitsScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltUnitsScale(self: IAcadDimArcLength) -> float

Set: AltUnitsScale(self: IAcadDimArcLength) = value
"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IAcadDimArcLength) -> object

"""

    ArcEndParam = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ArcEndParam(self: IAcadDimArcLength) -> float

Set: ArcEndParam(self: IAcadDimArcLength) = value
"""

    ArcPoint = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ArcPoint(self: IAcadDimArcLength) -> object

Set: ArcPoint(self: IAcadDimArcLength) = value
"""

    ArcStartParam = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ArcStartParam(self: IAcadDimArcLength) -> float

Set: ArcStartParam(self: IAcadDimArcLength) = value
"""

    Arrowhead1Block = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Arrowhead1Block(self: IAcadDimArcLength) -> str

Set: Arrowhead1Block(self: IAcadDimArcLength) = value
"""

    Arrowhead1Type = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Arrowhead1Type(self: IAcadDimArcLength) -> AcDimArrowheadType

Set: Arrowhead1Type(self: IAcadDimArcLength) = value
"""

    Arrowhead2Block = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Arrowhead2Block(self: IAcadDimArcLength) -> str

Set: Arrowhead2Block(self: IAcadDimArcLength) = value
"""

    Arrowhead2Type = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Arrowhead2Type(self: IAcadDimArcLength) -> AcDimArrowheadType

Set: Arrowhead2Type(self: IAcadDimArcLength) = value
"""

    ArrowheadSize = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ArrowheadSize(self: IAcadDimArcLength) -> float

Set: ArrowheadSize(self: IAcadDimArcLength) = value
"""

    CenterPoint = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CenterPoint(self: IAcadDimArcLength) -> object

Set: CenterPoint(self: IAcadDimArcLength) = value
"""

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: IAcadDimArcLength) -> ACAD_COLOR

Set: color(self: IAcadDimArcLength) = value
"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: IAcadDimArcLength) -> AcadDatabase

"""

    DecimalSeparator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DecimalSeparator(self: IAcadDimArcLength) -> str

Set: DecimalSeparator(self: IAcadDimArcLength) = value
"""

    DimensionLineColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimensionLineColor(self: IAcadDimArcLength) -> ACAD_COLOR

Set: DimensionLineColor(self: IAcadDimArcLength) = value
"""

    DimensionLineExtend = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimensionLineExtend(self: IAcadDimArcLength) -> float

Set: DimensionLineExtend(self: IAcadDimArcLength) = value
"""

    DimensionLinetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimensionLinetype(self: IAcadDimArcLength) -> str

Set: DimensionLinetype(self: IAcadDimArcLength) = value
"""

    DimensionLineWeight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimensionLineWeight(self: IAcadDimArcLength) -> ACAD_LWEIGHT

Set: DimensionLineWeight(self: IAcadDimArcLength) = value
"""

    DimLine1Suppress = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimLine1Suppress(self: IAcadDimArcLength) -> bool

Set: DimLine1Suppress(self: IAcadDimArcLength) = value
"""

    DimLine2Suppress = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimLine2Suppress(self: IAcadDimArcLength) -> bool

Set: DimLine2Suppress(self: IAcadDimArcLength) = value
"""

    DimLineInside = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimLineInside(self: IAcadDimArcLength) -> bool

Set: DimLineInside(self: IAcadDimArcLength) = value
"""

    DimTxtDirection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimTxtDirection(self: IAcadDimArcLength) -> bool

Set: DimTxtDirection(self: IAcadDimArcLength) = value
"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: IAcadDimArcLength) -> object

"""

    EntityName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityName(self: IAcadDimArcLength) -> str

"""

    EntityTransparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityTransparency(self: IAcadDimArcLength) -> str

Set: EntityTransparency(self: IAcadDimArcLength) = value
"""

    EntityType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityType(self: IAcadDimArcLength) -> int

"""

    ExtensionLineColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ExtensionLineColor(self: IAcadDimArcLength) -> ACAD_COLOR

Set: ExtensionLineColor(self: IAcadDimArcLength) = value
"""

    ExtensionLineExtend = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ExtensionLineExtend(self: IAcadDimArcLength) -> float

Set: ExtensionLineExtend(self: IAcadDimArcLength) = value
"""

    ExtensionLineOffset = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ExtensionLineOffset(self: IAcadDimArcLength) -> float

Set: ExtensionLineOffset(self: IAcadDimArcLength) = value
"""

    ExtensionLineWeight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ExtensionLineWeight(self: IAcadDimArcLength) -> ACAD_LWEIGHT

Set: ExtensionLineWeight(self: IAcadDimArcLength) = value
"""

    ExtLine1Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ExtLine1Linetype(self: IAcadDimArcLength) -> str

Set: ExtLine1Linetype(self: IAcadDimArcLength) = value
"""

    ExtLine1Point = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ExtLine1Point(self: IAcadDimArcLength) -> object

Set: ExtLine1Point(self: IAcadDimArcLength) = value
"""

    ExtLine1Suppress = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ExtLine1Suppress(self: IAcadDimArcLength) -> bool

Set: ExtLine1Suppress(self: IAcadDimArcLength) = value
"""

    ExtLine2Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ExtLine2Linetype(self: IAcadDimArcLength) -> str

Set: ExtLine2Linetype(self: IAcadDimArcLength) = value
"""

    ExtLine2Point = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ExtLine2Point(self: IAcadDimArcLength) -> object

Set: ExtLine2Point(self: IAcadDimArcLength) = value
"""

    ExtLine2Suppress = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ExtLine2Suppress(self: IAcadDimArcLength) -> bool

Set: ExtLine2Suppress(self: IAcadDimArcLength) = value
"""

    ExtLineFixedLen = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ExtLineFixedLen(self: IAcadDimArcLength) -> float

Set: ExtLineFixedLen(self: IAcadDimArcLength) = value
"""

    ExtLineFixedLenSuppress = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ExtLineFixedLenSuppress(self: IAcadDimArcLength) -> bool

Set: ExtLineFixedLenSuppress(self: IAcadDimArcLength) = value
"""

    Fit = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Fit(self: IAcadDimArcLength) -> AcDimFit

Set: Fit(self: IAcadDimArcLength) = value
"""

    ForceLineInside = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ForceLineInside(self: IAcadDimArcLength) -> bool

Set: ForceLineInside(self: IAcadDimArcLength) = value
"""

    FractionFormat = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FractionFormat(self: IAcadDimArcLength) -> AcDimFractionType

Set: FractionFormat(self: IAcadDimArcLength) = value
"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: IAcadDimArcLength) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: IAcadDimArcLength) -> bool

"""

    HasLeader = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasLeader(self: IAcadDimArcLength) -> bool

Set: HasLeader(self: IAcadDimArcLength) = value
"""

    HorizontalTextPosition = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HorizontalTextPosition(self: IAcadDimArcLength) -> AcDimHorizontalJustification

Set: HorizontalTextPosition(self: IAcadDimArcLength) = value
"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: IAcadDimArcLength) -> AcadHyperlinks

"""

    IsPartial = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IsPartial(self: IAcadDimArcLength) -> bool

Set: IsPartial(self: IAcadDimArcLength) = value
"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layer(self: IAcadDimArcLength) -> str

Set: Layer(self: IAcadDimArcLength) = value
"""

    Leader1Point = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Leader1Point(self: IAcadDimArcLength) -> object

Set: Leader1Point(self: IAcadDimArcLength) = value
"""

    Leader2Point = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Leader2Point(self: IAcadDimArcLength) -> object

Set: Leader2Point(self: IAcadDimArcLength) = value
"""

    LinearScaleFactor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinearScaleFactor(self: IAcadDimArcLength) -> float

Set: LinearScaleFactor(self: IAcadDimArcLength) = value
"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: IAcadDimArcLength) -> str

Set: Linetype(self: IAcadDimArcLength) = value
"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeScale(self: IAcadDimArcLength) -> float

Set: LinetypeScale(self: IAcadDimArcLength) = value
"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: IAcadDimArcLength) -> ACAD_LWEIGHT

Set: Lineweight(self: IAcadDimArcLength) = value
"""

    Material = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Material(self: IAcadDimArcLength) -> str

Set: Material(self: IAcadDimArcLength) = value
"""

    Measurement = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Measurement(self: IAcadDimArcLength) -> float

"""

    Normal = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Normal(self: IAcadDimArcLength) -> object

Set: Normal(self: IAcadDimArcLength) = value
"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: IAcadDimArcLength) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: IAcadDimArcLength) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: IAcadDimArcLength) -> Int64

"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: IAcadDimArcLength) -> str

Set: PlotStyleName(self: IAcadDimArcLength) = value
"""

    PrimaryUnitsPrecision = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PrimaryUnitsPrecision(self: IAcadDimArcLength) -> AcDimPrecision

Set: PrimaryUnitsPrecision(self: IAcadDimArcLength) = value
"""

    Rotation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Rotation(self: IAcadDimArcLength) -> float

Set: Rotation(self: IAcadDimArcLength) = value
"""

    RoundDistance = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RoundDistance(self: IAcadDimArcLength) -> float

Set: RoundDistance(self: IAcadDimArcLength) = value
"""

    ScaleFactor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ScaleFactor(self: IAcadDimArcLength) -> float

Set: ScaleFactor(self: IAcadDimArcLength) = value
"""

    StyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: StyleName(self: IAcadDimArcLength) -> str

Set: StyleName(self: IAcadDimArcLength) = value
"""

    SubUnitsFactor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SubUnitsFactor(self: IAcadDimArcLength) -> float

Set: SubUnitsFactor(self: IAcadDimArcLength) = value
"""

    SubUnitsSuffix = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SubUnitsSuffix(self: IAcadDimArcLength) -> str

Set: SubUnitsSuffix(self: IAcadDimArcLength) = value
"""

    SuppressLeadingZeros = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SuppressLeadingZeros(self: IAcadDimArcLength) -> bool

Set: SuppressLeadingZeros(self: IAcadDimArcLength) = value
"""

    SuppressTrailingZeros = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SuppressTrailingZeros(self: IAcadDimArcLength) -> bool

Set: SuppressTrailingZeros(self: IAcadDimArcLength) = value
"""

    SuppressZeroFeet = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SuppressZeroFeet(self: IAcadDimArcLength) -> bool

Set: SuppressZeroFeet(self: IAcadDimArcLength) = value
"""

    SuppressZeroInches = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SuppressZeroInches(self: IAcadDimArcLength) -> bool

Set: SuppressZeroInches(self: IAcadDimArcLength) = value
"""

    SymbolPosition = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SymbolPosition(self: IAcadDimArcLength) -> AcDimArcLengthSymbol

Set: SymbolPosition(self: IAcadDimArcLength) = value
"""

    TextColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextColor(self: IAcadDimArcLength) -> ACAD_COLOR

Set: TextColor(self: IAcadDimArcLength) = value
"""

    TextFill = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextFill(self: IAcadDimArcLength) -> bool

Set: TextFill(self: IAcadDimArcLength) = value
"""

    TextFillColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextFillColor(self: IAcadDimArcLength) -> ACAD_COLOR

Set: TextFillColor(self: IAcadDimArcLength) = value
"""

    TextGap = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextGap(self: IAcadDimArcLength) -> float

Set: TextGap(self: IAcadDimArcLength) = value
"""

    TextHeight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextHeight(self: IAcadDimArcLength) -> float

Set: TextHeight(self: IAcadDimArcLength) = value
"""

    TextInside = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextInside(self: IAcadDimArcLength) -> bool

Set: TextInside(self: IAcadDimArcLength) = value
"""

    TextInsideAlign = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextInsideAlign(self: IAcadDimArcLength) -> bool

Set: TextInsideAlign(self: IAcadDimArcLength) = value
"""

    TextMovement = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextMovement(self: IAcadDimArcLength) -> AcDimTextMovement

Set: TextMovement(self: IAcadDimArcLength) = value
"""

    TextOutsideAlign = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextOutsideAlign(self: IAcadDimArcLength) -> bool

Set: TextOutsideAlign(self: IAcadDimArcLength) = value
"""

    TextOverride = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextOverride(self: IAcadDimArcLength) -> str

Set: TextOverride(self: IAcadDimArcLength) = value
"""

    TextPosition = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextPosition(self: IAcadDimArcLength) -> object

Set: TextPosition(self: IAcadDimArcLength) = value
"""

    TextPrefix = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextPrefix(self: IAcadDimArcLength) -> str

Set: TextPrefix(self: IAcadDimArcLength) = value
"""

    TextRotation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextRotation(self: IAcadDimArcLength) -> float

Set: TextRotation(self: IAcadDimArcLength) = value
"""

    TextStyle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextStyle(self: IAcadDimArcLength) -> str

Set: TextStyle(self: IAcadDimArcLength) = value
"""

    TextSuffix = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextSuffix(self: IAcadDimArcLength) -> str

Set: TextSuffix(self: IAcadDimArcLength) = value
"""

    ToleranceDisplay = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceDisplay(self: IAcadDimArcLength) -> AcDimToleranceMethod

Set: ToleranceDisplay(self: IAcadDimArcLength) = value
"""

    ToleranceHeightScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceHeightScale(self: IAcadDimArcLength) -> float

Set: ToleranceHeightScale(self: IAcadDimArcLength) = value
"""

    ToleranceJustification = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceJustification(self: IAcadDimArcLength) -> AcDimToleranceJustify

Set: ToleranceJustification(self: IAcadDimArcLength) = value
"""

    ToleranceLowerLimit = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceLowerLimit(self: IAcadDimArcLength) -> float

Set: ToleranceLowerLimit(self: IAcadDimArcLength) = value
"""

    TolerancePrecision = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TolerancePrecision(self: IAcadDimArcLength) -> AcDimPrecision

Set: TolerancePrecision(self: IAcadDimArcLength) = value
"""

    ToleranceSuppressLeadingZeros = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceSuppressLeadingZeros(self: IAcadDimArcLength) -> bool

Set: ToleranceSuppressLeadingZeros(self: IAcadDimArcLength) = value
"""

    ToleranceSuppressTrailingZeros = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceSuppressTrailingZeros(self: IAcadDimArcLength) -> bool

Set: ToleranceSuppressTrailingZeros(self: IAcadDimArcLength) = value
"""

    ToleranceSuppressZeroFeet = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceSuppressZeroFeet(self: IAcadDimArcLength) -> bool

Set: ToleranceSuppressZeroFeet(self: IAcadDimArcLength) = value
"""

    ToleranceSuppressZeroInches = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceSuppressZeroInches(self: IAcadDimArcLength) -> bool

Set: ToleranceSuppressZeroInches(self: IAcadDimArcLength) = value
"""

    ToleranceUpperLimit = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceUpperLimit(self: IAcadDimArcLength) -> float

Set: ToleranceUpperLimit(self: IAcadDimArcLength) = value
"""

    TrueColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TrueColor(self: IAcadDimArcLength) -> AcadAcCmColor

Set: TrueColor(self: IAcadDimArcLength) = value
"""

    UnitsFormat = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: UnitsFormat(self: IAcadDimArcLength) -> AcDimLUnits

Set: UnitsFormat(self: IAcadDimArcLength) = value
"""

    VerticalTextPosition = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VerticalTextPosition(self: IAcadDimArcLength) -> AcDimVerticalJustification

Set: VerticalTextPosition(self: IAcadDimArcLength) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: IAcadDimArcLength) -> bool

Set: Visible(self: IAcadDimArcLength) = value
"""



class AcadDimArcLength(IAcadDimArcLength, IAcadDimension, IAcadEntity, IAcadObject, IAcadObjectEvents_Event):
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class AcadDimArcLengthClass(__ComObject):
    # no doc
    def add_Modified(self, A_1):
        """ add_Modified(self: AcadDimArcLengthClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def ArrayPolar(self, NumberOfObjects, AngleToFill, CenterPoint):
        """ ArrayPolar(self: AcadDimArcLengthClass, NumberOfObjects: int, AngleToFill: float, CenterPoint: object) -> object """
        pass

    def ArrayRectangular(self, NumberOfRows, NumberOfColumns, NumberOfLevels, DistBetweenRows, DistBetweenCols, DistBetweenLevels):
        """ ArrayRectangular(self: AcadDimArcLengthClass, NumberOfRows: int, NumberOfColumns: int, NumberOfLevels: int, DistBetweenRows: float, DistBetweenCols: float, DistBetweenLevels: float) -> object """
        pass

    def Copy(self):
        """ Copy(self: AcadDimArcLengthClass) -> object """
        pass

    def Delete(self):
        """ Delete(self: AcadDimArcLengthClass) """
        pass

    def Erase(self):
        """ Erase(self: AcadDimArcLengthClass) """
        pass

    def GetBoundingBox(self, MinPoint, MaxPoint):
        """ GetBoundingBox(self: AcadDimArcLengthClass) -> (object, object) """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: AcadDimArcLengthClass) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: AcadDimArcLengthClass, AppName: str) -> (object, object) """
        pass

    def Highlight(self, HighlightFlag):
        """ Highlight(self: AcadDimArcLengthClass, HighlightFlag: bool) """
        pass

    def IntersectWith(self, IntersectObject, option):
        """ IntersectWith(self: AcadDimArcLengthClass, IntersectObject: object, option: AcExtendOption) -> object """
        pass

    def Mirror(self, Point1, Point2):
        """ Mirror(self: AcadDimArcLengthClass, Point1: object, Point2: object) -> object """
        pass

    def Mirror3D(self, Point1, Point2, point3):
        """ Mirror3D(self: AcadDimArcLengthClass, Point1: object, Point2: object, point3: object) -> object """
        pass

    def Move(self, FromPoint, ToPoint):
        """ Move(self: AcadDimArcLengthClass, FromPoint: object, ToPoint: object) """
        pass

    def remove_Modified(self, A_1):
        """ remove_Modified(self: AcadDimArcLengthClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def Rotate(self, BasePoint, RotationAngle):
        """ Rotate(self: AcadDimArcLengthClass, BasePoint: object, RotationAngle: float) """
        pass

    def Rotate3D(self, Point1, Point2, RotationAngle):
        """ Rotate3D(self: AcadDimArcLengthClass, Point1: object, Point2: object, RotationAngle: float) """
        pass

    def ScaleEntity(self, BasePoint, ScaleFactor):
        """ ScaleEntity(self: AcadDimArcLengthClass, BasePoint: object, ScaleFactor: float) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: AcadDimArcLengthClass, XDataType: object, XDataValue: object) """
        pass

    def TransformBy(self, TransformationMatrix):
        """ TransformBy(self: AcadDimArcLengthClass, TransformationMatrix: object) """
        pass

    def Update(self):
        """ Update(self: AcadDimArcLengthClass) """
        pass

    AltRoundDistance = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltRoundDistance(self: AcadDimArcLengthClass) -> float

Set: AltRoundDistance(self: AcadDimArcLengthClass) = value
"""

    AltSubUnitsFactor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltSubUnitsFactor(self: AcadDimArcLengthClass) -> float

Set: AltSubUnitsFactor(self: AcadDimArcLengthClass) = value
"""

    AltSubUnitsSuffix = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltSubUnitsSuffix(self: AcadDimArcLengthClass) -> str

Set: AltSubUnitsSuffix(self: AcadDimArcLengthClass) = value
"""

    AltSuppressLeadingZeros = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltSuppressLeadingZeros(self: AcadDimArcLengthClass) -> bool

Set: AltSuppressLeadingZeros(self: AcadDimArcLengthClass) = value
"""

    AltSuppressTrailingZeros = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltSuppressTrailingZeros(self: AcadDimArcLengthClass) -> bool

Set: AltSuppressTrailingZeros(self: AcadDimArcLengthClass) = value
"""

    AltSuppressZeroFeet = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltSuppressZeroFeet(self: AcadDimArcLengthClass) -> bool

Set: AltSuppressZeroFeet(self: AcadDimArcLengthClass) = value
"""

    AltSuppressZeroInches = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltSuppressZeroInches(self: AcadDimArcLengthClass) -> bool

Set: AltSuppressZeroInches(self: AcadDimArcLengthClass) = value
"""

    AltTextPrefix = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltTextPrefix(self: AcadDimArcLengthClass) -> str

Set: AltTextPrefix(self: AcadDimArcLengthClass) = value
"""

    AltTextSuffix = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltTextSuffix(self: AcadDimArcLengthClass) -> str

Set: AltTextSuffix(self: AcadDimArcLengthClass) = value
"""

    AltTolerancePrecision = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltTolerancePrecision(self: AcadDimArcLengthClass) -> AcDimPrecision

Set: AltTolerancePrecision(self: AcadDimArcLengthClass) = value
"""

    AltToleranceSuppressLeadingZeros = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltToleranceSuppressLeadingZeros(self: AcadDimArcLengthClass) -> bool

Set: AltToleranceSuppressLeadingZeros(self: AcadDimArcLengthClass) = value
"""

    AltToleranceSuppressTrailingZeros = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltToleranceSuppressTrailingZeros(self: AcadDimArcLengthClass) -> bool

Set: AltToleranceSuppressTrailingZeros(self: AcadDimArcLengthClass) = value
"""

    AltToleranceSuppressZeroFeet = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltToleranceSuppressZeroFeet(self: AcadDimArcLengthClass) -> bool

Set: AltToleranceSuppressZeroFeet(self: AcadDimArcLengthClass) = value
"""

    AltToleranceSuppressZeroInches = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltToleranceSuppressZeroInches(self: AcadDimArcLengthClass) -> bool

Set: AltToleranceSuppressZeroInches(self: AcadDimArcLengthClass) = value
"""

    AltUnits = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltUnits(self: AcadDimArcLengthClass) -> bool

Set: AltUnits(self: AcadDimArcLengthClass) = value
"""

    AltUnitsFormat = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltUnitsFormat(self: AcadDimArcLengthClass) -> AcDimUnits

Set: AltUnitsFormat(self: AcadDimArcLengthClass) = value
"""

    AltUnitsPrecision = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltUnitsPrecision(self: AcadDimArcLengthClass) -> AcDimPrecision

Set: AltUnitsPrecision(self: AcadDimArcLengthClass) = value
"""

    AltUnitsScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltUnitsScale(self: AcadDimArcLengthClass) -> float

Set: AltUnitsScale(self: AcadDimArcLengthClass) = value
"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: AcadDimArcLengthClass) -> object

"""

    ArcEndParam = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ArcEndParam(self: AcadDimArcLengthClass) -> float

Set: ArcEndParam(self: AcadDimArcLengthClass) = value
"""

    ArcPoint = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ArcPoint(self: AcadDimArcLengthClass) -> object

Set: ArcPoint(self: AcadDimArcLengthClass) = value
"""

    ArcStartParam = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ArcStartParam(self: AcadDimArcLengthClass) -> float

Set: ArcStartParam(self: AcadDimArcLengthClass) = value
"""

    Arrowhead1Block = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Arrowhead1Block(self: AcadDimArcLengthClass) -> str

Set: Arrowhead1Block(self: AcadDimArcLengthClass) = value
"""

    Arrowhead1Type = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Arrowhead1Type(self: AcadDimArcLengthClass) -> AcDimArrowheadType

Set: Arrowhead1Type(self: AcadDimArcLengthClass) = value
"""

    Arrowhead2Block = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Arrowhead2Block(self: AcadDimArcLengthClass) -> str

Set: Arrowhead2Block(self: AcadDimArcLengthClass) = value
"""

    Arrowhead2Type = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Arrowhead2Type(self: AcadDimArcLengthClass) -> AcDimArrowheadType

Set: Arrowhead2Type(self: AcadDimArcLengthClass) = value
"""

    ArrowheadSize = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ArrowheadSize(self: AcadDimArcLengthClass) -> float

Set: ArrowheadSize(self: AcadDimArcLengthClass) = value
"""

    CenterPoint = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CenterPoint(self: AcadDimArcLengthClass) -> object

Set: CenterPoint(self: AcadDimArcLengthClass) = value
"""

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: AcadDimArcLengthClass) -> ACAD_COLOR

Set: color(self: AcadDimArcLengthClass) = value
"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: AcadDimArcLengthClass) -> AcadDatabase

"""

    DecimalSeparator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DecimalSeparator(self: AcadDimArcLengthClass) -> str

Set: DecimalSeparator(self: AcadDimArcLengthClass) = value
"""

    DimensionLineColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimensionLineColor(self: AcadDimArcLengthClass) -> ACAD_COLOR

Set: DimensionLineColor(self: AcadDimArcLengthClass) = value
"""

    DimensionLineExtend = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimensionLineExtend(self: AcadDimArcLengthClass) -> float

Set: DimensionLineExtend(self: AcadDimArcLengthClass) = value
"""

    DimensionLinetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimensionLinetype(self: AcadDimArcLengthClass) -> str

Set: DimensionLinetype(self: AcadDimArcLengthClass) = value
"""

    DimensionLineWeight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimensionLineWeight(self: AcadDimArcLengthClass) -> ACAD_LWEIGHT

Set: DimensionLineWeight(self: AcadDimArcLengthClass) = value
"""

    DimLine1Suppress = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimLine1Suppress(self: AcadDimArcLengthClass) -> bool

Set: DimLine1Suppress(self: AcadDimArcLengthClass) = value
"""

    DimLine2Suppress = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimLine2Suppress(self: AcadDimArcLengthClass) -> bool

Set: DimLine2Suppress(self: AcadDimArcLengthClass) = value
"""

    DimLineInside = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimLineInside(self: AcadDimArcLengthClass) -> bool

Set: DimLineInside(self: AcadDimArcLengthClass) = value
"""

    DimTxtDirection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimTxtDirection(self: AcadDimArcLengthClass) -> bool

Set: DimTxtDirection(self: AcadDimArcLengthClass) = value
"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: AcadDimArcLengthClass) -> object

"""

    EntityName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityName(self: AcadDimArcLengthClass) -> str

"""

    EntityTransparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityTransparency(self: AcadDimArcLengthClass) -> str

Set: EntityTransparency(self: AcadDimArcLengthClass) = value
"""

    EntityType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityType(self: AcadDimArcLengthClass) -> int

"""

    ExtensionLineColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ExtensionLineColor(self: AcadDimArcLengthClass) -> ACAD_COLOR

Set: ExtensionLineColor(self: AcadDimArcLengthClass) = value
"""

    ExtensionLineExtend = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ExtensionLineExtend(self: AcadDimArcLengthClass) -> float

Set: ExtensionLineExtend(self: AcadDimArcLengthClass) = value
"""

    ExtensionLineOffset = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ExtensionLineOffset(self: AcadDimArcLengthClass) -> float

Set: ExtensionLineOffset(self: AcadDimArcLengthClass) = value
"""

    ExtensionLineWeight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ExtensionLineWeight(self: AcadDimArcLengthClass) -> ACAD_LWEIGHT

Set: ExtensionLineWeight(self: AcadDimArcLengthClass) = value
"""

    ExtLine1Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ExtLine1Linetype(self: AcadDimArcLengthClass) -> str

Set: ExtLine1Linetype(self: AcadDimArcLengthClass) = value
"""

    ExtLine1Point = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ExtLine1Point(self: AcadDimArcLengthClass) -> object

Set: ExtLine1Point(self: AcadDimArcLengthClass) = value
"""

    ExtLine1Suppress = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ExtLine1Suppress(self: AcadDimArcLengthClass) -> bool

Set: ExtLine1Suppress(self: AcadDimArcLengthClass) = value
"""

    ExtLine2Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ExtLine2Linetype(self: AcadDimArcLengthClass) -> str

Set: ExtLine2Linetype(self: AcadDimArcLengthClass) = value
"""

    ExtLine2Point = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ExtLine2Point(self: AcadDimArcLengthClass) -> object

Set: ExtLine2Point(self: AcadDimArcLengthClass) = value
"""

    ExtLine2Suppress = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ExtLine2Suppress(self: AcadDimArcLengthClass) -> bool

Set: ExtLine2Suppress(self: AcadDimArcLengthClass) = value
"""

    ExtLineFixedLen = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ExtLineFixedLen(self: AcadDimArcLengthClass) -> float

Set: ExtLineFixedLen(self: AcadDimArcLengthClass) = value
"""

    ExtLineFixedLenSuppress = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ExtLineFixedLenSuppress(self: AcadDimArcLengthClass) -> bool

Set: ExtLineFixedLenSuppress(self: AcadDimArcLengthClass) = value
"""

    Fit = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Fit(self: AcadDimArcLengthClass) -> AcDimFit

Set: Fit(self: AcadDimArcLengthClass) = value
"""

    ForceLineInside = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ForceLineInside(self: AcadDimArcLengthClass) -> bool

Set: ForceLineInside(self: AcadDimArcLengthClass) = value
"""

    FractionFormat = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FractionFormat(self: AcadDimArcLengthClass) -> AcDimFractionType

Set: FractionFormat(self: AcadDimArcLengthClass) = value
"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: AcadDimArcLengthClass) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: AcadDimArcLengthClass) -> bool

"""

    HasLeader = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasLeader(self: AcadDimArcLengthClass) -> bool

Set: HasLeader(self: AcadDimArcLengthClass) = value
"""

    HorizontalTextPosition = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HorizontalTextPosition(self: AcadDimArcLengthClass) -> AcDimHorizontalJustification

Set: HorizontalTextPosition(self: AcadDimArcLengthClass) = value
"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: AcadDimArcLengthClass) -> AcadHyperlinks

"""

    IsPartial = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IsPartial(self: AcadDimArcLengthClass) -> bool

Set: IsPartial(self: AcadDimArcLengthClass) = value
"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layer(self: AcadDimArcLengthClass) -> str

Set: Layer(self: AcadDimArcLengthClass) = value
"""

    Leader1Point = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Leader1Point(self: AcadDimArcLengthClass) -> object

Set: Leader1Point(self: AcadDimArcLengthClass) = value
"""

    Leader2Point = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Leader2Point(self: AcadDimArcLengthClass) -> object

Set: Leader2Point(self: AcadDimArcLengthClass) = value
"""

    LinearScaleFactor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinearScaleFactor(self: AcadDimArcLengthClass) -> float

Set: LinearScaleFactor(self: AcadDimArcLengthClass) = value
"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: AcadDimArcLengthClass) -> str

Set: Linetype(self: AcadDimArcLengthClass) = value
"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeScale(self: AcadDimArcLengthClass) -> float

Set: LinetypeScale(self: AcadDimArcLengthClass) = value
"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: AcadDimArcLengthClass) -> ACAD_LWEIGHT

Set: Lineweight(self: AcadDimArcLengthClass) = value
"""

    Material = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Material(self: AcadDimArcLengthClass) -> str

Set: Material(self: AcadDimArcLengthClass) = value
"""

    Measurement = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Measurement(self: AcadDimArcLengthClass) -> float

"""

    Normal = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Normal(self: AcadDimArcLengthClass) -> object

Set: Normal(self: AcadDimArcLengthClass) = value
"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: AcadDimArcLengthClass) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: AcadDimArcLengthClass) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: AcadDimArcLengthClass) -> Int64

"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: AcadDimArcLengthClass) -> str

Set: PlotStyleName(self: AcadDimArcLengthClass) = value
"""

    PrimaryUnitsPrecision = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PrimaryUnitsPrecision(self: AcadDimArcLengthClass) -> AcDimPrecision

Set: PrimaryUnitsPrecision(self: AcadDimArcLengthClass) = value
"""

    Rotation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Rotation(self: AcadDimArcLengthClass) -> float

Set: Rotation(self: AcadDimArcLengthClass) = value
"""

    RoundDistance = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RoundDistance(self: AcadDimArcLengthClass) -> float

Set: RoundDistance(self: AcadDimArcLengthClass) = value
"""

    ScaleFactor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ScaleFactor(self: AcadDimArcLengthClass) -> float

Set: ScaleFactor(self: AcadDimArcLengthClass) = value
"""

    StyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: StyleName(self: AcadDimArcLengthClass) -> str

Set: StyleName(self: AcadDimArcLengthClass) = value
"""

    SubUnitsFactor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SubUnitsFactor(self: AcadDimArcLengthClass) -> float

Set: SubUnitsFactor(self: AcadDimArcLengthClass) = value
"""

    SubUnitsSuffix = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SubUnitsSuffix(self: AcadDimArcLengthClass) -> str

Set: SubUnitsSuffix(self: AcadDimArcLengthClass) = value
"""

    SuppressLeadingZeros = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SuppressLeadingZeros(self: AcadDimArcLengthClass) -> bool

Set: SuppressLeadingZeros(self: AcadDimArcLengthClass) = value
"""

    SuppressTrailingZeros = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SuppressTrailingZeros(self: AcadDimArcLengthClass) -> bool

Set: SuppressTrailingZeros(self: AcadDimArcLengthClass) = value
"""

    SuppressZeroFeet = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SuppressZeroFeet(self: AcadDimArcLengthClass) -> bool

Set: SuppressZeroFeet(self: AcadDimArcLengthClass) = value
"""

    SuppressZeroInches = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SuppressZeroInches(self: AcadDimArcLengthClass) -> bool

Set: SuppressZeroInches(self: AcadDimArcLengthClass) = value
"""

    SymbolPosition = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SymbolPosition(self: AcadDimArcLengthClass) -> AcDimArcLengthSymbol

Set: SymbolPosition(self: AcadDimArcLengthClass) = value
"""

    TextColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextColor(self: AcadDimArcLengthClass) -> ACAD_COLOR

Set: TextColor(self: AcadDimArcLengthClass) = value
"""

    TextFill = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextFill(self: AcadDimArcLengthClass) -> bool

Set: TextFill(self: AcadDimArcLengthClass) = value
"""

    TextFillColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextFillColor(self: AcadDimArcLengthClass) -> ACAD_COLOR

Set: TextFillColor(self: AcadDimArcLengthClass) = value
"""

    TextGap = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextGap(self: AcadDimArcLengthClass) -> float

Set: TextGap(self: AcadDimArcLengthClass) = value
"""

    TextHeight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextHeight(self: AcadDimArcLengthClass) -> float

Set: TextHeight(self: AcadDimArcLengthClass) = value
"""

    TextInside = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextInside(self: AcadDimArcLengthClass) -> bool

Set: TextInside(self: AcadDimArcLengthClass) = value
"""

    TextInsideAlign = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextInsideAlign(self: AcadDimArcLengthClass) -> bool

Set: TextInsideAlign(self: AcadDimArcLengthClass) = value
"""

    TextMovement = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextMovement(self: AcadDimArcLengthClass) -> AcDimTextMovement

Set: TextMovement(self: AcadDimArcLengthClass) = value
"""

    TextOutsideAlign = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextOutsideAlign(self: AcadDimArcLengthClass) -> bool

Set: TextOutsideAlign(self: AcadDimArcLengthClass) = value
"""

    TextOverride = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextOverride(self: AcadDimArcLengthClass) -> str

Set: TextOverride(self: AcadDimArcLengthClass) = value
"""

    TextPosition = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextPosition(self: AcadDimArcLengthClass) -> object

Set: TextPosition(self: AcadDimArcLengthClass) = value
"""

    TextPrefix = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextPrefix(self: AcadDimArcLengthClass) -> str

Set: TextPrefix(self: AcadDimArcLengthClass) = value
"""

    TextRotation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextRotation(self: AcadDimArcLengthClass) -> float

Set: TextRotation(self: AcadDimArcLengthClass) = value
"""

    TextStyle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextStyle(self: AcadDimArcLengthClass) -> str

Set: TextStyle(self: AcadDimArcLengthClass) = value
"""

    TextSuffix = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextSuffix(self: AcadDimArcLengthClass) -> str

Set: TextSuffix(self: AcadDimArcLengthClass) = value
"""

    ToleranceDisplay = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceDisplay(self: AcadDimArcLengthClass) -> AcDimToleranceMethod

Set: ToleranceDisplay(self: AcadDimArcLengthClass) = value
"""

    ToleranceHeightScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceHeightScale(self: AcadDimArcLengthClass) -> float

Set: ToleranceHeightScale(self: AcadDimArcLengthClass) = value
"""

    ToleranceJustification = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceJustification(self: AcadDimArcLengthClass) -> AcDimToleranceJustify

Set: ToleranceJustification(self: AcadDimArcLengthClass) = value
"""

    ToleranceLowerLimit = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceLowerLimit(self: AcadDimArcLengthClass) -> float

Set: ToleranceLowerLimit(self: AcadDimArcLengthClass) = value
"""

    TolerancePrecision = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TolerancePrecision(self: AcadDimArcLengthClass) -> AcDimPrecision

Set: TolerancePrecision(self: AcadDimArcLengthClass) = value
"""

    ToleranceSuppressLeadingZeros = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceSuppressLeadingZeros(self: AcadDimArcLengthClass) -> bool

Set: ToleranceSuppressLeadingZeros(self: AcadDimArcLengthClass) = value
"""

    ToleranceSuppressTrailingZeros = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceSuppressTrailingZeros(self: AcadDimArcLengthClass) -> bool

Set: ToleranceSuppressTrailingZeros(self: AcadDimArcLengthClass) = value
"""

    ToleranceSuppressZeroFeet = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceSuppressZeroFeet(self: AcadDimArcLengthClass) -> bool

Set: ToleranceSuppressZeroFeet(self: AcadDimArcLengthClass) = value
"""

    ToleranceSuppressZeroInches = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceSuppressZeroInches(self: AcadDimArcLengthClass) -> bool

Set: ToleranceSuppressZeroInches(self: AcadDimArcLengthClass) = value
"""

    ToleranceUpperLimit = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceUpperLimit(self: AcadDimArcLengthClass) -> float

Set: ToleranceUpperLimit(self: AcadDimArcLengthClass) = value
"""

    TrueColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TrueColor(self: AcadDimArcLengthClass) -> AcadAcCmColor

Set: TrueColor(self: AcadDimArcLengthClass) = value
"""

    UnitsFormat = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: UnitsFormat(self: AcadDimArcLengthClass) -> AcDimLUnits

Set: UnitsFormat(self: AcadDimArcLengthClass) = value
"""

    VerticalTextPosition = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VerticalTextPosition(self: AcadDimArcLengthClass) -> AcDimVerticalJustification

Set: VerticalTextPosition(self: AcadDimArcLengthClass) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: AcadDimArcLengthClass) -> bool

Set: Visible(self: AcadDimArcLengthClass) = value
"""


    Modified = None


class IAcadDimDiametric(IAcadDimension, IAcadEntity, IAcadObject):
    # no doc
    def ArrayPolar(self, NumberOfObjects, AngleToFill, CenterPoint):
        """ ArrayPolar(self: IAcadDimDiametric, NumberOfObjects: int, AngleToFill: float, CenterPoint: object) -> object """
        pass

    def ArrayRectangular(self, NumberOfRows, NumberOfColumns, NumberOfLevels, DistBetweenRows, DistBetweenCols, DistBetweenLevels):
        """ ArrayRectangular(self: IAcadDimDiametric, NumberOfRows: int, NumberOfColumns: int, NumberOfLevels: int, DistBetweenRows: float, DistBetweenCols: float, DistBetweenLevels: float) -> object """
        pass

    def Copy(self):
        """ Copy(self: IAcadDimDiametric) -> object """
        pass

    def Delete(self):
        """ Delete(self: IAcadDimDiametric) """
        pass

    def Erase(self):
        """ Erase(self: IAcadDimDiametric) """
        pass

    def GetBoundingBox(self, MinPoint, MaxPoint):
        """ GetBoundingBox(self: IAcadDimDiametric) -> (object, object) """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: IAcadDimDiametric) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: IAcadDimDiametric, AppName: str) -> (object, object) """
        pass

    def Highlight(self, HighlightFlag):
        """ Highlight(self: IAcadDimDiametric, HighlightFlag: bool) """
        pass

    def IntersectWith(self, IntersectObject, option):
        """ IntersectWith(self: IAcadDimDiametric, IntersectObject: object, option: AcExtendOption) -> object """
        pass

    def Mirror(self, Point1, Point2):
        """ Mirror(self: IAcadDimDiametric, Point1: object, Point2: object) -> object """
        pass

    def Mirror3D(self, Point1, Point2, point3):
        """ Mirror3D(self: IAcadDimDiametric, Point1: object, Point2: object, point3: object) -> object """
        pass

    def Move(self, FromPoint, ToPoint):
        """ Move(self: IAcadDimDiametric, FromPoint: object, ToPoint: object) """
        pass

    def Rotate(self, BasePoint, RotationAngle):
        """ Rotate(self: IAcadDimDiametric, BasePoint: object, RotationAngle: float) """
        pass

    def Rotate3D(self, Point1, Point2, RotationAngle):
        """ Rotate3D(self: IAcadDimDiametric, Point1: object, Point2: object, RotationAngle: float) """
        pass

    def ScaleEntity(self, BasePoint, ScaleFactor):
        """ ScaleEntity(self: IAcadDimDiametric, BasePoint: object, ScaleFactor: float) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: IAcadDimDiametric, XDataType: object, XDataValue: object) """
        pass

    def TransformBy(self, TransformationMatrix):
        """ TransformBy(self: IAcadDimDiametric, TransformationMatrix: object) """
        pass

    def Update(self):
        """ Update(self: IAcadDimDiametric) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    AltRoundDistance = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltRoundDistance(self: IAcadDimDiametric) -> float

Set: AltRoundDistance(self: IAcadDimDiametric) = value
"""

    AltSuppressLeadingZeros = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltSuppressLeadingZeros(self: IAcadDimDiametric) -> bool

Set: AltSuppressLeadingZeros(self: IAcadDimDiametric) = value
"""

    AltSuppressTrailingZeros = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltSuppressTrailingZeros(self: IAcadDimDiametric) -> bool

Set: AltSuppressTrailingZeros(self: IAcadDimDiametric) = value
"""

    AltSuppressZeroFeet = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltSuppressZeroFeet(self: IAcadDimDiametric) -> bool

Set: AltSuppressZeroFeet(self: IAcadDimDiametric) = value
"""

    AltSuppressZeroInches = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltSuppressZeroInches(self: IAcadDimDiametric) -> bool

Set: AltSuppressZeroInches(self: IAcadDimDiametric) = value
"""

    AltTextPrefix = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltTextPrefix(self: IAcadDimDiametric) -> str

Set: AltTextPrefix(self: IAcadDimDiametric) = value
"""

    AltTextSuffix = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltTextSuffix(self: IAcadDimDiametric) -> str

Set: AltTextSuffix(self: IAcadDimDiametric) = value
"""

    AltTolerancePrecision = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltTolerancePrecision(self: IAcadDimDiametric) -> AcDimPrecision

Set: AltTolerancePrecision(self: IAcadDimDiametric) = value
"""

    AltToleranceSuppressLeadingZeros = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltToleranceSuppressLeadingZeros(self: IAcadDimDiametric) -> bool

Set: AltToleranceSuppressLeadingZeros(self: IAcadDimDiametric) = value
"""

    AltToleranceSuppressTrailingZeros = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltToleranceSuppressTrailingZeros(self: IAcadDimDiametric) -> bool

Set: AltToleranceSuppressTrailingZeros(self: IAcadDimDiametric) = value
"""

    AltToleranceSuppressZeroFeet = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltToleranceSuppressZeroFeet(self: IAcadDimDiametric) -> bool

Set: AltToleranceSuppressZeroFeet(self: IAcadDimDiametric) = value
"""

    AltToleranceSuppressZeroInches = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltToleranceSuppressZeroInches(self: IAcadDimDiametric) -> bool

Set: AltToleranceSuppressZeroInches(self: IAcadDimDiametric) = value
"""

    AltUnits = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltUnits(self: IAcadDimDiametric) -> bool

Set: AltUnits(self: IAcadDimDiametric) = value
"""

    AltUnitsFormat = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltUnitsFormat(self: IAcadDimDiametric) -> AcDimUnits

Set: AltUnitsFormat(self: IAcadDimDiametric) = value
"""

    AltUnitsPrecision = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltUnitsPrecision(self: IAcadDimDiametric) -> AcDimPrecision

Set: AltUnitsPrecision(self: IAcadDimDiametric) = value
"""

    AltUnitsScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltUnitsScale(self: IAcadDimDiametric) -> float

Set: AltUnitsScale(self: IAcadDimDiametric) = value
"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IAcadDimDiametric) -> object

"""

    Arrowhead1Block = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Arrowhead1Block(self: IAcadDimDiametric) -> str

Set: Arrowhead1Block(self: IAcadDimDiametric) = value
"""

    Arrowhead1Type = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Arrowhead1Type(self: IAcadDimDiametric) -> AcDimArrowheadType

Set: Arrowhead1Type(self: IAcadDimDiametric) = value
"""

    Arrowhead2Block = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Arrowhead2Block(self: IAcadDimDiametric) -> str

Set: Arrowhead2Block(self: IAcadDimDiametric) = value
"""

    Arrowhead2Type = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Arrowhead2Type(self: IAcadDimDiametric) -> AcDimArrowheadType

Set: Arrowhead2Type(self: IAcadDimDiametric) = value
"""

    ArrowheadSize = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ArrowheadSize(self: IAcadDimDiametric) -> float

Set: ArrowheadSize(self: IAcadDimDiametric) = value
"""

    CenterMarkSize = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CenterMarkSize(self: IAcadDimDiametric) -> float

Set: CenterMarkSize(self: IAcadDimDiametric) = value
"""

    CenterType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CenterType(self: IAcadDimDiametric) -> AcDimCenterType

Set: CenterType(self: IAcadDimDiametric) = value
"""

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: IAcadDimDiametric) -> ACAD_COLOR

Set: color(self: IAcadDimDiametric) = value
"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: IAcadDimDiametric) -> AcadDatabase

"""

    DecimalSeparator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DecimalSeparator(self: IAcadDimDiametric) -> str

Set: DecimalSeparator(self: IAcadDimDiametric) = value
"""

    DimConstrDesc = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimConstrDesc(self: IAcadDimDiametric) -> str

Set: DimConstrDesc(self: IAcadDimDiametric) = value
"""

    DimConstrExpression = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimConstrExpression(self: IAcadDimDiametric) -> str

Set: DimConstrExpression(self: IAcadDimDiametric) = value
"""

    DimConstrForm = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimConstrForm(self: IAcadDimDiametric) -> bool

Set: DimConstrForm(self: IAcadDimDiametric) = value
"""

    DimConstrName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimConstrName(self: IAcadDimDiametric) -> str

Set: DimConstrName(self: IAcadDimDiametric) = value
"""

    DimConstrReference = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimConstrReference(self: IAcadDimDiametric) -> bool

Set: DimConstrReference(self: IAcadDimDiametric) = value
"""

    DimConstrValue = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimConstrValue(self: IAcadDimDiametric) -> str

Set: DimConstrValue(self: IAcadDimDiametric) = value
"""

    DimensionLineColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimensionLineColor(self: IAcadDimDiametric) -> ACAD_COLOR

Set: DimensionLineColor(self: IAcadDimDiametric) = value
"""

    DimensionLinetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimensionLinetype(self: IAcadDimDiametric) -> str

Set: DimensionLinetype(self: IAcadDimDiametric) = value
"""

    DimensionLineWeight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimensionLineWeight(self: IAcadDimDiametric) -> ACAD_LWEIGHT

Set: DimensionLineWeight(self: IAcadDimDiametric) = value
"""

    DimLine1Suppress = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimLine1Suppress(self: IAcadDimDiametric) -> bool

Set: DimLine1Suppress(self: IAcadDimDiametric) = value
"""

    DimLine2Suppress = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimLine2Suppress(self: IAcadDimDiametric) -> bool

Set: DimLine2Suppress(self: IAcadDimDiametric) = value
"""

    DimTxtDirection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimTxtDirection(self: IAcadDimDiametric) -> bool

Set: DimTxtDirection(self: IAcadDimDiametric) = value
"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: IAcadDimDiametric) -> object

"""

    EntityName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityName(self: IAcadDimDiametric) -> str

"""

    EntityTransparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityTransparency(self: IAcadDimDiametric) -> str

Set: EntityTransparency(self: IAcadDimDiametric) = value
"""

    EntityType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityType(self: IAcadDimDiametric) -> int

"""

    Fit = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Fit(self: IAcadDimDiametric) -> AcDimFit

Set: Fit(self: IAcadDimDiametric) = value
"""

    ForceLineInside = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ForceLineInside(self: IAcadDimDiametric) -> bool

Set: ForceLineInside(self: IAcadDimDiametric) = value
"""

    FractionFormat = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FractionFormat(self: IAcadDimDiametric) -> AcDimFractionType

Set: FractionFormat(self: IAcadDimDiametric) = value
"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: IAcadDimDiametric) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: IAcadDimDiametric) -> bool

"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: IAcadDimDiametric) -> AcadHyperlinks

"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layer(self: IAcadDimDiametric) -> str

Set: Layer(self: IAcadDimDiametric) = value
"""

    LeaderLength = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Set: LeaderLength(self: IAcadDimDiametric) = value
"""

    LinearScaleFactor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinearScaleFactor(self: IAcadDimDiametric) -> float

Set: LinearScaleFactor(self: IAcadDimDiametric) = value
"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: IAcadDimDiametric) -> str

Set: Linetype(self: IAcadDimDiametric) = value
"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeScale(self: IAcadDimDiametric) -> float

Set: LinetypeScale(self: IAcadDimDiametric) = value
"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: IAcadDimDiametric) -> ACAD_LWEIGHT

Set: Lineweight(self: IAcadDimDiametric) = value
"""

    Material = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Material(self: IAcadDimDiametric) -> str

Set: Material(self: IAcadDimDiametric) = value
"""

    Measurement = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Measurement(self: IAcadDimDiametric) -> float

"""

    Normal = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Normal(self: IAcadDimDiametric) -> object

Set: Normal(self: IAcadDimDiametric) = value
"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: IAcadDimDiametric) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: IAcadDimDiametric) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: IAcadDimDiametric) -> Int64

"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: IAcadDimDiametric) -> str

Set: PlotStyleName(self: IAcadDimDiametric) = value
"""

    PrimaryUnitsPrecision = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PrimaryUnitsPrecision(self: IAcadDimDiametric) -> AcDimPrecision

Set: PrimaryUnitsPrecision(self: IAcadDimDiametric) = value
"""

    Rotation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Rotation(self: IAcadDimDiametric) -> float

Set: Rotation(self: IAcadDimDiametric) = value
"""

    RoundDistance = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RoundDistance(self: IAcadDimDiametric) -> float

Set: RoundDistance(self: IAcadDimDiametric) = value
"""

    ScaleFactor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ScaleFactor(self: IAcadDimDiametric) -> float

Set: ScaleFactor(self: IAcadDimDiametric) = value
"""

    StyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: StyleName(self: IAcadDimDiametric) -> str

Set: StyleName(self: IAcadDimDiametric) = value
"""

    SuppressLeadingZeros = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SuppressLeadingZeros(self: IAcadDimDiametric) -> bool

Set: SuppressLeadingZeros(self: IAcadDimDiametric) = value
"""

    SuppressTrailingZeros = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SuppressTrailingZeros(self: IAcadDimDiametric) -> bool

Set: SuppressTrailingZeros(self: IAcadDimDiametric) = value
"""

    SuppressZeroFeet = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SuppressZeroFeet(self: IAcadDimDiametric) -> bool

Set: SuppressZeroFeet(self: IAcadDimDiametric) = value
"""

    SuppressZeroInches = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SuppressZeroInches(self: IAcadDimDiametric) -> bool

Set: SuppressZeroInches(self: IAcadDimDiametric) = value
"""

    TextColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextColor(self: IAcadDimDiametric) -> ACAD_COLOR

Set: TextColor(self: IAcadDimDiametric) = value
"""

    TextFill = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextFill(self: IAcadDimDiametric) -> bool

Set: TextFill(self: IAcadDimDiametric) = value
"""

    TextFillColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextFillColor(self: IAcadDimDiametric) -> ACAD_COLOR

Set: TextFillColor(self: IAcadDimDiametric) = value
"""

    TextGap = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextGap(self: IAcadDimDiametric) -> float

Set: TextGap(self: IAcadDimDiametric) = value
"""

    TextHeight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextHeight(self: IAcadDimDiametric) -> float

Set: TextHeight(self: IAcadDimDiametric) = value
"""

    TextInside = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextInside(self: IAcadDimDiametric) -> bool

Set: TextInside(self: IAcadDimDiametric) = value
"""

    TextInsideAlign = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextInsideAlign(self: IAcadDimDiametric) -> bool

Set: TextInsideAlign(self: IAcadDimDiametric) = value
"""

    TextMovement = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextMovement(self: IAcadDimDiametric) -> AcDimTextMovement

Set: TextMovement(self: IAcadDimDiametric) = value
"""

    TextOutsideAlign = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextOutsideAlign(self: IAcadDimDiametric) -> bool

Set: TextOutsideAlign(self: IAcadDimDiametric) = value
"""

    TextOverride = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextOverride(self: IAcadDimDiametric) -> str

Set: TextOverride(self: IAcadDimDiametric) = value
"""

    TextPosition = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextPosition(self: IAcadDimDiametric) -> object

Set: TextPosition(self: IAcadDimDiametric) = value
"""

    TextPrefix = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextPrefix(self: IAcadDimDiametric) -> str

Set: TextPrefix(self: IAcadDimDiametric) = value
"""

    TextRotation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextRotation(self: IAcadDimDiametric) -> float

Set: TextRotation(self: IAcadDimDiametric) = value
"""

    TextStyle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextStyle(self: IAcadDimDiametric) -> str

Set: TextStyle(self: IAcadDimDiametric) = value
"""

    TextSuffix = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextSuffix(self: IAcadDimDiametric) -> str

Set: TextSuffix(self: IAcadDimDiametric) = value
"""

    ToleranceDisplay = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceDisplay(self: IAcadDimDiametric) -> AcDimToleranceMethod

Set: ToleranceDisplay(self: IAcadDimDiametric) = value
"""

    ToleranceHeightScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceHeightScale(self: IAcadDimDiametric) -> float

Set: ToleranceHeightScale(self: IAcadDimDiametric) = value
"""

    ToleranceJustification = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceJustification(self: IAcadDimDiametric) -> AcDimToleranceJustify

Set: ToleranceJustification(self: IAcadDimDiametric) = value
"""

    ToleranceLowerLimit = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceLowerLimit(self: IAcadDimDiametric) -> float

Set: ToleranceLowerLimit(self: IAcadDimDiametric) = value
"""

    TolerancePrecision = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TolerancePrecision(self: IAcadDimDiametric) -> AcDimPrecision

Set: TolerancePrecision(self: IAcadDimDiametric) = value
"""

    ToleranceSuppressLeadingZeros = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceSuppressLeadingZeros(self: IAcadDimDiametric) -> bool

Set: ToleranceSuppressLeadingZeros(self: IAcadDimDiametric) = value
"""

    ToleranceSuppressTrailingZeros = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceSuppressTrailingZeros(self: IAcadDimDiametric) -> bool

Set: ToleranceSuppressTrailingZeros(self: IAcadDimDiametric) = value
"""

    ToleranceSuppressZeroFeet = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceSuppressZeroFeet(self: IAcadDimDiametric) -> bool

Set: ToleranceSuppressZeroFeet(self: IAcadDimDiametric) = value
"""

    ToleranceSuppressZeroInches = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceSuppressZeroInches(self: IAcadDimDiametric) -> bool

Set: ToleranceSuppressZeroInches(self: IAcadDimDiametric) = value
"""

    ToleranceUpperLimit = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceUpperLimit(self: IAcadDimDiametric) -> float

Set: ToleranceUpperLimit(self: IAcadDimDiametric) = value
"""

    TrueColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TrueColor(self: IAcadDimDiametric) -> AcadAcCmColor

Set: TrueColor(self: IAcadDimDiametric) = value
"""

    UnitsFormat = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: UnitsFormat(self: IAcadDimDiametric) -> AcDimLUnits

Set: UnitsFormat(self: IAcadDimDiametric) = value
"""

    VerticalTextPosition = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VerticalTextPosition(self: IAcadDimDiametric) -> AcDimVerticalJustification

Set: VerticalTextPosition(self: IAcadDimDiametric) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: IAcadDimDiametric) -> bool

Set: Visible(self: IAcadDimDiametric) = value
"""



class AcadDimDiametric(IAcadDimDiametric, IAcadDimension, IAcadEntity, IAcadObject, IAcadObjectEvents_Event):
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class AcadDimDiametricClass(__ComObject):
    # no doc
    def add_Modified(self, A_1):
        """ add_Modified(self: AcadDimDiametricClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def ArrayPolar(self, NumberOfObjects, AngleToFill, CenterPoint):
        """ ArrayPolar(self: AcadDimDiametricClass, NumberOfObjects: int, AngleToFill: float, CenterPoint: object) -> object """
        pass

    def ArrayRectangular(self, NumberOfRows, NumberOfColumns, NumberOfLevels, DistBetweenRows, DistBetweenCols, DistBetweenLevels):
        """ ArrayRectangular(self: AcadDimDiametricClass, NumberOfRows: int, NumberOfColumns: int, NumberOfLevels: int, DistBetweenRows: float, DistBetweenCols: float, DistBetweenLevels: float) -> object """
        pass

    def Copy(self):
        """ Copy(self: AcadDimDiametricClass) -> object """
        pass

    def Delete(self):
        """ Delete(self: AcadDimDiametricClass) """
        pass

    def Erase(self):
        """ Erase(self: AcadDimDiametricClass) """
        pass

    def GetBoundingBox(self, MinPoint, MaxPoint):
        """ GetBoundingBox(self: AcadDimDiametricClass) -> (object, object) """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: AcadDimDiametricClass) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: AcadDimDiametricClass, AppName: str) -> (object, object) """
        pass

    def Highlight(self, HighlightFlag):
        """ Highlight(self: AcadDimDiametricClass, HighlightFlag: bool) """
        pass

    def IntersectWith(self, IntersectObject, option):
        """ IntersectWith(self: AcadDimDiametricClass, IntersectObject: object, option: AcExtendOption) -> object """
        pass

    def Mirror(self, Point1, Point2):
        """ Mirror(self: AcadDimDiametricClass, Point1: object, Point2: object) -> object """
        pass

    def Mirror3D(self, Point1, Point2, point3):
        """ Mirror3D(self: AcadDimDiametricClass, Point1: object, Point2: object, point3: object) -> object """
        pass

    def Move(self, FromPoint, ToPoint):
        """ Move(self: AcadDimDiametricClass, FromPoint: object, ToPoint: object) """
        pass

    def remove_Modified(self, A_1):
        """ remove_Modified(self: AcadDimDiametricClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def Rotate(self, BasePoint, RotationAngle):
        """ Rotate(self: AcadDimDiametricClass, BasePoint: object, RotationAngle: float) """
        pass

    def Rotate3D(self, Point1, Point2, RotationAngle):
        """ Rotate3D(self: AcadDimDiametricClass, Point1: object, Point2: object, RotationAngle: float) """
        pass

    def ScaleEntity(self, BasePoint, ScaleFactor):
        """ ScaleEntity(self: AcadDimDiametricClass, BasePoint: object, ScaleFactor: float) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: AcadDimDiametricClass, XDataType: object, XDataValue: object) """
        pass

    def TransformBy(self, TransformationMatrix):
        """ TransformBy(self: AcadDimDiametricClass, TransformationMatrix: object) """
        pass

    def Update(self):
        """ Update(self: AcadDimDiametricClass) """
        pass

    AltRoundDistance = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltRoundDistance(self: AcadDimDiametricClass) -> float

Set: AltRoundDistance(self: AcadDimDiametricClass) = value
"""

    AltSuppressLeadingZeros = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltSuppressLeadingZeros(self: AcadDimDiametricClass) -> bool

Set: AltSuppressLeadingZeros(self: AcadDimDiametricClass) = value
"""

    AltSuppressTrailingZeros = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltSuppressTrailingZeros(self: AcadDimDiametricClass) -> bool

Set: AltSuppressTrailingZeros(self: AcadDimDiametricClass) = value
"""

    AltSuppressZeroFeet = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltSuppressZeroFeet(self: AcadDimDiametricClass) -> bool

Set: AltSuppressZeroFeet(self: AcadDimDiametricClass) = value
"""

    AltSuppressZeroInches = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltSuppressZeroInches(self: AcadDimDiametricClass) -> bool

Set: AltSuppressZeroInches(self: AcadDimDiametricClass) = value
"""

    AltTextPrefix = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltTextPrefix(self: AcadDimDiametricClass) -> str

Set: AltTextPrefix(self: AcadDimDiametricClass) = value
"""

    AltTextSuffix = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltTextSuffix(self: AcadDimDiametricClass) -> str

Set: AltTextSuffix(self: AcadDimDiametricClass) = value
"""

    AltTolerancePrecision = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltTolerancePrecision(self: AcadDimDiametricClass) -> AcDimPrecision

Set: AltTolerancePrecision(self: AcadDimDiametricClass) = value
"""

    AltToleranceSuppressLeadingZeros = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltToleranceSuppressLeadingZeros(self: AcadDimDiametricClass) -> bool

Set: AltToleranceSuppressLeadingZeros(self: AcadDimDiametricClass) = value
"""

    AltToleranceSuppressTrailingZeros = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltToleranceSuppressTrailingZeros(self: AcadDimDiametricClass) -> bool

Set: AltToleranceSuppressTrailingZeros(self: AcadDimDiametricClass) = value
"""

    AltToleranceSuppressZeroFeet = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltToleranceSuppressZeroFeet(self: AcadDimDiametricClass) -> bool

Set: AltToleranceSuppressZeroFeet(self: AcadDimDiametricClass) = value
"""

    AltToleranceSuppressZeroInches = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltToleranceSuppressZeroInches(self: AcadDimDiametricClass) -> bool

Set: AltToleranceSuppressZeroInches(self: AcadDimDiametricClass) = value
"""

    AltUnits = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltUnits(self: AcadDimDiametricClass) -> bool

Set: AltUnits(self: AcadDimDiametricClass) = value
"""

    AltUnitsFormat = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltUnitsFormat(self: AcadDimDiametricClass) -> AcDimUnits

Set: AltUnitsFormat(self: AcadDimDiametricClass) = value
"""

    AltUnitsPrecision = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltUnitsPrecision(self: AcadDimDiametricClass) -> AcDimPrecision

Set: AltUnitsPrecision(self: AcadDimDiametricClass) = value
"""

    AltUnitsScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltUnitsScale(self: AcadDimDiametricClass) -> float

Set: AltUnitsScale(self: AcadDimDiametricClass) = value
"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: AcadDimDiametricClass) -> object

"""

    Arrowhead1Block = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Arrowhead1Block(self: AcadDimDiametricClass) -> str

Set: Arrowhead1Block(self: AcadDimDiametricClass) = value
"""

    Arrowhead1Type = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Arrowhead1Type(self: AcadDimDiametricClass) -> AcDimArrowheadType

Set: Arrowhead1Type(self: AcadDimDiametricClass) = value
"""

    Arrowhead2Block = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Arrowhead2Block(self: AcadDimDiametricClass) -> str

Set: Arrowhead2Block(self: AcadDimDiametricClass) = value
"""

    Arrowhead2Type = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Arrowhead2Type(self: AcadDimDiametricClass) -> AcDimArrowheadType

Set: Arrowhead2Type(self: AcadDimDiametricClass) = value
"""

    ArrowheadSize = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ArrowheadSize(self: AcadDimDiametricClass) -> float

Set: ArrowheadSize(self: AcadDimDiametricClass) = value
"""

    CenterMarkSize = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CenterMarkSize(self: AcadDimDiametricClass) -> float

Set: CenterMarkSize(self: AcadDimDiametricClass) = value
"""

    CenterType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CenterType(self: AcadDimDiametricClass) -> AcDimCenterType

Set: CenterType(self: AcadDimDiametricClass) = value
"""

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: AcadDimDiametricClass) -> ACAD_COLOR

Set: color(self: AcadDimDiametricClass) = value
"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: AcadDimDiametricClass) -> AcadDatabase

"""

    DecimalSeparator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DecimalSeparator(self: AcadDimDiametricClass) -> str

Set: DecimalSeparator(self: AcadDimDiametricClass) = value
"""

    DimConstrDesc = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimConstrDesc(self: AcadDimDiametricClass) -> str

Set: DimConstrDesc(self: AcadDimDiametricClass) = value
"""

    DimConstrExpression = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimConstrExpression(self: AcadDimDiametricClass) -> str

Set: DimConstrExpression(self: AcadDimDiametricClass) = value
"""

    DimConstrForm = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimConstrForm(self: AcadDimDiametricClass) -> bool

Set: DimConstrForm(self: AcadDimDiametricClass) = value
"""

    DimConstrName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimConstrName(self: AcadDimDiametricClass) -> str

Set: DimConstrName(self: AcadDimDiametricClass) = value
"""

    DimConstrReference = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimConstrReference(self: AcadDimDiametricClass) -> bool

Set: DimConstrReference(self: AcadDimDiametricClass) = value
"""

    DimConstrValue = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimConstrValue(self: AcadDimDiametricClass) -> str

Set: DimConstrValue(self: AcadDimDiametricClass) = value
"""

    DimensionLineColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimensionLineColor(self: AcadDimDiametricClass) -> ACAD_COLOR

Set: DimensionLineColor(self: AcadDimDiametricClass) = value
"""

    DimensionLinetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimensionLinetype(self: AcadDimDiametricClass) -> str

Set: DimensionLinetype(self: AcadDimDiametricClass) = value
"""

    DimensionLineWeight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimensionLineWeight(self: AcadDimDiametricClass) -> ACAD_LWEIGHT

Set: DimensionLineWeight(self: AcadDimDiametricClass) = value
"""

    DimLine1Suppress = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimLine1Suppress(self: AcadDimDiametricClass) -> bool

Set: DimLine1Suppress(self: AcadDimDiametricClass) = value
"""

    DimLine2Suppress = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimLine2Suppress(self: AcadDimDiametricClass) -> bool

Set: DimLine2Suppress(self: AcadDimDiametricClass) = value
"""

    DimTxtDirection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimTxtDirection(self: AcadDimDiametricClass) -> bool

Set: DimTxtDirection(self: AcadDimDiametricClass) = value
"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: AcadDimDiametricClass) -> object

"""

    EntityName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityName(self: AcadDimDiametricClass) -> str

"""

    EntityTransparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityTransparency(self: AcadDimDiametricClass) -> str

Set: EntityTransparency(self: AcadDimDiametricClass) = value
"""

    EntityType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityType(self: AcadDimDiametricClass) -> int

"""

    Fit = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Fit(self: AcadDimDiametricClass) -> AcDimFit

Set: Fit(self: AcadDimDiametricClass) = value
"""

    ForceLineInside = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ForceLineInside(self: AcadDimDiametricClass) -> bool

Set: ForceLineInside(self: AcadDimDiametricClass) = value
"""

    FractionFormat = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FractionFormat(self: AcadDimDiametricClass) -> AcDimFractionType

Set: FractionFormat(self: AcadDimDiametricClass) = value
"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: AcadDimDiametricClass) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: AcadDimDiametricClass) -> bool

"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: AcadDimDiametricClass) -> AcadHyperlinks

"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layer(self: AcadDimDiametricClass) -> str

Set: Layer(self: AcadDimDiametricClass) = value
"""

    LeaderLength = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Set: LeaderLength(self: AcadDimDiametricClass) = value
"""

    LinearScaleFactor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinearScaleFactor(self: AcadDimDiametricClass) -> float

Set: LinearScaleFactor(self: AcadDimDiametricClass) = value
"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: AcadDimDiametricClass) -> str

Set: Linetype(self: AcadDimDiametricClass) = value
"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeScale(self: AcadDimDiametricClass) -> float

Set: LinetypeScale(self: AcadDimDiametricClass) = value
"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: AcadDimDiametricClass) -> ACAD_LWEIGHT

Set: Lineweight(self: AcadDimDiametricClass) = value
"""

    Material = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Material(self: AcadDimDiametricClass) -> str

Set: Material(self: AcadDimDiametricClass) = value
"""

    Measurement = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Measurement(self: AcadDimDiametricClass) -> float

"""

    Normal = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Normal(self: AcadDimDiametricClass) -> object

Set: Normal(self: AcadDimDiametricClass) = value
"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: AcadDimDiametricClass) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: AcadDimDiametricClass) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: AcadDimDiametricClass) -> Int64

"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: AcadDimDiametricClass) -> str

Set: PlotStyleName(self: AcadDimDiametricClass) = value
"""

    PrimaryUnitsPrecision = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PrimaryUnitsPrecision(self: AcadDimDiametricClass) -> AcDimPrecision

Set: PrimaryUnitsPrecision(self: AcadDimDiametricClass) = value
"""

    Rotation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Rotation(self: AcadDimDiametricClass) -> float

Set: Rotation(self: AcadDimDiametricClass) = value
"""

    RoundDistance = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RoundDistance(self: AcadDimDiametricClass) -> float

Set: RoundDistance(self: AcadDimDiametricClass) = value
"""

    ScaleFactor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ScaleFactor(self: AcadDimDiametricClass) -> float

Set: ScaleFactor(self: AcadDimDiametricClass) = value
"""

    StyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: StyleName(self: AcadDimDiametricClass) -> str

Set: StyleName(self: AcadDimDiametricClass) = value
"""

    SuppressLeadingZeros = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SuppressLeadingZeros(self: AcadDimDiametricClass) -> bool

Set: SuppressLeadingZeros(self: AcadDimDiametricClass) = value
"""

    SuppressTrailingZeros = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SuppressTrailingZeros(self: AcadDimDiametricClass) -> bool

Set: SuppressTrailingZeros(self: AcadDimDiametricClass) = value
"""

    SuppressZeroFeet = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SuppressZeroFeet(self: AcadDimDiametricClass) -> bool

Set: SuppressZeroFeet(self: AcadDimDiametricClass) = value
"""

    SuppressZeroInches = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SuppressZeroInches(self: AcadDimDiametricClass) -> bool

Set: SuppressZeroInches(self: AcadDimDiametricClass) = value
"""

    TextColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextColor(self: AcadDimDiametricClass) -> ACAD_COLOR

Set: TextColor(self: AcadDimDiametricClass) = value
"""

    TextFill = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextFill(self: AcadDimDiametricClass) -> bool

Set: TextFill(self: AcadDimDiametricClass) = value
"""

    TextFillColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextFillColor(self: AcadDimDiametricClass) -> ACAD_COLOR

Set: TextFillColor(self: AcadDimDiametricClass) = value
"""

    TextGap = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextGap(self: AcadDimDiametricClass) -> float

Set: TextGap(self: AcadDimDiametricClass) = value
"""

    TextHeight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextHeight(self: AcadDimDiametricClass) -> float

Set: TextHeight(self: AcadDimDiametricClass) = value
"""

    TextInside = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextInside(self: AcadDimDiametricClass) -> bool

Set: TextInside(self: AcadDimDiametricClass) = value
"""

    TextInsideAlign = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextInsideAlign(self: AcadDimDiametricClass) -> bool

Set: TextInsideAlign(self: AcadDimDiametricClass) = value
"""

    TextMovement = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextMovement(self: AcadDimDiametricClass) -> AcDimTextMovement

Set: TextMovement(self: AcadDimDiametricClass) = value
"""

    TextOutsideAlign = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextOutsideAlign(self: AcadDimDiametricClass) -> bool

Set: TextOutsideAlign(self: AcadDimDiametricClass) = value
"""

    TextOverride = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextOverride(self: AcadDimDiametricClass) -> str

Set: TextOverride(self: AcadDimDiametricClass) = value
"""

    TextPosition = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextPosition(self: AcadDimDiametricClass) -> object

Set: TextPosition(self: AcadDimDiametricClass) = value
"""

    TextPrefix = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextPrefix(self: AcadDimDiametricClass) -> str

Set: TextPrefix(self: AcadDimDiametricClass) = value
"""

    TextRotation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextRotation(self: AcadDimDiametricClass) -> float

Set: TextRotation(self: AcadDimDiametricClass) = value
"""

    TextStyle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextStyle(self: AcadDimDiametricClass) -> str

Set: TextStyle(self: AcadDimDiametricClass) = value
"""

    TextSuffix = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextSuffix(self: AcadDimDiametricClass) -> str

Set: TextSuffix(self: AcadDimDiametricClass) = value
"""

    ToleranceDisplay = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceDisplay(self: AcadDimDiametricClass) -> AcDimToleranceMethod

Set: ToleranceDisplay(self: AcadDimDiametricClass) = value
"""

    ToleranceHeightScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceHeightScale(self: AcadDimDiametricClass) -> float

Set: ToleranceHeightScale(self: AcadDimDiametricClass) = value
"""

    ToleranceJustification = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceJustification(self: AcadDimDiametricClass) -> AcDimToleranceJustify

Set: ToleranceJustification(self: AcadDimDiametricClass) = value
"""

    ToleranceLowerLimit = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceLowerLimit(self: AcadDimDiametricClass) -> float

Set: ToleranceLowerLimit(self: AcadDimDiametricClass) = value
"""

    TolerancePrecision = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TolerancePrecision(self: AcadDimDiametricClass) -> AcDimPrecision

Set: TolerancePrecision(self: AcadDimDiametricClass) = value
"""

    ToleranceSuppressLeadingZeros = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceSuppressLeadingZeros(self: AcadDimDiametricClass) -> bool

Set: ToleranceSuppressLeadingZeros(self: AcadDimDiametricClass) = value
"""

    ToleranceSuppressTrailingZeros = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceSuppressTrailingZeros(self: AcadDimDiametricClass) -> bool

Set: ToleranceSuppressTrailingZeros(self: AcadDimDiametricClass) = value
"""

    ToleranceSuppressZeroFeet = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceSuppressZeroFeet(self: AcadDimDiametricClass) -> bool

Set: ToleranceSuppressZeroFeet(self: AcadDimDiametricClass) = value
"""

    ToleranceSuppressZeroInches = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceSuppressZeroInches(self: AcadDimDiametricClass) -> bool

Set: ToleranceSuppressZeroInches(self: AcadDimDiametricClass) = value
"""

    ToleranceUpperLimit = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceUpperLimit(self: AcadDimDiametricClass) -> float

Set: ToleranceUpperLimit(self: AcadDimDiametricClass) = value
"""

    TrueColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TrueColor(self: AcadDimDiametricClass) -> AcadAcCmColor

Set: TrueColor(self: AcadDimDiametricClass) = value
"""

    UnitsFormat = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: UnitsFormat(self: AcadDimDiametricClass) -> AcDimLUnits

Set: UnitsFormat(self: AcadDimDiametricClass) = value
"""

    VerticalTextPosition = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VerticalTextPosition(self: AcadDimDiametricClass) -> AcDimVerticalJustification

Set: VerticalTextPosition(self: AcadDimDiametricClass) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: AcadDimDiametricClass) -> bool

Set: Visible(self: AcadDimDiametricClass) = value
"""


    Modified = None


class AcadDimension(IAcadDimension, IAcadEntity, IAcadObject, IAcadObjectEvents_Event):
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class AcadDimensionClass(__ComObject):
    # no doc
    def add_Modified(self, A_1):
        """ add_Modified(self: AcadDimensionClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def ArrayPolar(self, NumberOfObjects, AngleToFill, CenterPoint):
        """ ArrayPolar(self: AcadDimensionClass, NumberOfObjects: int, AngleToFill: float, CenterPoint: object) -> object """
        pass

    def ArrayRectangular(self, NumberOfRows, NumberOfColumns, NumberOfLevels, DistBetweenRows, DistBetweenCols, DistBetweenLevels):
        """ ArrayRectangular(self: AcadDimensionClass, NumberOfRows: int, NumberOfColumns: int, NumberOfLevels: int, DistBetweenRows: float, DistBetweenCols: float, DistBetweenLevels: float) -> object """
        pass

    def Copy(self):
        """ Copy(self: AcadDimensionClass) -> object """
        pass

    def Delete(self):
        """ Delete(self: AcadDimensionClass) """
        pass

    def Erase(self):
        """ Erase(self: AcadDimensionClass) """
        pass

    def GetBoundingBox(self, MinPoint, MaxPoint):
        """ GetBoundingBox(self: AcadDimensionClass) -> (object, object) """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: AcadDimensionClass) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: AcadDimensionClass, AppName: str) -> (object, object) """
        pass

    def Highlight(self, HighlightFlag):
        """ Highlight(self: AcadDimensionClass, HighlightFlag: bool) """
        pass

    def IntersectWith(self, IntersectObject, option):
        """ IntersectWith(self: AcadDimensionClass, IntersectObject: object, option: AcExtendOption) -> object """
        pass

    def Mirror(self, Point1, Point2):
        """ Mirror(self: AcadDimensionClass, Point1: object, Point2: object) -> object """
        pass

    def Mirror3D(self, Point1, Point2, point3):
        """ Mirror3D(self: AcadDimensionClass, Point1: object, Point2: object, point3: object) -> object """
        pass

    def Move(self, FromPoint, ToPoint):
        """ Move(self: AcadDimensionClass, FromPoint: object, ToPoint: object) """
        pass

    def remove_Modified(self, A_1):
        """ remove_Modified(self: AcadDimensionClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def Rotate(self, BasePoint, RotationAngle):
        """ Rotate(self: AcadDimensionClass, BasePoint: object, RotationAngle: float) """
        pass

    def Rotate3D(self, Point1, Point2, RotationAngle):
        """ Rotate3D(self: AcadDimensionClass, Point1: object, Point2: object, RotationAngle: float) """
        pass

    def ScaleEntity(self, BasePoint, ScaleFactor):
        """ ScaleEntity(self: AcadDimensionClass, BasePoint: object, ScaleFactor: float) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: AcadDimensionClass, XDataType: object, XDataValue: object) """
        pass

    def TransformBy(self, TransformationMatrix):
        """ TransformBy(self: AcadDimensionClass, TransformationMatrix: object) """
        pass

    def Update(self):
        """ Update(self: AcadDimensionClass) """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: AcadDimensionClass) -> object

"""

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: AcadDimensionClass) -> ACAD_COLOR

Set: color(self: AcadDimensionClass) = value
"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: AcadDimensionClass) -> AcadDatabase

"""

    DecimalSeparator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DecimalSeparator(self: AcadDimensionClass) -> str

Set: DecimalSeparator(self: AcadDimensionClass) = value
"""

    DimTxtDirection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimTxtDirection(self: AcadDimensionClass) -> bool

Set: DimTxtDirection(self: AcadDimensionClass) = value
"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: AcadDimensionClass) -> object

"""

    EntityName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityName(self: AcadDimensionClass) -> str

"""

    EntityTransparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityTransparency(self: AcadDimensionClass) -> str

Set: EntityTransparency(self: AcadDimensionClass) = value
"""

    EntityType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityType(self: AcadDimensionClass) -> int

"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: AcadDimensionClass) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: AcadDimensionClass) -> bool

"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: AcadDimensionClass) -> AcadHyperlinks

"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layer(self: AcadDimensionClass) -> str

Set: Layer(self: AcadDimensionClass) = value
"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: AcadDimensionClass) -> str

Set: Linetype(self: AcadDimensionClass) = value
"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeScale(self: AcadDimensionClass) -> float

Set: LinetypeScale(self: AcadDimensionClass) = value
"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: AcadDimensionClass) -> ACAD_LWEIGHT

Set: Lineweight(self: AcadDimensionClass) = value
"""

    Material = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Material(self: AcadDimensionClass) -> str

Set: Material(self: AcadDimensionClass) = value
"""

    Normal = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Normal(self: AcadDimensionClass) -> object

Set: Normal(self: AcadDimensionClass) = value
"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: AcadDimensionClass) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: AcadDimensionClass) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: AcadDimensionClass) -> Int64

"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: AcadDimensionClass) -> str

Set: PlotStyleName(self: AcadDimensionClass) = value
"""

    Rotation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Rotation(self: AcadDimensionClass) -> float

Set: Rotation(self: AcadDimensionClass) = value
"""

    ScaleFactor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ScaleFactor(self: AcadDimensionClass) -> float

Set: ScaleFactor(self: AcadDimensionClass) = value
"""

    StyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: StyleName(self: AcadDimensionClass) -> str

Set: StyleName(self: AcadDimensionClass) = value
"""

    SuppressLeadingZeros = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SuppressLeadingZeros(self: AcadDimensionClass) -> bool

Set: SuppressLeadingZeros(self: AcadDimensionClass) = value
"""

    SuppressTrailingZeros = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SuppressTrailingZeros(self: AcadDimensionClass) -> bool

Set: SuppressTrailingZeros(self: AcadDimensionClass) = value
"""

    TextColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextColor(self: AcadDimensionClass) -> ACAD_COLOR

Set: TextColor(self: AcadDimensionClass) = value
"""

    TextFill = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextFill(self: AcadDimensionClass) -> bool

Set: TextFill(self: AcadDimensionClass) = value
"""

    TextFillColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextFillColor(self: AcadDimensionClass) -> ACAD_COLOR

Set: TextFillColor(self: AcadDimensionClass) = value
"""

    TextGap = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextGap(self: AcadDimensionClass) -> float

Set: TextGap(self: AcadDimensionClass) = value
"""

    TextHeight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextHeight(self: AcadDimensionClass) -> float

Set: TextHeight(self: AcadDimensionClass) = value
"""

    TextMovement = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextMovement(self: AcadDimensionClass) -> AcDimTextMovement

Set: TextMovement(self: AcadDimensionClass) = value
"""

    TextOverride = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextOverride(self: AcadDimensionClass) -> str

Set: TextOverride(self: AcadDimensionClass) = value
"""

    TextPosition = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextPosition(self: AcadDimensionClass) -> object

Set: TextPosition(self: AcadDimensionClass) = value
"""

    TextPrefix = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextPrefix(self: AcadDimensionClass) -> str

Set: TextPrefix(self: AcadDimensionClass) = value
"""

    TextRotation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextRotation(self: AcadDimensionClass) -> float

Set: TextRotation(self: AcadDimensionClass) = value
"""

    TextStyle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextStyle(self: AcadDimensionClass) -> str

Set: TextStyle(self: AcadDimensionClass) = value
"""

    TextSuffix = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextSuffix(self: AcadDimensionClass) -> str

Set: TextSuffix(self: AcadDimensionClass) = value
"""

    ToleranceDisplay = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceDisplay(self: AcadDimensionClass) -> AcDimToleranceMethod

Set: ToleranceDisplay(self: AcadDimensionClass) = value
"""

    ToleranceHeightScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceHeightScale(self: AcadDimensionClass) -> float

Set: ToleranceHeightScale(self: AcadDimensionClass) = value
"""

    ToleranceJustification = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceJustification(self: AcadDimensionClass) -> AcDimToleranceJustify

Set: ToleranceJustification(self: AcadDimensionClass) = value
"""

    ToleranceLowerLimit = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceLowerLimit(self: AcadDimensionClass) -> float

Set: ToleranceLowerLimit(self: AcadDimensionClass) = value
"""

    TolerancePrecision = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TolerancePrecision(self: AcadDimensionClass) -> AcDimPrecision

Set: TolerancePrecision(self: AcadDimensionClass) = value
"""

    ToleranceSuppressLeadingZeros = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceSuppressLeadingZeros(self: AcadDimensionClass) -> bool

Set: ToleranceSuppressLeadingZeros(self: AcadDimensionClass) = value
"""

    ToleranceSuppressTrailingZeros = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceSuppressTrailingZeros(self: AcadDimensionClass) -> bool

Set: ToleranceSuppressTrailingZeros(self: AcadDimensionClass) = value
"""

    ToleranceUpperLimit = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceUpperLimit(self: AcadDimensionClass) -> float

Set: ToleranceUpperLimit(self: AcadDimensionClass) = value
"""

    TrueColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TrueColor(self: AcadDimensionClass) -> AcadAcCmColor

Set: TrueColor(self: AcadDimensionClass) = value
"""

    VerticalTextPosition = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VerticalTextPosition(self: AcadDimensionClass) -> AcDimVerticalJustification

Set: VerticalTextPosition(self: AcadDimensionClass) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: AcadDimensionClass) -> bool

Set: Visible(self: AcadDimensionClass) = value
"""


    Modified = None


class IAcadDimOrdinate(IAcadDimension, IAcadEntity, IAcadObject):
    # no doc
    def ArrayPolar(self, NumberOfObjects, AngleToFill, CenterPoint):
        """ ArrayPolar(self: IAcadDimOrdinate, NumberOfObjects: int, AngleToFill: float, CenterPoint: object) -> object """
        pass

    def ArrayRectangular(self, NumberOfRows, NumberOfColumns, NumberOfLevels, DistBetweenRows, DistBetweenCols, DistBetweenLevels):
        """ ArrayRectangular(self: IAcadDimOrdinate, NumberOfRows: int, NumberOfColumns: int, NumberOfLevels: int, DistBetweenRows: float, DistBetweenCols: float, DistBetweenLevels: float) -> object """
        pass

    def Copy(self):
        """ Copy(self: IAcadDimOrdinate) -> object """
        pass

    def Delete(self):
        """ Delete(self: IAcadDimOrdinate) """
        pass

    def Erase(self):
        """ Erase(self: IAcadDimOrdinate) """
        pass

    def GetBoundingBox(self, MinPoint, MaxPoint):
        """ GetBoundingBox(self: IAcadDimOrdinate) -> (object, object) """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: IAcadDimOrdinate) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: IAcadDimOrdinate, AppName: str) -> (object, object) """
        pass

    def Highlight(self, HighlightFlag):
        """ Highlight(self: IAcadDimOrdinate, HighlightFlag: bool) """
        pass

    def IntersectWith(self, IntersectObject, option):
        """ IntersectWith(self: IAcadDimOrdinate, IntersectObject: object, option: AcExtendOption) -> object """
        pass

    def Mirror(self, Point1, Point2):
        """ Mirror(self: IAcadDimOrdinate, Point1: object, Point2: object) -> object """
        pass

    def Mirror3D(self, Point1, Point2, point3):
        """ Mirror3D(self: IAcadDimOrdinate, Point1: object, Point2: object, point3: object) -> object """
        pass

    def Move(self, FromPoint, ToPoint):
        """ Move(self: IAcadDimOrdinate, FromPoint: object, ToPoint: object) """
        pass

    def Rotate(self, BasePoint, RotationAngle):
        """ Rotate(self: IAcadDimOrdinate, BasePoint: object, RotationAngle: float) """
        pass

    def Rotate3D(self, Point1, Point2, RotationAngle):
        """ Rotate3D(self: IAcadDimOrdinate, Point1: object, Point2: object, RotationAngle: float) """
        pass

    def ScaleEntity(self, BasePoint, ScaleFactor):
        """ ScaleEntity(self: IAcadDimOrdinate, BasePoint: object, ScaleFactor: float) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: IAcadDimOrdinate, XDataType: object, XDataValue: object) """
        pass

    def TransformBy(self, TransformationMatrix):
        """ TransformBy(self: IAcadDimOrdinate, TransformationMatrix: object) """
        pass

    def Update(self):
        """ Update(self: IAcadDimOrdinate) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    AltRoundDistance = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltRoundDistance(self: IAcadDimOrdinate) -> float

Set: AltRoundDistance(self: IAcadDimOrdinate) = value
"""

    AltSubUnitsFactor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltSubUnitsFactor(self: IAcadDimOrdinate) -> float

Set: AltSubUnitsFactor(self: IAcadDimOrdinate) = value
"""

    AltSubUnitsSuffix = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltSubUnitsSuffix(self: IAcadDimOrdinate) -> str

Set: AltSubUnitsSuffix(self: IAcadDimOrdinate) = value
"""

    AltSuppressLeadingZeros = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltSuppressLeadingZeros(self: IAcadDimOrdinate) -> bool

Set: AltSuppressLeadingZeros(self: IAcadDimOrdinate) = value
"""

    AltSuppressTrailingZeros = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltSuppressTrailingZeros(self: IAcadDimOrdinate) -> bool

Set: AltSuppressTrailingZeros(self: IAcadDimOrdinate) = value
"""

    AltSuppressZeroFeet = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltSuppressZeroFeet(self: IAcadDimOrdinate) -> bool

Set: AltSuppressZeroFeet(self: IAcadDimOrdinate) = value
"""

    AltSuppressZeroInches = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltSuppressZeroInches(self: IAcadDimOrdinate) -> bool

Set: AltSuppressZeroInches(self: IAcadDimOrdinate) = value
"""

    AltTextPrefix = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltTextPrefix(self: IAcadDimOrdinate) -> str

Set: AltTextPrefix(self: IAcadDimOrdinate) = value
"""

    AltTextSuffix = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltTextSuffix(self: IAcadDimOrdinate) -> str

Set: AltTextSuffix(self: IAcadDimOrdinate) = value
"""

    AltTolerancePrecision = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltTolerancePrecision(self: IAcadDimOrdinate) -> AcDimPrecision

Set: AltTolerancePrecision(self: IAcadDimOrdinate) = value
"""

    AltToleranceSuppressLeadingZeros = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltToleranceSuppressLeadingZeros(self: IAcadDimOrdinate) -> bool

Set: AltToleranceSuppressLeadingZeros(self: IAcadDimOrdinate) = value
"""

    AltToleranceSuppressTrailingZeros = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltToleranceSuppressTrailingZeros(self: IAcadDimOrdinate) -> bool

Set: AltToleranceSuppressTrailingZeros(self: IAcadDimOrdinate) = value
"""

    AltToleranceSuppressZeroFeet = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltToleranceSuppressZeroFeet(self: IAcadDimOrdinate) -> bool

Set: AltToleranceSuppressZeroFeet(self: IAcadDimOrdinate) = value
"""

    AltToleranceSuppressZeroInches = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltToleranceSuppressZeroInches(self: IAcadDimOrdinate) -> bool

Set: AltToleranceSuppressZeroInches(self: IAcadDimOrdinate) = value
"""

    AltUnits = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltUnits(self: IAcadDimOrdinate) -> bool

Set: AltUnits(self: IAcadDimOrdinate) = value
"""

    AltUnitsFormat = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltUnitsFormat(self: IAcadDimOrdinate) -> AcDimUnits

Set: AltUnitsFormat(self: IAcadDimOrdinate) = value
"""

    AltUnitsPrecision = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltUnitsPrecision(self: IAcadDimOrdinate) -> AcDimPrecision

Set: AltUnitsPrecision(self: IAcadDimOrdinate) = value
"""

    AltUnitsScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltUnitsScale(self: IAcadDimOrdinate) -> float

Set: AltUnitsScale(self: IAcadDimOrdinate) = value
"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IAcadDimOrdinate) -> object

"""

    ArrowheadSize = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ArrowheadSize(self: IAcadDimOrdinate) -> float

Set: ArrowheadSize(self: IAcadDimOrdinate) = value
"""

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: IAcadDimOrdinate) -> ACAD_COLOR

Set: color(self: IAcadDimOrdinate) = value
"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: IAcadDimOrdinate) -> AcadDatabase

"""

    DecimalSeparator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DecimalSeparator(self: IAcadDimOrdinate) -> str

Set: DecimalSeparator(self: IAcadDimOrdinate) = value
"""

    DimTxtDirection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimTxtDirection(self: IAcadDimOrdinate) -> bool

Set: DimTxtDirection(self: IAcadDimOrdinate) = value
"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: IAcadDimOrdinate) -> object

"""

    EntityName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityName(self: IAcadDimOrdinate) -> str

"""

    EntityTransparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityTransparency(self: IAcadDimOrdinate) -> str

Set: EntityTransparency(self: IAcadDimOrdinate) = value
"""

    EntityType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityType(self: IAcadDimOrdinate) -> int

"""

    ExtensionLineColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ExtensionLineColor(self: IAcadDimOrdinate) -> ACAD_COLOR

Set: ExtensionLineColor(self: IAcadDimOrdinate) = value
"""

    ExtensionLineOffset = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ExtensionLineOffset(self: IAcadDimOrdinate) -> float

Set: ExtensionLineOffset(self: IAcadDimOrdinate) = value
"""

    ExtensionLineWeight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ExtensionLineWeight(self: IAcadDimOrdinate) -> ACAD_LWEIGHT

Set: ExtensionLineWeight(self: IAcadDimOrdinate) = value
"""

    ExtLineFixedLen = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ExtLineFixedLen(self: IAcadDimOrdinate) -> float

Set: ExtLineFixedLen(self: IAcadDimOrdinate) = value
"""

    ExtLineFixedLenSuppress = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ExtLineFixedLenSuppress(self: IAcadDimOrdinate) -> bool

Set: ExtLineFixedLenSuppress(self: IAcadDimOrdinate) = value
"""

    FractionFormat = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FractionFormat(self: IAcadDimOrdinate) -> AcDimFractionType

Set: FractionFormat(self: IAcadDimOrdinate) = value
"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: IAcadDimOrdinate) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: IAcadDimOrdinate) -> bool

"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: IAcadDimOrdinate) -> AcadHyperlinks

"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layer(self: IAcadDimOrdinate) -> str

Set: Layer(self: IAcadDimOrdinate) = value
"""

    LinearScaleFactor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinearScaleFactor(self: IAcadDimOrdinate) -> float

Set: LinearScaleFactor(self: IAcadDimOrdinate) = value
"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: IAcadDimOrdinate) -> str

Set: Linetype(self: IAcadDimOrdinate) = value
"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeScale(self: IAcadDimOrdinate) -> float

Set: LinetypeScale(self: IAcadDimOrdinate) = value
"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: IAcadDimOrdinate) -> ACAD_LWEIGHT

Set: Lineweight(self: IAcadDimOrdinate) = value
"""

    Material = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Material(self: IAcadDimOrdinate) -> str

Set: Material(self: IAcadDimOrdinate) = value
"""

    Measurement = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Measurement(self: IAcadDimOrdinate) -> float

"""

    Normal = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Normal(self: IAcadDimOrdinate) -> object

Set: Normal(self: IAcadDimOrdinate) = value
"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: IAcadDimOrdinate) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: IAcadDimOrdinate) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: IAcadDimOrdinate) -> Int64

"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: IAcadDimOrdinate) -> str

Set: PlotStyleName(self: IAcadDimOrdinate) = value
"""

    PrimaryUnitsPrecision = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PrimaryUnitsPrecision(self: IAcadDimOrdinate) -> AcDimPrecision

Set: PrimaryUnitsPrecision(self: IAcadDimOrdinate) = value
"""

    Rotation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Rotation(self: IAcadDimOrdinate) -> float

Set: Rotation(self: IAcadDimOrdinate) = value
"""

    RoundDistance = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RoundDistance(self: IAcadDimOrdinate) -> float

Set: RoundDistance(self: IAcadDimOrdinate) = value
"""

    ScaleFactor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ScaleFactor(self: IAcadDimOrdinate) -> float

Set: ScaleFactor(self: IAcadDimOrdinate) = value
"""

    StyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: StyleName(self: IAcadDimOrdinate) -> str

Set: StyleName(self: IAcadDimOrdinate) = value
"""

    SubUnitsFactor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SubUnitsFactor(self: IAcadDimOrdinate) -> float

Set: SubUnitsFactor(self: IAcadDimOrdinate) = value
"""

    SubUnitsSuffix = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SubUnitsSuffix(self: IAcadDimOrdinate) -> str

Set: SubUnitsSuffix(self: IAcadDimOrdinate) = value
"""

    SuppressLeadingZeros = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SuppressLeadingZeros(self: IAcadDimOrdinate) -> bool

Set: SuppressLeadingZeros(self: IAcadDimOrdinate) = value
"""

    SuppressTrailingZeros = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SuppressTrailingZeros(self: IAcadDimOrdinate) -> bool

Set: SuppressTrailingZeros(self: IAcadDimOrdinate) = value
"""

    SuppressZeroFeet = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SuppressZeroFeet(self: IAcadDimOrdinate) -> bool

Set: SuppressZeroFeet(self: IAcadDimOrdinate) = value
"""

    SuppressZeroInches = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SuppressZeroInches(self: IAcadDimOrdinate) -> bool

Set: SuppressZeroInches(self: IAcadDimOrdinate) = value
"""

    TextColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextColor(self: IAcadDimOrdinate) -> ACAD_COLOR

Set: TextColor(self: IAcadDimOrdinate) = value
"""

    TextFill = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextFill(self: IAcadDimOrdinate) -> bool

Set: TextFill(self: IAcadDimOrdinate) = value
"""

    TextFillColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextFillColor(self: IAcadDimOrdinate) -> ACAD_COLOR

Set: TextFillColor(self: IAcadDimOrdinate) = value
"""

    TextGap = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextGap(self: IAcadDimOrdinate) -> float

Set: TextGap(self: IAcadDimOrdinate) = value
"""

    TextHeight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextHeight(self: IAcadDimOrdinate) -> float

Set: TextHeight(self: IAcadDimOrdinate) = value
"""

    TextMovement = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextMovement(self: IAcadDimOrdinate) -> AcDimTextMovement

Set: TextMovement(self: IAcadDimOrdinate) = value
"""

    TextOverride = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextOverride(self: IAcadDimOrdinate) -> str

Set: TextOverride(self: IAcadDimOrdinate) = value
"""

    TextPosition = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextPosition(self: IAcadDimOrdinate) -> object

Set: TextPosition(self: IAcadDimOrdinate) = value
"""

    TextPrefix = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextPrefix(self: IAcadDimOrdinate) -> str

Set: TextPrefix(self: IAcadDimOrdinate) = value
"""

    TextRotation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextRotation(self: IAcadDimOrdinate) -> float

Set: TextRotation(self: IAcadDimOrdinate) = value
"""

    TextStyle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextStyle(self: IAcadDimOrdinate) -> str

Set: TextStyle(self: IAcadDimOrdinate) = value
"""

    TextSuffix = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextSuffix(self: IAcadDimOrdinate) -> str

Set: TextSuffix(self: IAcadDimOrdinate) = value
"""

    ToleranceDisplay = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceDisplay(self: IAcadDimOrdinate) -> AcDimToleranceMethod

Set: ToleranceDisplay(self: IAcadDimOrdinate) = value
"""

    ToleranceHeightScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceHeightScale(self: IAcadDimOrdinate) -> float

Set: ToleranceHeightScale(self: IAcadDimOrdinate) = value
"""

    ToleranceJustification = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceJustification(self: IAcadDimOrdinate) -> AcDimToleranceJustify

Set: ToleranceJustification(self: IAcadDimOrdinate) = value
"""

    ToleranceLowerLimit = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceLowerLimit(self: IAcadDimOrdinate) -> float

Set: ToleranceLowerLimit(self: IAcadDimOrdinate) = value
"""

    TolerancePrecision = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TolerancePrecision(self: IAcadDimOrdinate) -> AcDimPrecision

Set: TolerancePrecision(self: IAcadDimOrdinate) = value
"""

    ToleranceSuppressLeadingZeros = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceSuppressLeadingZeros(self: IAcadDimOrdinate) -> bool

Set: ToleranceSuppressLeadingZeros(self: IAcadDimOrdinate) = value
"""

    ToleranceSuppressTrailingZeros = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceSuppressTrailingZeros(self: IAcadDimOrdinate) -> bool

Set: ToleranceSuppressTrailingZeros(self: IAcadDimOrdinate) = value
"""

    ToleranceSuppressZeroFeet = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceSuppressZeroFeet(self: IAcadDimOrdinate) -> bool

Set: ToleranceSuppressZeroFeet(self: IAcadDimOrdinate) = value
"""

    ToleranceSuppressZeroInches = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceSuppressZeroInches(self: IAcadDimOrdinate) -> bool

Set: ToleranceSuppressZeroInches(self: IAcadDimOrdinate) = value
"""

    ToleranceUpperLimit = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceUpperLimit(self: IAcadDimOrdinate) -> float

Set: ToleranceUpperLimit(self: IAcadDimOrdinate) = value
"""

    TrueColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TrueColor(self: IAcadDimOrdinate) -> AcadAcCmColor

Set: TrueColor(self: IAcadDimOrdinate) = value
"""

    UnitsFormat = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: UnitsFormat(self: IAcadDimOrdinate) -> AcDimLUnits

Set: UnitsFormat(self: IAcadDimOrdinate) = value
"""

    VerticalTextPosition = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VerticalTextPosition(self: IAcadDimOrdinate) -> AcDimVerticalJustification

Set: VerticalTextPosition(self: IAcadDimOrdinate) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: IAcadDimOrdinate) -> bool

Set: Visible(self: IAcadDimOrdinate) = value
"""



class AcadDimOrdinate(IAcadDimOrdinate, IAcadDimension, IAcadEntity, IAcadObject, IAcadObjectEvents_Event):
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class AcadDimOrdinateClass(__ComObject):
    # no doc
    def add_Modified(self, A_1):
        """ add_Modified(self: AcadDimOrdinateClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def ArrayPolar(self, NumberOfObjects, AngleToFill, CenterPoint):
        """ ArrayPolar(self: AcadDimOrdinateClass, NumberOfObjects: int, AngleToFill: float, CenterPoint: object) -> object """
        pass

    def ArrayRectangular(self, NumberOfRows, NumberOfColumns, NumberOfLevels, DistBetweenRows, DistBetweenCols, DistBetweenLevels):
        """ ArrayRectangular(self: AcadDimOrdinateClass, NumberOfRows: int, NumberOfColumns: int, NumberOfLevels: int, DistBetweenRows: float, DistBetweenCols: float, DistBetweenLevels: float) -> object """
        pass

    def Copy(self):
        """ Copy(self: AcadDimOrdinateClass) -> object """
        pass

    def Delete(self):
        """ Delete(self: AcadDimOrdinateClass) """
        pass

    def Erase(self):
        """ Erase(self: AcadDimOrdinateClass) """
        pass

    def GetBoundingBox(self, MinPoint, MaxPoint):
        """ GetBoundingBox(self: AcadDimOrdinateClass) -> (object, object) """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: AcadDimOrdinateClass) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: AcadDimOrdinateClass, AppName: str) -> (object, object) """
        pass

    def Highlight(self, HighlightFlag):
        """ Highlight(self: AcadDimOrdinateClass, HighlightFlag: bool) """
        pass

    def IntersectWith(self, IntersectObject, option):
        """ IntersectWith(self: AcadDimOrdinateClass, IntersectObject: object, option: AcExtendOption) -> object """
        pass

    def Mirror(self, Point1, Point2):
        """ Mirror(self: AcadDimOrdinateClass, Point1: object, Point2: object) -> object """
        pass

    def Mirror3D(self, Point1, Point2, point3):
        """ Mirror3D(self: AcadDimOrdinateClass, Point1: object, Point2: object, point3: object) -> object """
        pass

    def Move(self, FromPoint, ToPoint):
        """ Move(self: AcadDimOrdinateClass, FromPoint: object, ToPoint: object) """
        pass

    def remove_Modified(self, A_1):
        """ remove_Modified(self: AcadDimOrdinateClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def Rotate(self, BasePoint, RotationAngle):
        """ Rotate(self: AcadDimOrdinateClass, BasePoint: object, RotationAngle: float) """
        pass

    def Rotate3D(self, Point1, Point2, RotationAngle):
        """ Rotate3D(self: AcadDimOrdinateClass, Point1: object, Point2: object, RotationAngle: float) """
        pass

    def ScaleEntity(self, BasePoint, ScaleFactor):
        """ ScaleEntity(self: AcadDimOrdinateClass, BasePoint: object, ScaleFactor: float) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: AcadDimOrdinateClass, XDataType: object, XDataValue: object) """
        pass

    def TransformBy(self, TransformationMatrix):
        """ TransformBy(self: AcadDimOrdinateClass, TransformationMatrix: object) """
        pass

    def Update(self):
        """ Update(self: AcadDimOrdinateClass) """
        pass

    AltRoundDistance = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltRoundDistance(self: AcadDimOrdinateClass) -> float

Set: AltRoundDistance(self: AcadDimOrdinateClass) = value
"""

    AltSubUnitsFactor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltSubUnitsFactor(self: AcadDimOrdinateClass) -> float

Set: AltSubUnitsFactor(self: AcadDimOrdinateClass) = value
"""

    AltSubUnitsSuffix = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltSubUnitsSuffix(self: AcadDimOrdinateClass) -> str

Set: AltSubUnitsSuffix(self: AcadDimOrdinateClass) = value
"""

    AltSuppressLeadingZeros = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltSuppressLeadingZeros(self: AcadDimOrdinateClass) -> bool

Set: AltSuppressLeadingZeros(self: AcadDimOrdinateClass) = value
"""

    AltSuppressTrailingZeros = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltSuppressTrailingZeros(self: AcadDimOrdinateClass) -> bool

Set: AltSuppressTrailingZeros(self: AcadDimOrdinateClass) = value
"""

    AltSuppressZeroFeet = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltSuppressZeroFeet(self: AcadDimOrdinateClass) -> bool

Set: AltSuppressZeroFeet(self: AcadDimOrdinateClass) = value
"""

    AltSuppressZeroInches = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltSuppressZeroInches(self: AcadDimOrdinateClass) -> bool

Set: AltSuppressZeroInches(self: AcadDimOrdinateClass) = value
"""

    AltTextPrefix = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltTextPrefix(self: AcadDimOrdinateClass) -> str

Set: AltTextPrefix(self: AcadDimOrdinateClass) = value
"""

    AltTextSuffix = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltTextSuffix(self: AcadDimOrdinateClass) -> str

Set: AltTextSuffix(self: AcadDimOrdinateClass) = value
"""

    AltTolerancePrecision = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltTolerancePrecision(self: AcadDimOrdinateClass) -> AcDimPrecision

Set: AltTolerancePrecision(self: AcadDimOrdinateClass) = value
"""

    AltToleranceSuppressLeadingZeros = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltToleranceSuppressLeadingZeros(self: AcadDimOrdinateClass) -> bool

Set: AltToleranceSuppressLeadingZeros(self: AcadDimOrdinateClass) = value
"""

    AltToleranceSuppressTrailingZeros = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltToleranceSuppressTrailingZeros(self: AcadDimOrdinateClass) -> bool

Set: AltToleranceSuppressTrailingZeros(self: AcadDimOrdinateClass) = value
"""

    AltToleranceSuppressZeroFeet = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltToleranceSuppressZeroFeet(self: AcadDimOrdinateClass) -> bool

Set: AltToleranceSuppressZeroFeet(self: AcadDimOrdinateClass) = value
"""

    AltToleranceSuppressZeroInches = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltToleranceSuppressZeroInches(self: AcadDimOrdinateClass) -> bool

Set: AltToleranceSuppressZeroInches(self: AcadDimOrdinateClass) = value
"""

    AltUnits = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltUnits(self: AcadDimOrdinateClass) -> bool

Set: AltUnits(self: AcadDimOrdinateClass) = value
"""

    AltUnitsFormat = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltUnitsFormat(self: AcadDimOrdinateClass) -> AcDimUnits

Set: AltUnitsFormat(self: AcadDimOrdinateClass) = value
"""

    AltUnitsPrecision = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltUnitsPrecision(self: AcadDimOrdinateClass) -> AcDimPrecision

Set: AltUnitsPrecision(self: AcadDimOrdinateClass) = value
"""

    AltUnitsScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltUnitsScale(self: AcadDimOrdinateClass) -> float

Set: AltUnitsScale(self: AcadDimOrdinateClass) = value
"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: AcadDimOrdinateClass) -> object

"""

    ArrowheadSize = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ArrowheadSize(self: AcadDimOrdinateClass) -> float

Set: ArrowheadSize(self: AcadDimOrdinateClass) = value
"""

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: AcadDimOrdinateClass) -> ACAD_COLOR

Set: color(self: AcadDimOrdinateClass) = value
"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: AcadDimOrdinateClass) -> AcadDatabase

"""

    DecimalSeparator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DecimalSeparator(self: AcadDimOrdinateClass) -> str

Set: DecimalSeparator(self: AcadDimOrdinateClass) = value
"""

    DimTxtDirection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimTxtDirection(self: AcadDimOrdinateClass) -> bool

Set: DimTxtDirection(self: AcadDimOrdinateClass) = value
"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: AcadDimOrdinateClass) -> object

"""

    EntityName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityName(self: AcadDimOrdinateClass) -> str

"""

    EntityTransparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityTransparency(self: AcadDimOrdinateClass) -> str

Set: EntityTransparency(self: AcadDimOrdinateClass) = value
"""

    EntityType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityType(self: AcadDimOrdinateClass) -> int

"""

    ExtensionLineColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ExtensionLineColor(self: AcadDimOrdinateClass) -> ACAD_COLOR

Set: ExtensionLineColor(self: AcadDimOrdinateClass) = value
"""

    ExtensionLineOffset = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ExtensionLineOffset(self: AcadDimOrdinateClass) -> float

Set: ExtensionLineOffset(self: AcadDimOrdinateClass) = value
"""

    ExtensionLineWeight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ExtensionLineWeight(self: AcadDimOrdinateClass) -> ACAD_LWEIGHT

Set: ExtensionLineWeight(self: AcadDimOrdinateClass) = value
"""

    ExtLineFixedLen = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ExtLineFixedLen(self: AcadDimOrdinateClass) -> float

Set: ExtLineFixedLen(self: AcadDimOrdinateClass) = value
"""

    ExtLineFixedLenSuppress = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ExtLineFixedLenSuppress(self: AcadDimOrdinateClass) -> bool

Set: ExtLineFixedLenSuppress(self: AcadDimOrdinateClass) = value
"""

    FractionFormat = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FractionFormat(self: AcadDimOrdinateClass) -> AcDimFractionType

Set: FractionFormat(self: AcadDimOrdinateClass) = value
"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: AcadDimOrdinateClass) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: AcadDimOrdinateClass) -> bool

"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: AcadDimOrdinateClass) -> AcadHyperlinks

"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layer(self: AcadDimOrdinateClass) -> str

Set: Layer(self: AcadDimOrdinateClass) = value
"""

    LinearScaleFactor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinearScaleFactor(self: AcadDimOrdinateClass) -> float

Set: LinearScaleFactor(self: AcadDimOrdinateClass) = value
"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: AcadDimOrdinateClass) -> str

Set: Linetype(self: AcadDimOrdinateClass) = value
"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeScale(self: AcadDimOrdinateClass) -> float

Set: LinetypeScale(self: AcadDimOrdinateClass) = value
"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: AcadDimOrdinateClass) -> ACAD_LWEIGHT

Set: Lineweight(self: AcadDimOrdinateClass) = value
"""

    Material = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Material(self: AcadDimOrdinateClass) -> str

Set: Material(self: AcadDimOrdinateClass) = value
"""

    Measurement = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Measurement(self: AcadDimOrdinateClass) -> float

"""

    Normal = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Normal(self: AcadDimOrdinateClass) -> object

Set: Normal(self: AcadDimOrdinateClass) = value
"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: AcadDimOrdinateClass) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: AcadDimOrdinateClass) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: AcadDimOrdinateClass) -> Int64

"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: AcadDimOrdinateClass) -> str

Set: PlotStyleName(self: AcadDimOrdinateClass) = value
"""

    PrimaryUnitsPrecision = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PrimaryUnitsPrecision(self: AcadDimOrdinateClass) -> AcDimPrecision

Set: PrimaryUnitsPrecision(self: AcadDimOrdinateClass) = value
"""

    Rotation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Rotation(self: AcadDimOrdinateClass) -> float

Set: Rotation(self: AcadDimOrdinateClass) = value
"""

    RoundDistance = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RoundDistance(self: AcadDimOrdinateClass) -> float

Set: RoundDistance(self: AcadDimOrdinateClass) = value
"""

    ScaleFactor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ScaleFactor(self: AcadDimOrdinateClass) -> float

Set: ScaleFactor(self: AcadDimOrdinateClass) = value
"""

    StyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: StyleName(self: AcadDimOrdinateClass) -> str

Set: StyleName(self: AcadDimOrdinateClass) = value
"""

    SubUnitsFactor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SubUnitsFactor(self: AcadDimOrdinateClass) -> float

Set: SubUnitsFactor(self: AcadDimOrdinateClass) = value
"""

    SubUnitsSuffix = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SubUnitsSuffix(self: AcadDimOrdinateClass) -> str

Set: SubUnitsSuffix(self: AcadDimOrdinateClass) = value
"""

    SuppressLeadingZeros = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SuppressLeadingZeros(self: AcadDimOrdinateClass) -> bool

Set: SuppressLeadingZeros(self: AcadDimOrdinateClass) = value
"""

    SuppressTrailingZeros = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SuppressTrailingZeros(self: AcadDimOrdinateClass) -> bool

Set: SuppressTrailingZeros(self: AcadDimOrdinateClass) = value
"""

    SuppressZeroFeet = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SuppressZeroFeet(self: AcadDimOrdinateClass) -> bool

Set: SuppressZeroFeet(self: AcadDimOrdinateClass) = value
"""

    SuppressZeroInches = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SuppressZeroInches(self: AcadDimOrdinateClass) -> bool

Set: SuppressZeroInches(self: AcadDimOrdinateClass) = value
"""

    TextColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextColor(self: AcadDimOrdinateClass) -> ACAD_COLOR

Set: TextColor(self: AcadDimOrdinateClass) = value
"""

    TextFill = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextFill(self: AcadDimOrdinateClass) -> bool

Set: TextFill(self: AcadDimOrdinateClass) = value
"""

    TextFillColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextFillColor(self: AcadDimOrdinateClass) -> ACAD_COLOR

Set: TextFillColor(self: AcadDimOrdinateClass) = value
"""

    TextGap = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextGap(self: AcadDimOrdinateClass) -> float

Set: TextGap(self: AcadDimOrdinateClass) = value
"""

    TextHeight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextHeight(self: AcadDimOrdinateClass) -> float

Set: TextHeight(self: AcadDimOrdinateClass) = value
"""

    TextMovement = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextMovement(self: AcadDimOrdinateClass) -> AcDimTextMovement

Set: TextMovement(self: AcadDimOrdinateClass) = value
"""

    TextOverride = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextOverride(self: AcadDimOrdinateClass) -> str

Set: TextOverride(self: AcadDimOrdinateClass) = value
"""

    TextPosition = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextPosition(self: AcadDimOrdinateClass) -> object

Set: TextPosition(self: AcadDimOrdinateClass) = value
"""

    TextPrefix = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextPrefix(self: AcadDimOrdinateClass) -> str

Set: TextPrefix(self: AcadDimOrdinateClass) = value
"""

    TextRotation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextRotation(self: AcadDimOrdinateClass) -> float

Set: TextRotation(self: AcadDimOrdinateClass) = value
"""

    TextStyle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextStyle(self: AcadDimOrdinateClass) -> str

Set: TextStyle(self: AcadDimOrdinateClass) = value
"""

    TextSuffix = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextSuffix(self: AcadDimOrdinateClass) -> str

Set: TextSuffix(self: AcadDimOrdinateClass) = value
"""

    ToleranceDisplay = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceDisplay(self: AcadDimOrdinateClass) -> AcDimToleranceMethod

Set: ToleranceDisplay(self: AcadDimOrdinateClass) = value
"""

    ToleranceHeightScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceHeightScale(self: AcadDimOrdinateClass) -> float

Set: ToleranceHeightScale(self: AcadDimOrdinateClass) = value
"""

    ToleranceJustification = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceJustification(self: AcadDimOrdinateClass) -> AcDimToleranceJustify

Set: ToleranceJustification(self: AcadDimOrdinateClass) = value
"""

    ToleranceLowerLimit = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceLowerLimit(self: AcadDimOrdinateClass) -> float

Set: ToleranceLowerLimit(self: AcadDimOrdinateClass) = value
"""

    TolerancePrecision = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TolerancePrecision(self: AcadDimOrdinateClass) -> AcDimPrecision

Set: TolerancePrecision(self: AcadDimOrdinateClass) = value
"""

    ToleranceSuppressLeadingZeros = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceSuppressLeadingZeros(self: AcadDimOrdinateClass) -> bool

Set: ToleranceSuppressLeadingZeros(self: AcadDimOrdinateClass) = value
"""

    ToleranceSuppressTrailingZeros = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceSuppressTrailingZeros(self: AcadDimOrdinateClass) -> bool

Set: ToleranceSuppressTrailingZeros(self: AcadDimOrdinateClass) = value
"""

    ToleranceSuppressZeroFeet = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceSuppressZeroFeet(self: AcadDimOrdinateClass) -> bool

Set: ToleranceSuppressZeroFeet(self: AcadDimOrdinateClass) = value
"""

    ToleranceSuppressZeroInches = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceSuppressZeroInches(self: AcadDimOrdinateClass) -> bool

Set: ToleranceSuppressZeroInches(self: AcadDimOrdinateClass) = value
"""

    ToleranceUpperLimit = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceUpperLimit(self: AcadDimOrdinateClass) -> float

Set: ToleranceUpperLimit(self: AcadDimOrdinateClass) = value
"""

    TrueColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TrueColor(self: AcadDimOrdinateClass) -> AcadAcCmColor

Set: TrueColor(self: AcadDimOrdinateClass) = value
"""

    UnitsFormat = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: UnitsFormat(self: AcadDimOrdinateClass) -> AcDimLUnits

Set: UnitsFormat(self: AcadDimOrdinateClass) = value
"""

    VerticalTextPosition = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VerticalTextPosition(self: AcadDimOrdinateClass) -> AcDimVerticalJustification

Set: VerticalTextPosition(self: AcadDimOrdinateClass) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: AcadDimOrdinateClass) -> bool

Set: Visible(self: AcadDimOrdinateClass) = value
"""


    Modified = None


class IAcadDimRadial(IAcadDimension, IAcadEntity, IAcadObject):
    # no doc
    def ArrayPolar(self, NumberOfObjects, AngleToFill, CenterPoint):
        """ ArrayPolar(self: IAcadDimRadial, NumberOfObjects: int, AngleToFill: float, CenterPoint: object) -> object """
        pass

    def ArrayRectangular(self, NumberOfRows, NumberOfColumns, NumberOfLevels, DistBetweenRows, DistBetweenCols, DistBetweenLevels):
        """ ArrayRectangular(self: IAcadDimRadial, NumberOfRows: int, NumberOfColumns: int, NumberOfLevels: int, DistBetweenRows: float, DistBetweenCols: float, DistBetweenLevels: float) -> object """
        pass

    def Copy(self):
        """ Copy(self: IAcadDimRadial) -> object """
        pass

    def Delete(self):
        """ Delete(self: IAcadDimRadial) """
        pass

    def Erase(self):
        """ Erase(self: IAcadDimRadial) """
        pass

    def GetBoundingBox(self, MinPoint, MaxPoint):
        """ GetBoundingBox(self: IAcadDimRadial) -> (object, object) """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: IAcadDimRadial) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: IAcadDimRadial, AppName: str) -> (object, object) """
        pass

    def Highlight(self, HighlightFlag):
        """ Highlight(self: IAcadDimRadial, HighlightFlag: bool) """
        pass

    def IntersectWith(self, IntersectObject, option):
        """ IntersectWith(self: IAcadDimRadial, IntersectObject: object, option: AcExtendOption) -> object """
        pass

    def Mirror(self, Point1, Point2):
        """ Mirror(self: IAcadDimRadial, Point1: object, Point2: object) -> object """
        pass

    def Mirror3D(self, Point1, Point2, point3):
        """ Mirror3D(self: IAcadDimRadial, Point1: object, Point2: object, point3: object) -> object """
        pass

    def Move(self, FromPoint, ToPoint):
        """ Move(self: IAcadDimRadial, FromPoint: object, ToPoint: object) """
        pass

    def Rotate(self, BasePoint, RotationAngle):
        """ Rotate(self: IAcadDimRadial, BasePoint: object, RotationAngle: float) """
        pass

    def Rotate3D(self, Point1, Point2, RotationAngle):
        """ Rotate3D(self: IAcadDimRadial, Point1: object, Point2: object, RotationAngle: float) """
        pass

    def ScaleEntity(self, BasePoint, ScaleFactor):
        """ ScaleEntity(self: IAcadDimRadial, BasePoint: object, ScaleFactor: float) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: IAcadDimRadial, XDataType: object, XDataValue: object) """
        pass

    def TransformBy(self, TransformationMatrix):
        """ TransformBy(self: IAcadDimRadial, TransformationMatrix: object) """
        pass

    def Update(self):
        """ Update(self: IAcadDimRadial) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    AltRoundDistance = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltRoundDistance(self: IAcadDimRadial) -> float

Set: AltRoundDistance(self: IAcadDimRadial) = value
"""

    AltSuppressLeadingZeros = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltSuppressLeadingZeros(self: IAcadDimRadial) -> bool

Set: AltSuppressLeadingZeros(self: IAcadDimRadial) = value
"""

    AltSuppressTrailingZeros = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltSuppressTrailingZeros(self: IAcadDimRadial) -> bool

Set: AltSuppressTrailingZeros(self: IAcadDimRadial) = value
"""

    AltSuppressZeroFeet = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltSuppressZeroFeet(self: IAcadDimRadial) -> bool

Set: AltSuppressZeroFeet(self: IAcadDimRadial) = value
"""

    AltSuppressZeroInches = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltSuppressZeroInches(self: IAcadDimRadial) -> bool

Set: AltSuppressZeroInches(self: IAcadDimRadial) = value
"""

    AltTextPrefix = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltTextPrefix(self: IAcadDimRadial) -> str

Set: AltTextPrefix(self: IAcadDimRadial) = value
"""

    AltTextSuffix = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltTextSuffix(self: IAcadDimRadial) -> str

Set: AltTextSuffix(self: IAcadDimRadial) = value
"""

    AltTolerancePrecision = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltTolerancePrecision(self: IAcadDimRadial) -> AcDimPrecision

Set: AltTolerancePrecision(self: IAcadDimRadial) = value
"""

    AltToleranceSuppressLeadingZeros = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltToleranceSuppressLeadingZeros(self: IAcadDimRadial) -> bool

Set: AltToleranceSuppressLeadingZeros(self: IAcadDimRadial) = value
"""

    AltToleranceSuppressTrailingZeros = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltToleranceSuppressTrailingZeros(self: IAcadDimRadial) -> bool

Set: AltToleranceSuppressTrailingZeros(self: IAcadDimRadial) = value
"""

    AltToleranceSuppressZeroFeet = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltToleranceSuppressZeroFeet(self: IAcadDimRadial) -> bool

Set: AltToleranceSuppressZeroFeet(self: IAcadDimRadial) = value
"""

    AltToleranceSuppressZeroInches = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltToleranceSuppressZeroInches(self: IAcadDimRadial) -> bool

Set: AltToleranceSuppressZeroInches(self: IAcadDimRadial) = value
"""

    AltUnits = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltUnits(self: IAcadDimRadial) -> bool

Set: AltUnits(self: IAcadDimRadial) = value
"""

    AltUnitsFormat = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltUnitsFormat(self: IAcadDimRadial) -> AcDimUnits

Set: AltUnitsFormat(self: IAcadDimRadial) = value
"""

    AltUnitsPrecision = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltUnitsPrecision(self: IAcadDimRadial) -> AcDimPrecision

Set: AltUnitsPrecision(self: IAcadDimRadial) = value
"""

    AltUnitsScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltUnitsScale(self: IAcadDimRadial) -> float

Set: AltUnitsScale(self: IAcadDimRadial) = value
"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IAcadDimRadial) -> object

"""

    ArrowheadBlock = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ArrowheadBlock(self: IAcadDimRadial) -> str

Set: ArrowheadBlock(self: IAcadDimRadial) = value
"""

    ArrowheadSize = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ArrowheadSize(self: IAcadDimRadial) -> float

Set: ArrowheadSize(self: IAcadDimRadial) = value
"""

    ArrowheadType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ArrowheadType(self: IAcadDimRadial) -> AcDimArrowheadType

Set: ArrowheadType(self: IAcadDimRadial) = value
"""

    CenterMarkSize = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CenterMarkSize(self: IAcadDimRadial) -> float

Set: CenterMarkSize(self: IAcadDimRadial) = value
"""

    CenterType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CenterType(self: IAcadDimRadial) -> AcDimCenterType

Set: CenterType(self: IAcadDimRadial) = value
"""

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: IAcadDimRadial) -> ACAD_COLOR

Set: color(self: IAcadDimRadial) = value
"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: IAcadDimRadial) -> AcadDatabase

"""

    DecimalSeparator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DecimalSeparator(self: IAcadDimRadial) -> str

Set: DecimalSeparator(self: IAcadDimRadial) = value
"""

    DimConstrDesc = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimConstrDesc(self: IAcadDimRadial) -> str

Set: DimConstrDesc(self: IAcadDimRadial) = value
"""

    DimConstrExpression = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimConstrExpression(self: IAcadDimRadial) -> str

Set: DimConstrExpression(self: IAcadDimRadial) = value
"""

    DimConstrForm = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimConstrForm(self: IAcadDimRadial) -> bool

Set: DimConstrForm(self: IAcadDimRadial) = value
"""

    DimConstrName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimConstrName(self: IAcadDimRadial) -> str

Set: DimConstrName(self: IAcadDimRadial) = value
"""

    DimConstrReference = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimConstrReference(self: IAcadDimRadial) -> bool

Set: DimConstrReference(self: IAcadDimRadial) = value
"""

    DimConstrValue = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimConstrValue(self: IAcadDimRadial) -> str

Set: DimConstrValue(self: IAcadDimRadial) = value
"""

    DimensionLineColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimensionLineColor(self: IAcadDimRadial) -> ACAD_COLOR

Set: DimensionLineColor(self: IAcadDimRadial) = value
"""

    DimensionLinetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimensionLinetype(self: IAcadDimRadial) -> str

Set: DimensionLinetype(self: IAcadDimRadial) = value
"""

    DimensionLineWeight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimensionLineWeight(self: IAcadDimRadial) -> ACAD_LWEIGHT

Set: DimensionLineWeight(self: IAcadDimRadial) = value
"""

    DimLineSuppress = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimLineSuppress(self: IAcadDimRadial) -> bool

Set: DimLineSuppress(self: IAcadDimRadial) = value
"""

    DimTxtDirection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimTxtDirection(self: IAcadDimRadial) -> bool

Set: DimTxtDirection(self: IAcadDimRadial) = value
"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: IAcadDimRadial) -> object

"""

    EntityName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityName(self: IAcadDimRadial) -> str

"""

    EntityTransparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityTransparency(self: IAcadDimRadial) -> str

Set: EntityTransparency(self: IAcadDimRadial) = value
"""

    EntityType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityType(self: IAcadDimRadial) -> int

"""

    Fit = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Fit(self: IAcadDimRadial) -> AcDimFit

Set: Fit(self: IAcadDimRadial) = value
"""

    ForceLineInside = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ForceLineInside(self: IAcadDimRadial) -> bool

Set: ForceLineInside(self: IAcadDimRadial) = value
"""

    FractionFormat = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FractionFormat(self: IAcadDimRadial) -> AcDimFractionType

Set: FractionFormat(self: IAcadDimRadial) = value
"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: IAcadDimRadial) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: IAcadDimRadial) -> bool

"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: IAcadDimRadial) -> AcadHyperlinks

"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layer(self: IAcadDimRadial) -> str

Set: Layer(self: IAcadDimRadial) = value
"""

    LeaderLength = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Set: LeaderLength(self: IAcadDimRadial) = value
"""

    LinearScaleFactor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinearScaleFactor(self: IAcadDimRadial) -> float

Set: LinearScaleFactor(self: IAcadDimRadial) = value
"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: IAcadDimRadial) -> str

Set: Linetype(self: IAcadDimRadial) = value
"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeScale(self: IAcadDimRadial) -> float

Set: LinetypeScale(self: IAcadDimRadial) = value
"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: IAcadDimRadial) -> ACAD_LWEIGHT

Set: Lineweight(self: IAcadDimRadial) = value
"""

    Material = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Material(self: IAcadDimRadial) -> str

Set: Material(self: IAcadDimRadial) = value
"""

    Measurement = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Measurement(self: IAcadDimRadial) -> float

"""

    Normal = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Normal(self: IAcadDimRadial) -> object

Set: Normal(self: IAcadDimRadial) = value
"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: IAcadDimRadial) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: IAcadDimRadial) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: IAcadDimRadial) -> Int64

"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: IAcadDimRadial) -> str

Set: PlotStyleName(self: IAcadDimRadial) = value
"""

    PrimaryUnitsPrecision = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PrimaryUnitsPrecision(self: IAcadDimRadial) -> AcDimPrecision

Set: PrimaryUnitsPrecision(self: IAcadDimRadial) = value
"""

    Rotation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Rotation(self: IAcadDimRadial) -> float

Set: Rotation(self: IAcadDimRadial) = value
"""

    RoundDistance = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RoundDistance(self: IAcadDimRadial) -> float

Set: RoundDistance(self: IAcadDimRadial) = value
"""

    ScaleFactor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ScaleFactor(self: IAcadDimRadial) -> float

Set: ScaleFactor(self: IAcadDimRadial) = value
"""

    StyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: StyleName(self: IAcadDimRadial) -> str

Set: StyleName(self: IAcadDimRadial) = value
"""

    SuppressLeadingZeros = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SuppressLeadingZeros(self: IAcadDimRadial) -> bool

Set: SuppressLeadingZeros(self: IAcadDimRadial) = value
"""

    SuppressTrailingZeros = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SuppressTrailingZeros(self: IAcadDimRadial) -> bool

Set: SuppressTrailingZeros(self: IAcadDimRadial) = value
"""

    SuppressZeroFeet = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SuppressZeroFeet(self: IAcadDimRadial) -> bool

Set: SuppressZeroFeet(self: IAcadDimRadial) = value
"""

    SuppressZeroInches = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SuppressZeroInches(self: IAcadDimRadial) -> bool

Set: SuppressZeroInches(self: IAcadDimRadial) = value
"""

    TextColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextColor(self: IAcadDimRadial) -> ACAD_COLOR

Set: TextColor(self: IAcadDimRadial) = value
"""

    TextFill = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextFill(self: IAcadDimRadial) -> bool

Set: TextFill(self: IAcadDimRadial) = value
"""

    TextFillColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextFillColor(self: IAcadDimRadial) -> ACAD_COLOR

Set: TextFillColor(self: IAcadDimRadial) = value
"""

    TextGap = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextGap(self: IAcadDimRadial) -> float

Set: TextGap(self: IAcadDimRadial) = value
"""

    TextHeight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextHeight(self: IAcadDimRadial) -> float

Set: TextHeight(self: IAcadDimRadial) = value
"""

    TextInside = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextInside(self: IAcadDimRadial) -> bool

Set: TextInside(self: IAcadDimRadial) = value
"""

    TextInsideAlign = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextInsideAlign(self: IAcadDimRadial) -> bool

Set: TextInsideAlign(self: IAcadDimRadial) = value
"""

    TextMovement = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextMovement(self: IAcadDimRadial) -> AcDimTextMovement

Set: TextMovement(self: IAcadDimRadial) = value
"""

    TextOutsideAlign = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextOutsideAlign(self: IAcadDimRadial) -> bool

Set: TextOutsideAlign(self: IAcadDimRadial) = value
"""

    TextOverride = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextOverride(self: IAcadDimRadial) -> str

Set: TextOverride(self: IAcadDimRadial) = value
"""

    TextPosition = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextPosition(self: IAcadDimRadial) -> object

Set: TextPosition(self: IAcadDimRadial) = value
"""

    TextPrefix = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextPrefix(self: IAcadDimRadial) -> str

Set: TextPrefix(self: IAcadDimRadial) = value
"""

    TextRotation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextRotation(self: IAcadDimRadial) -> float

Set: TextRotation(self: IAcadDimRadial) = value
"""

    TextStyle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextStyle(self: IAcadDimRadial) -> str

Set: TextStyle(self: IAcadDimRadial) = value
"""

    TextSuffix = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextSuffix(self: IAcadDimRadial) -> str

Set: TextSuffix(self: IAcadDimRadial) = value
"""

    ToleranceDisplay = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceDisplay(self: IAcadDimRadial) -> AcDimToleranceMethod

Set: ToleranceDisplay(self: IAcadDimRadial) = value
"""

    ToleranceHeightScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceHeightScale(self: IAcadDimRadial) -> float

Set: ToleranceHeightScale(self: IAcadDimRadial) = value
"""

    ToleranceJustification = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceJustification(self: IAcadDimRadial) -> AcDimToleranceJustify

Set: ToleranceJustification(self: IAcadDimRadial) = value
"""

    ToleranceLowerLimit = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceLowerLimit(self: IAcadDimRadial) -> float

Set: ToleranceLowerLimit(self: IAcadDimRadial) = value
"""

    TolerancePrecision = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TolerancePrecision(self: IAcadDimRadial) -> AcDimPrecision

Set: TolerancePrecision(self: IAcadDimRadial) = value
"""

    ToleranceSuppressLeadingZeros = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceSuppressLeadingZeros(self: IAcadDimRadial) -> bool

Set: ToleranceSuppressLeadingZeros(self: IAcadDimRadial) = value
"""

    ToleranceSuppressTrailingZeros = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceSuppressTrailingZeros(self: IAcadDimRadial) -> bool

Set: ToleranceSuppressTrailingZeros(self: IAcadDimRadial) = value
"""

    ToleranceSuppressZeroFeet = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceSuppressZeroFeet(self: IAcadDimRadial) -> bool

Set: ToleranceSuppressZeroFeet(self: IAcadDimRadial) = value
"""

    ToleranceSuppressZeroInches = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceSuppressZeroInches(self: IAcadDimRadial) -> bool

Set: ToleranceSuppressZeroInches(self: IAcadDimRadial) = value
"""

    ToleranceUpperLimit = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceUpperLimit(self: IAcadDimRadial) -> float

Set: ToleranceUpperLimit(self: IAcadDimRadial) = value
"""

    TrueColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TrueColor(self: IAcadDimRadial) -> AcadAcCmColor

Set: TrueColor(self: IAcadDimRadial) = value
"""

    UnitsFormat = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: UnitsFormat(self: IAcadDimRadial) -> AcDimLUnits

Set: UnitsFormat(self: IAcadDimRadial) = value
"""

    VerticalTextPosition = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VerticalTextPosition(self: IAcadDimRadial) -> AcDimVerticalJustification

Set: VerticalTextPosition(self: IAcadDimRadial) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: IAcadDimRadial) -> bool

Set: Visible(self: IAcadDimRadial) = value
"""



class AcadDimRadial(IAcadDimRadial, IAcadDimension, IAcadEntity, IAcadObject, IAcadObjectEvents_Event):
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class AcadDimRadialClass(__ComObject):
    # no doc
    def add_Modified(self, A_1):
        """ add_Modified(self: AcadDimRadialClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def ArrayPolar(self, NumberOfObjects, AngleToFill, CenterPoint):
        """ ArrayPolar(self: AcadDimRadialClass, NumberOfObjects: int, AngleToFill: float, CenterPoint: object) -> object """
        pass

    def ArrayRectangular(self, NumberOfRows, NumberOfColumns, NumberOfLevels, DistBetweenRows, DistBetweenCols, DistBetweenLevels):
        """ ArrayRectangular(self: AcadDimRadialClass, NumberOfRows: int, NumberOfColumns: int, NumberOfLevels: int, DistBetweenRows: float, DistBetweenCols: float, DistBetweenLevels: float) -> object """
        pass

    def Copy(self):
        """ Copy(self: AcadDimRadialClass) -> object """
        pass

    def Delete(self):
        """ Delete(self: AcadDimRadialClass) """
        pass

    def Erase(self):
        """ Erase(self: AcadDimRadialClass) """
        pass

    def GetBoundingBox(self, MinPoint, MaxPoint):
        """ GetBoundingBox(self: AcadDimRadialClass) -> (object, object) """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: AcadDimRadialClass) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: AcadDimRadialClass, AppName: str) -> (object, object) """
        pass

    def Highlight(self, HighlightFlag):
        """ Highlight(self: AcadDimRadialClass, HighlightFlag: bool) """
        pass

    def IntersectWith(self, IntersectObject, option):
        """ IntersectWith(self: AcadDimRadialClass, IntersectObject: object, option: AcExtendOption) -> object """
        pass

    def Mirror(self, Point1, Point2):
        """ Mirror(self: AcadDimRadialClass, Point1: object, Point2: object) -> object """
        pass

    def Mirror3D(self, Point1, Point2, point3):
        """ Mirror3D(self: AcadDimRadialClass, Point1: object, Point2: object, point3: object) -> object """
        pass

    def Move(self, FromPoint, ToPoint):
        """ Move(self: AcadDimRadialClass, FromPoint: object, ToPoint: object) """
        pass

    def remove_Modified(self, A_1):
        """ remove_Modified(self: AcadDimRadialClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def Rotate(self, BasePoint, RotationAngle):
        """ Rotate(self: AcadDimRadialClass, BasePoint: object, RotationAngle: float) """
        pass

    def Rotate3D(self, Point1, Point2, RotationAngle):
        """ Rotate3D(self: AcadDimRadialClass, Point1: object, Point2: object, RotationAngle: float) """
        pass

    def ScaleEntity(self, BasePoint, ScaleFactor):
        """ ScaleEntity(self: AcadDimRadialClass, BasePoint: object, ScaleFactor: float) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: AcadDimRadialClass, XDataType: object, XDataValue: object) """
        pass

    def TransformBy(self, TransformationMatrix):
        """ TransformBy(self: AcadDimRadialClass, TransformationMatrix: object) """
        pass

    def Update(self):
        """ Update(self: AcadDimRadialClass) """
        pass

    AltRoundDistance = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltRoundDistance(self: AcadDimRadialClass) -> float

Set: AltRoundDistance(self: AcadDimRadialClass) = value
"""

    AltSuppressLeadingZeros = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltSuppressLeadingZeros(self: AcadDimRadialClass) -> bool

Set: AltSuppressLeadingZeros(self: AcadDimRadialClass) = value
"""

    AltSuppressTrailingZeros = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltSuppressTrailingZeros(self: AcadDimRadialClass) -> bool

Set: AltSuppressTrailingZeros(self: AcadDimRadialClass) = value
"""

    AltSuppressZeroFeet = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltSuppressZeroFeet(self: AcadDimRadialClass) -> bool

Set: AltSuppressZeroFeet(self: AcadDimRadialClass) = value
"""

    AltSuppressZeroInches = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltSuppressZeroInches(self: AcadDimRadialClass) -> bool

Set: AltSuppressZeroInches(self: AcadDimRadialClass) = value
"""

    AltTextPrefix = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltTextPrefix(self: AcadDimRadialClass) -> str

Set: AltTextPrefix(self: AcadDimRadialClass) = value
"""

    AltTextSuffix = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltTextSuffix(self: AcadDimRadialClass) -> str

Set: AltTextSuffix(self: AcadDimRadialClass) = value
"""

    AltTolerancePrecision = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltTolerancePrecision(self: AcadDimRadialClass) -> AcDimPrecision

Set: AltTolerancePrecision(self: AcadDimRadialClass) = value
"""

    AltToleranceSuppressLeadingZeros = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltToleranceSuppressLeadingZeros(self: AcadDimRadialClass) -> bool

Set: AltToleranceSuppressLeadingZeros(self: AcadDimRadialClass) = value
"""

    AltToleranceSuppressTrailingZeros = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltToleranceSuppressTrailingZeros(self: AcadDimRadialClass) -> bool

Set: AltToleranceSuppressTrailingZeros(self: AcadDimRadialClass) = value
"""

    AltToleranceSuppressZeroFeet = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltToleranceSuppressZeroFeet(self: AcadDimRadialClass) -> bool

Set: AltToleranceSuppressZeroFeet(self: AcadDimRadialClass) = value
"""

    AltToleranceSuppressZeroInches = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltToleranceSuppressZeroInches(self: AcadDimRadialClass) -> bool

Set: AltToleranceSuppressZeroInches(self: AcadDimRadialClass) = value
"""

    AltUnits = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltUnits(self: AcadDimRadialClass) -> bool

Set: AltUnits(self: AcadDimRadialClass) = value
"""

    AltUnitsFormat = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltUnitsFormat(self: AcadDimRadialClass) -> AcDimUnits

Set: AltUnitsFormat(self: AcadDimRadialClass) = value
"""

    AltUnitsPrecision = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltUnitsPrecision(self: AcadDimRadialClass) -> AcDimPrecision

Set: AltUnitsPrecision(self: AcadDimRadialClass) = value
"""

    AltUnitsScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltUnitsScale(self: AcadDimRadialClass) -> float

Set: AltUnitsScale(self: AcadDimRadialClass) = value
"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: AcadDimRadialClass) -> object

"""

    ArrowheadBlock = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ArrowheadBlock(self: AcadDimRadialClass) -> str

Set: ArrowheadBlock(self: AcadDimRadialClass) = value
"""

    ArrowheadSize = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ArrowheadSize(self: AcadDimRadialClass) -> float

Set: ArrowheadSize(self: AcadDimRadialClass) = value
"""

    ArrowheadType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ArrowheadType(self: AcadDimRadialClass) -> AcDimArrowheadType

Set: ArrowheadType(self: AcadDimRadialClass) = value
"""

    CenterMarkSize = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CenterMarkSize(self: AcadDimRadialClass) -> float

Set: CenterMarkSize(self: AcadDimRadialClass) = value
"""

    CenterType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CenterType(self: AcadDimRadialClass) -> AcDimCenterType

Set: CenterType(self: AcadDimRadialClass) = value
"""

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: AcadDimRadialClass) -> ACAD_COLOR

Set: color(self: AcadDimRadialClass) = value
"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: AcadDimRadialClass) -> AcadDatabase

"""

    DecimalSeparator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DecimalSeparator(self: AcadDimRadialClass) -> str

Set: DecimalSeparator(self: AcadDimRadialClass) = value
"""

    DimConstrDesc = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimConstrDesc(self: AcadDimRadialClass) -> str

Set: DimConstrDesc(self: AcadDimRadialClass) = value
"""

    DimConstrExpression = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimConstrExpression(self: AcadDimRadialClass) -> str

Set: DimConstrExpression(self: AcadDimRadialClass) = value
"""

    DimConstrForm = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimConstrForm(self: AcadDimRadialClass) -> bool

Set: DimConstrForm(self: AcadDimRadialClass) = value
"""

    DimConstrName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimConstrName(self: AcadDimRadialClass) -> str

Set: DimConstrName(self: AcadDimRadialClass) = value
"""

    DimConstrReference = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimConstrReference(self: AcadDimRadialClass) -> bool

Set: DimConstrReference(self: AcadDimRadialClass) = value
"""

    DimConstrValue = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimConstrValue(self: AcadDimRadialClass) -> str

Set: DimConstrValue(self: AcadDimRadialClass) = value
"""

    DimensionLineColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimensionLineColor(self: AcadDimRadialClass) -> ACAD_COLOR

Set: DimensionLineColor(self: AcadDimRadialClass) = value
"""

    DimensionLinetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimensionLinetype(self: AcadDimRadialClass) -> str

Set: DimensionLinetype(self: AcadDimRadialClass) = value
"""

    DimensionLineWeight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimensionLineWeight(self: AcadDimRadialClass) -> ACAD_LWEIGHT

Set: DimensionLineWeight(self: AcadDimRadialClass) = value
"""

    DimLineSuppress = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimLineSuppress(self: AcadDimRadialClass) -> bool

Set: DimLineSuppress(self: AcadDimRadialClass) = value
"""

    DimTxtDirection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimTxtDirection(self: AcadDimRadialClass) -> bool

Set: DimTxtDirection(self: AcadDimRadialClass) = value
"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: AcadDimRadialClass) -> object

"""

    EntityName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityName(self: AcadDimRadialClass) -> str

"""

    EntityTransparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityTransparency(self: AcadDimRadialClass) -> str

Set: EntityTransparency(self: AcadDimRadialClass) = value
"""

    EntityType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityType(self: AcadDimRadialClass) -> int

"""

    Fit = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Fit(self: AcadDimRadialClass) -> AcDimFit

Set: Fit(self: AcadDimRadialClass) = value
"""

    ForceLineInside = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ForceLineInside(self: AcadDimRadialClass) -> bool

Set: ForceLineInside(self: AcadDimRadialClass) = value
"""

    FractionFormat = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FractionFormat(self: AcadDimRadialClass) -> AcDimFractionType

Set: FractionFormat(self: AcadDimRadialClass) = value
"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: AcadDimRadialClass) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: AcadDimRadialClass) -> bool

"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: AcadDimRadialClass) -> AcadHyperlinks

"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layer(self: AcadDimRadialClass) -> str

Set: Layer(self: AcadDimRadialClass) = value
"""

    LeaderLength = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Set: LeaderLength(self: AcadDimRadialClass) = value
"""

    LinearScaleFactor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinearScaleFactor(self: AcadDimRadialClass) -> float

Set: LinearScaleFactor(self: AcadDimRadialClass) = value
"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: AcadDimRadialClass) -> str

Set: Linetype(self: AcadDimRadialClass) = value
"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeScale(self: AcadDimRadialClass) -> float

Set: LinetypeScale(self: AcadDimRadialClass) = value
"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: AcadDimRadialClass) -> ACAD_LWEIGHT

Set: Lineweight(self: AcadDimRadialClass) = value
"""

    Material = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Material(self: AcadDimRadialClass) -> str

Set: Material(self: AcadDimRadialClass) = value
"""

    Measurement = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Measurement(self: AcadDimRadialClass) -> float

"""

    Normal = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Normal(self: AcadDimRadialClass) -> object

Set: Normal(self: AcadDimRadialClass) = value
"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: AcadDimRadialClass) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: AcadDimRadialClass) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: AcadDimRadialClass) -> Int64

"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: AcadDimRadialClass) -> str

Set: PlotStyleName(self: AcadDimRadialClass) = value
"""

    PrimaryUnitsPrecision = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PrimaryUnitsPrecision(self: AcadDimRadialClass) -> AcDimPrecision

Set: PrimaryUnitsPrecision(self: AcadDimRadialClass) = value
"""

    Rotation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Rotation(self: AcadDimRadialClass) -> float

Set: Rotation(self: AcadDimRadialClass) = value
"""

    RoundDistance = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RoundDistance(self: AcadDimRadialClass) -> float

Set: RoundDistance(self: AcadDimRadialClass) = value
"""

    ScaleFactor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ScaleFactor(self: AcadDimRadialClass) -> float

Set: ScaleFactor(self: AcadDimRadialClass) = value
"""

    StyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: StyleName(self: AcadDimRadialClass) -> str

Set: StyleName(self: AcadDimRadialClass) = value
"""

    SuppressLeadingZeros = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SuppressLeadingZeros(self: AcadDimRadialClass) -> bool

Set: SuppressLeadingZeros(self: AcadDimRadialClass) = value
"""

    SuppressTrailingZeros = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SuppressTrailingZeros(self: AcadDimRadialClass) -> bool

Set: SuppressTrailingZeros(self: AcadDimRadialClass) = value
"""

    SuppressZeroFeet = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SuppressZeroFeet(self: AcadDimRadialClass) -> bool

Set: SuppressZeroFeet(self: AcadDimRadialClass) = value
"""

    SuppressZeroInches = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SuppressZeroInches(self: AcadDimRadialClass) -> bool

Set: SuppressZeroInches(self: AcadDimRadialClass) = value
"""

    TextColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextColor(self: AcadDimRadialClass) -> ACAD_COLOR

Set: TextColor(self: AcadDimRadialClass) = value
"""

    TextFill = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextFill(self: AcadDimRadialClass) -> bool

Set: TextFill(self: AcadDimRadialClass) = value
"""

    TextFillColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextFillColor(self: AcadDimRadialClass) -> ACAD_COLOR

Set: TextFillColor(self: AcadDimRadialClass) = value
"""

    TextGap = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextGap(self: AcadDimRadialClass) -> float

Set: TextGap(self: AcadDimRadialClass) = value
"""

    TextHeight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextHeight(self: AcadDimRadialClass) -> float

Set: TextHeight(self: AcadDimRadialClass) = value
"""

    TextInside = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextInside(self: AcadDimRadialClass) -> bool

Set: TextInside(self: AcadDimRadialClass) = value
"""

    TextInsideAlign = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextInsideAlign(self: AcadDimRadialClass) -> bool

Set: TextInsideAlign(self: AcadDimRadialClass) = value
"""

    TextMovement = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextMovement(self: AcadDimRadialClass) -> AcDimTextMovement

Set: TextMovement(self: AcadDimRadialClass) = value
"""

    TextOutsideAlign = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextOutsideAlign(self: AcadDimRadialClass) -> bool

Set: TextOutsideAlign(self: AcadDimRadialClass) = value
"""

    TextOverride = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextOverride(self: AcadDimRadialClass) -> str

Set: TextOverride(self: AcadDimRadialClass) = value
"""

    TextPosition = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextPosition(self: AcadDimRadialClass) -> object

Set: TextPosition(self: AcadDimRadialClass) = value
"""

    TextPrefix = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextPrefix(self: AcadDimRadialClass) -> str

Set: TextPrefix(self: AcadDimRadialClass) = value
"""

    TextRotation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextRotation(self: AcadDimRadialClass) -> float

Set: TextRotation(self: AcadDimRadialClass) = value
"""

    TextStyle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextStyle(self: AcadDimRadialClass) -> str

Set: TextStyle(self: AcadDimRadialClass) = value
"""

    TextSuffix = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextSuffix(self: AcadDimRadialClass) -> str

Set: TextSuffix(self: AcadDimRadialClass) = value
"""

    ToleranceDisplay = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceDisplay(self: AcadDimRadialClass) -> AcDimToleranceMethod

Set: ToleranceDisplay(self: AcadDimRadialClass) = value
"""

    ToleranceHeightScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceHeightScale(self: AcadDimRadialClass) -> float

Set: ToleranceHeightScale(self: AcadDimRadialClass) = value
"""

    ToleranceJustification = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceJustification(self: AcadDimRadialClass) -> AcDimToleranceJustify

Set: ToleranceJustification(self: AcadDimRadialClass) = value
"""

    ToleranceLowerLimit = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceLowerLimit(self: AcadDimRadialClass) -> float

Set: ToleranceLowerLimit(self: AcadDimRadialClass) = value
"""

    TolerancePrecision = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TolerancePrecision(self: AcadDimRadialClass) -> AcDimPrecision

Set: TolerancePrecision(self: AcadDimRadialClass) = value
"""

    ToleranceSuppressLeadingZeros = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceSuppressLeadingZeros(self: AcadDimRadialClass) -> bool

Set: ToleranceSuppressLeadingZeros(self: AcadDimRadialClass) = value
"""

    ToleranceSuppressTrailingZeros = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceSuppressTrailingZeros(self: AcadDimRadialClass) -> bool

Set: ToleranceSuppressTrailingZeros(self: AcadDimRadialClass) = value
"""

    ToleranceSuppressZeroFeet = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceSuppressZeroFeet(self: AcadDimRadialClass) -> bool

Set: ToleranceSuppressZeroFeet(self: AcadDimRadialClass) = value
"""

    ToleranceSuppressZeroInches = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceSuppressZeroInches(self: AcadDimRadialClass) -> bool

Set: ToleranceSuppressZeroInches(self: AcadDimRadialClass) = value
"""

    ToleranceUpperLimit = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceUpperLimit(self: AcadDimRadialClass) -> float

Set: ToleranceUpperLimit(self: AcadDimRadialClass) = value
"""

    TrueColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TrueColor(self: AcadDimRadialClass) -> AcadAcCmColor

Set: TrueColor(self: AcadDimRadialClass) = value
"""

    UnitsFormat = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: UnitsFormat(self: AcadDimRadialClass) -> AcDimLUnits

Set: UnitsFormat(self: AcadDimRadialClass) = value
"""

    VerticalTextPosition = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VerticalTextPosition(self: AcadDimRadialClass) -> AcDimVerticalJustification

Set: VerticalTextPosition(self: AcadDimRadialClass) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: AcadDimRadialClass) -> bool

Set: Visible(self: AcadDimRadialClass) = value
"""


    Modified = None


class IAcadDimRadialLarge(IAcadDimension, IAcadEntity, IAcadObject):
    # no doc
    def ArrayPolar(self, NumberOfObjects, AngleToFill, CenterPoint):
        """ ArrayPolar(self: IAcadDimRadialLarge, NumberOfObjects: int, AngleToFill: float, CenterPoint: object) -> object """
        pass

    def ArrayRectangular(self, NumberOfRows, NumberOfColumns, NumberOfLevels, DistBetweenRows, DistBetweenCols, DistBetweenLevels):
        """ ArrayRectangular(self: IAcadDimRadialLarge, NumberOfRows: int, NumberOfColumns: int, NumberOfLevels: int, DistBetweenRows: float, DistBetweenCols: float, DistBetweenLevels: float) -> object """
        pass

    def Copy(self):
        """ Copy(self: IAcadDimRadialLarge) -> object """
        pass

    def Delete(self):
        """ Delete(self: IAcadDimRadialLarge) """
        pass

    def Erase(self):
        """ Erase(self: IAcadDimRadialLarge) """
        pass

    def GetBoundingBox(self, MinPoint, MaxPoint):
        """ GetBoundingBox(self: IAcadDimRadialLarge) -> (object, object) """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: IAcadDimRadialLarge) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: IAcadDimRadialLarge, AppName: str) -> (object, object) """
        pass

    def Highlight(self, HighlightFlag):
        """ Highlight(self: IAcadDimRadialLarge, HighlightFlag: bool) """
        pass

    def IntersectWith(self, IntersectObject, option):
        """ IntersectWith(self: IAcadDimRadialLarge, IntersectObject: object, option: AcExtendOption) -> object """
        pass

    def Mirror(self, Point1, Point2):
        """ Mirror(self: IAcadDimRadialLarge, Point1: object, Point2: object) -> object """
        pass

    def Mirror3D(self, Point1, Point2, point3):
        """ Mirror3D(self: IAcadDimRadialLarge, Point1: object, Point2: object, point3: object) -> object """
        pass

    def Move(self, FromPoint, ToPoint):
        """ Move(self: IAcadDimRadialLarge, FromPoint: object, ToPoint: object) """
        pass

    def Rotate(self, BasePoint, RotationAngle):
        """ Rotate(self: IAcadDimRadialLarge, BasePoint: object, RotationAngle: float) """
        pass

    def Rotate3D(self, Point1, Point2, RotationAngle):
        """ Rotate3D(self: IAcadDimRadialLarge, Point1: object, Point2: object, RotationAngle: float) """
        pass

    def ScaleEntity(self, BasePoint, ScaleFactor):
        """ ScaleEntity(self: IAcadDimRadialLarge, BasePoint: object, ScaleFactor: float) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: IAcadDimRadialLarge, XDataType: object, XDataValue: object) """
        pass

    def TransformBy(self, TransformationMatrix):
        """ TransformBy(self: IAcadDimRadialLarge, TransformationMatrix: object) """
        pass

    def Update(self):
        """ Update(self: IAcadDimRadialLarge) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    AltRoundDistance = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltRoundDistance(self: IAcadDimRadialLarge) -> float

Set: AltRoundDistance(self: IAcadDimRadialLarge) = value
"""

    AltSuppressLeadingZeros = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltSuppressLeadingZeros(self: IAcadDimRadialLarge) -> bool

Set: AltSuppressLeadingZeros(self: IAcadDimRadialLarge) = value
"""

    AltSuppressTrailingZeros = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltSuppressTrailingZeros(self: IAcadDimRadialLarge) -> bool

Set: AltSuppressTrailingZeros(self: IAcadDimRadialLarge) = value
"""

    AltSuppressZeroFeet = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltSuppressZeroFeet(self: IAcadDimRadialLarge) -> bool

Set: AltSuppressZeroFeet(self: IAcadDimRadialLarge) = value
"""

    AltSuppressZeroInches = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltSuppressZeroInches(self: IAcadDimRadialLarge) -> bool

Set: AltSuppressZeroInches(self: IAcadDimRadialLarge) = value
"""

    AltTextPrefix = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltTextPrefix(self: IAcadDimRadialLarge) -> str

Set: AltTextPrefix(self: IAcadDimRadialLarge) = value
"""

    AltTextSuffix = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltTextSuffix(self: IAcadDimRadialLarge) -> str

Set: AltTextSuffix(self: IAcadDimRadialLarge) = value
"""

    AltTolerancePrecision = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltTolerancePrecision(self: IAcadDimRadialLarge) -> AcDimPrecision

Set: AltTolerancePrecision(self: IAcadDimRadialLarge) = value
"""

    AltToleranceSuppressLeadingZeros = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltToleranceSuppressLeadingZeros(self: IAcadDimRadialLarge) -> bool

Set: AltToleranceSuppressLeadingZeros(self: IAcadDimRadialLarge) = value
"""

    AltToleranceSuppressTrailingZeros = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltToleranceSuppressTrailingZeros(self: IAcadDimRadialLarge) -> bool

Set: AltToleranceSuppressTrailingZeros(self: IAcadDimRadialLarge) = value
"""

    AltToleranceSuppressZeroFeet = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltToleranceSuppressZeroFeet(self: IAcadDimRadialLarge) -> bool

Set: AltToleranceSuppressZeroFeet(self: IAcadDimRadialLarge) = value
"""

    AltToleranceSuppressZeroInches = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltToleranceSuppressZeroInches(self: IAcadDimRadialLarge) -> bool

Set: AltToleranceSuppressZeroInches(self: IAcadDimRadialLarge) = value
"""

    AltUnits = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltUnits(self: IAcadDimRadialLarge) -> bool

Set: AltUnits(self: IAcadDimRadialLarge) = value
"""

    AltUnitsFormat = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltUnitsFormat(self: IAcadDimRadialLarge) -> AcDimUnits

Set: AltUnitsFormat(self: IAcadDimRadialLarge) = value
"""

    AltUnitsPrecision = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltUnitsPrecision(self: IAcadDimRadialLarge) -> AcDimPrecision

Set: AltUnitsPrecision(self: IAcadDimRadialLarge) = value
"""

    AltUnitsScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltUnitsScale(self: IAcadDimRadialLarge) -> float

Set: AltUnitsScale(self: IAcadDimRadialLarge) = value
"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IAcadDimRadialLarge) -> object

"""

    ArrowheadBlock = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ArrowheadBlock(self: IAcadDimRadialLarge) -> str

Set: ArrowheadBlock(self: IAcadDimRadialLarge) = value
"""

    ArrowheadSize = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ArrowheadSize(self: IAcadDimRadialLarge) -> float

Set: ArrowheadSize(self: IAcadDimRadialLarge) = value
"""

    ArrowheadType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ArrowheadType(self: IAcadDimRadialLarge) -> AcDimArrowheadType

Set: ArrowheadType(self: IAcadDimRadialLarge) = value
"""

    Center = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Center(self: IAcadDimRadialLarge) -> object

Set: Center(self: IAcadDimRadialLarge) = value
"""

    CenterMarkSize = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CenterMarkSize(self: IAcadDimRadialLarge) -> float

Set: CenterMarkSize(self: IAcadDimRadialLarge) = value
"""

    CenterType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CenterType(self: IAcadDimRadialLarge) -> AcDimCenterType

Set: CenterType(self: IAcadDimRadialLarge) = value
"""

    ChordPoint = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ChordPoint(self: IAcadDimRadialLarge) -> object

Set: ChordPoint(self: IAcadDimRadialLarge) = value
"""

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: IAcadDimRadialLarge) -> ACAD_COLOR

Set: color(self: IAcadDimRadialLarge) = value
"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: IAcadDimRadialLarge) -> AcadDatabase

"""

    DecimalSeparator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DecimalSeparator(self: IAcadDimRadialLarge) -> str

Set: DecimalSeparator(self: IAcadDimRadialLarge) = value
"""

    DimensionLineColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimensionLineColor(self: IAcadDimRadialLarge) -> ACAD_COLOR

Set: DimensionLineColor(self: IAcadDimRadialLarge) = value
"""

    DimensionLinetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimensionLinetype(self: IAcadDimRadialLarge) -> str

Set: DimensionLinetype(self: IAcadDimRadialLarge) = value
"""

    DimensionLineWeight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimensionLineWeight(self: IAcadDimRadialLarge) -> ACAD_LWEIGHT

Set: DimensionLineWeight(self: IAcadDimRadialLarge) = value
"""

    DimLineSuppress = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimLineSuppress(self: IAcadDimRadialLarge) -> bool

Set: DimLineSuppress(self: IAcadDimRadialLarge) = value
"""

    DimTxtDirection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimTxtDirection(self: IAcadDimRadialLarge) -> bool

Set: DimTxtDirection(self: IAcadDimRadialLarge) = value
"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: IAcadDimRadialLarge) -> object

"""

    EntityName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityName(self: IAcadDimRadialLarge) -> str

"""

    EntityTransparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityTransparency(self: IAcadDimRadialLarge) -> str

Set: EntityTransparency(self: IAcadDimRadialLarge) = value
"""

    EntityType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityType(self: IAcadDimRadialLarge) -> int

"""

    Fit = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Fit(self: IAcadDimRadialLarge) -> AcDimFit

Set: Fit(self: IAcadDimRadialLarge) = value
"""

    ForceLineInside = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ForceLineInside(self: IAcadDimRadialLarge) -> bool

Set: ForceLineInside(self: IAcadDimRadialLarge) = value
"""

    FractionFormat = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FractionFormat(self: IAcadDimRadialLarge) -> AcDimFractionType

Set: FractionFormat(self: IAcadDimRadialLarge) = value
"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: IAcadDimRadialLarge) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: IAcadDimRadialLarge) -> bool

"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: IAcadDimRadialLarge) -> AcadHyperlinks

"""

    JogAngle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: JogAngle(self: IAcadDimRadialLarge) -> float

Set: JogAngle(self: IAcadDimRadialLarge) = value
"""

    JogLocation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: JogLocation(self: IAcadDimRadialLarge) -> object

Set: JogLocation(self: IAcadDimRadialLarge) = value
"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layer(self: IAcadDimRadialLarge) -> str

Set: Layer(self: IAcadDimRadialLarge) = value
"""

    LinearScaleFactor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinearScaleFactor(self: IAcadDimRadialLarge) -> float

Set: LinearScaleFactor(self: IAcadDimRadialLarge) = value
"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: IAcadDimRadialLarge) -> str

Set: Linetype(self: IAcadDimRadialLarge) = value
"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeScale(self: IAcadDimRadialLarge) -> float

Set: LinetypeScale(self: IAcadDimRadialLarge) = value
"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: IAcadDimRadialLarge) -> ACAD_LWEIGHT

Set: Lineweight(self: IAcadDimRadialLarge) = value
"""

    Material = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Material(self: IAcadDimRadialLarge) -> str

Set: Material(self: IAcadDimRadialLarge) = value
"""

    Measurement = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Measurement(self: IAcadDimRadialLarge) -> float

"""

    Normal = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Normal(self: IAcadDimRadialLarge) -> object

Set: Normal(self: IAcadDimRadialLarge) = value
"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: IAcadDimRadialLarge) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: IAcadDimRadialLarge) -> str

"""

    OverrideCenter = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OverrideCenter(self: IAcadDimRadialLarge) -> object

Set: OverrideCenter(self: IAcadDimRadialLarge) = value
"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: IAcadDimRadialLarge) -> Int64

"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: IAcadDimRadialLarge) -> str

Set: PlotStyleName(self: IAcadDimRadialLarge) = value
"""

    PrimaryUnitsPrecision = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PrimaryUnitsPrecision(self: IAcadDimRadialLarge) -> AcDimPrecision

Set: PrimaryUnitsPrecision(self: IAcadDimRadialLarge) = value
"""

    Rotation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Rotation(self: IAcadDimRadialLarge) -> float

Set: Rotation(self: IAcadDimRadialLarge) = value
"""

    RoundDistance = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RoundDistance(self: IAcadDimRadialLarge) -> float

Set: RoundDistance(self: IAcadDimRadialLarge) = value
"""

    ScaleFactor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ScaleFactor(self: IAcadDimRadialLarge) -> float

Set: ScaleFactor(self: IAcadDimRadialLarge) = value
"""

    StyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: StyleName(self: IAcadDimRadialLarge) -> str

Set: StyleName(self: IAcadDimRadialLarge) = value
"""

    SuppressLeadingZeros = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SuppressLeadingZeros(self: IAcadDimRadialLarge) -> bool

Set: SuppressLeadingZeros(self: IAcadDimRadialLarge) = value
"""

    SuppressTrailingZeros = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SuppressTrailingZeros(self: IAcadDimRadialLarge) -> bool

Set: SuppressTrailingZeros(self: IAcadDimRadialLarge) = value
"""

    SuppressZeroFeet = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SuppressZeroFeet(self: IAcadDimRadialLarge) -> bool

Set: SuppressZeroFeet(self: IAcadDimRadialLarge) = value
"""

    SuppressZeroInches = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SuppressZeroInches(self: IAcadDimRadialLarge) -> bool

Set: SuppressZeroInches(self: IAcadDimRadialLarge) = value
"""

    TextColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextColor(self: IAcadDimRadialLarge) -> ACAD_COLOR

Set: TextColor(self: IAcadDimRadialLarge) = value
"""

    TextFill = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextFill(self: IAcadDimRadialLarge) -> bool

Set: TextFill(self: IAcadDimRadialLarge) = value
"""

    TextFillColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextFillColor(self: IAcadDimRadialLarge) -> ACAD_COLOR

Set: TextFillColor(self: IAcadDimRadialLarge) = value
"""

    TextGap = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextGap(self: IAcadDimRadialLarge) -> float

Set: TextGap(self: IAcadDimRadialLarge) = value
"""

    TextHeight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextHeight(self: IAcadDimRadialLarge) -> float

Set: TextHeight(self: IAcadDimRadialLarge) = value
"""

    TextInside = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextInside(self: IAcadDimRadialLarge) -> bool

Set: TextInside(self: IAcadDimRadialLarge) = value
"""

    TextInsideAlign = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextInsideAlign(self: IAcadDimRadialLarge) -> bool

Set: TextInsideAlign(self: IAcadDimRadialLarge) = value
"""

    TextMovement = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextMovement(self: IAcadDimRadialLarge) -> AcDimTextMovement

Set: TextMovement(self: IAcadDimRadialLarge) = value
"""

    TextOutsideAlign = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextOutsideAlign(self: IAcadDimRadialLarge) -> bool

Set: TextOutsideAlign(self: IAcadDimRadialLarge) = value
"""

    TextOverride = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextOverride(self: IAcadDimRadialLarge) -> str

Set: TextOverride(self: IAcadDimRadialLarge) = value
"""

    TextPosition = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextPosition(self: IAcadDimRadialLarge) -> object

Set: TextPosition(self: IAcadDimRadialLarge) = value
"""

    TextPrefix = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextPrefix(self: IAcadDimRadialLarge) -> str

Set: TextPrefix(self: IAcadDimRadialLarge) = value
"""

    TextRotation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextRotation(self: IAcadDimRadialLarge) -> float

Set: TextRotation(self: IAcadDimRadialLarge) = value
"""

    TextStyle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextStyle(self: IAcadDimRadialLarge) -> str

Set: TextStyle(self: IAcadDimRadialLarge) = value
"""

    TextSuffix = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextSuffix(self: IAcadDimRadialLarge) -> str

Set: TextSuffix(self: IAcadDimRadialLarge) = value
"""

    ToleranceDisplay = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceDisplay(self: IAcadDimRadialLarge) -> AcDimToleranceMethod

Set: ToleranceDisplay(self: IAcadDimRadialLarge) = value
"""

    ToleranceHeightScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceHeightScale(self: IAcadDimRadialLarge) -> float

Set: ToleranceHeightScale(self: IAcadDimRadialLarge) = value
"""

    ToleranceJustification = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceJustification(self: IAcadDimRadialLarge) -> AcDimToleranceJustify

Set: ToleranceJustification(self: IAcadDimRadialLarge) = value
"""

    ToleranceLowerLimit = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceLowerLimit(self: IAcadDimRadialLarge) -> float

Set: ToleranceLowerLimit(self: IAcadDimRadialLarge) = value
"""

    TolerancePrecision = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TolerancePrecision(self: IAcadDimRadialLarge) -> AcDimPrecision

Set: TolerancePrecision(self: IAcadDimRadialLarge) = value
"""

    ToleranceSuppressLeadingZeros = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceSuppressLeadingZeros(self: IAcadDimRadialLarge) -> bool

Set: ToleranceSuppressLeadingZeros(self: IAcadDimRadialLarge) = value
"""

    ToleranceSuppressTrailingZeros = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceSuppressTrailingZeros(self: IAcadDimRadialLarge) -> bool

Set: ToleranceSuppressTrailingZeros(self: IAcadDimRadialLarge) = value
"""

    ToleranceSuppressZeroFeet = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceSuppressZeroFeet(self: IAcadDimRadialLarge) -> bool

Set: ToleranceSuppressZeroFeet(self: IAcadDimRadialLarge) = value
"""

    ToleranceSuppressZeroInches = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceSuppressZeroInches(self: IAcadDimRadialLarge) -> bool

Set: ToleranceSuppressZeroInches(self: IAcadDimRadialLarge) = value
"""

    ToleranceUpperLimit = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceUpperLimit(self: IAcadDimRadialLarge) -> float

Set: ToleranceUpperLimit(self: IAcadDimRadialLarge) = value
"""

    TrueColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TrueColor(self: IAcadDimRadialLarge) -> AcadAcCmColor

Set: TrueColor(self: IAcadDimRadialLarge) = value
"""

    UnitsFormat = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: UnitsFormat(self: IAcadDimRadialLarge) -> AcDimLUnits

Set: UnitsFormat(self: IAcadDimRadialLarge) = value
"""

    VerticalTextPosition = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VerticalTextPosition(self: IAcadDimRadialLarge) -> AcDimVerticalJustification

Set: VerticalTextPosition(self: IAcadDimRadialLarge) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: IAcadDimRadialLarge) -> bool

Set: Visible(self: IAcadDimRadialLarge) = value
"""



class AcadDimRadialLarge(IAcadDimRadialLarge, IAcadDimension, IAcadEntity, IAcadObject, IAcadObjectEvents_Event):
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class AcadDimRadialLargeClass(__ComObject):
    # no doc
    def add_Modified(self, A_1):
        """ add_Modified(self: AcadDimRadialLargeClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def ArrayPolar(self, NumberOfObjects, AngleToFill, CenterPoint):
        """ ArrayPolar(self: AcadDimRadialLargeClass, NumberOfObjects: int, AngleToFill: float, CenterPoint: object) -> object """
        pass

    def ArrayRectangular(self, NumberOfRows, NumberOfColumns, NumberOfLevels, DistBetweenRows, DistBetweenCols, DistBetweenLevels):
        """ ArrayRectangular(self: AcadDimRadialLargeClass, NumberOfRows: int, NumberOfColumns: int, NumberOfLevels: int, DistBetweenRows: float, DistBetweenCols: float, DistBetweenLevels: float) -> object """
        pass

    def Copy(self):
        """ Copy(self: AcadDimRadialLargeClass) -> object """
        pass

    def Delete(self):
        """ Delete(self: AcadDimRadialLargeClass) """
        pass

    def Erase(self):
        """ Erase(self: AcadDimRadialLargeClass) """
        pass

    def GetBoundingBox(self, MinPoint, MaxPoint):
        """ GetBoundingBox(self: AcadDimRadialLargeClass) -> (object, object) """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: AcadDimRadialLargeClass) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: AcadDimRadialLargeClass, AppName: str) -> (object, object) """
        pass

    def Highlight(self, HighlightFlag):
        """ Highlight(self: AcadDimRadialLargeClass, HighlightFlag: bool) """
        pass

    def IntersectWith(self, IntersectObject, option):
        """ IntersectWith(self: AcadDimRadialLargeClass, IntersectObject: object, option: AcExtendOption) -> object """
        pass

    def Mirror(self, Point1, Point2):
        """ Mirror(self: AcadDimRadialLargeClass, Point1: object, Point2: object) -> object """
        pass

    def Mirror3D(self, Point1, Point2, point3):
        """ Mirror3D(self: AcadDimRadialLargeClass, Point1: object, Point2: object, point3: object) -> object """
        pass

    def Move(self, FromPoint, ToPoint):
        """ Move(self: AcadDimRadialLargeClass, FromPoint: object, ToPoint: object) """
        pass

    def remove_Modified(self, A_1):
        """ remove_Modified(self: AcadDimRadialLargeClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def Rotate(self, BasePoint, RotationAngle):
        """ Rotate(self: AcadDimRadialLargeClass, BasePoint: object, RotationAngle: float) """
        pass

    def Rotate3D(self, Point1, Point2, RotationAngle):
        """ Rotate3D(self: AcadDimRadialLargeClass, Point1: object, Point2: object, RotationAngle: float) """
        pass

    def ScaleEntity(self, BasePoint, ScaleFactor):
        """ ScaleEntity(self: AcadDimRadialLargeClass, BasePoint: object, ScaleFactor: float) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: AcadDimRadialLargeClass, XDataType: object, XDataValue: object) """
        pass

    def TransformBy(self, TransformationMatrix):
        """ TransformBy(self: AcadDimRadialLargeClass, TransformationMatrix: object) """
        pass

    def Update(self):
        """ Update(self: AcadDimRadialLargeClass) """
        pass

    AltRoundDistance = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltRoundDistance(self: AcadDimRadialLargeClass) -> float

Set: AltRoundDistance(self: AcadDimRadialLargeClass) = value
"""

    AltSuppressLeadingZeros = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltSuppressLeadingZeros(self: AcadDimRadialLargeClass) -> bool

Set: AltSuppressLeadingZeros(self: AcadDimRadialLargeClass) = value
"""

    AltSuppressTrailingZeros = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltSuppressTrailingZeros(self: AcadDimRadialLargeClass) -> bool

Set: AltSuppressTrailingZeros(self: AcadDimRadialLargeClass) = value
"""

    AltSuppressZeroFeet = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltSuppressZeroFeet(self: AcadDimRadialLargeClass) -> bool

Set: AltSuppressZeroFeet(self: AcadDimRadialLargeClass) = value
"""

    AltSuppressZeroInches = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltSuppressZeroInches(self: AcadDimRadialLargeClass) -> bool

Set: AltSuppressZeroInches(self: AcadDimRadialLargeClass) = value
"""

    AltTextPrefix = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltTextPrefix(self: AcadDimRadialLargeClass) -> str

Set: AltTextPrefix(self: AcadDimRadialLargeClass) = value
"""

    AltTextSuffix = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltTextSuffix(self: AcadDimRadialLargeClass) -> str

Set: AltTextSuffix(self: AcadDimRadialLargeClass) = value
"""

    AltTolerancePrecision = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltTolerancePrecision(self: AcadDimRadialLargeClass) -> AcDimPrecision

Set: AltTolerancePrecision(self: AcadDimRadialLargeClass) = value
"""

    AltToleranceSuppressLeadingZeros = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltToleranceSuppressLeadingZeros(self: AcadDimRadialLargeClass) -> bool

Set: AltToleranceSuppressLeadingZeros(self: AcadDimRadialLargeClass) = value
"""

    AltToleranceSuppressTrailingZeros = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltToleranceSuppressTrailingZeros(self: AcadDimRadialLargeClass) -> bool

Set: AltToleranceSuppressTrailingZeros(self: AcadDimRadialLargeClass) = value
"""

    AltToleranceSuppressZeroFeet = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltToleranceSuppressZeroFeet(self: AcadDimRadialLargeClass) -> bool

Set: AltToleranceSuppressZeroFeet(self: AcadDimRadialLargeClass) = value
"""

    AltToleranceSuppressZeroInches = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltToleranceSuppressZeroInches(self: AcadDimRadialLargeClass) -> bool

Set: AltToleranceSuppressZeroInches(self: AcadDimRadialLargeClass) = value
"""

    AltUnits = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltUnits(self: AcadDimRadialLargeClass) -> bool

Set: AltUnits(self: AcadDimRadialLargeClass) = value
"""

    AltUnitsFormat = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltUnitsFormat(self: AcadDimRadialLargeClass) -> AcDimUnits

Set: AltUnitsFormat(self: AcadDimRadialLargeClass) = value
"""

    AltUnitsPrecision = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltUnitsPrecision(self: AcadDimRadialLargeClass) -> AcDimPrecision

Set: AltUnitsPrecision(self: AcadDimRadialLargeClass) = value
"""

    AltUnitsScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltUnitsScale(self: AcadDimRadialLargeClass) -> float

Set: AltUnitsScale(self: AcadDimRadialLargeClass) = value
"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: AcadDimRadialLargeClass) -> object

"""

    ArrowheadBlock = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ArrowheadBlock(self: AcadDimRadialLargeClass) -> str

Set: ArrowheadBlock(self: AcadDimRadialLargeClass) = value
"""

    ArrowheadSize = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ArrowheadSize(self: AcadDimRadialLargeClass) -> float

Set: ArrowheadSize(self: AcadDimRadialLargeClass) = value
"""

    ArrowheadType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ArrowheadType(self: AcadDimRadialLargeClass) -> AcDimArrowheadType

Set: ArrowheadType(self: AcadDimRadialLargeClass) = value
"""

    Center = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Center(self: AcadDimRadialLargeClass) -> object

Set: Center(self: AcadDimRadialLargeClass) = value
"""

    CenterMarkSize = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CenterMarkSize(self: AcadDimRadialLargeClass) -> float

Set: CenterMarkSize(self: AcadDimRadialLargeClass) = value
"""

    CenterType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CenterType(self: AcadDimRadialLargeClass) -> AcDimCenterType

Set: CenterType(self: AcadDimRadialLargeClass) = value
"""

    ChordPoint = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ChordPoint(self: AcadDimRadialLargeClass) -> object

Set: ChordPoint(self: AcadDimRadialLargeClass) = value
"""

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: AcadDimRadialLargeClass) -> ACAD_COLOR

Set: color(self: AcadDimRadialLargeClass) = value
"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: AcadDimRadialLargeClass) -> AcadDatabase

"""

    DecimalSeparator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DecimalSeparator(self: AcadDimRadialLargeClass) -> str

Set: DecimalSeparator(self: AcadDimRadialLargeClass) = value
"""

    DimensionLineColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimensionLineColor(self: AcadDimRadialLargeClass) -> ACAD_COLOR

Set: DimensionLineColor(self: AcadDimRadialLargeClass) = value
"""

    DimensionLinetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimensionLinetype(self: AcadDimRadialLargeClass) -> str

Set: DimensionLinetype(self: AcadDimRadialLargeClass) = value
"""

    DimensionLineWeight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimensionLineWeight(self: AcadDimRadialLargeClass) -> ACAD_LWEIGHT

Set: DimensionLineWeight(self: AcadDimRadialLargeClass) = value
"""

    DimLineSuppress = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimLineSuppress(self: AcadDimRadialLargeClass) -> bool

Set: DimLineSuppress(self: AcadDimRadialLargeClass) = value
"""

    DimTxtDirection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimTxtDirection(self: AcadDimRadialLargeClass) -> bool

Set: DimTxtDirection(self: AcadDimRadialLargeClass) = value
"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: AcadDimRadialLargeClass) -> object

"""

    EntityName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityName(self: AcadDimRadialLargeClass) -> str

"""

    EntityTransparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityTransparency(self: AcadDimRadialLargeClass) -> str

Set: EntityTransparency(self: AcadDimRadialLargeClass) = value
"""

    EntityType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityType(self: AcadDimRadialLargeClass) -> int

"""

    Fit = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Fit(self: AcadDimRadialLargeClass) -> AcDimFit

Set: Fit(self: AcadDimRadialLargeClass) = value
"""

    ForceLineInside = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ForceLineInside(self: AcadDimRadialLargeClass) -> bool

Set: ForceLineInside(self: AcadDimRadialLargeClass) = value
"""

    FractionFormat = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FractionFormat(self: AcadDimRadialLargeClass) -> AcDimFractionType

Set: FractionFormat(self: AcadDimRadialLargeClass) = value
"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: AcadDimRadialLargeClass) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: AcadDimRadialLargeClass) -> bool

"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: AcadDimRadialLargeClass) -> AcadHyperlinks

"""

    JogAngle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: JogAngle(self: AcadDimRadialLargeClass) -> float

Set: JogAngle(self: AcadDimRadialLargeClass) = value
"""

    JogLocation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: JogLocation(self: AcadDimRadialLargeClass) -> object

Set: JogLocation(self: AcadDimRadialLargeClass) = value
"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layer(self: AcadDimRadialLargeClass) -> str

Set: Layer(self: AcadDimRadialLargeClass) = value
"""

    LinearScaleFactor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinearScaleFactor(self: AcadDimRadialLargeClass) -> float

Set: LinearScaleFactor(self: AcadDimRadialLargeClass) = value
"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: AcadDimRadialLargeClass) -> str

Set: Linetype(self: AcadDimRadialLargeClass) = value
"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeScale(self: AcadDimRadialLargeClass) -> float

Set: LinetypeScale(self: AcadDimRadialLargeClass) = value
"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: AcadDimRadialLargeClass) -> ACAD_LWEIGHT

Set: Lineweight(self: AcadDimRadialLargeClass) = value
"""

    Material = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Material(self: AcadDimRadialLargeClass) -> str

Set: Material(self: AcadDimRadialLargeClass) = value
"""

    Measurement = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Measurement(self: AcadDimRadialLargeClass) -> float

"""

    Normal = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Normal(self: AcadDimRadialLargeClass) -> object

Set: Normal(self: AcadDimRadialLargeClass) = value
"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: AcadDimRadialLargeClass) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: AcadDimRadialLargeClass) -> str

"""

    OverrideCenter = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OverrideCenter(self: AcadDimRadialLargeClass) -> object

Set: OverrideCenter(self: AcadDimRadialLargeClass) = value
"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: AcadDimRadialLargeClass) -> Int64

"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: AcadDimRadialLargeClass) -> str

Set: PlotStyleName(self: AcadDimRadialLargeClass) = value
"""

    PrimaryUnitsPrecision = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PrimaryUnitsPrecision(self: AcadDimRadialLargeClass) -> AcDimPrecision

Set: PrimaryUnitsPrecision(self: AcadDimRadialLargeClass) = value
"""

    Rotation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Rotation(self: AcadDimRadialLargeClass) -> float

Set: Rotation(self: AcadDimRadialLargeClass) = value
"""

    RoundDistance = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RoundDistance(self: AcadDimRadialLargeClass) -> float

Set: RoundDistance(self: AcadDimRadialLargeClass) = value
"""

    ScaleFactor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ScaleFactor(self: AcadDimRadialLargeClass) -> float

Set: ScaleFactor(self: AcadDimRadialLargeClass) = value
"""

    StyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: StyleName(self: AcadDimRadialLargeClass) -> str

Set: StyleName(self: AcadDimRadialLargeClass) = value
"""

    SuppressLeadingZeros = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SuppressLeadingZeros(self: AcadDimRadialLargeClass) -> bool

Set: SuppressLeadingZeros(self: AcadDimRadialLargeClass) = value
"""

    SuppressTrailingZeros = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SuppressTrailingZeros(self: AcadDimRadialLargeClass) -> bool

Set: SuppressTrailingZeros(self: AcadDimRadialLargeClass) = value
"""

    SuppressZeroFeet = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SuppressZeroFeet(self: AcadDimRadialLargeClass) -> bool

Set: SuppressZeroFeet(self: AcadDimRadialLargeClass) = value
"""

    SuppressZeroInches = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SuppressZeroInches(self: AcadDimRadialLargeClass) -> bool

Set: SuppressZeroInches(self: AcadDimRadialLargeClass) = value
"""

    TextColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextColor(self: AcadDimRadialLargeClass) -> ACAD_COLOR

Set: TextColor(self: AcadDimRadialLargeClass) = value
"""

    TextFill = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextFill(self: AcadDimRadialLargeClass) -> bool

Set: TextFill(self: AcadDimRadialLargeClass) = value
"""

    TextFillColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextFillColor(self: AcadDimRadialLargeClass) -> ACAD_COLOR

Set: TextFillColor(self: AcadDimRadialLargeClass) = value
"""

    TextGap = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextGap(self: AcadDimRadialLargeClass) -> float

Set: TextGap(self: AcadDimRadialLargeClass) = value
"""

    TextHeight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextHeight(self: AcadDimRadialLargeClass) -> float

Set: TextHeight(self: AcadDimRadialLargeClass) = value
"""

    TextInside = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextInside(self: AcadDimRadialLargeClass) -> bool

Set: TextInside(self: AcadDimRadialLargeClass) = value
"""

    TextInsideAlign = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextInsideAlign(self: AcadDimRadialLargeClass) -> bool

Set: TextInsideAlign(self: AcadDimRadialLargeClass) = value
"""

    TextMovement = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextMovement(self: AcadDimRadialLargeClass) -> AcDimTextMovement

Set: TextMovement(self: AcadDimRadialLargeClass) = value
"""

    TextOutsideAlign = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextOutsideAlign(self: AcadDimRadialLargeClass) -> bool

Set: TextOutsideAlign(self: AcadDimRadialLargeClass) = value
"""

    TextOverride = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextOverride(self: AcadDimRadialLargeClass) -> str

Set: TextOverride(self: AcadDimRadialLargeClass) = value
"""

    TextPosition = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextPosition(self: AcadDimRadialLargeClass) -> object

Set: TextPosition(self: AcadDimRadialLargeClass) = value
"""

    TextPrefix = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextPrefix(self: AcadDimRadialLargeClass) -> str

Set: TextPrefix(self: AcadDimRadialLargeClass) = value
"""

    TextRotation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextRotation(self: AcadDimRadialLargeClass) -> float

Set: TextRotation(self: AcadDimRadialLargeClass) = value
"""

    TextStyle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextStyle(self: AcadDimRadialLargeClass) -> str

Set: TextStyle(self: AcadDimRadialLargeClass) = value
"""

    TextSuffix = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextSuffix(self: AcadDimRadialLargeClass) -> str

Set: TextSuffix(self: AcadDimRadialLargeClass) = value
"""

    ToleranceDisplay = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceDisplay(self: AcadDimRadialLargeClass) -> AcDimToleranceMethod

Set: ToleranceDisplay(self: AcadDimRadialLargeClass) = value
"""

    ToleranceHeightScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceHeightScale(self: AcadDimRadialLargeClass) -> float

Set: ToleranceHeightScale(self: AcadDimRadialLargeClass) = value
"""

    ToleranceJustification = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceJustification(self: AcadDimRadialLargeClass) -> AcDimToleranceJustify

Set: ToleranceJustification(self: AcadDimRadialLargeClass) = value
"""

    ToleranceLowerLimit = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceLowerLimit(self: AcadDimRadialLargeClass) -> float

Set: ToleranceLowerLimit(self: AcadDimRadialLargeClass) = value
"""

    TolerancePrecision = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TolerancePrecision(self: AcadDimRadialLargeClass) -> AcDimPrecision

Set: TolerancePrecision(self: AcadDimRadialLargeClass) = value
"""

    ToleranceSuppressLeadingZeros = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceSuppressLeadingZeros(self: AcadDimRadialLargeClass) -> bool

Set: ToleranceSuppressLeadingZeros(self: AcadDimRadialLargeClass) = value
"""

    ToleranceSuppressTrailingZeros = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceSuppressTrailingZeros(self: AcadDimRadialLargeClass) -> bool

Set: ToleranceSuppressTrailingZeros(self: AcadDimRadialLargeClass) = value
"""

    ToleranceSuppressZeroFeet = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceSuppressZeroFeet(self: AcadDimRadialLargeClass) -> bool

Set: ToleranceSuppressZeroFeet(self: AcadDimRadialLargeClass) = value
"""

    ToleranceSuppressZeroInches = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceSuppressZeroInches(self: AcadDimRadialLargeClass) -> bool

Set: ToleranceSuppressZeroInches(self: AcadDimRadialLargeClass) = value
"""

    ToleranceUpperLimit = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceUpperLimit(self: AcadDimRadialLargeClass) -> float

Set: ToleranceUpperLimit(self: AcadDimRadialLargeClass) = value
"""

    TrueColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TrueColor(self: AcadDimRadialLargeClass) -> AcadAcCmColor

Set: TrueColor(self: AcadDimRadialLargeClass) = value
"""

    UnitsFormat = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: UnitsFormat(self: AcadDimRadialLargeClass) -> AcDimLUnits

Set: UnitsFormat(self: AcadDimRadialLargeClass) = value
"""

    VerticalTextPosition = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VerticalTextPosition(self: AcadDimRadialLargeClass) -> AcDimVerticalJustification

Set: VerticalTextPosition(self: AcadDimRadialLargeClass) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: AcadDimRadialLargeClass) -> bool

Set: Visible(self: AcadDimRadialLargeClass) = value
"""


    Modified = None


class IAcadDimRotated(IAcadDimension, IAcadEntity, IAcadObject):
    # no doc
    def ArrayPolar(self, NumberOfObjects, AngleToFill, CenterPoint):
        """ ArrayPolar(self: IAcadDimRotated, NumberOfObjects: int, AngleToFill: float, CenterPoint: object) -> object """
        pass

    def ArrayRectangular(self, NumberOfRows, NumberOfColumns, NumberOfLevels, DistBetweenRows, DistBetweenCols, DistBetweenLevels):
        """ ArrayRectangular(self: IAcadDimRotated, NumberOfRows: int, NumberOfColumns: int, NumberOfLevels: int, DistBetweenRows: float, DistBetweenCols: float, DistBetweenLevels: float) -> object """
        pass

    def Copy(self):
        """ Copy(self: IAcadDimRotated) -> object """
        pass

    def Delete(self):
        """ Delete(self: IAcadDimRotated) """
        pass

    def Erase(self):
        """ Erase(self: IAcadDimRotated) """
        pass

    def GetBoundingBox(self, MinPoint, MaxPoint):
        """ GetBoundingBox(self: IAcadDimRotated) -> (object, object) """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: IAcadDimRotated) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: IAcadDimRotated, AppName: str) -> (object, object) """
        pass

    def Highlight(self, HighlightFlag):
        """ Highlight(self: IAcadDimRotated, HighlightFlag: bool) """
        pass

    def IntersectWith(self, IntersectObject, option):
        """ IntersectWith(self: IAcadDimRotated, IntersectObject: object, option: AcExtendOption) -> object """
        pass

    def Mirror(self, Point1, Point2):
        """ Mirror(self: IAcadDimRotated, Point1: object, Point2: object) -> object """
        pass

    def Mirror3D(self, Point1, Point2, point3):
        """ Mirror3D(self: IAcadDimRotated, Point1: object, Point2: object, point3: object) -> object """
        pass

    def Move(self, FromPoint, ToPoint):
        """ Move(self: IAcadDimRotated, FromPoint: object, ToPoint: object) """
        pass

    def Rotate(self, BasePoint, RotationAngle):
        """ Rotate(self: IAcadDimRotated, BasePoint: object, RotationAngle: float) """
        pass

    def Rotate3D(self, Point1, Point2, RotationAngle):
        """ Rotate3D(self: IAcadDimRotated, Point1: object, Point2: object, RotationAngle: float) """
        pass

    def ScaleEntity(self, BasePoint, ScaleFactor):
        """ ScaleEntity(self: IAcadDimRotated, BasePoint: object, ScaleFactor: float) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: IAcadDimRotated, XDataType: object, XDataValue: object) """
        pass

    def TransformBy(self, TransformationMatrix):
        """ TransformBy(self: IAcadDimRotated, TransformationMatrix: object) """
        pass

    def Update(self):
        """ Update(self: IAcadDimRotated) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    AltRoundDistance = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltRoundDistance(self: IAcadDimRotated) -> float

Set: AltRoundDistance(self: IAcadDimRotated) = value
"""

    AltSubUnitsFactor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltSubUnitsFactor(self: IAcadDimRotated) -> float

Set: AltSubUnitsFactor(self: IAcadDimRotated) = value
"""

    AltSubUnitsSuffix = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltSubUnitsSuffix(self: IAcadDimRotated) -> str

Set: AltSubUnitsSuffix(self: IAcadDimRotated) = value
"""

    AltSuppressLeadingZeros = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltSuppressLeadingZeros(self: IAcadDimRotated) -> bool

Set: AltSuppressLeadingZeros(self: IAcadDimRotated) = value
"""

    AltSuppressTrailingZeros = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltSuppressTrailingZeros(self: IAcadDimRotated) -> bool

Set: AltSuppressTrailingZeros(self: IAcadDimRotated) = value
"""

    AltSuppressZeroFeet = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltSuppressZeroFeet(self: IAcadDimRotated) -> bool

Set: AltSuppressZeroFeet(self: IAcadDimRotated) = value
"""

    AltSuppressZeroInches = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltSuppressZeroInches(self: IAcadDimRotated) -> bool

Set: AltSuppressZeroInches(self: IAcadDimRotated) = value
"""

    AltTextPrefix = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltTextPrefix(self: IAcadDimRotated) -> str

Set: AltTextPrefix(self: IAcadDimRotated) = value
"""

    AltTextSuffix = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltTextSuffix(self: IAcadDimRotated) -> str

Set: AltTextSuffix(self: IAcadDimRotated) = value
"""

    AltTolerancePrecision = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltTolerancePrecision(self: IAcadDimRotated) -> AcDimPrecision

Set: AltTolerancePrecision(self: IAcadDimRotated) = value
"""

    AltToleranceSuppressLeadingZeros = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltToleranceSuppressLeadingZeros(self: IAcadDimRotated) -> bool

Set: AltToleranceSuppressLeadingZeros(self: IAcadDimRotated) = value
"""

    AltToleranceSuppressTrailingZeros = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltToleranceSuppressTrailingZeros(self: IAcadDimRotated) -> bool

Set: AltToleranceSuppressTrailingZeros(self: IAcadDimRotated) = value
"""

    AltToleranceSuppressZeroFeet = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltToleranceSuppressZeroFeet(self: IAcadDimRotated) -> bool

Set: AltToleranceSuppressZeroFeet(self: IAcadDimRotated) = value
"""

    AltToleranceSuppressZeroInches = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltToleranceSuppressZeroInches(self: IAcadDimRotated) -> bool

Set: AltToleranceSuppressZeroInches(self: IAcadDimRotated) = value
"""

    AltUnits = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltUnits(self: IAcadDimRotated) -> bool

Set: AltUnits(self: IAcadDimRotated) = value
"""

    AltUnitsFormat = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltUnitsFormat(self: IAcadDimRotated) -> AcDimUnits

Set: AltUnitsFormat(self: IAcadDimRotated) = value
"""

    AltUnitsPrecision = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltUnitsPrecision(self: IAcadDimRotated) -> AcDimPrecision

Set: AltUnitsPrecision(self: IAcadDimRotated) = value
"""

    AltUnitsScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltUnitsScale(self: IAcadDimRotated) -> float

Set: AltUnitsScale(self: IAcadDimRotated) = value
"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IAcadDimRotated) -> object

"""

    Arrowhead1Block = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Arrowhead1Block(self: IAcadDimRotated) -> str

Set: Arrowhead1Block(self: IAcadDimRotated) = value
"""

    Arrowhead1Type = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Arrowhead1Type(self: IAcadDimRotated) -> AcDimArrowheadType

Set: Arrowhead1Type(self: IAcadDimRotated) = value
"""

    Arrowhead2Block = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Arrowhead2Block(self: IAcadDimRotated) -> str

Set: Arrowhead2Block(self: IAcadDimRotated) = value
"""

    Arrowhead2Type = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Arrowhead2Type(self: IAcadDimRotated) -> AcDimArrowheadType

Set: Arrowhead2Type(self: IAcadDimRotated) = value
"""

    ArrowheadSize = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ArrowheadSize(self: IAcadDimRotated) -> float

Set: ArrowheadSize(self: IAcadDimRotated) = value
"""

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: IAcadDimRotated) -> ACAD_COLOR

Set: color(self: IAcadDimRotated) = value
"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: IAcadDimRotated) -> AcadDatabase

"""

    DecimalSeparator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DecimalSeparator(self: IAcadDimRotated) -> str

Set: DecimalSeparator(self: IAcadDimRotated) = value
"""

    DimConstrDesc = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimConstrDesc(self: IAcadDimRotated) -> str

Set: DimConstrDesc(self: IAcadDimRotated) = value
"""

    DimConstrExpression = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimConstrExpression(self: IAcadDimRotated) -> str

Set: DimConstrExpression(self: IAcadDimRotated) = value
"""

    DimConstrForm = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimConstrForm(self: IAcadDimRotated) -> bool

Set: DimConstrForm(self: IAcadDimRotated) = value
"""

    DimConstrName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimConstrName(self: IAcadDimRotated) -> str

Set: DimConstrName(self: IAcadDimRotated) = value
"""

    DimConstrReference = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimConstrReference(self: IAcadDimRotated) -> bool

Set: DimConstrReference(self: IAcadDimRotated) = value
"""

    DimConstrValue = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimConstrValue(self: IAcadDimRotated) -> str

Set: DimConstrValue(self: IAcadDimRotated) = value
"""

    DimensionLineColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimensionLineColor(self: IAcadDimRotated) -> ACAD_COLOR

Set: DimensionLineColor(self: IAcadDimRotated) = value
"""

    DimensionLineExtend = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimensionLineExtend(self: IAcadDimRotated) -> float

Set: DimensionLineExtend(self: IAcadDimRotated) = value
"""

    DimensionLinetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimensionLinetype(self: IAcadDimRotated) -> str

Set: DimensionLinetype(self: IAcadDimRotated) = value
"""

    DimensionLineWeight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimensionLineWeight(self: IAcadDimRotated) -> ACAD_LWEIGHT

Set: DimensionLineWeight(self: IAcadDimRotated) = value
"""

    DimLine1Suppress = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimLine1Suppress(self: IAcadDimRotated) -> bool

Set: DimLine1Suppress(self: IAcadDimRotated) = value
"""

    DimLine2Suppress = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimLine2Suppress(self: IAcadDimRotated) -> bool

Set: DimLine2Suppress(self: IAcadDimRotated) = value
"""

    DimLineInside = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimLineInside(self: IAcadDimRotated) -> bool

Set: DimLineInside(self: IAcadDimRotated) = value
"""

    DimTxtDirection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimTxtDirection(self: IAcadDimRotated) -> bool

Set: DimTxtDirection(self: IAcadDimRotated) = value
"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: IAcadDimRotated) -> object

"""

    EntityName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityName(self: IAcadDimRotated) -> str

"""

    EntityTransparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityTransparency(self: IAcadDimRotated) -> str

Set: EntityTransparency(self: IAcadDimRotated) = value
"""

    EntityType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityType(self: IAcadDimRotated) -> int

"""

    ExtensionLineColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ExtensionLineColor(self: IAcadDimRotated) -> ACAD_COLOR

Set: ExtensionLineColor(self: IAcadDimRotated) = value
"""

    ExtensionLineExtend = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ExtensionLineExtend(self: IAcadDimRotated) -> float

Set: ExtensionLineExtend(self: IAcadDimRotated) = value
"""

    ExtensionLineOffset = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ExtensionLineOffset(self: IAcadDimRotated) -> float

Set: ExtensionLineOffset(self: IAcadDimRotated) = value
"""

    ExtensionLineWeight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ExtensionLineWeight(self: IAcadDimRotated) -> ACAD_LWEIGHT

Set: ExtensionLineWeight(self: IAcadDimRotated) = value
"""

    ExtLine1Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ExtLine1Linetype(self: IAcadDimRotated) -> str

Set: ExtLine1Linetype(self: IAcadDimRotated) = value
"""

    ExtLine1Suppress = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ExtLine1Suppress(self: IAcadDimRotated) -> bool

Set: ExtLine1Suppress(self: IAcadDimRotated) = value
"""

    ExtLine2Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ExtLine2Linetype(self: IAcadDimRotated) -> str

Set: ExtLine2Linetype(self: IAcadDimRotated) = value
"""

    ExtLine2Suppress = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ExtLine2Suppress(self: IAcadDimRotated) -> bool

Set: ExtLine2Suppress(self: IAcadDimRotated) = value
"""

    ExtLineFixedLen = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ExtLineFixedLen(self: IAcadDimRotated) -> float

Set: ExtLineFixedLen(self: IAcadDimRotated) = value
"""

    ExtLineFixedLenSuppress = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ExtLineFixedLenSuppress(self: IAcadDimRotated) -> bool

Set: ExtLineFixedLenSuppress(self: IAcadDimRotated) = value
"""

    Fit = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Fit(self: IAcadDimRotated) -> AcDimFit

Set: Fit(self: IAcadDimRotated) = value
"""

    ForceLineInside = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ForceLineInside(self: IAcadDimRotated) -> bool

Set: ForceLineInside(self: IAcadDimRotated) = value
"""

    FractionFormat = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FractionFormat(self: IAcadDimRotated) -> AcDimFractionType

Set: FractionFormat(self: IAcadDimRotated) = value
"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: IAcadDimRotated) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: IAcadDimRotated) -> bool

"""

    HorizontalTextPosition = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HorizontalTextPosition(self: IAcadDimRotated) -> AcDimHorizontalJustification

Set: HorizontalTextPosition(self: IAcadDimRotated) = value
"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: IAcadDimRotated) -> AcadHyperlinks

"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layer(self: IAcadDimRotated) -> str

Set: Layer(self: IAcadDimRotated) = value
"""

    LinearScaleFactor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinearScaleFactor(self: IAcadDimRotated) -> float

Set: LinearScaleFactor(self: IAcadDimRotated) = value
"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: IAcadDimRotated) -> str

Set: Linetype(self: IAcadDimRotated) = value
"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeScale(self: IAcadDimRotated) -> float

Set: LinetypeScale(self: IAcadDimRotated) = value
"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: IAcadDimRotated) -> ACAD_LWEIGHT

Set: Lineweight(self: IAcadDimRotated) = value
"""

    Material = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Material(self: IAcadDimRotated) -> str

Set: Material(self: IAcadDimRotated) = value
"""

    Measurement = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Measurement(self: IAcadDimRotated) -> float

"""

    Normal = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Normal(self: IAcadDimRotated) -> object

Set: Normal(self: IAcadDimRotated) = value
"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: IAcadDimRotated) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: IAcadDimRotated) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: IAcadDimRotated) -> Int64

"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: IAcadDimRotated) -> str

Set: PlotStyleName(self: IAcadDimRotated) = value
"""

    PrimaryUnitsPrecision = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PrimaryUnitsPrecision(self: IAcadDimRotated) -> AcDimPrecision

Set: PrimaryUnitsPrecision(self: IAcadDimRotated) = value
"""

    Rotation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Rotation(self: IAcadDimRotated) -> float

Set: Rotation(self: IAcadDimRotated) = value
"""

    RoundDistance = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RoundDistance(self: IAcadDimRotated) -> float

Set: RoundDistance(self: IAcadDimRotated) = value
"""

    ScaleFactor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ScaleFactor(self: IAcadDimRotated) -> float

Set: ScaleFactor(self: IAcadDimRotated) = value
"""

    StyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: StyleName(self: IAcadDimRotated) -> str

Set: StyleName(self: IAcadDimRotated) = value
"""

    SubUnitsFactor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SubUnitsFactor(self: IAcadDimRotated) -> float

Set: SubUnitsFactor(self: IAcadDimRotated) = value
"""

    SubUnitsSuffix = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SubUnitsSuffix(self: IAcadDimRotated) -> str

Set: SubUnitsSuffix(self: IAcadDimRotated) = value
"""

    SuppressLeadingZeros = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SuppressLeadingZeros(self: IAcadDimRotated) -> bool

Set: SuppressLeadingZeros(self: IAcadDimRotated) = value
"""

    SuppressTrailingZeros = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SuppressTrailingZeros(self: IAcadDimRotated) -> bool

Set: SuppressTrailingZeros(self: IAcadDimRotated) = value
"""

    SuppressZeroFeet = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SuppressZeroFeet(self: IAcadDimRotated) -> bool

Set: SuppressZeroFeet(self: IAcadDimRotated) = value
"""

    SuppressZeroInches = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SuppressZeroInches(self: IAcadDimRotated) -> bool

Set: SuppressZeroInches(self: IAcadDimRotated) = value
"""

    TextColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextColor(self: IAcadDimRotated) -> ACAD_COLOR

Set: TextColor(self: IAcadDimRotated) = value
"""

    TextFill = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextFill(self: IAcadDimRotated) -> bool

Set: TextFill(self: IAcadDimRotated) = value
"""

    TextFillColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextFillColor(self: IAcadDimRotated) -> ACAD_COLOR

Set: TextFillColor(self: IAcadDimRotated) = value
"""

    TextGap = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextGap(self: IAcadDimRotated) -> float

Set: TextGap(self: IAcadDimRotated) = value
"""

    TextHeight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextHeight(self: IAcadDimRotated) -> float

Set: TextHeight(self: IAcadDimRotated) = value
"""

    TextInside = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextInside(self: IAcadDimRotated) -> bool

Set: TextInside(self: IAcadDimRotated) = value
"""

    TextInsideAlign = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextInsideAlign(self: IAcadDimRotated) -> bool

Set: TextInsideAlign(self: IAcadDimRotated) = value
"""

    TextMovement = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextMovement(self: IAcadDimRotated) -> AcDimTextMovement

Set: TextMovement(self: IAcadDimRotated) = value
"""

    TextOutsideAlign = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextOutsideAlign(self: IAcadDimRotated) -> bool

Set: TextOutsideAlign(self: IAcadDimRotated) = value
"""

    TextOverride = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextOverride(self: IAcadDimRotated) -> str

Set: TextOverride(self: IAcadDimRotated) = value
"""

    TextPosition = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextPosition(self: IAcadDimRotated) -> object

Set: TextPosition(self: IAcadDimRotated) = value
"""

    TextPrefix = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextPrefix(self: IAcadDimRotated) -> str

Set: TextPrefix(self: IAcadDimRotated) = value
"""

    TextRotation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextRotation(self: IAcadDimRotated) -> float

Set: TextRotation(self: IAcadDimRotated) = value
"""

    TextStyle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextStyle(self: IAcadDimRotated) -> str

Set: TextStyle(self: IAcadDimRotated) = value
"""

    TextSuffix = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextSuffix(self: IAcadDimRotated) -> str

Set: TextSuffix(self: IAcadDimRotated) = value
"""

    ToleranceDisplay = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceDisplay(self: IAcadDimRotated) -> AcDimToleranceMethod

Set: ToleranceDisplay(self: IAcadDimRotated) = value
"""

    ToleranceHeightScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceHeightScale(self: IAcadDimRotated) -> float

Set: ToleranceHeightScale(self: IAcadDimRotated) = value
"""

    ToleranceJustification = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceJustification(self: IAcadDimRotated) -> AcDimToleranceJustify

Set: ToleranceJustification(self: IAcadDimRotated) = value
"""

    ToleranceLowerLimit = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceLowerLimit(self: IAcadDimRotated) -> float

Set: ToleranceLowerLimit(self: IAcadDimRotated) = value
"""

    TolerancePrecision = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TolerancePrecision(self: IAcadDimRotated) -> AcDimPrecision

Set: TolerancePrecision(self: IAcadDimRotated) = value
"""

    ToleranceSuppressLeadingZeros = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceSuppressLeadingZeros(self: IAcadDimRotated) -> bool

Set: ToleranceSuppressLeadingZeros(self: IAcadDimRotated) = value
"""

    ToleranceSuppressTrailingZeros = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceSuppressTrailingZeros(self: IAcadDimRotated) -> bool

Set: ToleranceSuppressTrailingZeros(self: IAcadDimRotated) = value
"""

    ToleranceSuppressZeroFeet = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceSuppressZeroFeet(self: IAcadDimRotated) -> bool

Set: ToleranceSuppressZeroFeet(self: IAcadDimRotated) = value
"""

    ToleranceSuppressZeroInches = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceSuppressZeroInches(self: IAcadDimRotated) -> bool

Set: ToleranceSuppressZeroInches(self: IAcadDimRotated) = value
"""

    ToleranceUpperLimit = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceUpperLimit(self: IAcadDimRotated) -> float

Set: ToleranceUpperLimit(self: IAcadDimRotated) = value
"""

    TrueColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TrueColor(self: IAcadDimRotated) -> AcadAcCmColor

Set: TrueColor(self: IAcadDimRotated) = value
"""

    UnitsFormat = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: UnitsFormat(self: IAcadDimRotated) -> AcDimLUnits

Set: UnitsFormat(self: IAcadDimRotated) = value
"""

    VerticalTextPosition = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VerticalTextPosition(self: IAcadDimRotated) -> AcDimVerticalJustification

Set: VerticalTextPosition(self: IAcadDimRotated) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: IAcadDimRotated) -> bool

Set: Visible(self: IAcadDimRotated) = value
"""



class AcadDimRotated(IAcadDimRotated, IAcadDimension, IAcadEntity, IAcadObject, IAcadObjectEvents_Event):
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class AcadDimRotatedClass(__ComObject):
    # no doc
    def add_Modified(self, A_1):
        """ add_Modified(self: AcadDimRotatedClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def ArrayPolar(self, NumberOfObjects, AngleToFill, CenterPoint):
        """ ArrayPolar(self: AcadDimRotatedClass, NumberOfObjects: int, AngleToFill: float, CenterPoint: object) -> object """
        pass

    def ArrayRectangular(self, NumberOfRows, NumberOfColumns, NumberOfLevels, DistBetweenRows, DistBetweenCols, DistBetweenLevels):
        """ ArrayRectangular(self: AcadDimRotatedClass, NumberOfRows: int, NumberOfColumns: int, NumberOfLevels: int, DistBetweenRows: float, DistBetweenCols: float, DistBetweenLevels: float) -> object """
        pass

    def Copy(self):
        """ Copy(self: AcadDimRotatedClass) -> object """
        pass

    def Delete(self):
        """ Delete(self: AcadDimRotatedClass) """
        pass

    def Erase(self):
        """ Erase(self: AcadDimRotatedClass) """
        pass

    def GetBoundingBox(self, MinPoint, MaxPoint):
        """ GetBoundingBox(self: AcadDimRotatedClass) -> (object, object) """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: AcadDimRotatedClass) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: AcadDimRotatedClass, AppName: str) -> (object, object) """
        pass

    def Highlight(self, HighlightFlag):
        """ Highlight(self: AcadDimRotatedClass, HighlightFlag: bool) """
        pass

    def IntersectWith(self, IntersectObject, option):
        """ IntersectWith(self: AcadDimRotatedClass, IntersectObject: object, option: AcExtendOption) -> object """
        pass

    def Mirror(self, Point1, Point2):
        """ Mirror(self: AcadDimRotatedClass, Point1: object, Point2: object) -> object """
        pass

    def Mirror3D(self, Point1, Point2, point3):
        """ Mirror3D(self: AcadDimRotatedClass, Point1: object, Point2: object, point3: object) -> object """
        pass

    def Move(self, FromPoint, ToPoint):
        """ Move(self: AcadDimRotatedClass, FromPoint: object, ToPoint: object) """
        pass

    def remove_Modified(self, A_1):
        """ remove_Modified(self: AcadDimRotatedClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def Rotate(self, BasePoint, RotationAngle):
        """ Rotate(self: AcadDimRotatedClass, BasePoint: object, RotationAngle: float) """
        pass

    def Rotate3D(self, Point1, Point2, RotationAngle):
        """ Rotate3D(self: AcadDimRotatedClass, Point1: object, Point2: object, RotationAngle: float) """
        pass

    def ScaleEntity(self, BasePoint, ScaleFactor):
        """ ScaleEntity(self: AcadDimRotatedClass, BasePoint: object, ScaleFactor: float) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: AcadDimRotatedClass, XDataType: object, XDataValue: object) """
        pass

    def TransformBy(self, TransformationMatrix):
        """ TransformBy(self: AcadDimRotatedClass, TransformationMatrix: object) """
        pass

    def Update(self):
        """ Update(self: AcadDimRotatedClass) """
        pass

    AltRoundDistance = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltRoundDistance(self: AcadDimRotatedClass) -> float

Set: AltRoundDistance(self: AcadDimRotatedClass) = value
"""

    AltSubUnitsFactor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltSubUnitsFactor(self: AcadDimRotatedClass) -> float

Set: AltSubUnitsFactor(self: AcadDimRotatedClass) = value
"""

    AltSubUnitsSuffix = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltSubUnitsSuffix(self: AcadDimRotatedClass) -> str

Set: AltSubUnitsSuffix(self: AcadDimRotatedClass) = value
"""

    AltSuppressLeadingZeros = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltSuppressLeadingZeros(self: AcadDimRotatedClass) -> bool

Set: AltSuppressLeadingZeros(self: AcadDimRotatedClass) = value
"""

    AltSuppressTrailingZeros = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltSuppressTrailingZeros(self: AcadDimRotatedClass) -> bool

Set: AltSuppressTrailingZeros(self: AcadDimRotatedClass) = value
"""

    AltSuppressZeroFeet = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltSuppressZeroFeet(self: AcadDimRotatedClass) -> bool

Set: AltSuppressZeroFeet(self: AcadDimRotatedClass) = value
"""

    AltSuppressZeroInches = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltSuppressZeroInches(self: AcadDimRotatedClass) -> bool

Set: AltSuppressZeroInches(self: AcadDimRotatedClass) = value
"""

    AltTextPrefix = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltTextPrefix(self: AcadDimRotatedClass) -> str

Set: AltTextPrefix(self: AcadDimRotatedClass) = value
"""

    AltTextSuffix = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltTextSuffix(self: AcadDimRotatedClass) -> str

Set: AltTextSuffix(self: AcadDimRotatedClass) = value
"""

    AltTolerancePrecision = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltTolerancePrecision(self: AcadDimRotatedClass) -> AcDimPrecision

Set: AltTolerancePrecision(self: AcadDimRotatedClass) = value
"""

    AltToleranceSuppressLeadingZeros = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltToleranceSuppressLeadingZeros(self: AcadDimRotatedClass) -> bool

Set: AltToleranceSuppressLeadingZeros(self: AcadDimRotatedClass) = value
"""

    AltToleranceSuppressTrailingZeros = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltToleranceSuppressTrailingZeros(self: AcadDimRotatedClass) -> bool

Set: AltToleranceSuppressTrailingZeros(self: AcadDimRotatedClass) = value
"""

    AltToleranceSuppressZeroFeet = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltToleranceSuppressZeroFeet(self: AcadDimRotatedClass) -> bool

Set: AltToleranceSuppressZeroFeet(self: AcadDimRotatedClass) = value
"""

    AltToleranceSuppressZeroInches = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltToleranceSuppressZeroInches(self: AcadDimRotatedClass) -> bool

Set: AltToleranceSuppressZeroInches(self: AcadDimRotatedClass) = value
"""

    AltUnits = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltUnits(self: AcadDimRotatedClass) -> bool

Set: AltUnits(self: AcadDimRotatedClass) = value
"""

    AltUnitsFormat = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltUnitsFormat(self: AcadDimRotatedClass) -> AcDimUnits

Set: AltUnitsFormat(self: AcadDimRotatedClass) = value
"""

    AltUnitsPrecision = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltUnitsPrecision(self: AcadDimRotatedClass) -> AcDimPrecision

Set: AltUnitsPrecision(self: AcadDimRotatedClass) = value
"""

    AltUnitsScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AltUnitsScale(self: AcadDimRotatedClass) -> float

Set: AltUnitsScale(self: AcadDimRotatedClass) = value
"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: AcadDimRotatedClass) -> object

"""

    Arrowhead1Block = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Arrowhead1Block(self: AcadDimRotatedClass) -> str

Set: Arrowhead1Block(self: AcadDimRotatedClass) = value
"""

    Arrowhead1Type = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Arrowhead1Type(self: AcadDimRotatedClass) -> AcDimArrowheadType

Set: Arrowhead1Type(self: AcadDimRotatedClass) = value
"""

    Arrowhead2Block = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Arrowhead2Block(self: AcadDimRotatedClass) -> str

Set: Arrowhead2Block(self: AcadDimRotatedClass) = value
"""

    Arrowhead2Type = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Arrowhead2Type(self: AcadDimRotatedClass) -> AcDimArrowheadType

Set: Arrowhead2Type(self: AcadDimRotatedClass) = value
"""

    ArrowheadSize = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ArrowheadSize(self: AcadDimRotatedClass) -> float

Set: ArrowheadSize(self: AcadDimRotatedClass) = value
"""

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: AcadDimRotatedClass) -> ACAD_COLOR

Set: color(self: AcadDimRotatedClass) = value
"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: AcadDimRotatedClass) -> AcadDatabase

"""

    DecimalSeparator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DecimalSeparator(self: AcadDimRotatedClass) -> str

Set: DecimalSeparator(self: AcadDimRotatedClass) = value
"""

    DimConstrDesc = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimConstrDesc(self: AcadDimRotatedClass) -> str

Set: DimConstrDesc(self: AcadDimRotatedClass) = value
"""

    DimConstrExpression = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimConstrExpression(self: AcadDimRotatedClass) -> str

Set: DimConstrExpression(self: AcadDimRotatedClass) = value
"""

    DimConstrForm = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimConstrForm(self: AcadDimRotatedClass) -> bool

Set: DimConstrForm(self: AcadDimRotatedClass) = value
"""

    DimConstrName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimConstrName(self: AcadDimRotatedClass) -> str

Set: DimConstrName(self: AcadDimRotatedClass) = value
"""

    DimConstrReference = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimConstrReference(self: AcadDimRotatedClass) -> bool

Set: DimConstrReference(self: AcadDimRotatedClass) = value
"""

    DimConstrValue = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimConstrValue(self: AcadDimRotatedClass) -> str

Set: DimConstrValue(self: AcadDimRotatedClass) = value
"""

    DimensionLineColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimensionLineColor(self: AcadDimRotatedClass) -> ACAD_COLOR

Set: DimensionLineColor(self: AcadDimRotatedClass) = value
"""

    DimensionLineExtend = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimensionLineExtend(self: AcadDimRotatedClass) -> float

Set: DimensionLineExtend(self: AcadDimRotatedClass) = value
"""

    DimensionLinetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimensionLinetype(self: AcadDimRotatedClass) -> str

Set: DimensionLinetype(self: AcadDimRotatedClass) = value
"""

    DimensionLineWeight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimensionLineWeight(self: AcadDimRotatedClass) -> ACAD_LWEIGHT

Set: DimensionLineWeight(self: AcadDimRotatedClass) = value
"""

    DimLine1Suppress = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimLine1Suppress(self: AcadDimRotatedClass) -> bool

Set: DimLine1Suppress(self: AcadDimRotatedClass) = value
"""

    DimLine2Suppress = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimLine2Suppress(self: AcadDimRotatedClass) -> bool

Set: DimLine2Suppress(self: AcadDimRotatedClass) = value
"""

    DimLineInside = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimLineInside(self: AcadDimRotatedClass) -> bool

Set: DimLineInside(self: AcadDimRotatedClass) = value
"""

    DimTxtDirection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimTxtDirection(self: AcadDimRotatedClass) -> bool

Set: DimTxtDirection(self: AcadDimRotatedClass) = value
"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: AcadDimRotatedClass) -> object

"""

    EntityName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityName(self: AcadDimRotatedClass) -> str

"""

    EntityTransparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityTransparency(self: AcadDimRotatedClass) -> str

Set: EntityTransparency(self: AcadDimRotatedClass) = value
"""

    EntityType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityType(self: AcadDimRotatedClass) -> int

"""

    ExtensionLineColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ExtensionLineColor(self: AcadDimRotatedClass) -> ACAD_COLOR

Set: ExtensionLineColor(self: AcadDimRotatedClass) = value
"""

    ExtensionLineExtend = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ExtensionLineExtend(self: AcadDimRotatedClass) -> float

Set: ExtensionLineExtend(self: AcadDimRotatedClass) = value
"""

    ExtensionLineOffset = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ExtensionLineOffset(self: AcadDimRotatedClass) -> float

Set: ExtensionLineOffset(self: AcadDimRotatedClass) = value
"""

    ExtensionLineWeight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ExtensionLineWeight(self: AcadDimRotatedClass) -> ACAD_LWEIGHT

Set: ExtensionLineWeight(self: AcadDimRotatedClass) = value
"""

    ExtLine1Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ExtLine1Linetype(self: AcadDimRotatedClass) -> str

Set: ExtLine1Linetype(self: AcadDimRotatedClass) = value
"""

    ExtLine1Suppress = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ExtLine1Suppress(self: AcadDimRotatedClass) -> bool

Set: ExtLine1Suppress(self: AcadDimRotatedClass) = value
"""

    ExtLine2Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ExtLine2Linetype(self: AcadDimRotatedClass) -> str

Set: ExtLine2Linetype(self: AcadDimRotatedClass) = value
"""

    ExtLine2Suppress = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ExtLine2Suppress(self: AcadDimRotatedClass) -> bool

Set: ExtLine2Suppress(self: AcadDimRotatedClass) = value
"""

    ExtLineFixedLen = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ExtLineFixedLen(self: AcadDimRotatedClass) -> float

Set: ExtLineFixedLen(self: AcadDimRotatedClass) = value
"""

    ExtLineFixedLenSuppress = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ExtLineFixedLenSuppress(self: AcadDimRotatedClass) -> bool

Set: ExtLineFixedLenSuppress(self: AcadDimRotatedClass) = value
"""

    Fit = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Fit(self: AcadDimRotatedClass) -> AcDimFit

Set: Fit(self: AcadDimRotatedClass) = value
"""

    ForceLineInside = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ForceLineInside(self: AcadDimRotatedClass) -> bool

Set: ForceLineInside(self: AcadDimRotatedClass) = value
"""

    FractionFormat = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FractionFormat(self: AcadDimRotatedClass) -> AcDimFractionType

Set: FractionFormat(self: AcadDimRotatedClass) = value
"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: AcadDimRotatedClass) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: AcadDimRotatedClass) -> bool

"""

    HorizontalTextPosition = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HorizontalTextPosition(self: AcadDimRotatedClass) -> AcDimHorizontalJustification

Set: HorizontalTextPosition(self: AcadDimRotatedClass) = value
"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: AcadDimRotatedClass) -> AcadHyperlinks

"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layer(self: AcadDimRotatedClass) -> str

Set: Layer(self: AcadDimRotatedClass) = value
"""

    LinearScaleFactor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinearScaleFactor(self: AcadDimRotatedClass) -> float

Set: LinearScaleFactor(self: AcadDimRotatedClass) = value
"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: AcadDimRotatedClass) -> str

Set: Linetype(self: AcadDimRotatedClass) = value
"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeScale(self: AcadDimRotatedClass) -> float

Set: LinetypeScale(self: AcadDimRotatedClass) = value
"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: AcadDimRotatedClass) -> ACAD_LWEIGHT

Set: Lineweight(self: AcadDimRotatedClass) = value
"""

    Material = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Material(self: AcadDimRotatedClass) -> str

Set: Material(self: AcadDimRotatedClass) = value
"""

    Measurement = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Measurement(self: AcadDimRotatedClass) -> float

"""

    Normal = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Normal(self: AcadDimRotatedClass) -> object

Set: Normal(self: AcadDimRotatedClass) = value
"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: AcadDimRotatedClass) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: AcadDimRotatedClass) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: AcadDimRotatedClass) -> Int64

"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: AcadDimRotatedClass) -> str

Set: PlotStyleName(self: AcadDimRotatedClass) = value
"""

    PrimaryUnitsPrecision = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PrimaryUnitsPrecision(self: AcadDimRotatedClass) -> AcDimPrecision

Set: PrimaryUnitsPrecision(self: AcadDimRotatedClass) = value
"""

    Rotation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Rotation(self: AcadDimRotatedClass) -> float

Set: Rotation(self: AcadDimRotatedClass) = value
"""

    RoundDistance = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RoundDistance(self: AcadDimRotatedClass) -> float

Set: RoundDistance(self: AcadDimRotatedClass) = value
"""

    ScaleFactor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ScaleFactor(self: AcadDimRotatedClass) -> float

Set: ScaleFactor(self: AcadDimRotatedClass) = value
"""

    StyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: StyleName(self: AcadDimRotatedClass) -> str

Set: StyleName(self: AcadDimRotatedClass) = value
"""

    SubUnitsFactor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SubUnitsFactor(self: AcadDimRotatedClass) -> float

Set: SubUnitsFactor(self: AcadDimRotatedClass) = value
"""

    SubUnitsSuffix = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SubUnitsSuffix(self: AcadDimRotatedClass) -> str

Set: SubUnitsSuffix(self: AcadDimRotatedClass) = value
"""

    SuppressLeadingZeros = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SuppressLeadingZeros(self: AcadDimRotatedClass) -> bool

Set: SuppressLeadingZeros(self: AcadDimRotatedClass) = value
"""

    SuppressTrailingZeros = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SuppressTrailingZeros(self: AcadDimRotatedClass) -> bool

Set: SuppressTrailingZeros(self: AcadDimRotatedClass) = value
"""

    SuppressZeroFeet = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SuppressZeroFeet(self: AcadDimRotatedClass) -> bool

Set: SuppressZeroFeet(self: AcadDimRotatedClass) = value
"""

    SuppressZeroInches = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SuppressZeroInches(self: AcadDimRotatedClass) -> bool

Set: SuppressZeroInches(self: AcadDimRotatedClass) = value
"""

    TextColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextColor(self: AcadDimRotatedClass) -> ACAD_COLOR

Set: TextColor(self: AcadDimRotatedClass) = value
"""

    TextFill = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextFill(self: AcadDimRotatedClass) -> bool

Set: TextFill(self: AcadDimRotatedClass) = value
"""

    TextFillColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextFillColor(self: AcadDimRotatedClass) -> ACAD_COLOR

Set: TextFillColor(self: AcadDimRotatedClass) = value
"""

    TextGap = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextGap(self: AcadDimRotatedClass) -> float

Set: TextGap(self: AcadDimRotatedClass) = value
"""

    TextHeight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextHeight(self: AcadDimRotatedClass) -> float

Set: TextHeight(self: AcadDimRotatedClass) = value
"""

    TextInside = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextInside(self: AcadDimRotatedClass) -> bool

Set: TextInside(self: AcadDimRotatedClass) = value
"""

    TextInsideAlign = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextInsideAlign(self: AcadDimRotatedClass) -> bool

Set: TextInsideAlign(self: AcadDimRotatedClass) = value
"""

    TextMovement = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextMovement(self: AcadDimRotatedClass) -> AcDimTextMovement

Set: TextMovement(self: AcadDimRotatedClass) = value
"""

    TextOutsideAlign = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextOutsideAlign(self: AcadDimRotatedClass) -> bool

Set: TextOutsideAlign(self: AcadDimRotatedClass) = value
"""

    TextOverride = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextOverride(self: AcadDimRotatedClass) -> str

Set: TextOverride(self: AcadDimRotatedClass) = value
"""

    TextPosition = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextPosition(self: AcadDimRotatedClass) -> object

Set: TextPosition(self: AcadDimRotatedClass) = value
"""

    TextPrefix = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextPrefix(self: AcadDimRotatedClass) -> str

Set: TextPrefix(self: AcadDimRotatedClass) = value
"""

    TextRotation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextRotation(self: AcadDimRotatedClass) -> float

Set: TextRotation(self: AcadDimRotatedClass) = value
"""

    TextStyle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextStyle(self: AcadDimRotatedClass) -> str

Set: TextStyle(self: AcadDimRotatedClass) = value
"""

    TextSuffix = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextSuffix(self: AcadDimRotatedClass) -> str

Set: TextSuffix(self: AcadDimRotatedClass) = value
"""

    ToleranceDisplay = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceDisplay(self: AcadDimRotatedClass) -> AcDimToleranceMethod

Set: ToleranceDisplay(self: AcadDimRotatedClass) = value
"""

    ToleranceHeightScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceHeightScale(self: AcadDimRotatedClass) -> float

Set: ToleranceHeightScale(self: AcadDimRotatedClass) = value
"""

    ToleranceJustification = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceJustification(self: AcadDimRotatedClass) -> AcDimToleranceJustify

Set: ToleranceJustification(self: AcadDimRotatedClass) = value
"""

    ToleranceLowerLimit = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceLowerLimit(self: AcadDimRotatedClass) -> float

Set: ToleranceLowerLimit(self: AcadDimRotatedClass) = value
"""

    TolerancePrecision = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TolerancePrecision(self: AcadDimRotatedClass) -> AcDimPrecision

Set: TolerancePrecision(self: AcadDimRotatedClass) = value
"""

    ToleranceSuppressLeadingZeros = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceSuppressLeadingZeros(self: AcadDimRotatedClass) -> bool

Set: ToleranceSuppressLeadingZeros(self: AcadDimRotatedClass) = value
"""

    ToleranceSuppressTrailingZeros = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceSuppressTrailingZeros(self: AcadDimRotatedClass) -> bool

Set: ToleranceSuppressTrailingZeros(self: AcadDimRotatedClass) = value
"""

    ToleranceSuppressZeroFeet = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceSuppressZeroFeet(self: AcadDimRotatedClass) -> bool

Set: ToleranceSuppressZeroFeet(self: AcadDimRotatedClass) = value
"""

    ToleranceSuppressZeroInches = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceSuppressZeroInches(self: AcadDimRotatedClass) -> bool

Set: ToleranceSuppressZeroInches(self: AcadDimRotatedClass) = value
"""

    ToleranceUpperLimit = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ToleranceUpperLimit(self: AcadDimRotatedClass) -> float

Set: ToleranceUpperLimit(self: AcadDimRotatedClass) = value
"""

    TrueColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TrueColor(self: AcadDimRotatedClass) -> AcadAcCmColor

Set: TrueColor(self: AcadDimRotatedClass) = value
"""

    UnitsFormat = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: UnitsFormat(self: AcadDimRotatedClass) -> AcDimLUnits

Set: UnitsFormat(self: AcadDimRotatedClass) = value
"""

    VerticalTextPosition = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VerticalTextPosition(self: AcadDimRotatedClass) -> AcDimVerticalJustification

Set: VerticalTextPosition(self: AcadDimRotatedClass) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: AcadDimRotatedClass) -> bool

Set: Visible(self: AcadDimRotatedClass) = value
"""


    Modified = None


class IAcadDimStyle(IAcadObject):
    # no doc
    def CopyFrom(self, StyleSource):
        """ CopyFrom(self: IAcadDimStyle, StyleSource: object) """
        pass

    def Delete(self):
        """ Delete(self: IAcadDimStyle) """
        pass

    def Erase(self):
        """ Erase(self: IAcadDimStyle) """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: IAcadDimStyle) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: IAcadDimStyle, AppName: str) -> (object, object) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: IAcadDimStyle, XDataType: object, XDataValue: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IAcadDimStyle) -> object

"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: IAcadDimStyle) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: IAcadDimStyle) -> object

"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: IAcadDimStyle) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: IAcadDimStyle) -> bool

"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: IAcadDimStyle) -> str

Set: Name(self: IAcadDimStyle) = value
"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: IAcadDimStyle) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: IAcadDimStyle) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: IAcadDimStyle) -> Int64

"""



class AcadDimStyle(IAcadDimStyle, IAcadObject, IAcadObjectEvents_Event):
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class AcadDimStyleClass(__ComObject):
    # no doc
    def add_Modified(self, A_1):
        """ add_Modified(self: AcadDimStyleClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def CopyFrom(self, StyleSource):
        """ CopyFrom(self: AcadDimStyleClass, StyleSource: object) """
        pass

    def Delete(self):
        """ Delete(self: AcadDimStyleClass) """
        pass

    def Erase(self):
        """ Erase(self: AcadDimStyleClass) """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: AcadDimStyleClass) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: AcadDimStyleClass, AppName: str) -> (object, object) """
        pass

    def remove_Modified(self, A_1):
        """ remove_Modified(self: AcadDimStyleClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: AcadDimStyleClass, XDataType: object, XDataValue: object) """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: AcadDimStyleClass) -> object

"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: AcadDimStyleClass) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: AcadDimStyleClass) -> object

"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: AcadDimStyleClass) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: AcadDimStyleClass) -> bool

"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: AcadDimStyleClass) -> str

Set: Name(self: AcadDimStyleClass) = value
"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: AcadDimStyleClass) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: AcadDimStyleClass) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: AcadDimStyleClass) -> Int64

"""


    Modified = None


class IAcadDimStyles(IAcadObject, IEnumerable):
    # no doc
    def Add(self, Name):
        """ Add(self: IAcadDimStyles, Name: str) -> AcadDimStyle """
        pass

    def Delete(self):
        """ Delete(self: IAcadDimStyles) """
        pass

    def Erase(self):
        """ Erase(self: IAcadDimStyles) """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: IAcadDimStyles) -> IEnumerator """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: IAcadDimStyles) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: IAcadDimStyles, AppName: str) -> (object, object) """
        pass

    def Item(self, Index):
        """ Item(self: IAcadDimStyles, Index: object) -> AcadDimStyle """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: IAcadDimStyles, XDataType: object, XDataValue: object) """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerable) -> object """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IAcadDimStyles) -> object

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: IAcadDimStyles) -> int

"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: IAcadDimStyles) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: IAcadDimStyles) -> object

"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: IAcadDimStyles) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: IAcadDimStyles) -> bool

"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: IAcadDimStyles) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: IAcadDimStyles) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: IAcadDimStyles) -> Int64

"""



class AcadDimStyles(IAcadDimStyles, IAcadObject, IEnumerable, IAcadObjectEvents_Event):
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerable) -> object """
        pass


class AcadDimStylesClass(__ComObject):
    # no doc
    def Add(self, Name):
        """ Add(self: AcadDimStylesClass, Name: str) -> AcadDimStyle """
        pass

    def add_Modified(self, A_1):
        """ add_Modified(self: AcadDimStylesClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def Delete(self):
        """ Delete(self: AcadDimStylesClass) """
        pass

    def Erase(self):
        """ Erase(self: AcadDimStylesClass) """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: AcadDimStylesClass) -> IEnumerator """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: AcadDimStylesClass) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: AcadDimStylesClass, AppName: str) -> (object, object) """
        pass

    def Item(self, Index):
        """ Item(self: AcadDimStylesClass, Index: object) -> AcadDimStyle """
        pass

    def remove_Modified(self, A_1):
        """ remove_Modified(self: AcadDimStylesClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: AcadDimStylesClass, XDataType: object, XDataValue: object) """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerable) -> object """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: AcadDimStylesClass) -> object

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: AcadDimStylesClass) -> int

"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: AcadDimStylesClass) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: AcadDimStylesClass) -> object

"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: AcadDimStylesClass) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: AcadDimStylesClass) -> bool

"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: AcadDimStylesClass) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: AcadDimStylesClass) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: AcadDimStylesClass) -> Int64

"""


    Modified = None


class AcadDwfUnderlay(IAcadUnderlay, IAcadEntity, IAcadObject, IAcadObjectEvents_Event):
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class AcadDwfUnderlayClass(__ComObject):
    # no doc
    def add_Modified(self, A_1):
        """ add_Modified(self: AcadDwfUnderlayClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def ArrayPolar(self, NumberOfObjects, AngleToFill, CenterPoint):
        """ ArrayPolar(self: AcadDwfUnderlayClass, NumberOfObjects: int, AngleToFill: float, CenterPoint: object) -> object """
        pass

    def ArrayRectangular(self, NumberOfRows, NumberOfColumns, NumberOfLevels, DistBetweenRows, DistBetweenCols, DistBetweenLevels):
        """ ArrayRectangular(self: AcadDwfUnderlayClass, NumberOfRows: int, NumberOfColumns: int, NumberOfLevels: int, DistBetweenRows: float, DistBetweenCols: float, DistBetweenLevels: float) -> object """
        pass

    def ClipBoundary(self, boundry):
        """ ClipBoundary(self: AcadDwfUnderlayClass, boundry: object) """
        pass

    def Copy(self):
        """ Copy(self: AcadDwfUnderlayClass) -> object """
        pass

    def Delete(self):
        """ Delete(self: AcadDwfUnderlayClass) """
        pass

    def Erase(self):
        """ Erase(self: AcadDwfUnderlayClass) """
        pass

    def GetBoundingBox(self, MinPoint, MaxPoint):
        """ GetBoundingBox(self: AcadDwfUnderlayClass) -> (object, object) """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: AcadDwfUnderlayClass) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: AcadDwfUnderlayClass, AppName: str) -> (object, object) """
        pass

    def Highlight(self, HighlightFlag):
        """ Highlight(self: AcadDwfUnderlayClass, HighlightFlag: bool) """
        pass

    def IAcadDwfUnderlay_ArrayPolar(self, NumberOfObjects, AngleToFill, CenterPoint):
        """ IAcadDwfUnderlay_ArrayPolar(self: AcadDwfUnderlayClass, NumberOfObjects: int, AngleToFill: float, CenterPoint: object) -> object """
        pass

    def IAcadDwfUnderlay_ArrayRectangular(self, NumberOfRows, NumberOfColumns, NumberOfLevels, DistBetweenRows, DistBetweenCols, DistBetweenLevels):
        """ IAcadDwfUnderlay_ArrayRectangular(self: AcadDwfUnderlayClass, NumberOfRows: int, NumberOfColumns: int, NumberOfLevels: int, DistBetweenRows: float, DistBetweenCols: float, DistBetweenLevels: float) -> object """
        pass

    def IAcadDwfUnderlay_ClipBoundary(self, boundry):
        """ IAcadDwfUnderlay_ClipBoundary(self: AcadDwfUnderlayClass, boundry: object) """
        pass

    def IAcadDwfUnderlay_Copy(self):
        """ IAcadDwfUnderlay_Copy(self: AcadDwfUnderlayClass) -> object """
        pass

    def IAcadDwfUnderlay_Delete(self):
        """ IAcadDwfUnderlay_Delete(self: AcadDwfUnderlayClass) """
        pass

    def IAcadDwfUnderlay_Erase(self):
        """ IAcadDwfUnderlay_Erase(self: AcadDwfUnderlayClass) """
        pass

    def IAcadDwfUnderlay_GetBoundingBox(self, MinPoint, MaxPoint):
        """ IAcadDwfUnderlay_GetBoundingBox(self: AcadDwfUnderlayClass) -> (object, object) """
        pass

    def IAcadDwfUnderlay_GetExtensionDictionary(self):
        """ IAcadDwfUnderlay_GetExtensionDictionary(self: AcadDwfUnderlayClass) -> AcadDictionary """
        pass

    def IAcadDwfUnderlay_GetXData(self, AppName, XDataType, XDataValue):
        """ IAcadDwfUnderlay_GetXData(self: AcadDwfUnderlayClass, AppName: str) -> (object, object) """
        pass

    def IAcadDwfUnderlay_Highlight(self, HighlightFlag):
        """ IAcadDwfUnderlay_Highlight(self: AcadDwfUnderlayClass, HighlightFlag: bool) """
        pass

    def IAcadDwfUnderlay_IntersectWith(self, IntersectObject, option):
        """ IAcadDwfUnderlay_IntersectWith(self: AcadDwfUnderlayClass, IntersectObject: object, option: AcExtendOption) -> object """
        pass

    def IAcadDwfUnderlay_Mirror(self, Point1, Point2):
        """ IAcadDwfUnderlay_Mirror(self: AcadDwfUnderlayClass, Point1: object, Point2: object) -> object """
        pass

    def IAcadDwfUnderlay_Mirror3D(self, Point1, Point2, point3):
        """ IAcadDwfUnderlay_Mirror3D(self: AcadDwfUnderlayClass, Point1: object, Point2: object, point3: object) -> object """
        pass

    def IAcadDwfUnderlay_Move(self, FromPoint, ToPoint):
        """ IAcadDwfUnderlay_Move(self: AcadDwfUnderlayClass, FromPoint: object, ToPoint: object) """
        pass

    def IAcadDwfUnderlay_Rotate(self, BasePoint, RotationAngle):
        """ IAcadDwfUnderlay_Rotate(self: AcadDwfUnderlayClass, BasePoint: object, RotationAngle: float) """
        pass

    def IAcadDwfUnderlay_Rotate3D(self, Point1, Point2, RotationAngle):
        """ IAcadDwfUnderlay_Rotate3D(self: AcadDwfUnderlayClass, Point1: object, Point2: object, RotationAngle: float) """
        pass

    def IAcadDwfUnderlay_ScaleEntity(self, BasePoint, ScaleFactor):
        """ IAcadDwfUnderlay_ScaleEntity(self: AcadDwfUnderlayClass, BasePoint: object, ScaleFactor: float) """
        pass

    def IAcadDwfUnderlay_SetXData(self, XDataType, XDataValue):
        """ IAcadDwfUnderlay_SetXData(self: AcadDwfUnderlayClass, XDataType: object, XDataValue: object) """
        pass

    def IAcadDwfUnderlay_TransformBy(self, TransformationMatrix):
        """ IAcadDwfUnderlay_TransformBy(self: AcadDwfUnderlayClass, TransformationMatrix: object) """
        pass

    def IAcadDwfUnderlay_Update(self):
        """ IAcadDwfUnderlay_Update(self: AcadDwfUnderlayClass) """
        pass

    def IntersectWith(self, IntersectObject, option):
        """ IntersectWith(self: AcadDwfUnderlayClass, IntersectObject: object, option: AcExtendOption) -> object """
        pass

    def Mirror(self, Point1, Point2):
        """ Mirror(self: AcadDwfUnderlayClass, Point1: object, Point2: object) -> object """
        pass

    def Mirror3D(self, Point1, Point2, point3):
        """ Mirror3D(self: AcadDwfUnderlayClass, Point1: object, Point2: object, point3: object) -> object """
        pass

    def Move(self, FromPoint, ToPoint):
        """ Move(self: AcadDwfUnderlayClass, FromPoint: object, ToPoint: object) """
        pass

    def remove_Modified(self, A_1):
        """ remove_Modified(self: AcadDwfUnderlayClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def Rotate(self, BasePoint, RotationAngle):
        """ Rotate(self: AcadDwfUnderlayClass, BasePoint: object, RotationAngle: float) """
        pass

    def Rotate3D(self, Point1, Point2, RotationAngle):
        """ Rotate3D(self: AcadDwfUnderlayClass, Point1: object, Point2: object, RotationAngle: float) """
        pass

    def ScaleEntity(self, BasePoint, ScaleFactor):
        """ ScaleEntity(self: AcadDwfUnderlayClass, BasePoint: object, ScaleFactor: float) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: AcadDwfUnderlayClass, XDataType: object, XDataValue: object) """
        pass

    def TransformBy(self, TransformationMatrix):
        """ TransformBy(self: AcadDwfUnderlayClass, TransformationMatrix: object) """
        pass

    def Update(self):
        """ Update(self: AcadDwfUnderlayClass) """
        pass

    AdjustForBackground = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AdjustForBackground(self: AcadDwfUnderlayClass) -> bool

Set: AdjustForBackground(self: AcadDwfUnderlayClass) = value
"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: AcadDwfUnderlayClass) -> object

"""

    ClippingEnabled = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ClippingEnabled(self: AcadDwfUnderlayClass) -> bool

Set: ClippingEnabled(self: AcadDwfUnderlayClass) = value
"""

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: AcadDwfUnderlayClass) -> ACAD_COLOR

Set: color(self: AcadDwfUnderlayClass) = value
"""

    Contrast = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Contrast(self: AcadDwfUnderlayClass) -> int

Set: Contrast(self: AcadDwfUnderlayClass) = value
"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: AcadDwfUnderlayClass) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: AcadDwfUnderlayClass) -> object

"""

    DWFFormat = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DWFFormat(self: AcadDwfUnderlayClass) -> str

Set: DWFFormat(self: AcadDwfUnderlayClass) = value
"""

    EntityName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityName(self: AcadDwfUnderlayClass) -> str

"""

    EntityTransparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityTransparency(self: AcadDwfUnderlayClass) -> str

Set: EntityTransparency(self: AcadDwfUnderlayClass) = value
"""

    EntityType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityType(self: AcadDwfUnderlayClass) -> int

"""

    Fade = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Fade(self: AcadDwfUnderlayClass) -> int

Set: Fade(self: AcadDwfUnderlayClass) = value
"""

    File = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: File(self: AcadDwfUnderlayClass) -> str

Set: File(self: AcadDwfUnderlayClass) = value
"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: AcadDwfUnderlayClass) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: AcadDwfUnderlayClass) -> bool

"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: AcadDwfUnderlayClass) -> float

Set: Height(self: AcadDwfUnderlayClass) = value
"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: AcadDwfUnderlayClass) -> AcadHyperlinks

"""

    IAcadDwfUnderlay_AdjustForBackground = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IAcadDwfUnderlay_AdjustForBackground(self: AcadDwfUnderlayClass) -> bool

Set: IAcadDwfUnderlay_AdjustForBackground(self: AcadDwfUnderlayClass) = value
"""

    IAcadDwfUnderlay_Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IAcadDwfUnderlay_Application(self: AcadDwfUnderlayClass) -> object

"""

    IAcadDwfUnderlay_ClippingEnabled = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IAcadDwfUnderlay_ClippingEnabled(self: AcadDwfUnderlayClass) -> bool

Set: IAcadDwfUnderlay_ClippingEnabled(self: AcadDwfUnderlayClass) = value
"""

    IAcadDwfUnderlay_color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IAcadDwfUnderlay_color(self: AcadDwfUnderlayClass) -> ACAD_COLOR

Set: IAcadDwfUnderlay_color(self: AcadDwfUnderlayClass) = value
"""

    IAcadDwfUnderlay_Contrast = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IAcadDwfUnderlay_Contrast(self: AcadDwfUnderlayClass) -> int

Set: IAcadDwfUnderlay_Contrast(self: AcadDwfUnderlayClass) = value
"""

    IAcadDwfUnderlay_Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IAcadDwfUnderlay_Database(self: AcadDwfUnderlayClass) -> AcadDatabase

"""

    IAcadDwfUnderlay_Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IAcadDwfUnderlay_Document(self: AcadDwfUnderlayClass) -> object

"""

    IAcadDwfUnderlay_EntityName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IAcadDwfUnderlay_EntityName(self: AcadDwfUnderlayClass) -> str

"""

    IAcadDwfUnderlay_EntityTransparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IAcadDwfUnderlay_EntityTransparency(self: AcadDwfUnderlayClass) -> str

Set: IAcadDwfUnderlay_EntityTransparency(self: AcadDwfUnderlayClass) = value
"""

    IAcadDwfUnderlay_EntityType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IAcadDwfUnderlay_EntityType(self: AcadDwfUnderlayClass) -> int

"""

    IAcadDwfUnderlay_Fade = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IAcadDwfUnderlay_Fade(self: AcadDwfUnderlayClass) -> int

Set: IAcadDwfUnderlay_Fade(self: AcadDwfUnderlayClass) = value
"""

    IAcadDwfUnderlay_File = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IAcadDwfUnderlay_File(self: AcadDwfUnderlayClass) -> str

Set: IAcadDwfUnderlay_File(self: AcadDwfUnderlayClass) = value
"""

    IAcadDwfUnderlay_Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IAcadDwfUnderlay_Handle(self: AcadDwfUnderlayClass) -> str

"""

    IAcadDwfUnderlay_HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IAcadDwfUnderlay_HasExtensionDictionary(self: AcadDwfUnderlayClass) -> bool

"""

    IAcadDwfUnderlay_Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IAcadDwfUnderlay_Height(self: AcadDwfUnderlayClass) -> float

Set: IAcadDwfUnderlay_Height(self: AcadDwfUnderlayClass) = value
"""

    IAcadDwfUnderlay_Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IAcadDwfUnderlay_Hyperlinks(self: AcadDwfUnderlayClass) -> AcadHyperlinks

"""

    IAcadDwfUnderlay_ItemName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IAcadDwfUnderlay_ItemName(self: AcadDwfUnderlayClass) -> str

Set: IAcadDwfUnderlay_ItemName(self: AcadDwfUnderlayClass) = value
"""

    IAcadDwfUnderlay_Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IAcadDwfUnderlay_Layer(self: AcadDwfUnderlayClass) -> str

Set: IAcadDwfUnderlay_Layer(self: AcadDwfUnderlayClass) = value
"""

    IAcadDwfUnderlay_Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IAcadDwfUnderlay_Linetype(self: AcadDwfUnderlayClass) -> str

Set: IAcadDwfUnderlay_Linetype(self: AcadDwfUnderlayClass) = value
"""

    IAcadDwfUnderlay_LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IAcadDwfUnderlay_LinetypeScale(self: AcadDwfUnderlayClass) -> float

Set: IAcadDwfUnderlay_LinetypeScale(self: AcadDwfUnderlayClass) = value
"""

    IAcadDwfUnderlay_Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IAcadDwfUnderlay_Lineweight(self: AcadDwfUnderlayClass) -> ACAD_LWEIGHT

Set: IAcadDwfUnderlay_Lineweight(self: AcadDwfUnderlayClass) = value
"""

    IAcadDwfUnderlay_Material = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IAcadDwfUnderlay_Material(self: AcadDwfUnderlayClass) -> str

Set: IAcadDwfUnderlay_Material(self: AcadDwfUnderlayClass) = value
"""

    IAcadDwfUnderlay_Monochrome = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IAcadDwfUnderlay_Monochrome(self: AcadDwfUnderlayClass) -> bool

Set: IAcadDwfUnderlay_Monochrome(self: AcadDwfUnderlayClass) = value
"""

    IAcadDwfUnderlay_ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IAcadDwfUnderlay_ObjectID(self: AcadDwfUnderlayClass) -> Int64

"""

    IAcadDwfUnderlay_ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IAcadDwfUnderlay_ObjectName(self: AcadDwfUnderlayClass) -> str

"""

    IAcadDwfUnderlay_OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IAcadDwfUnderlay_OwnerID(self: AcadDwfUnderlayClass) -> Int64

"""

    IAcadDwfUnderlay_PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IAcadDwfUnderlay_PlotStyleName(self: AcadDwfUnderlayClass) -> str

Set: IAcadDwfUnderlay_PlotStyleName(self: AcadDwfUnderlayClass) = value
"""

    IAcadDwfUnderlay_Position = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IAcadDwfUnderlay_Position(self: AcadDwfUnderlayClass) -> object

Set: IAcadDwfUnderlay_Position(self: AcadDwfUnderlayClass) = value
"""

    IAcadDwfUnderlay_Rotation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IAcadDwfUnderlay_Rotation(self: AcadDwfUnderlayClass) -> float

Set: IAcadDwfUnderlay_Rotation(self: AcadDwfUnderlayClass) = value
"""

    IAcadDwfUnderlay_ScaleFactor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IAcadDwfUnderlay_ScaleFactor(self: AcadDwfUnderlayClass) -> float

Set: IAcadDwfUnderlay_ScaleFactor(self: AcadDwfUnderlayClass) = value
"""

    IAcadDwfUnderlay_TrueColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IAcadDwfUnderlay_TrueColor(self: AcadDwfUnderlayClass) -> AcadAcCmColor

Set: IAcadDwfUnderlay_TrueColor(self: AcadDwfUnderlayClass) = value
"""

    IAcadDwfUnderlay_UnderlayLayerOverrideApplied = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IAcadDwfUnderlay_UnderlayLayerOverrideApplied(self: AcadDwfUnderlayClass) -> AcUnderlayLayerOverrideType

Set: IAcadDwfUnderlay_UnderlayLayerOverrideApplied(self: AcadDwfUnderlayClass) = value
"""

    IAcadDwfUnderlay_UnderlayName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IAcadDwfUnderlay_UnderlayName(self: AcadDwfUnderlayClass) -> str

Set: IAcadDwfUnderlay_UnderlayName(self: AcadDwfUnderlayClass) = value
"""

    IAcadDwfUnderlay_UnderlayVisibility = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IAcadDwfUnderlay_UnderlayVisibility(self: AcadDwfUnderlayClass) -> bool

Set: IAcadDwfUnderlay_UnderlayVisibility(self: AcadDwfUnderlayClass) = value
"""

    IAcadDwfUnderlay_Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IAcadDwfUnderlay_Visible(self: AcadDwfUnderlayClass) -> bool

Set: IAcadDwfUnderlay_Visible(self: AcadDwfUnderlayClass) = value
"""

    IAcadDwfUnderlay_Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IAcadDwfUnderlay_Width(self: AcadDwfUnderlayClass) -> float

Set: IAcadDwfUnderlay_Width(self: AcadDwfUnderlayClass) = value
"""

    ItemName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ItemName(self: AcadDwfUnderlayClass) -> str

Set: ItemName(self: AcadDwfUnderlayClass) = value
"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layer(self: AcadDwfUnderlayClass) -> str

Set: Layer(self: AcadDwfUnderlayClass) = value
"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: AcadDwfUnderlayClass) -> str

Set: Linetype(self: AcadDwfUnderlayClass) = value
"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeScale(self: AcadDwfUnderlayClass) -> float

Set: LinetypeScale(self: AcadDwfUnderlayClass) = value
"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: AcadDwfUnderlayClass) -> ACAD_LWEIGHT

Set: Lineweight(self: AcadDwfUnderlayClass) = value
"""

    Material = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Material(self: AcadDwfUnderlayClass) -> str

Set: Material(self: AcadDwfUnderlayClass) = value
"""

    Monochrome = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Monochrome(self: AcadDwfUnderlayClass) -> bool

Set: Monochrome(self: AcadDwfUnderlayClass) = value
"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: AcadDwfUnderlayClass) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: AcadDwfUnderlayClass) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: AcadDwfUnderlayClass) -> Int64

"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: AcadDwfUnderlayClass) -> str

Set: PlotStyleName(self: AcadDwfUnderlayClass) = value
"""

    Position = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Position(self: AcadDwfUnderlayClass) -> object

Set: Position(self: AcadDwfUnderlayClass) = value
"""

    Rotation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Rotation(self: AcadDwfUnderlayClass) -> float

Set: Rotation(self: AcadDwfUnderlayClass) = value
"""

    ScaleFactor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ScaleFactor(self: AcadDwfUnderlayClass) -> float

Set: ScaleFactor(self: AcadDwfUnderlayClass) = value
"""

    TrueColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TrueColor(self: AcadDwfUnderlayClass) -> AcadAcCmColor

Set: TrueColor(self: AcadDwfUnderlayClass) = value
"""

    UnderlayLayerOverrideApplied = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: UnderlayLayerOverrideApplied(self: AcadDwfUnderlayClass) -> AcUnderlayLayerOverrideType

Set: UnderlayLayerOverrideApplied(self: AcadDwfUnderlayClass) = value
"""

    UnderlayName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: UnderlayName(self: AcadDwfUnderlayClass) -> str

Set: UnderlayName(self: AcadDwfUnderlayClass) = value
"""

    UnderlayVisibility = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: UnderlayVisibility(self: AcadDwfUnderlayClass) -> bool

Set: UnderlayVisibility(self: AcadDwfUnderlayClass) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: AcadDwfUnderlayClass) -> bool

Set: Visible(self: AcadDwfUnderlayClass) = value
"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: AcadDwfUnderlayClass) -> float

Set: Width(self: AcadDwfUnderlayClass) = value
"""


    Modified = None


class IAcadDynamicBlockReferenceProperty:
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    AllowedValues = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AllowedValues(self: IAcadDynamicBlockReferenceProperty) -> object

"""

    Description = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Description(self: IAcadDynamicBlockReferenceProperty) -> str

"""

    PropertyName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PropertyName(self: IAcadDynamicBlockReferenceProperty) -> str

"""

    ReadOnly = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ReadOnly(self: IAcadDynamicBlockReferenceProperty) -> bool

"""

    show = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: show(self: IAcadDynamicBlockReferenceProperty) -> bool

"""

    UnitsType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: UnitsType(self: IAcadDynamicBlockReferenceProperty) -> AcDynamicBlockReferencePropertyUnitsType

"""

    Value = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Value(self: IAcadDynamicBlockReferenceProperty) -> object

Set: Value(self: IAcadDynamicBlockReferenceProperty) = value
"""



class AcadDynamicBlockReferenceProperty(IAcadDynamicBlockReferenceProperty):
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class AcadDynamicBlockReferencePropertyClass(__ComObject):
    # no doc
    AllowedValues = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AllowedValues(self: AcadDynamicBlockReferencePropertyClass) -> object

"""

    Description = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Description(self: AcadDynamicBlockReferencePropertyClass) -> str

"""

    PropertyName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PropertyName(self: AcadDynamicBlockReferencePropertyClass) -> str

"""

    ReadOnly = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ReadOnly(self: AcadDynamicBlockReferencePropertyClass) -> bool

"""

    show = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: show(self: AcadDynamicBlockReferencePropertyClass) -> bool

"""

    UnitsType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: UnitsType(self: AcadDynamicBlockReferencePropertyClass) -> AcDynamicBlockReferencePropertyUnitsType

"""

    Value = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Value(self: AcadDynamicBlockReferencePropertyClass) -> object

Set: Value(self: AcadDynamicBlockReferencePropertyClass) = value
"""



class IAcadEllipse(IAcadEntity, IAcadObject):
    # no doc
    def ArrayPolar(self, NumberOfObjects, AngleToFill, CenterPoint):
        """ ArrayPolar(self: IAcadEllipse, NumberOfObjects: int, AngleToFill: float, CenterPoint: object) -> object """
        pass

    def ArrayRectangular(self, NumberOfRows, NumberOfColumns, NumberOfLevels, DistBetweenRows, DistBetweenCols, DistBetweenLevels):
        """ ArrayRectangular(self: IAcadEllipse, NumberOfRows: int, NumberOfColumns: int, NumberOfLevels: int, DistBetweenRows: float, DistBetweenCols: float, DistBetweenLevels: float) -> object """
        pass

    def Copy(self):
        """ Copy(self: IAcadEllipse) -> object """
        pass

    def Delete(self):
        """ Delete(self: IAcadEllipse) """
        pass

    def Erase(self):
        """ Erase(self: IAcadEllipse) """
        pass

    def GetBoundingBox(self, MinPoint, MaxPoint):
        """ GetBoundingBox(self: IAcadEllipse) -> (object, object) """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: IAcadEllipse) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: IAcadEllipse, AppName: str) -> (object, object) """
        pass

    def Highlight(self, HighlightFlag):
        """ Highlight(self: IAcadEllipse, HighlightFlag: bool) """
        pass

    def IntersectWith(self, IntersectObject, option):
        """ IntersectWith(self: IAcadEllipse, IntersectObject: object, option: AcExtendOption) -> object """
        pass

    def Mirror(self, Point1, Point2):
        """ Mirror(self: IAcadEllipse, Point1: object, Point2: object) -> object """
        pass

    def Mirror3D(self, Point1, Point2, point3):
        """ Mirror3D(self: IAcadEllipse, Point1: object, Point2: object, point3: object) -> object """
        pass

    def Move(self, FromPoint, ToPoint):
        """ Move(self: IAcadEllipse, FromPoint: object, ToPoint: object) """
        pass

    def Offset(self, Distance):
        """ Offset(self: IAcadEllipse, Distance: float) -> object """
        pass

    def Rotate(self, BasePoint, RotationAngle):
        """ Rotate(self: IAcadEllipse, BasePoint: object, RotationAngle: float) """
        pass

    def Rotate3D(self, Point1, Point2, RotationAngle):
        """ Rotate3D(self: IAcadEllipse, Point1: object, Point2: object, RotationAngle: float) """
        pass

    def ScaleEntity(self, BasePoint, ScaleFactor):
        """ ScaleEntity(self: IAcadEllipse, BasePoint: object, ScaleFactor: float) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: IAcadEllipse, XDataType: object, XDataValue: object) """
        pass

    def TransformBy(self, TransformationMatrix):
        """ TransformBy(self: IAcadEllipse, TransformationMatrix: object) """
        pass

    def Update(self):
        """ Update(self: IAcadEllipse) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IAcadEllipse) -> object

"""

    Area = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Area(self: IAcadEllipse) -> float

"""

    Center = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Center(self: IAcadEllipse) -> object

Set: Center(self: IAcadEllipse) = value
"""

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: IAcadEllipse) -> ACAD_COLOR

Set: color(self: IAcadEllipse) = value
"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: IAcadEllipse) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: IAcadEllipse) -> object

"""

    EndAngle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EndAngle(self: IAcadEllipse) -> float

Set: EndAngle(self: IAcadEllipse) = value
"""

    EndParameter = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EndParameter(self: IAcadEllipse) -> float

Set: EndParameter(self: IAcadEllipse) = value
"""

    EndPoint = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EndPoint(self: IAcadEllipse) -> object

"""

    EntityName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityName(self: IAcadEllipse) -> str

"""

    EntityTransparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityTransparency(self: IAcadEllipse) -> str

Set: EntityTransparency(self: IAcadEllipse) = value
"""

    EntityType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityType(self: IAcadEllipse) -> int

"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: IAcadEllipse) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: IAcadEllipse) -> bool

"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: IAcadEllipse) -> AcadHyperlinks

"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layer(self: IAcadEllipse) -> str

Set: Layer(self: IAcadEllipse) = value
"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: IAcadEllipse) -> str

Set: Linetype(self: IAcadEllipse) = value
"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeScale(self: IAcadEllipse) -> float

Set: LinetypeScale(self: IAcadEllipse) = value
"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: IAcadEllipse) -> ACAD_LWEIGHT

Set: Lineweight(self: IAcadEllipse) = value
"""

    MajorAxis = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MajorAxis(self: IAcadEllipse) -> object

Set: MajorAxis(self: IAcadEllipse) = value
"""

    MajorRadius = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MajorRadius(self: IAcadEllipse) -> float

Set: MajorRadius(self: IAcadEllipse) = value
"""

    Material = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Material(self: IAcadEllipse) -> str

Set: Material(self: IAcadEllipse) = value
"""

    MinorAxis = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MinorAxis(self: IAcadEllipse) -> object

"""

    MinorRadius = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MinorRadius(self: IAcadEllipse) -> float

Set: MinorRadius(self: IAcadEllipse) = value
"""

    Normal = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Normal(self: IAcadEllipse) -> object

Set: Normal(self: IAcadEllipse) = value
"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: IAcadEllipse) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: IAcadEllipse) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: IAcadEllipse) -> Int64

"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: IAcadEllipse) -> str

Set: PlotStyleName(self: IAcadEllipse) = value
"""

    RadiusRatio = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RadiusRatio(self: IAcadEllipse) -> float

Set: RadiusRatio(self: IAcadEllipse) = value
"""

    StartAngle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: StartAngle(self: IAcadEllipse) -> float

Set: StartAngle(self: IAcadEllipse) = value
"""

    StartParameter = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: StartParameter(self: IAcadEllipse) -> float

Set: StartParameter(self: IAcadEllipse) = value
"""

    StartPoint = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: StartPoint(self: IAcadEllipse) -> object

"""

    TrueColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TrueColor(self: IAcadEllipse) -> AcadAcCmColor

Set: TrueColor(self: IAcadEllipse) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: IAcadEllipse) -> bool

Set: Visible(self: IAcadEllipse) = value
"""



class AcadEllipse(IAcadEllipse, IAcadEntity, IAcadObject, IAcadObjectEvents_Event):
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class AcadEllipseClass(__ComObject):
    # no doc
    def add_Modified(self, A_1):
        """ add_Modified(self: AcadEllipseClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def ArrayPolar(self, NumberOfObjects, AngleToFill, CenterPoint):
        """ ArrayPolar(self: AcadEllipseClass, NumberOfObjects: int, AngleToFill: float, CenterPoint: object) -> object """
        pass

    def ArrayRectangular(self, NumberOfRows, NumberOfColumns, NumberOfLevels, DistBetweenRows, DistBetweenCols, DistBetweenLevels):
        """ ArrayRectangular(self: AcadEllipseClass, NumberOfRows: int, NumberOfColumns: int, NumberOfLevels: int, DistBetweenRows: float, DistBetweenCols: float, DistBetweenLevels: float) -> object """
        pass

    def Copy(self):
        """ Copy(self: AcadEllipseClass) -> object """
        pass

    def Delete(self):
        """ Delete(self: AcadEllipseClass) """
        pass

    def Erase(self):
        """ Erase(self: AcadEllipseClass) """
        pass

    def GetBoundingBox(self, MinPoint, MaxPoint):
        """ GetBoundingBox(self: AcadEllipseClass) -> (object, object) """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: AcadEllipseClass) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: AcadEllipseClass, AppName: str) -> (object, object) """
        pass

    def Highlight(self, HighlightFlag):
        """ Highlight(self: AcadEllipseClass, HighlightFlag: bool) """
        pass

    def IntersectWith(self, IntersectObject, option):
        """ IntersectWith(self: AcadEllipseClass, IntersectObject: object, option: AcExtendOption) -> object """
        pass

    def Mirror(self, Point1, Point2):
        """ Mirror(self: AcadEllipseClass, Point1: object, Point2: object) -> object """
        pass

    def Mirror3D(self, Point1, Point2, point3):
        """ Mirror3D(self: AcadEllipseClass, Point1: object, Point2: object, point3: object) -> object """
        pass

    def Move(self, FromPoint, ToPoint):
        """ Move(self: AcadEllipseClass, FromPoint: object, ToPoint: object) """
        pass

    def Offset(self, Distance):
        """ Offset(self: AcadEllipseClass, Distance: float) -> object """
        pass

    def remove_Modified(self, A_1):
        """ remove_Modified(self: AcadEllipseClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def Rotate(self, BasePoint, RotationAngle):
        """ Rotate(self: AcadEllipseClass, BasePoint: object, RotationAngle: float) """
        pass

    def Rotate3D(self, Point1, Point2, RotationAngle):
        """ Rotate3D(self: AcadEllipseClass, Point1: object, Point2: object, RotationAngle: float) """
        pass

    def ScaleEntity(self, BasePoint, ScaleFactor):
        """ ScaleEntity(self: AcadEllipseClass, BasePoint: object, ScaleFactor: float) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: AcadEllipseClass, XDataType: object, XDataValue: object) """
        pass

    def TransformBy(self, TransformationMatrix):
        """ TransformBy(self: AcadEllipseClass, TransformationMatrix: object) """
        pass

    def Update(self):
        """ Update(self: AcadEllipseClass) """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: AcadEllipseClass) -> object

"""

    Area = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Area(self: AcadEllipseClass) -> float

"""

    Center = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Center(self: AcadEllipseClass) -> object

Set: Center(self: AcadEllipseClass) = value
"""

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: AcadEllipseClass) -> ACAD_COLOR

Set: color(self: AcadEllipseClass) = value
"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: AcadEllipseClass) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: AcadEllipseClass) -> object

"""

    EndAngle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EndAngle(self: AcadEllipseClass) -> float

Set: EndAngle(self: AcadEllipseClass) = value
"""

    EndParameter = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EndParameter(self: AcadEllipseClass) -> float

Set: EndParameter(self: AcadEllipseClass) = value
"""

    EndPoint = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EndPoint(self: AcadEllipseClass) -> object

"""

    EntityName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityName(self: AcadEllipseClass) -> str

"""

    EntityTransparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityTransparency(self: AcadEllipseClass) -> str

Set: EntityTransparency(self: AcadEllipseClass) = value
"""

    EntityType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityType(self: AcadEllipseClass) -> int

"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: AcadEllipseClass) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: AcadEllipseClass) -> bool

"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: AcadEllipseClass) -> AcadHyperlinks

"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layer(self: AcadEllipseClass) -> str

Set: Layer(self: AcadEllipseClass) = value
"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: AcadEllipseClass) -> str

Set: Linetype(self: AcadEllipseClass) = value
"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeScale(self: AcadEllipseClass) -> float

Set: LinetypeScale(self: AcadEllipseClass) = value
"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: AcadEllipseClass) -> ACAD_LWEIGHT

Set: Lineweight(self: AcadEllipseClass) = value
"""

    MajorAxis = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MajorAxis(self: AcadEllipseClass) -> object

Set: MajorAxis(self: AcadEllipseClass) = value
"""

    MajorRadius = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MajorRadius(self: AcadEllipseClass) -> float

Set: MajorRadius(self: AcadEllipseClass) = value
"""

    Material = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Material(self: AcadEllipseClass) -> str

Set: Material(self: AcadEllipseClass) = value
"""

    MinorAxis = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MinorAxis(self: AcadEllipseClass) -> object

"""

    MinorRadius = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MinorRadius(self: AcadEllipseClass) -> float

Set: MinorRadius(self: AcadEllipseClass) = value
"""

    Normal = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Normal(self: AcadEllipseClass) -> object

Set: Normal(self: AcadEllipseClass) = value
"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: AcadEllipseClass) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: AcadEllipseClass) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: AcadEllipseClass) -> Int64

"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: AcadEllipseClass) -> str

Set: PlotStyleName(self: AcadEllipseClass) = value
"""

    RadiusRatio = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RadiusRatio(self: AcadEllipseClass) -> float

Set: RadiusRatio(self: AcadEllipseClass) = value
"""

    StartAngle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: StartAngle(self: AcadEllipseClass) -> float

Set: StartAngle(self: AcadEllipseClass) = value
"""

    StartParameter = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: StartParameter(self: AcadEllipseClass) -> float

Set: StartParameter(self: AcadEllipseClass) = value
"""

    StartPoint = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: StartPoint(self: AcadEllipseClass) -> object

"""

    TrueColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TrueColor(self: AcadEllipseClass) -> AcadAcCmColor

Set: TrueColor(self: AcadEllipseClass) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: AcadEllipseClass) -> bool

Set: Visible(self: AcadEllipseClass) = value
"""


    Modified = None


class AcadEntity(IAcadEntity, IAcadObject, IAcadObjectEvents_Event):
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class AcadEntityClass(__ComObject):
    # no doc
    def add_Modified(self, A_1):
        """ add_Modified(self: AcadEntityClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def ArrayPolar(self, NumberOfObjects, AngleToFill, CenterPoint):
        """ ArrayPolar(self: AcadEntityClass, NumberOfObjects: int, AngleToFill: float, CenterPoint: object) -> object """
        pass

    def ArrayRectangular(self, NumberOfRows, NumberOfColumns, NumberOfLevels, DistBetweenRows, DistBetweenCols, DistBetweenLevels):
        """ ArrayRectangular(self: AcadEntityClass, NumberOfRows: int, NumberOfColumns: int, NumberOfLevels: int, DistBetweenRows: float, DistBetweenCols: float, DistBetweenLevels: float) -> object """
        pass

    def Copy(self):
        """ Copy(self: AcadEntityClass) -> object """
        pass

    def Delete(self):
        """ Delete(self: AcadEntityClass) """
        pass

    def Erase(self):
        """ Erase(self: AcadEntityClass) """
        pass

    def GetBoundingBox(self, MinPoint, MaxPoint):
        """ GetBoundingBox(self: AcadEntityClass) -> (object, object) """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: AcadEntityClass) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: AcadEntityClass, AppName: str) -> (object, object) """
        pass

    def Highlight(self, HighlightFlag):
        """ Highlight(self: AcadEntityClass, HighlightFlag: bool) """
        pass

    def IntersectWith(self, IntersectObject, option):
        """ IntersectWith(self: AcadEntityClass, IntersectObject: object, option: AcExtendOption) -> object """
        pass

    def Mirror(self, Point1, Point2):
        """ Mirror(self: AcadEntityClass, Point1: object, Point2: object) -> object """
        pass

    def Mirror3D(self, Point1, Point2, point3):
        """ Mirror3D(self: AcadEntityClass, Point1: object, Point2: object, point3: object) -> object """
        pass

    def Move(self, FromPoint, ToPoint):
        """ Move(self: AcadEntityClass, FromPoint: object, ToPoint: object) """
        pass

    def remove_Modified(self, A_1):
        """ remove_Modified(self: AcadEntityClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def Rotate(self, BasePoint, RotationAngle):
        """ Rotate(self: AcadEntityClass, BasePoint: object, RotationAngle: float) """
        pass

    def Rotate3D(self, Point1, Point2, RotationAngle):
        """ Rotate3D(self: AcadEntityClass, Point1: object, Point2: object, RotationAngle: float) """
        pass

    def ScaleEntity(self, BasePoint, ScaleFactor):
        """ ScaleEntity(self: AcadEntityClass, BasePoint: object, ScaleFactor: float) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: AcadEntityClass, XDataType: object, XDataValue: object) """
        pass

    def TransformBy(self, TransformationMatrix):
        """ TransformBy(self: AcadEntityClass, TransformationMatrix: object) """
        pass

    def Update(self):
        """ Update(self: AcadEntityClass) """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: AcadEntityClass) -> object

"""

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: AcadEntityClass) -> ACAD_COLOR

Set: color(self: AcadEntityClass) = value
"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: AcadEntityClass) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: AcadEntityClass) -> object

"""

    EntityName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityName(self: AcadEntityClass) -> str

"""

    EntityTransparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityTransparency(self: AcadEntityClass) -> str

Set: EntityTransparency(self: AcadEntityClass) = value
"""

    EntityType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityType(self: AcadEntityClass) -> int

"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: AcadEntityClass) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: AcadEntityClass) -> bool

"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: AcadEntityClass) -> AcadHyperlinks

"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layer(self: AcadEntityClass) -> str

Set: Layer(self: AcadEntityClass) = value
"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: AcadEntityClass) -> str

Set: Linetype(self: AcadEntityClass) = value
"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeScale(self: AcadEntityClass) -> float

Set: LinetypeScale(self: AcadEntityClass) = value
"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: AcadEntityClass) -> ACAD_LWEIGHT

Set: Lineweight(self: AcadEntityClass) = value
"""

    Material = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Material(self: AcadEntityClass) -> str

Set: Material(self: AcadEntityClass) = value
"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: AcadEntityClass) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: AcadEntityClass) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: AcadEntityClass) -> Int64

"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: AcadEntityClass) -> str

Set: PlotStyleName(self: AcadEntityClass) = value
"""

    TrueColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TrueColor(self: AcadEntityClass) -> AcadAcCmColor

Set: TrueColor(self: AcadEntityClass) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: AcadEntityClass) -> bool

Set: Visible(self: AcadEntityClass) = value
"""


    Modified = None


class AcadExternalReference(IAcadExternalReference, IAcadBlockReference, IAcadEntity, IAcadObject, IAcadObjectEvents_Event):
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class AcadExternalReferenceClass(__ComObject):
    # no doc
    def add_Modified(self, A_1):
        """ add_Modified(self: AcadExternalReferenceClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def ArrayPolar(self, NumberOfObjects, AngleToFill, CenterPoint):
        """ ArrayPolar(self: AcadExternalReferenceClass, NumberOfObjects: int, AngleToFill: float, CenterPoint: object) -> object """
        pass

    def ArrayRectangular(self, NumberOfRows, NumberOfColumns, NumberOfLevels, DistBetweenRows, DistBetweenCols, DistBetweenLevels):
        """ ArrayRectangular(self: AcadExternalReferenceClass, NumberOfRows: int, NumberOfColumns: int, NumberOfLevels: int, DistBetweenRows: float, DistBetweenCols: float, DistBetweenLevels: float) -> object """
        pass

    def ConvertToAnonymousBlock(self):
        """ ConvertToAnonymousBlock(self: AcadExternalReferenceClass) """
        pass

    def ConvertToStaticBlock(self, newBlockName):
        """ ConvertToStaticBlock(self: AcadExternalReferenceClass, newBlockName: str) """
        pass

    def Copy(self):
        """ Copy(self: AcadExternalReferenceClass) -> object """
        pass

    def Delete(self):
        """ Delete(self: AcadExternalReferenceClass) """
        pass

    def Erase(self):
        """ Erase(self: AcadExternalReferenceClass) """
        pass

    def Explode(self):
        """ Explode(self: AcadExternalReferenceClass) -> object """
        pass

    def GetAttributes(self):
        """ GetAttributes(self: AcadExternalReferenceClass) -> object """
        pass

    def GetBoundingBox(self, MinPoint, MaxPoint):
        """ GetBoundingBox(self: AcadExternalReferenceClass) -> (object, object) """
        pass

    def GetConstantAttributes(self):
        """ GetConstantAttributes(self: AcadExternalReferenceClass) -> object """
        pass

    def GetDynamicBlockProperties(self):
        """ GetDynamicBlockProperties(self: AcadExternalReferenceClass) -> object """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: AcadExternalReferenceClass) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: AcadExternalReferenceClass, AppName: str) -> (object, object) """
        pass

    def Highlight(self, HighlightFlag):
        """ Highlight(self: AcadExternalReferenceClass, HighlightFlag: bool) """
        pass

    def IntersectWith(self, IntersectObject, option):
        """ IntersectWith(self: AcadExternalReferenceClass, IntersectObject: object, option: AcExtendOption) -> object """
        pass

    def Mirror(self, Point1, Point2):
        """ Mirror(self: AcadExternalReferenceClass, Point1: object, Point2: object) -> object """
        pass

    def Mirror3D(self, Point1, Point2, point3):
        """ Mirror3D(self: AcadExternalReferenceClass, Point1: object, Point2: object, point3: object) -> object """
        pass

    def Move(self, FromPoint, ToPoint):
        """ Move(self: AcadExternalReferenceClass, FromPoint: object, ToPoint: object) """
        pass

    def remove_Modified(self, A_1):
        """ remove_Modified(self: AcadExternalReferenceClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def ResetBlock(self):
        """ ResetBlock(self: AcadExternalReferenceClass) """
        pass

    def Rotate(self, BasePoint, RotationAngle):
        """ Rotate(self: AcadExternalReferenceClass, BasePoint: object, RotationAngle: float) """
        pass

    def Rotate3D(self, Point1, Point2, RotationAngle):
        """ Rotate3D(self: AcadExternalReferenceClass, Point1: object, Point2: object, RotationAngle: float) """
        pass

    def ScaleEntity(self, BasePoint, ScaleFactor):
        """ ScaleEntity(self: AcadExternalReferenceClass, BasePoint: object, ScaleFactor: float) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: AcadExternalReferenceClass, XDataType: object, XDataValue: object) """
        pass

    def TransformBy(self, TransformationMatrix):
        """ TransformBy(self: AcadExternalReferenceClass, TransformationMatrix: object) """
        pass

    def Update(self):
        """ Update(self: AcadExternalReferenceClass) """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: AcadExternalReferenceClass) -> object

"""

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: AcadExternalReferenceClass) -> ACAD_COLOR

Set: color(self: AcadExternalReferenceClass) = value
"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: AcadExternalReferenceClass) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: AcadExternalReferenceClass) -> object

"""

    EffectiveName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EffectiveName(self: AcadExternalReferenceClass) -> str

"""

    EntityName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityName(self: AcadExternalReferenceClass) -> str

"""

    EntityTransparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityTransparency(self: AcadExternalReferenceClass) -> str

Set: EntityTransparency(self: AcadExternalReferenceClass) = value
"""

    EntityType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityType(self: AcadExternalReferenceClass) -> int

"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: AcadExternalReferenceClass) -> str

"""

    HasAttributes = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasAttributes(self: AcadExternalReferenceClass) -> bool

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: AcadExternalReferenceClass) -> bool

"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: AcadExternalReferenceClass) -> AcadHyperlinks

"""

    InsertionPoint = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: InsertionPoint(self: AcadExternalReferenceClass) -> object

Set: InsertionPoint(self: AcadExternalReferenceClass) = value
"""

    InsUnits = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: InsUnits(self: AcadExternalReferenceClass) -> str

"""

    InsUnitsFactor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: InsUnitsFactor(self: AcadExternalReferenceClass) -> float

"""

    IsDynamicBlock = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IsDynamicBlock(self: AcadExternalReferenceClass) -> bool

"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layer(self: AcadExternalReferenceClass) -> str

Set: Layer(self: AcadExternalReferenceClass) = value
"""

    LayerPropertyOverrides = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LayerPropertyOverrides(self: AcadExternalReferenceClass) -> bool

"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: AcadExternalReferenceClass) -> str

Set: Linetype(self: AcadExternalReferenceClass) = value
"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeScale(self: AcadExternalReferenceClass) -> float

Set: LinetypeScale(self: AcadExternalReferenceClass) = value
"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: AcadExternalReferenceClass) -> ACAD_LWEIGHT

Set: Lineweight(self: AcadExternalReferenceClass) = value
"""

    Material = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Material(self: AcadExternalReferenceClass) -> str

Set: Material(self: AcadExternalReferenceClass) = value
"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: AcadExternalReferenceClass) -> str

Set: Name(self: AcadExternalReferenceClass) = value
"""

    Normal = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Normal(self: AcadExternalReferenceClass) -> object

Set: Normal(self: AcadExternalReferenceClass) = value
"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: AcadExternalReferenceClass) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: AcadExternalReferenceClass) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: AcadExternalReferenceClass) -> Int64

"""

    Path = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Path(self: AcadExternalReferenceClass) -> str

Set: Path(self: AcadExternalReferenceClass) = value
"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: AcadExternalReferenceClass) -> str

Set: PlotStyleName(self: AcadExternalReferenceClass) = value
"""

    Rotation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Rotation(self: AcadExternalReferenceClass) -> float

Set: Rotation(self: AcadExternalReferenceClass) = value
"""

    TrueColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TrueColor(self: AcadExternalReferenceClass) -> AcadAcCmColor

Set: TrueColor(self: AcadExternalReferenceClass) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: AcadExternalReferenceClass) -> bool

Set: Visible(self: AcadExternalReferenceClass) = value
"""

    XEffectiveScaleFactor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: XEffectiveScaleFactor(self: AcadExternalReferenceClass) -> float

Set: XEffectiveScaleFactor(self: AcadExternalReferenceClass) = value
"""

    XScaleFactor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: XScaleFactor(self: AcadExternalReferenceClass) -> float

Set: XScaleFactor(self: AcadExternalReferenceClass) = value
"""

    YEffectiveScaleFactor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: YEffectiveScaleFactor(self: AcadExternalReferenceClass) -> float

Set: YEffectiveScaleFactor(self: AcadExternalReferenceClass) = value
"""

    YScaleFactor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: YScaleFactor(self: AcadExternalReferenceClass) -> float

Set: YScaleFactor(self: AcadExternalReferenceClass) = value
"""

    ZEffectiveScaleFactor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ZEffectiveScaleFactor(self: AcadExternalReferenceClass) -> float

Set: ZEffectiveScaleFactor(self: AcadExternalReferenceClass) = value
"""

    ZScaleFactor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ZScaleFactor(self: AcadExternalReferenceClass) -> float

Set: ZScaleFactor(self: AcadExternalReferenceClass) = value
"""


    Modified = None


class IAcadSurface(IAcadEntity, IAcadObject):
    # no doc
    def ArrayPolar(self, NumberOfObjects, AngleToFill, CenterPoint):
        """ ArrayPolar(self: IAcadSurface, NumberOfObjects: int, AngleToFill: float, CenterPoint: object) -> object """
        pass

    def ArrayRectangular(self, NumberOfRows, NumberOfColumns, NumberOfLevels, DistBetweenRows, DistBetweenCols, DistBetweenLevels):
        """ ArrayRectangular(self: IAcadSurface, NumberOfRows: int, NumberOfColumns: int, NumberOfLevels: int, DistBetweenRows: float, DistBetweenCols: float, DistBetweenLevels: float) -> object """
        pass

    def Copy(self):
        """ Copy(self: IAcadSurface) -> object """
        pass

    def Delete(self):
        """ Delete(self: IAcadSurface) """
        pass

    def Erase(self):
        """ Erase(self: IAcadSurface) """
        pass

    def GetBoundingBox(self, MinPoint, MaxPoint):
        """ GetBoundingBox(self: IAcadSurface) -> (object, object) """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: IAcadSurface) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: IAcadSurface, AppName: str) -> (object, object) """
        pass

    def Highlight(self, HighlightFlag):
        """ Highlight(self: IAcadSurface, HighlightFlag: bool) """
        pass

    def IntersectWith(self, IntersectObject, option):
        """ IntersectWith(self: IAcadSurface, IntersectObject: object, option: AcExtendOption) -> object """
        pass

    def Mirror(self, Point1, Point2):
        """ Mirror(self: IAcadSurface, Point1: object, Point2: object) -> object """
        pass

    def Mirror3D(self, Point1, Point2, point3):
        """ Mirror3D(self: IAcadSurface, Point1: object, Point2: object, point3: object) -> object """
        pass

    def Move(self, FromPoint, ToPoint):
        """ Move(self: IAcadSurface, FromPoint: object, ToPoint: object) """
        pass

    def Rotate(self, BasePoint, RotationAngle):
        """ Rotate(self: IAcadSurface, BasePoint: object, RotationAngle: float) """
        pass

    def Rotate3D(self, Point1, Point2, RotationAngle):
        """ Rotate3D(self: IAcadSurface, Point1: object, Point2: object, RotationAngle: float) """
        pass

    def ScaleEntity(self, BasePoint, ScaleFactor):
        """ ScaleEntity(self: IAcadSurface, BasePoint: object, ScaleFactor: float) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: IAcadSurface, XDataType: object, XDataValue: object) """
        pass

    def TransformBy(self, TransformationMatrix):
        """ TransformBy(self: IAcadSurface, TransformationMatrix: object) """
        pass

    def Update(self):
        """ Update(self: IAcadSurface) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IAcadSurface) -> object

"""

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: IAcadSurface) -> ACAD_COLOR

Set: color(self: IAcadSurface) = value
"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: IAcadSurface) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: IAcadSurface) -> object

"""

    EdgeExtensionDistances = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EdgeExtensionDistances(self: IAcadSurface) -> object

Set: EdgeExtensionDistances(self: IAcadSurface) = value
"""

    EntityName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityName(self: IAcadSurface) -> str

"""

    EntityTransparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityTransparency(self: IAcadSurface) -> str

Set: EntityTransparency(self: IAcadSurface) = value
"""

    EntityType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityType(self: IAcadSurface) -> int

"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: IAcadSurface) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: IAcadSurface) -> bool

"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: IAcadSurface) -> AcadHyperlinks

"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layer(self: IAcadSurface) -> str

Set: Layer(self: IAcadSurface) = value
"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: IAcadSurface) -> str

Set: Linetype(self: IAcadSurface) = value
"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeScale(self: IAcadSurface) -> float

Set: LinetypeScale(self: IAcadSurface) = value
"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: IAcadSurface) -> ACAD_LWEIGHT

Set: Lineweight(self: IAcadSurface) = value
"""

    MaintainAssociativity = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MaintainAssociativity(self: IAcadSurface) -> int

Set: MaintainAssociativity(self: IAcadSurface) = value
"""

    Material = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Material(self: IAcadSurface) -> str

Set: Material(self: IAcadSurface) = value
"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: IAcadSurface) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: IAcadSurface) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: IAcadSurface) -> Int64

"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: IAcadSurface) -> str

Set: PlotStyleName(self: IAcadSurface) = value
"""

    ShowAssociativity = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowAssociativity(self: IAcadSurface) -> bool

Set: ShowAssociativity(self: IAcadSurface) = value
"""

    SurfaceType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SurfaceType(self: IAcadSurface) -> str

"""

    SurfTrimAssociativity = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SurfTrimAssociativity(self: IAcadSurface) -> object

Set: SurfTrimAssociativity(self: IAcadSurface) = value
"""

    TrueColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TrueColor(self: IAcadSurface) -> AcadAcCmColor

Set: TrueColor(self: IAcadSurface) = value
"""

    UIsolineDensity = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: UIsolineDensity(self: IAcadSurface) -> int

Set: UIsolineDensity(self: IAcadSurface) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: IAcadSurface) -> bool

Set: Visible(self: IAcadSurface) = value
"""

    VIsolineDensity = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VIsolineDensity(self: IAcadSurface) -> int

Set: VIsolineDensity(self: IAcadSurface) = value
"""

    WireframeType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: WireframeType(self: IAcadSurface) -> AcWireframeType

Set: WireframeType(self: IAcadSurface) = value
"""



class IAcadExtrudedSurface(IAcadSurface, IAcadEntity, IAcadObject):
    # no doc
    def ArrayPolar(self, NumberOfObjects, AngleToFill, CenterPoint):
        """ ArrayPolar(self: IAcadExtrudedSurface, NumberOfObjects: int, AngleToFill: float, CenterPoint: object) -> object """
        pass

    def ArrayRectangular(self, NumberOfRows, NumberOfColumns, NumberOfLevels, DistBetweenRows, DistBetweenCols, DistBetweenLevels):
        """ ArrayRectangular(self: IAcadExtrudedSurface, NumberOfRows: int, NumberOfColumns: int, NumberOfLevels: int, DistBetweenRows: float, DistBetweenCols: float, DistBetweenLevels: float) -> object """
        pass

    def Copy(self):
        """ Copy(self: IAcadExtrudedSurface) -> object """
        pass

    def Delete(self):
        """ Delete(self: IAcadExtrudedSurface) """
        pass

    def Erase(self):
        """ Erase(self: IAcadExtrudedSurface) """
        pass

    def GetBoundingBox(self, MinPoint, MaxPoint):
        """ GetBoundingBox(self: IAcadExtrudedSurface) -> (object, object) """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: IAcadExtrudedSurface) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: IAcadExtrudedSurface, AppName: str) -> (object, object) """
        pass

    def Highlight(self, HighlightFlag):
        """ Highlight(self: IAcadExtrudedSurface, HighlightFlag: bool) """
        pass

    def IntersectWith(self, IntersectObject, option):
        """ IntersectWith(self: IAcadExtrudedSurface, IntersectObject: object, option: AcExtendOption) -> object """
        pass

    def Mirror(self, Point1, Point2):
        """ Mirror(self: IAcadExtrudedSurface, Point1: object, Point2: object) -> object """
        pass

    def Mirror3D(self, Point1, Point2, point3):
        """ Mirror3D(self: IAcadExtrudedSurface, Point1: object, Point2: object, point3: object) -> object """
        pass

    def Move(self, FromPoint, ToPoint):
        """ Move(self: IAcadExtrudedSurface, FromPoint: object, ToPoint: object) """
        pass

    def Rotate(self, BasePoint, RotationAngle):
        """ Rotate(self: IAcadExtrudedSurface, BasePoint: object, RotationAngle: float) """
        pass

    def Rotate3D(self, Point1, Point2, RotationAngle):
        """ Rotate3D(self: IAcadExtrudedSurface, Point1: object, Point2: object, RotationAngle: float) """
        pass

    def ScaleEntity(self, BasePoint, ScaleFactor):
        """ ScaleEntity(self: IAcadExtrudedSurface, BasePoint: object, ScaleFactor: float) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: IAcadExtrudedSurface, XDataType: object, XDataValue: object) """
        pass

    def TransformBy(self, TransformationMatrix):
        """ TransformBy(self: IAcadExtrudedSurface, TransformationMatrix: object) """
        pass

    def Update(self):
        """ Update(self: IAcadExtrudedSurface) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IAcadExtrudedSurface) -> object

"""

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: IAcadExtrudedSurface) -> ACAD_COLOR

Set: color(self: IAcadExtrudedSurface) = value
"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: IAcadExtrudedSurface) -> AcadDatabase

"""

    Direction = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Direction(self: IAcadExtrudedSurface) -> object

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: IAcadExtrudedSurface) -> object

"""

    EdgeExtensionDistances = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EdgeExtensionDistances(self: IAcadExtrudedSurface) -> object

Set: EdgeExtensionDistances(self: IAcadExtrudedSurface) = value
"""

    EntityName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityName(self: IAcadExtrudedSurface) -> str

"""

    EntityTransparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityTransparency(self: IAcadExtrudedSurface) -> str

Set: EntityTransparency(self: IAcadExtrudedSurface) = value
"""

    EntityType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityType(self: IAcadExtrudedSurface) -> int

"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: IAcadExtrudedSurface) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: IAcadExtrudedSurface) -> bool

"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: IAcadExtrudedSurface) -> float

Set: Height(self: IAcadExtrudedSurface) = value
"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: IAcadExtrudedSurface) -> AcadHyperlinks

"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layer(self: IAcadExtrudedSurface) -> str

Set: Layer(self: IAcadExtrudedSurface) = value
"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: IAcadExtrudedSurface) -> str

Set: Linetype(self: IAcadExtrudedSurface) = value
"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeScale(self: IAcadExtrudedSurface) -> float

Set: LinetypeScale(self: IAcadExtrudedSurface) = value
"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: IAcadExtrudedSurface) -> ACAD_LWEIGHT

Set: Lineweight(self: IAcadExtrudedSurface) = value
"""

    MaintainAssociativity = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MaintainAssociativity(self: IAcadExtrudedSurface) -> int

Set: MaintainAssociativity(self: IAcadExtrudedSurface) = value
"""

    Material = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Material(self: IAcadExtrudedSurface) -> str

Set: Material(self: IAcadExtrudedSurface) = value
"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: IAcadExtrudedSurface) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: IAcadExtrudedSurface) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: IAcadExtrudedSurface) -> Int64

"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: IAcadExtrudedSurface) -> str

Set: PlotStyleName(self: IAcadExtrudedSurface) = value
"""

    ShowAssociativity = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowAssociativity(self: IAcadExtrudedSurface) -> bool

Set: ShowAssociativity(self: IAcadExtrudedSurface) = value
"""

    SurfaceType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SurfaceType(self: IAcadExtrudedSurface) -> str

"""

    SurfTrimAssociativity = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SurfTrimAssociativity(self: IAcadExtrudedSurface) -> object

Set: SurfTrimAssociativity(self: IAcadExtrudedSurface) = value
"""

    TaperAngle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TaperAngle(self: IAcadExtrudedSurface) -> float

Set: TaperAngle(self: IAcadExtrudedSurface) = value
"""

    TrueColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TrueColor(self: IAcadExtrudedSurface) -> AcadAcCmColor

Set: TrueColor(self: IAcadExtrudedSurface) = value
"""

    UIsolineDensity = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: UIsolineDensity(self: IAcadExtrudedSurface) -> int

Set: UIsolineDensity(self: IAcadExtrudedSurface) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: IAcadExtrudedSurface) -> bool

Set: Visible(self: IAcadExtrudedSurface) = value
"""

    VIsolineDensity = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VIsolineDensity(self: IAcadExtrudedSurface) -> int

Set: VIsolineDensity(self: IAcadExtrudedSurface) = value
"""

    WireframeType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: WireframeType(self: IAcadExtrudedSurface) -> AcWireframeType

Set: WireframeType(self: IAcadExtrudedSurface) = value
"""



class AcadExtrudedSurface(IAcadExtrudedSurface, IAcadSurface, IAcadEntity, IAcadObject, IAcadObjectEvents_Event):
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class AcadExtrudedSurfaceClass(__ComObject):
    # no doc
    def add_Modified(self, A_1):
        """ add_Modified(self: AcadExtrudedSurfaceClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def ArrayPolar(self, NumberOfObjects, AngleToFill, CenterPoint):
        """ ArrayPolar(self: AcadExtrudedSurfaceClass, NumberOfObjects: int, AngleToFill: float, CenterPoint: object) -> object """
        pass

    def ArrayRectangular(self, NumberOfRows, NumberOfColumns, NumberOfLevels, DistBetweenRows, DistBetweenCols, DistBetweenLevels):
        """ ArrayRectangular(self: AcadExtrudedSurfaceClass, NumberOfRows: int, NumberOfColumns: int, NumberOfLevels: int, DistBetweenRows: float, DistBetweenCols: float, DistBetweenLevels: float) -> object """
        pass

    def Copy(self):
        """ Copy(self: AcadExtrudedSurfaceClass) -> object """
        pass

    def Delete(self):
        """ Delete(self: AcadExtrudedSurfaceClass) """
        pass

    def Erase(self):
        """ Erase(self: AcadExtrudedSurfaceClass) """
        pass

    def GetBoundingBox(self, MinPoint, MaxPoint):
        """ GetBoundingBox(self: AcadExtrudedSurfaceClass) -> (object, object) """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: AcadExtrudedSurfaceClass) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: AcadExtrudedSurfaceClass, AppName: str) -> (object, object) """
        pass

    def Highlight(self, HighlightFlag):
        """ Highlight(self: AcadExtrudedSurfaceClass, HighlightFlag: bool) """
        pass

    def IntersectWith(self, IntersectObject, option):
        """ IntersectWith(self: AcadExtrudedSurfaceClass, IntersectObject: object, option: AcExtendOption) -> object """
        pass

    def Mirror(self, Point1, Point2):
        """ Mirror(self: AcadExtrudedSurfaceClass, Point1: object, Point2: object) -> object """
        pass

    def Mirror3D(self, Point1, Point2, point3):
        """ Mirror3D(self: AcadExtrudedSurfaceClass, Point1: object, Point2: object, point3: object) -> object """
        pass

    def Move(self, FromPoint, ToPoint):
        """ Move(self: AcadExtrudedSurfaceClass, FromPoint: object, ToPoint: object) """
        pass

    def remove_Modified(self, A_1):
        """ remove_Modified(self: AcadExtrudedSurfaceClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def Rotate(self, BasePoint, RotationAngle):
        """ Rotate(self: AcadExtrudedSurfaceClass, BasePoint: object, RotationAngle: float) """
        pass

    def Rotate3D(self, Point1, Point2, RotationAngle):
        """ Rotate3D(self: AcadExtrudedSurfaceClass, Point1: object, Point2: object, RotationAngle: float) """
        pass

    def ScaleEntity(self, BasePoint, ScaleFactor):
        """ ScaleEntity(self: AcadExtrudedSurfaceClass, BasePoint: object, ScaleFactor: float) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: AcadExtrudedSurfaceClass, XDataType: object, XDataValue: object) """
        pass

    def TransformBy(self, TransformationMatrix):
        """ TransformBy(self: AcadExtrudedSurfaceClass, TransformationMatrix: object) """
        pass

    def Update(self):
        """ Update(self: AcadExtrudedSurfaceClass) """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: AcadExtrudedSurfaceClass) -> object

"""

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: AcadExtrudedSurfaceClass) -> ACAD_COLOR

Set: color(self: AcadExtrudedSurfaceClass) = value
"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: AcadExtrudedSurfaceClass) -> AcadDatabase

"""

    Direction = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Direction(self: AcadExtrudedSurfaceClass) -> object

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: AcadExtrudedSurfaceClass) -> object

"""

    EdgeExtensionDistances = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EdgeExtensionDistances(self: AcadExtrudedSurfaceClass) -> object

Set: EdgeExtensionDistances(self: AcadExtrudedSurfaceClass) = value
"""

    EntityName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityName(self: AcadExtrudedSurfaceClass) -> str

"""

    EntityTransparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityTransparency(self: AcadExtrudedSurfaceClass) -> str

Set: EntityTransparency(self: AcadExtrudedSurfaceClass) = value
"""

    EntityType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityType(self: AcadExtrudedSurfaceClass) -> int

"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: AcadExtrudedSurfaceClass) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: AcadExtrudedSurfaceClass) -> bool

"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: AcadExtrudedSurfaceClass) -> float

Set: Height(self: AcadExtrudedSurfaceClass) = value
"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: AcadExtrudedSurfaceClass) -> AcadHyperlinks

"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layer(self: AcadExtrudedSurfaceClass) -> str

Set: Layer(self: AcadExtrudedSurfaceClass) = value
"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: AcadExtrudedSurfaceClass) -> str

Set: Linetype(self: AcadExtrudedSurfaceClass) = value
"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeScale(self: AcadExtrudedSurfaceClass) -> float

Set: LinetypeScale(self: AcadExtrudedSurfaceClass) = value
"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: AcadExtrudedSurfaceClass) -> ACAD_LWEIGHT

Set: Lineweight(self: AcadExtrudedSurfaceClass) = value
"""

    MaintainAssociativity = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MaintainAssociativity(self: AcadExtrudedSurfaceClass) -> int

Set: MaintainAssociativity(self: AcadExtrudedSurfaceClass) = value
"""

    Material = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Material(self: AcadExtrudedSurfaceClass) -> str

Set: Material(self: AcadExtrudedSurfaceClass) = value
"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: AcadExtrudedSurfaceClass) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: AcadExtrudedSurfaceClass) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: AcadExtrudedSurfaceClass) -> Int64

"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: AcadExtrudedSurfaceClass) -> str

Set: PlotStyleName(self: AcadExtrudedSurfaceClass) = value
"""

    ShowAssociativity = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowAssociativity(self: AcadExtrudedSurfaceClass) -> bool

Set: ShowAssociativity(self: AcadExtrudedSurfaceClass) = value
"""

    SurfaceType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SurfaceType(self: AcadExtrudedSurfaceClass) -> str

"""

    SurfTrimAssociativity = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SurfTrimAssociativity(self: AcadExtrudedSurfaceClass) -> object

Set: SurfTrimAssociativity(self: AcadExtrudedSurfaceClass) = value
"""

    TaperAngle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TaperAngle(self: AcadExtrudedSurfaceClass) -> float

Set: TaperAngle(self: AcadExtrudedSurfaceClass) = value
"""

    TrueColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TrueColor(self: AcadExtrudedSurfaceClass) -> AcadAcCmColor

Set: TrueColor(self: AcadExtrudedSurfaceClass) = value
"""

    UIsolineDensity = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: UIsolineDensity(self: AcadExtrudedSurfaceClass) -> int

Set: UIsolineDensity(self: AcadExtrudedSurfaceClass) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: AcadExtrudedSurfaceClass) -> bool

Set: Visible(self: AcadExtrudedSurfaceClass) = value
"""

    VIsolineDensity = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VIsolineDensity(self: AcadExtrudedSurfaceClass) -> int

Set: VIsolineDensity(self: AcadExtrudedSurfaceClass) = value
"""

    WireframeType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: WireframeType(self: AcadExtrudedSurfaceClass) -> AcWireframeType

Set: WireframeType(self: AcadExtrudedSurfaceClass) = value
"""


    Modified = None


class IAcadRasterImage(IAcadEntity, IAcadObject):
    # no doc
    def ArrayPolar(self, NumberOfObjects, AngleToFill, CenterPoint):
        """ ArrayPolar(self: IAcadRasterImage, NumberOfObjects: int, AngleToFill: float, CenterPoint: object) -> object """
        pass

    def ArrayRectangular(self, NumberOfRows, NumberOfColumns, NumberOfLevels, DistBetweenRows, DistBetweenCols, DistBetweenLevels):
        """ ArrayRectangular(self: IAcadRasterImage, NumberOfRows: int, NumberOfColumns: int, NumberOfLevels: int, DistBetweenRows: float, DistBetweenCols: float, DistBetweenLevels: float) -> object """
        pass

    def ClipBoundary(self, boundry):
        """ ClipBoundary(self: IAcadRasterImage, boundry: object) """
        pass

    def Copy(self):
        """ Copy(self: IAcadRasterImage) -> object """
        pass

    def Delete(self):
        """ Delete(self: IAcadRasterImage) """
        pass

    def Erase(self):
        """ Erase(self: IAcadRasterImage) """
        pass

    def GetBoundingBox(self, MinPoint, MaxPoint):
        """ GetBoundingBox(self: IAcadRasterImage) -> (object, object) """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: IAcadRasterImage) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: IAcadRasterImage, AppName: str) -> (object, object) """
        pass

    def Highlight(self, HighlightFlag):
        """ Highlight(self: IAcadRasterImage, HighlightFlag: bool) """
        pass

    def IntersectWith(self, IntersectObject, option):
        """ IntersectWith(self: IAcadRasterImage, IntersectObject: object, option: AcExtendOption) -> object """
        pass

    def Mirror(self, Point1, Point2):
        """ Mirror(self: IAcadRasterImage, Point1: object, Point2: object) -> object """
        pass

    def Mirror3D(self, Point1, Point2, point3):
        """ Mirror3D(self: IAcadRasterImage, Point1: object, Point2: object, point3: object) -> object """
        pass

    def Move(self, FromPoint, ToPoint):
        """ Move(self: IAcadRasterImage, FromPoint: object, ToPoint: object) """
        pass

    def Rotate(self, BasePoint, RotationAngle):
        """ Rotate(self: IAcadRasterImage, BasePoint: object, RotationAngle: float) """
        pass

    def Rotate3D(self, Point1, Point2, RotationAngle):
        """ Rotate3D(self: IAcadRasterImage, Point1: object, Point2: object, RotationAngle: float) """
        pass

    def ScaleEntity(self, BasePoint, ScaleFactor):
        """ ScaleEntity(self: IAcadRasterImage, BasePoint: object, ScaleFactor: float) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: IAcadRasterImage, XDataType: object, XDataValue: object) """
        pass

    def TransformBy(self, TransformationMatrix):
        """ TransformBy(self: IAcadRasterImage, TransformationMatrix: object) """
        pass

    def Update(self):
        """ Update(self: IAcadRasterImage) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IAcadRasterImage) -> object

"""

    Brightness = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Brightness(self: IAcadRasterImage) -> int

Set: Brightness(self: IAcadRasterImage) = value
"""

    ClippingEnabled = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ClippingEnabled(self: IAcadRasterImage) -> bool

Set: ClippingEnabled(self: IAcadRasterImage) = value
"""

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: IAcadRasterImage) -> ACAD_COLOR

Set: color(self: IAcadRasterImage) = value
"""

    Contrast = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Contrast(self: IAcadRasterImage) -> int

Set: Contrast(self: IAcadRasterImage) = value
"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: IAcadRasterImage) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: IAcadRasterImage) -> object

"""

    EntityName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityName(self: IAcadRasterImage) -> str

"""

    EntityTransparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityTransparency(self: IAcadRasterImage) -> str

Set: EntityTransparency(self: IAcadRasterImage) = value
"""

    EntityType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityType(self: IAcadRasterImage) -> int

"""

    Fade = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Fade(self: IAcadRasterImage) -> int

Set: Fade(self: IAcadRasterImage) = value
"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: IAcadRasterImage) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: IAcadRasterImage) -> bool

"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: IAcadRasterImage) -> float

"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: IAcadRasterImage) -> AcadHyperlinks

"""

    ImageFile = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ImageFile(self: IAcadRasterImage) -> str

Set: ImageFile(self: IAcadRasterImage) = value
"""

    ImageHeight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ImageHeight(self: IAcadRasterImage) -> float

Set: ImageHeight(self: IAcadRasterImage) = value
"""

    ImageVisibility = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ImageVisibility(self: IAcadRasterImage) -> bool

Set: ImageVisibility(self: IAcadRasterImage) = value
"""

    ImageWidth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ImageWidth(self: IAcadRasterImage) -> float

Set: ImageWidth(self: IAcadRasterImage) = value
"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layer(self: IAcadRasterImage) -> str

Set: Layer(self: IAcadRasterImage) = value
"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: IAcadRasterImage) -> str

Set: Linetype(self: IAcadRasterImage) = value
"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeScale(self: IAcadRasterImage) -> float

Set: LinetypeScale(self: IAcadRasterImage) = value
"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: IAcadRasterImage) -> ACAD_LWEIGHT

Set: Lineweight(self: IAcadRasterImage) = value
"""

    Material = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Material(self: IAcadRasterImage) -> str

Set: Material(self: IAcadRasterImage) = value
"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: IAcadRasterImage) -> str

Set: Name(self: IAcadRasterImage) = value
"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: IAcadRasterImage) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: IAcadRasterImage) -> str

"""

    Origin = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Origin(self: IAcadRasterImage) -> object

Set: Origin(self: IAcadRasterImage) = value
"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: IAcadRasterImage) -> Int64

"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: IAcadRasterImage) -> str

Set: PlotStyleName(self: IAcadRasterImage) = value
"""

    Rotation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Rotation(self: IAcadRasterImage) -> float

Set: Rotation(self: IAcadRasterImage) = value
"""

    ScaleFactor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ScaleFactor(self: IAcadRasterImage) -> float

Set: ScaleFactor(self: IAcadRasterImage) = value
"""

    ShowRotation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowRotation(self: IAcadRasterImage) -> bool

Set: ShowRotation(self: IAcadRasterImage) = value
"""

    transparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: transparency(self: IAcadRasterImage) -> bool

Set: transparency(self: IAcadRasterImage) = value
"""

    TrueColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TrueColor(self: IAcadRasterImage) -> AcadAcCmColor

Set: TrueColor(self: IAcadRasterImage) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: IAcadRasterImage) -> bool

Set: Visible(self: IAcadRasterImage) = value
"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: IAcadRasterImage) -> float

"""



class IAcadGeomapImage(IAcadRasterImage, IAcadEntity, IAcadObject):
    # no doc
    def ArrayPolar(self, NumberOfObjects, AngleToFill, CenterPoint):
        """ ArrayPolar(self: IAcadGeomapImage, NumberOfObjects: int, AngleToFill: float, CenterPoint: object) -> object """
        pass

    def ArrayRectangular(self, NumberOfRows, NumberOfColumns, NumberOfLevels, DistBetweenRows, DistBetweenCols, DistBetweenLevels):
        """ ArrayRectangular(self: IAcadGeomapImage, NumberOfRows: int, NumberOfColumns: int, NumberOfLevels: int, DistBetweenRows: float, DistBetweenCols: float, DistBetweenLevels: float) -> object """
        pass

    def ClipBoundary(self, boundry):
        """ ClipBoundary(self: IAcadGeomapImage, boundry: object) """
        pass

    def Copy(self):
        """ Copy(self: IAcadGeomapImage) -> object """
        pass

    def Delete(self):
        """ Delete(self: IAcadGeomapImage) """
        pass

    def Erase(self):
        """ Erase(self: IAcadGeomapImage) """
        pass

    def GetBoundingBox(self, MinPoint, MaxPoint):
        """ GetBoundingBox(self: IAcadGeomapImage) -> (object, object) """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: IAcadGeomapImage) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: IAcadGeomapImage, AppName: str) -> (object, object) """
        pass

    def Highlight(self, HighlightFlag):
        """ Highlight(self: IAcadGeomapImage, HighlightFlag: bool) """
        pass

    def IntersectWith(self, IntersectObject, option):
        """ IntersectWith(self: IAcadGeomapImage, IntersectObject: object, option: AcExtendOption) -> object """
        pass

    def Mirror(self, Point1, Point2):
        """ Mirror(self: IAcadGeomapImage, Point1: object, Point2: object) -> object """
        pass

    def Mirror3D(self, Point1, Point2, point3):
        """ Mirror3D(self: IAcadGeomapImage, Point1: object, Point2: object, point3: object) -> object """
        pass

    def Move(self, FromPoint, ToPoint):
        """ Move(self: IAcadGeomapImage, FromPoint: object, ToPoint: object) """
        pass

    def Rotate(self, BasePoint, RotationAngle):
        """ Rotate(self: IAcadGeomapImage, BasePoint: object, RotationAngle: float) """
        pass

    def Rotate3D(self, Point1, Point2, RotationAngle):
        """ Rotate3D(self: IAcadGeomapImage, Point1: object, Point2: object, RotationAngle: float) """
        pass

    def ScaleEntity(self, BasePoint, ScaleFactor):
        """ ScaleEntity(self: IAcadGeomapImage, BasePoint: object, ScaleFactor: float) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: IAcadGeomapImage, XDataType: object, XDataValue: object) """
        pass

    def TransformBy(self, TransformationMatrix):
        """ TransformBy(self: IAcadGeomapImage, TransformationMatrix: object) """
        pass

    def Update(self):
        """ Update(self: IAcadGeomapImage) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IAcadGeomapImage) -> object

"""

    Brightness = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Brightness(self: IAcadGeomapImage) -> int

Set: Brightness(self: IAcadGeomapImage) = value
"""

    ClippingEnabled = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ClippingEnabled(self: IAcadGeomapImage) -> bool

Set: ClippingEnabled(self: IAcadGeomapImage) = value
"""

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: IAcadGeomapImage) -> ACAD_COLOR

Set: color(self: IAcadGeomapImage) = value
"""

    Contrast = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Contrast(self: IAcadGeomapImage) -> int

Set: Contrast(self: IAcadGeomapImage) = value
"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: IAcadGeomapImage) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: IAcadGeomapImage) -> object

"""

    EntityName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityName(self: IAcadGeomapImage) -> str

"""

    EntityTransparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityTransparency(self: IAcadGeomapImage) -> str

Set: EntityTransparency(self: IAcadGeomapImage) = value
"""

    EntityType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityType(self: IAcadGeomapImage) -> int

"""

    Fade = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Fade(self: IAcadGeomapImage) -> int

Set: Fade(self: IAcadGeomapImage) = value
"""

    GeoImageBrightness = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: GeoImageBrightness(self: IAcadGeomapImage) -> int

Set: GeoImageBrightness(self: IAcadGeomapImage) = value
"""

    GeoImageContrast = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: GeoImageContrast(self: IAcadGeomapImage) -> int

Set: GeoImageContrast(self: IAcadGeomapImage) = value
"""

    GeoImageFade = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: GeoImageFade(self: IAcadGeomapImage) -> int

Set: GeoImageFade(self: IAcadGeomapImage) = value
"""

    GeoImageHeight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: GeoImageHeight(self: IAcadGeomapImage) -> float

"""

    GeoImagePosition = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: GeoImagePosition(self: IAcadGeomapImage) -> object

"""

    GeoImageWidth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: GeoImageWidth(self: IAcadGeomapImage) -> float

"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: IAcadGeomapImage) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: IAcadGeomapImage) -> bool

"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: IAcadGeomapImage) -> float

"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: IAcadGeomapImage) -> AcadHyperlinks

"""

    ImageFile = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ImageFile(self: IAcadGeomapImage) -> str

Set: ImageFile(self: IAcadGeomapImage) = value
"""

    ImageHeight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ImageHeight(self: IAcadGeomapImage) -> float

Set: ImageHeight(self: IAcadGeomapImage) = value
"""

    ImageVisibility = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ImageVisibility(self: IAcadGeomapImage) -> bool

Set: ImageVisibility(self: IAcadGeomapImage) = value
"""

    ImageWidth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ImageWidth(self: IAcadGeomapImage) -> float

Set: ImageWidth(self: IAcadGeomapImage) = value
"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layer(self: IAcadGeomapImage) -> str

Set: Layer(self: IAcadGeomapImage) = value
"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: IAcadGeomapImage) -> str

Set: Linetype(self: IAcadGeomapImage) = value
"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeScale(self: IAcadGeomapImage) -> float

Set: LinetypeScale(self: IAcadGeomapImage) = value
"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: IAcadGeomapImage) -> ACAD_LWEIGHT

Set: Lineweight(self: IAcadGeomapImage) = value
"""

    Material = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Material(self: IAcadGeomapImage) -> str

Set: Material(self: IAcadGeomapImage) = value
"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: IAcadGeomapImage) -> str

Set: Name(self: IAcadGeomapImage) = value
"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: IAcadGeomapImage) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: IAcadGeomapImage) -> str

"""

    Origin = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Origin(self: IAcadGeomapImage) -> object

Set: Origin(self: IAcadGeomapImage) = value
"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: IAcadGeomapImage) -> Int64

"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: IAcadGeomapImage) -> str

Set: PlotStyleName(self: IAcadGeomapImage) = value
"""

    Rotation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Rotation(self: IAcadGeomapImage) -> float

Set: Rotation(self: IAcadGeomapImage) = value
"""

    ScaleFactor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ScaleFactor(self: IAcadGeomapImage) -> float

Set: ScaleFactor(self: IAcadGeomapImage) = value
"""

    ShowRotation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowRotation(self: IAcadGeomapImage) -> bool

Set: ShowRotation(self: IAcadGeomapImage) = value
"""

    transparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: transparency(self: IAcadGeomapImage) -> bool

Set: transparency(self: IAcadGeomapImage) = value
"""

    TrueColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TrueColor(self: IAcadGeomapImage) -> AcadAcCmColor

Set: TrueColor(self: IAcadGeomapImage) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: IAcadGeomapImage) -> bool

Set: Visible(self: IAcadGeomapImage) = value
"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: IAcadGeomapImage) -> float

"""



class AcadGeomapImage(IAcadGeomapImage, IAcadRasterImage, IAcadEntity, IAcadObject):
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class AcadGeomapImageClass(__ComObject):
    # no doc
    def ArrayPolar(self, NumberOfObjects, AngleToFill, CenterPoint):
        """ ArrayPolar(self: AcadGeomapImageClass, NumberOfObjects: int, AngleToFill: float, CenterPoint: object) -> object """
        pass

    def ArrayRectangular(self, NumberOfRows, NumberOfColumns, NumberOfLevels, DistBetweenRows, DistBetweenCols, DistBetweenLevels):
        """ ArrayRectangular(self: AcadGeomapImageClass, NumberOfRows: int, NumberOfColumns: int, NumberOfLevels: int, DistBetweenRows: float, DistBetweenCols: float, DistBetweenLevels: float) -> object """
        pass

    def ClipBoundary(self, boundry):
        """ ClipBoundary(self: AcadGeomapImageClass, boundry: object) """
        pass

    def Copy(self):
        """ Copy(self: AcadGeomapImageClass) -> object """
        pass

    def Delete(self):
        """ Delete(self: AcadGeomapImageClass) """
        pass

    def Erase(self):
        """ Erase(self: AcadGeomapImageClass) """
        pass

    def GetBoundingBox(self, MinPoint, MaxPoint):
        """ GetBoundingBox(self: AcadGeomapImageClass) -> (object, object) """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: AcadGeomapImageClass) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: AcadGeomapImageClass, AppName: str) -> (object, object) """
        pass

    def Highlight(self, HighlightFlag):
        """ Highlight(self: AcadGeomapImageClass, HighlightFlag: bool) """
        pass

    def IntersectWith(self, IntersectObject, option):
        """ IntersectWith(self: AcadGeomapImageClass, IntersectObject: object, option: AcExtendOption) -> object """
        pass

    def Mirror(self, Point1, Point2):
        """ Mirror(self: AcadGeomapImageClass, Point1: object, Point2: object) -> object """
        pass

    def Mirror3D(self, Point1, Point2, point3):
        """ Mirror3D(self: AcadGeomapImageClass, Point1: object, Point2: object, point3: object) -> object """
        pass

    def Move(self, FromPoint, ToPoint):
        """ Move(self: AcadGeomapImageClass, FromPoint: object, ToPoint: object) """
        pass

    def Rotate(self, BasePoint, RotationAngle):
        """ Rotate(self: AcadGeomapImageClass, BasePoint: object, RotationAngle: float) """
        pass

    def Rotate3D(self, Point1, Point2, RotationAngle):
        """ Rotate3D(self: AcadGeomapImageClass, Point1: object, Point2: object, RotationAngle: float) """
        pass

    def ScaleEntity(self, BasePoint, ScaleFactor):
        """ ScaleEntity(self: AcadGeomapImageClass, BasePoint: object, ScaleFactor: float) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: AcadGeomapImageClass, XDataType: object, XDataValue: object) """
        pass

    def TransformBy(self, TransformationMatrix):
        """ TransformBy(self: AcadGeomapImageClass, TransformationMatrix: object) """
        pass

    def Update(self):
        """ Update(self: AcadGeomapImageClass) """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: AcadGeomapImageClass) -> object

"""

    Brightness = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Brightness(self: AcadGeomapImageClass) -> int

Set: Brightness(self: AcadGeomapImageClass) = value
"""

    ClippingEnabled = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ClippingEnabled(self: AcadGeomapImageClass) -> bool

Set: ClippingEnabled(self: AcadGeomapImageClass) = value
"""

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: AcadGeomapImageClass) -> ACAD_COLOR

Set: color(self: AcadGeomapImageClass) = value
"""

    Contrast = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Contrast(self: AcadGeomapImageClass) -> int

Set: Contrast(self: AcadGeomapImageClass) = value
"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: AcadGeomapImageClass) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: AcadGeomapImageClass) -> object

"""

    EntityName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityName(self: AcadGeomapImageClass) -> str

"""

    EntityTransparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityTransparency(self: AcadGeomapImageClass) -> str

Set: EntityTransparency(self: AcadGeomapImageClass) = value
"""

    EntityType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityType(self: AcadGeomapImageClass) -> int

"""

    Fade = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Fade(self: AcadGeomapImageClass) -> int

Set: Fade(self: AcadGeomapImageClass) = value
"""

    GeoImageBrightness = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: GeoImageBrightness(self: AcadGeomapImageClass) -> int

Set: GeoImageBrightness(self: AcadGeomapImageClass) = value
"""

    GeoImageContrast = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: GeoImageContrast(self: AcadGeomapImageClass) -> int

Set: GeoImageContrast(self: AcadGeomapImageClass) = value
"""

    GeoImageFade = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: GeoImageFade(self: AcadGeomapImageClass) -> int

Set: GeoImageFade(self: AcadGeomapImageClass) = value
"""

    GeoImageHeight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: GeoImageHeight(self: AcadGeomapImageClass) -> float

"""

    GeoImagePosition = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: GeoImagePosition(self: AcadGeomapImageClass) -> object

"""

    GeoImageWidth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: GeoImageWidth(self: AcadGeomapImageClass) -> float

"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: AcadGeomapImageClass) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: AcadGeomapImageClass) -> bool

"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: AcadGeomapImageClass) -> float

"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: AcadGeomapImageClass) -> AcadHyperlinks

"""

    ImageFile = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ImageFile(self: AcadGeomapImageClass) -> str

Set: ImageFile(self: AcadGeomapImageClass) = value
"""

    ImageHeight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ImageHeight(self: AcadGeomapImageClass) -> float

Set: ImageHeight(self: AcadGeomapImageClass) = value
"""

    ImageVisibility = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ImageVisibility(self: AcadGeomapImageClass) -> bool

Set: ImageVisibility(self: AcadGeomapImageClass) = value
"""

    ImageWidth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ImageWidth(self: AcadGeomapImageClass) -> float

Set: ImageWidth(self: AcadGeomapImageClass) = value
"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layer(self: AcadGeomapImageClass) -> str

Set: Layer(self: AcadGeomapImageClass) = value
"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: AcadGeomapImageClass) -> str

Set: Linetype(self: AcadGeomapImageClass) = value
"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeScale(self: AcadGeomapImageClass) -> float

Set: LinetypeScale(self: AcadGeomapImageClass) = value
"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: AcadGeomapImageClass) -> ACAD_LWEIGHT

Set: Lineweight(self: AcadGeomapImageClass) = value
"""

    Material = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Material(self: AcadGeomapImageClass) -> str

Set: Material(self: AcadGeomapImageClass) = value
"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: AcadGeomapImageClass) -> str

Set: Name(self: AcadGeomapImageClass) = value
"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: AcadGeomapImageClass) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: AcadGeomapImageClass) -> str

"""

    Origin = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Origin(self: AcadGeomapImageClass) -> object

Set: Origin(self: AcadGeomapImageClass) = value
"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: AcadGeomapImageClass) -> Int64

"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: AcadGeomapImageClass) -> str

Set: PlotStyleName(self: AcadGeomapImageClass) = value
"""

    Rotation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Rotation(self: AcadGeomapImageClass) -> float

Set: Rotation(self: AcadGeomapImageClass) = value
"""

    ScaleFactor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ScaleFactor(self: AcadGeomapImageClass) -> float

Set: ScaleFactor(self: AcadGeomapImageClass) = value
"""

    ShowRotation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowRotation(self: AcadGeomapImageClass) -> bool

Set: ShowRotation(self: AcadGeomapImageClass) = value
"""

    transparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: transparency(self: AcadGeomapImageClass) -> bool

Set: transparency(self: AcadGeomapImageClass) = value
"""

    TrueColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TrueColor(self: AcadGeomapImageClass) -> AcadAcCmColor

Set: TrueColor(self: AcadGeomapImageClass) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: AcadGeomapImageClass) -> bool

Set: Visible(self: AcadGeomapImageClass) = value
"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: AcadGeomapImageClass) -> float

"""



class IAcadGeoPositionMarker(IAcadEntity, IAcadObject):
    # no doc
    def ArrayPolar(self, NumberOfObjects, AngleToFill, CenterPoint):
        """ ArrayPolar(self: IAcadGeoPositionMarker, NumberOfObjects: int, AngleToFill: float, CenterPoint: object) -> object """
        pass

    def ArrayRectangular(self, NumberOfRows, NumberOfColumns, NumberOfLevels, DistBetweenRows, DistBetweenCols, DistBetweenLevels):
        """ ArrayRectangular(self: IAcadGeoPositionMarker, NumberOfRows: int, NumberOfColumns: int, NumberOfLevels: int, DistBetweenRows: float, DistBetweenCols: float, DistBetweenLevels: float) -> object """
        pass

    def Copy(self):
        """ Copy(self: IAcadGeoPositionMarker) -> object """
        pass

    def Delete(self):
        """ Delete(self: IAcadGeoPositionMarker) """
        pass

    def Erase(self):
        """ Erase(self: IAcadGeoPositionMarker) """
        pass

    def GetBoundingBox(self, MinPoint, MaxPoint):
        """ GetBoundingBox(self: IAcadGeoPositionMarker) -> (object, object) """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: IAcadGeoPositionMarker) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: IAcadGeoPositionMarker, AppName: str) -> (object, object) """
        pass

    def Highlight(self, HighlightFlag):
        """ Highlight(self: IAcadGeoPositionMarker, HighlightFlag: bool) """
        pass

    def IntersectWith(self, IntersectObject, option):
        """ IntersectWith(self: IAcadGeoPositionMarker, IntersectObject: object, option: AcExtendOption) -> object """
        pass

    def Mirror(self, Point1, Point2):
        """ Mirror(self: IAcadGeoPositionMarker, Point1: object, Point2: object) -> object """
        pass

    def Mirror3D(self, Point1, Point2, point3):
        """ Mirror3D(self: IAcadGeoPositionMarker, Point1: object, Point2: object, point3: object) -> object """
        pass

    def Move(self, FromPoint, ToPoint):
        """ Move(self: IAcadGeoPositionMarker, FromPoint: object, ToPoint: object) """
        pass

    def Rotate(self, BasePoint, RotationAngle):
        """ Rotate(self: IAcadGeoPositionMarker, BasePoint: object, RotationAngle: float) """
        pass

    def Rotate3D(self, Point1, Point2, RotationAngle):
        """ Rotate3D(self: IAcadGeoPositionMarker, Point1: object, Point2: object, RotationAngle: float) """
        pass

    def ScaleEntity(self, BasePoint, ScaleFactor):
        """ ScaleEntity(self: IAcadGeoPositionMarker, BasePoint: object, ScaleFactor: float) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: IAcadGeoPositionMarker, XDataType: object, XDataValue: object) """
        pass

    def TransformBy(self, TransformationMatrix):
        """ TransformBy(self: IAcadGeoPositionMarker, TransformationMatrix: object) """
        pass

    def Update(self):
        """ Update(self: IAcadGeoPositionMarker) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Altitude = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Altitude(self: IAcadGeoPositionMarker) -> float

Set: Altitude(self: IAcadGeoPositionMarker) = value
"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IAcadGeoPositionMarker) -> object

"""

    BackgroundFill = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BackgroundFill(self: IAcadGeoPositionMarker) -> bool

Set: BackgroundFill(self: IAcadGeoPositionMarker) = value
"""

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: IAcadGeoPositionMarker) -> ACAD_COLOR

Set: color(self: IAcadGeoPositionMarker) = value
"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: IAcadGeoPositionMarker) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: IAcadGeoPositionMarker) -> object

"""

    DrawingDirection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DrawingDirection(self: IAcadGeoPositionMarker) -> AcDrawingDirection

Set: DrawingDirection(self: IAcadGeoPositionMarker) = value
"""

    EntityName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityName(self: IAcadGeoPositionMarker) -> str

"""

    EntityTransparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityTransparency(self: IAcadGeoPositionMarker) -> str

Set: EntityTransparency(self: IAcadGeoPositionMarker) = value
"""

    EntityType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityType(self: IAcadGeoPositionMarker) -> int

"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: IAcadGeoPositionMarker) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: IAcadGeoPositionMarker) -> bool

"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: IAcadGeoPositionMarker) -> float

Set: Height(self: IAcadGeoPositionMarker) = value
"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: IAcadGeoPositionMarker) -> AcadHyperlinks

"""

    LandingGap = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LandingGap(self: IAcadGeoPositionMarker) -> float

Set: LandingGap(self: IAcadGeoPositionMarker) = value
"""

    Latitude = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Latitude(self: IAcadGeoPositionMarker) -> str

Set: Latitude(self: IAcadGeoPositionMarker) = value
"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layer(self: IAcadGeoPositionMarker) -> str

Set: Layer(self: IAcadGeoPositionMarker) = value
"""

    LineSpacingDistance = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LineSpacingDistance(self: IAcadGeoPositionMarker) -> float

Set: LineSpacingDistance(self: IAcadGeoPositionMarker) = value
"""

    LineSpacingFactor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LineSpacingFactor(self: IAcadGeoPositionMarker) -> float

Set: LineSpacingFactor(self: IAcadGeoPositionMarker) = value
"""

    LineSpacingStyle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LineSpacingStyle(self: IAcadGeoPositionMarker) -> AcLineSpacingStyle

Set: LineSpacingStyle(self: IAcadGeoPositionMarker) = value
"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: IAcadGeoPositionMarker) -> str

Set: Linetype(self: IAcadGeoPositionMarker) = value
"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeScale(self: IAcadGeoPositionMarker) -> float

Set: LinetypeScale(self: IAcadGeoPositionMarker) = value
"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: IAcadGeoPositionMarker) -> ACAD_LWEIGHT

Set: Lineweight(self: IAcadGeoPositionMarker) = value
"""

    Longitude = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Longitude(self: IAcadGeoPositionMarker) -> str

Set: Longitude(self: IAcadGeoPositionMarker) = value
"""

    Material = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Material(self: IAcadGeoPositionMarker) -> str

Set: Material(self: IAcadGeoPositionMarker) = value
"""

    Notes = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Notes(self: IAcadGeoPositionMarker) -> str

Set: Notes(self: IAcadGeoPositionMarker) = value
"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: IAcadGeoPositionMarker) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: IAcadGeoPositionMarker) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: IAcadGeoPositionMarker) -> Int64

"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: IAcadGeoPositionMarker) -> str

Set: PlotStyleName(self: IAcadGeoPositionMarker) = value
"""

    Position = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Position(self: IAcadGeoPositionMarker) -> object

Set: Position(self: IAcadGeoPositionMarker) = value
"""

    Radius = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Radius(self: IAcadGeoPositionMarker) -> float

Set: Radius(self: IAcadGeoPositionMarker) = value
"""

    Rotation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Rotation(self: IAcadGeoPositionMarker) -> float

Set: Rotation(self: IAcadGeoPositionMarker) = value
"""

    TextFrameDisplay = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextFrameDisplay(self: IAcadGeoPositionMarker) -> bool

Set: TextFrameDisplay(self: IAcadGeoPositionMarker) = value
"""

    TextJustify = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextJustify(self: IAcadGeoPositionMarker) -> AcAttachmentPoint

Set: TextJustify(self: IAcadGeoPositionMarker) = value
"""

    TextString = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextString(self: IAcadGeoPositionMarker) -> str

Set: TextString(self: IAcadGeoPositionMarker) = value
"""

    TextStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextStyleName(self: IAcadGeoPositionMarker) -> str

Set: TextStyleName(self: IAcadGeoPositionMarker) = value
"""

    TextWidth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextWidth(self: IAcadGeoPositionMarker) -> float

Set: TextWidth(self: IAcadGeoPositionMarker) = value
"""

    TrueColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TrueColor(self: IAcadGeoPositionMarker) -> AcadAcCmColor

Set: TrueColor(self: IAcadGeoPositionMarker) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: IAcadGeoPositionMarker) -> bool

Set: Visible(self: IAcadGeoPositionMarker) = value
"""



class AcadGeoPositionMarker(IAcadGeoPositionMarker, IAcadEntity, IAcadObject, IAcadObjectEvents_Event):
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class AcadGeoPositionMarkerClass(__ComObject):
    # no doc
    def add_Modified(self, A_1):
        """ add_Modified(self: AcadGeoPositionMarkerClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def ArrayPolar(self, NumberOfObjects, AngleToFill, CenterPoint):
        """ ArrayPolar(self: AcadGeoPositionMarkerClass, NumberOfObjects: int, AngleToFill: float, CenterPoint: object) -> object """
        pass

    def ArrayRectangular(self, NumberOfRows, NumberOfColumns, NumberOfLevels, DistBetweenRows, DistBetweenCols, DistBetweenLevels):
        """ ArrayRectangular(self: AcadGeoPositionMarkerClass, NumberOfRows: int, NumberOfColumns: int, NumberOfLevels: int, DistBetweenRows: float, DistBetweenCols: float, DistBetweenLevels: float) -> object """
        pass

    def Copy(self):
        """ Copy(self: AcadGeoPositionMarkerClass) -> object """
        pass

    def Delete(self):
        """ Delete(self: AcadGeoPositionMarkerClass) """
        pass

    def Erase(self):
        """ Erase(self: AcadGeoPositionMarkerClass) """
        pass

    def GetBoundingBox(self, MinPoint, MaxPoint):
        """ GetBoundingBox(self: AcadGeoPositionMarkerClass) -> (object, object) """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: AcadGeoPositionMarkerClass) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: AcadGeoPositionMarkerClass, AppName: str) -> (object, object) """
        pass

    def Highlight(self, HighlightFlag):
        """ Highlight(self: AcadGeoPositionMarkerClass, HighlightFlag: bool) """
        pass

    def IntersectWith(self, IntersectObject, option):
        """ IntersectWith(self: AcadGeoPositionMarkerClass, IntersectObject: object, option: AcExtendOption) -> object """
        pass

    def Mirror(self, Point1, Point2):
        """ Mirror(self: AcadGeoPositionMarkerClass, Point1: object, Point2: object) -> object """
        pass

    def Mirror3D(self, Point1, Point2, point3):
        """ Mirror3D(self: AcadGeoPositionMarkerClass, Point1: object, Point2: object, point3: object) -> object """
        pass

    def Move(self, FromPoint, ToPoint):
        """ Move(self: AcadGeoPositionMarkerClass, FromPoint: object, ToPoint: object) """
        pass

    def remove_Modified(self, A_1):
        """ remove_Modified(self: AcadGeoPositionMarkerClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def Rotate(self, BasePoint, RotationAngle):
        """ Rotate(self: AcadGeoPositionMarkerClass, BasePoint: object, RotationAngle: float) """
        pass

    def Rotate3D(self, Point1, Point2, RotationAngle):
        """ Rotate3D(self: AcadGeoPositionMarkerClass, Point1: object, Point2: object, RotationAngle: float) """
        pass

    def ScaleEntity(self, BasePoint, ScaleFactor):
        """ ScaleEntity(self: AcadGeoPositionMarkerClass, BasePoint: object, ScaleFactor: float) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: AcadGeoPositionMarkerClass, XDataType: object, XDataValue: object) """
        pass

    def TransformBy(self, TransformationMatrix):
        """ TransformBy(self: AcadGeoPositionMarkerClass, TransformationMatrix: object) """
        pass

    def Update(self):
        """ Update(self: AcadGeoPositionMarkerClass) """
        pass

    Altitude = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Altitude(self: AcadGeoPositionMarkerClass) -> float

Set: Altitude(self: AcadGeoPositionMarkerClass) = value
"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: AcadGeoPositionMarkerClass) -> object

"""

    BackgroundFill = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BackgroundFill(self: AcadGeoPositionMarkerClass) -> bool

Set: BackgroundFill(self: AcadGeoPositionMarkerClass) = value
"""

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: AcadGeoPositionMarkerClass) -> ACAD_COLOR

Set: color(self: AcadGeoPositionMarkerClass) = value
"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: AcadGeoPositionMarkerClass) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: AcadGeoPositionMarkerClass) -> object

"""

    DrawingDirection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DrawingDirection(self: AcadGeoPositionMarkerClass) -> AcDrawingDirection

Set: DrawingDirection(self: AcadGeoPositionMarkerClass) = value
"""

    EntityName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityName(self: AcadGeoPositionMarkerClass) -> str

"""

    EntityTransparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityTransparency(self: AcadGeoPositionMarkerClass) -> str

Set: EntityTransparency(self: AcadGeoPositionMarkerClass) = value
"""

    EntityType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityType(self: AcadGeoPositionMarkerClass) -> int

"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: AcadGeoPositionMarkerClass) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: AcadGeoPositionMarkerClass) -> bool

"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: AcadGeoPositionMarkerClass) -> float

Set: Height(self: AcadGeoPositionMarkerClass) = value
"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: AcadGeoPositionMarkerClass) -> AcadHyperlinks

"""

    LandingGap = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LandingGap(self: AcadGeoPositionMarkerClass) -> float

Set: LandingGap(self: AcadGeoPositionMarkerClass) = value
"""

    Latitude = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Latitude(self: AcadGeoPositionMarkerClass) -> str

Set: Latitude(self: AcadGeoPositionMarkerClass) = value
"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layer(self: AcadGeoPositionMarkerClass) -> str

Set: Layer(self: AcadGeoPositionMarkerClass) = value
"""

    LineSpacingDistance = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LineSpacingDistance(self: AcadGeoPositionMarkerClass) -> float

Set: LineSpacingDistance(self: AcadGeoPositionMarkerClass) = value
"""

    LineSpacingFactor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LineSpacingFactor(self: AcadGeoPositionMarkerClass) -> float

Set: LineSpacingFactor(self: AcadGeoPositionMarkerClass) = value
"""

    LineSpacingStyle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LineSpacingStyle(self: AcadGeoPositionMarkerClass) -> AcLineSpacingStyle

Set: LineSpacingStyle(self: AcadGeoPositionMarkerClass) = value
"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: AcadGeoPositionMarkerClass) -> str

Set: Linetype(self: AcadGeoPositionMarkerClass) = value
"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeScale(self: AcadGeoPositionMarkerClass) -> float

Set: LinetypeScale(self: AcadGeoPositionMarkerClass) = value
"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: AcadGeoPositionMarkerClass) -> ACAD_LWEIGHT

Set: Lineweight(self: AcadGeoPositionMarkerClass) = value
"""

    Longitude = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Longitude(self: AcadGeoPositionMarkerClass) -> str

Set: Longitude(self: AcadGeoPositionMarkerClass) = value
"""

    Material = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Material(self: AcadGeoPositionMarkerClass) -> str

Set: Material(self: AcadGeoPositionMarkerClass) = value
"""

    Notes = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Notes(self: AcadGeoPositionMarkerClass) -> str

Set: Notes(self: AcadGeoPositionMarkerClass) = value
"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: AcadGeoPositionMarkerClass) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: AcadGeoPositionMarkerClass) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: AcadGeoPositionMarkerClass) -> Int64

"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: AcadGeoPositionMarkerClass) -> str

Set: PlotStyleName(self: AcadGeoPositionMarkerClass) = value
"""

    Position = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Position(self: AcadGeoPositionMarkerClass) -> object

Set: Position(self: AcadGeoPositionMarkerClass) = value
"""

    Radius = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Radius(self: AcadGeoPositionMarkerClass) -> float

Set: Radius(self: AcadGeoPositionMarkerClass) = value
"""

    Rotation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Rotation(self: AcadGeoPositionMarkerClass) -> float

Set: Rotation(self: AcadGeoPositionMarkerClass) = value
"""

    TextFrameDisplay = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextFrameDisplay(self: AcadGeoPositionMarkerClass) -> bool

Set: TextFrameDisplay(self: AcadGeoPositionMarkerClass) = value
"""

    TextJustify = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextJustify(self: AcadGeoPositionMarkerClass) -> AcAttachmentPoint

Set: TextJustify(self: AcadGeoPositionMarkerClass) = value
"""

    TextString = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextString(self: AcadGeoPositionMarkerClass) -> str

Set: TextString(self: AcadGeoPositionMarkerClass) = value
"""

    TextStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextStyleName(self: AcadGeoPositionMarkerClass) -> str

Set: TextStyleName(self: AcadGeoPositionMarkerClass) = value
"""

    TextWidth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextWidth(self: AcadGeoPositionMarkerClass) -> float

Set: TextWidth(self: AcadGeoPositionMarkerClass) = value
"""

    TrueColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TrueColor(self: AcadGeoPositionMarkerClass) -> AcadAcCmColor

Set: TrueColor(self: AcadGeoPositionMarkerClass) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: AcadGeoPositionMarkerClass) -> bool

Set: Visible(self: AcadGeoPositionMarkerClass) = value
"""


    Modified = None


class IAcadGroup(IAcadObject, IEnumerable):
    # no doc
    def AppendItems(self, Objects):
        """ AppendItems(self: IAcadGroup, Objects: object) """
        pass

    def Delete(self):
        """ Delete(self: IAcadGroup) """
        pass

    def Erase(self):
        """ Erase(self: IAcadGroup) """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: IAcadGroup) -> IEnumerator """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: IAcadGroup) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: IAcadGroup, AppName: str) -> (object, object) """
        pass

    def Highlight(self, HighlightFlag):
        """ Highlight(self: IAcadGroup, HighlightFlag: bool) """
        pass

    def Item(self, Index):
        """ Item(self: IAcadGroup, Index: object) -> AcadEntity """
        pass

    def RemoveItems(self, Objects):
        """ RemoveItems(self: IAcadGroup, Objects: object) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: IAcadGroup, XDataType: object, XDataValue: object) """
        pass

    def Update(self):
        """ Update(self: IAcadGroup) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerable) -> object """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IAcadGroup) -> object

"""

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Set: color(self: IAcadGroup) = value
"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: IAcadGroup) -> int

"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: IAcadGroup) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: IAcadGroup) -> object

"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: IAcadGroup) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: IAcadGroup) -> bool

"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Set: Layer(self: IAcadGroup) = value
"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Set: Linetype(self: IAcadGroup) = value
"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Set: LinetypeScale(self: IAcadGroup) = value
"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Set: Lineweight(self: IAcadGroup) = value
"""

    Material = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Set: Material(self: IAcadGroup) = value
"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: IAcadGroup) -> str

Set: Name(self: IAcadGroup) = value
"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: IAcadGroup) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: IAcadGroup) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: IAcadGroup) -> Int64

"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Set: PlotStyleName(self: IAcadGroup) = value
"""

    TrueColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Set: TrueColor(self: IAcadGroup) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Set: Visible(self: IAcadGroup) = value
"""



class AcadGroup(IAcadGroup, IAcadObject, IEnumerable, IAcadObjectEvents_Event):
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerable) -> object """
        pass


class AcadGroupClass(__ComObject):
    # no doc
    def add_Modified(self, A_1):
        """ add_Modified(self: AcadGroupClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def AppendItems(self, Objects):
        """ AppendItems(self: AcadGroupClass, Objects: object) """
        pass

    def Delete(self):
        """ Delete(self: AcadGroupClass) """
        pass

    def Erase(self):
        """ Erase(self: AcadGroupClass) """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: AcadGroupClass) -> IEnumerator """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: AcadGroupClass) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: AcadGroupClass, AppName: str) -> (object, object) """
        pass

    def Highlight(self, HighlightFlag):
        """ Highlight(self: AcadGroupClass, HighlightFlag: bool) """
        pass

    def Item(self, Index):
        """ Item(self: AcadGroupClass, Index: object) -> AcadEntity """
        pass

    def RemoveItems(self, Objects):
        """ RemoveItems(self: AcadGroupClass, Objects: object) """
        pass

    def remove_Modified(self, A_1):
        """ remove_Modified(self: AcadGroupClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: AcadGroupClass, XDataType: object, XDataValue: object) """
        pass

    def Update(self):
        """ Update(self: AcadGroupClass) """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerable) -> object """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: AcadGroupClass) -> object

"""

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Set: color(self: AcadGroupClass) = value
"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: AcadGroupClass) -> int

"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: AcadGroupClass) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: AcadGroupClass) -> object

"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: AcadGroupClass) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: AcadGroupClass) -> bool

"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Set: Layer(self: AcadGroupClass) = value
"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Set: Linetype(self: AcadGroupClass) = value
"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Set: LinetypeScale(self: AcadGroupClass) = value
"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Set: Lineweight(self: AcadGroupClass) = value
"""

    Material = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Set: Material(self: AcadGroupClass) = value
"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: AcadGroupClass) -> str

Set: Name(self: AcadGroupClass) = value
"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: AcadGroupClass) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: AcadGroupClass) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: AcadGroupClass) -> Int64

"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Set: PlotStyleName(self: AcadGroupClass) = value
"""

    TrueColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Set: TrueColor(self: AcadGroupClass) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Set: Visible(self: AcadGroupClass) = value
"""


    Modified = None


class IAcadGroups(IAcadObject, IEnumerable):
    # no doc
    def Add(self, Name):
        """ Add(self: IAcadGroups, Name: str) -> AcadGroup """
        pass

    def Delete(self):
        """ Delete(self: IAcadGroups) """
        pass

    def Erase(self):
        """ Erase(self: IAcadGroups) """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: IAcadGroups) -> IEnumerator """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: IAcadGroups) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: IAcadGroups, AppName: str) -> (object, object) """
        pass

    def Item(self, Index):
        """ Item(self: IAcadGroups, Index: object) -> AcadGroup """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: IAcadGroups, XDataType: object, XDataValue: object) """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerable) -> object """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IAcadGroups) -> object

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: IAcadGroups) -> int

"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: IAcadGroups) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: IAcadGroups) -> object

"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: IAcadGroups) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: IAcadGroups) -> bool

"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: IAcadGroups) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: IAcadGroups) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: IAcadGroups) -> Int64

"""



class AcadGroups(IAcadGroups, IAcadObject, IEnumerable, IAcadObjectEvents_Event):
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerable) -> object """
        pass


class AcadGroupsClass(__ComObject):
    # no doc
    def Add(self, Name):
        """ Add(self: AcadGroupsClass, Name: str) -> AcadGroup """
        pass

    def add_Modified(self, A_1):
        """ add_Modified(self: AcadGroupsClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def Delete(self):
        """ Delete(self: AcadGroupsClass) """
        pass

    def Erase(self):
        """ Erase(self: AcadGroupsClass) """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: AcadGroupsClass) -> IEnumerator """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: AcadGroupsClass) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: AcadGroupsClass, AppName: str) -> (object, object) """
        pass

    def Item(self, Index):
        """ Item(self: AcadGroupsClass, Index: object) -> AcadGroup """
        pass

    def remove_Modified(self, A_1):
        """ remove_Modified(self: AcadGroupsClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: AcadGroupsClass, XDataType: object, XDataValue: object) """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerable) -> object """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: AcadGroupsClass) -> object

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: AcadGroupsClass) -> int

"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: AcadGroupsClass) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: AcadGroupsClass) -> object

"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: AcadGroupsClass) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: AcadGroupsClass) -> bool

"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: AcadGroupsClass) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: AcadGroupsClass) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: AcadGroupsClass) -> Int64

"""


    Modified = None


class IAcadHatch(IAcadEntity, IAcadObject):
    # no doc
    def AppendInnerLoop(self, ObjectArray):
        """ AppendInnerLoop(self: IAcadHatch, ObjectArray: object) """
        pass

    def AppendOuterLoop(self, ObjectArray):
        """ AppendOuterLoop(self: IAcadHatch, ObjectArray: object) """
        pass

    def ArrayPolar(self, NumberOfObjects, AngleToFill, CenterPoint):
        """ ArrayPolar(self: IAcadHatch, NumberOfObjects: int, AngleToFill: float, CenterPoint: object) -> object """
        pass

    def ArrayRectangular(self, NumberOfRows, NumberOfColumns, NumberOfLevels, DistBetweenRows, DistBetweenCols, DistBetweenLevels):
        """ ArrayRectangular(self: IAcadHatch, NumberOfRows: int, NumberOfColumns: int, NumberOfLevels: int, DistBetweenRows: float, DistBetweenCols: float, DistBetweenLevels: float) -> object """
        pass

    def Copy(self):
        """ Copy(self: IAcadHatch) -> object """
        pass

    def Delete(self):
        """ Delete(self: IAcadHatch) """
        pass

    def Erase(self):
        """ Erase(self: IAcadHatch) """
        pass

    def Evaluate(self):
        """ Evaluate(self: IAcadHatch) """
        pass

    def GetBoundingBox(self, MinPoint, MaxPoint):
        """ GetBoundingBox(self: IAcadHatch) -> (object, object) """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: IAcadHatch) -> AcadDictionary """
        pass

    def GetLoopAt(self, Index, ObjectArray):
        """ GetLoopAt(self: IAcadHatch, Index: int) -> object """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: IAcadHatch, AppName: str) -> (object, object) """
        pass

    def Highlight(self, HighlightFlag):
        """ Highlight(self: IAcadHatch, HighlightFlag: bool) """
        pass

    def InsertLoopAt(self, Index, LoopType, ObjectArray):
        """ InsertLoopAt(self: IAcadHatch, Index: int, LoopType: AcLoopType, ObjectArray: object) """
        pass

    def IntersectWith(self, IntersectObject, option):
        """ IntersectWith(self: IAcadHatch, IntersectObject: object, option: AcExtendOption) -> object """
        pass

    def Mirror(self, Point1, Point2):
        """ Mirror(self: IAcadHatch, Point1: object, Point2: object) -> object """
        pass

    def Mirror3D(self, Point1, Point2, point3):
        """ Mirror3D(self: IAcadHatch, Point1: object, Point2: object, point3: object) -> object """
        pass

    def Move(self, FromPoint, ToPoint):
        """ Move(self: IAcadHatch, FromPoint: object, ToPoint: object) """
        pass

    def Rotate(self, BasePoint, RotationAngle):
        """ Rotate(self: IAcadHatch, BasePoint: object, RotationAngle: float) """
        pass

    def Rotate3D(self, Point1, Point2, RotationAngle):
        """ Rotate3D(self: IAcadHatch, Point1: object, Point2: object, RotationAngle: float) """
        pass

    def ScaleEntity(self, BasePoint, ScaleFactor):
        """ ScaleEntity(self: IAcadHatch, BasePoint: object, ScaleFactor: float) """
        pass

    def SetPattern(self, PatternType, PatternName):
        """ SetPattern(self: IAcadHatch, PatternType: int, PatternName: str) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: IAcadHatch, XDataType: object, XDataValue: object) """
        pass

    def TransformBy(self, TransformationMatrix):
        """ TransformBy(self: IAcadHatch, TransformationMatrix: object) """
        pass

    def Update(self):
        """ Update(self: IAcadHatch) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IAcadHatch) -> object

"""

    Area = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Area(self: IAcadHatch) -> float

"""

    AssociativeHatch = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AssociativeHatch(self: IAcadHatch) -> bool

Set: AssociativeHatch(self: IAcadHatch) = value
"""

    BackgroundColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BackgroundColor(self: IAcadHatch) -> AcadAcCmColor

Set: BackgroundColor(self: IAcadHatch) = value
"""

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: IAcadHatch) -> ACAD_COLOR

Set: color(self: IAcadHatch) = value
"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: IAcadHatch) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: IAcadHatch) -> object

"""

    Elevation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Elevation(self: IAcadHatch) -> float

Set: Elevation(self: IAcadHatch) = value
"""

    EntityName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityName(self: IAcadHatch) -> str

"""

    EntityTransparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityTransparency(self: IAcadHatch) -> str

Set: EntityTransparency(self: IAcadHatch) = value
"""

    EntityType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityType(self: IAcadHatch) -> int

"""

    GradientAngle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: GradientAngle(self: IAcadHatch) -> float

Set: GradientAngle(self: IAcadHatch) = value
"""

    GradientCentered = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: GradientCentered(self: IAcadHatch) -> bool

Set: GradientCentered(self: IAcadHatch) = value
"""

    GradientColor1 = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: GradientColor1(self: IAcadHatch) -> AcadAcCmColor

Set: GradientColor1(self: IAcadHatch) = value
"""

    GradientColor2 = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: GradientColor2(self: IAcadHatch) -> AcadAcCmColor

Set: GradientColor2(self: IAcadHatch) = value
"""

    GradientName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: GradientName(self: IAcadHatch) -> str

Set: GradientName(self: IAcadHatch) = value
"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: IAcadHatch) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: IAcadHatch) -> bool

"""

    HatchObjectType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HatchObjectType(self: IAcadHatch) -> AcHatchObjectType

Set: HatchObjectType(self: IAcadHatch) = value
"""

    HatchStyle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HatchStyle(self: IAcadHatch) -> AcHatchStyle

Set: HatchStyle(self: IAcadHatch) = value
"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: IAcadHatch) -> AcadHyperlinks

"""

    ISOPenWidth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ISOPenWidth(self: IAcadHatch) -> AcISOPenWidth

Set: ISOPenWidth(self: IAcadHatch) = value
"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layer(self: IAcadHatch) -> str

Set: Layer(self: IAcadHatch) = value
"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: IAcadHatch) -> str

Set: Linetype(self: IAcadHatch) = value
"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeScale(self: IAcadHatch) -> float

Set: LinetypeScale(self: IAcadHatch) = value
"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: IAcadHatch) -> ACAD_LWEIGHT

Set: Lineweight(self: IAcadHatch) = value
"""

    Material = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Material(self: IAcadHatch) -> str

Set: Material(self: IAcadHatch) = value
"""

    Normal = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Normal(self: IAcadHatch) -> object

Set: Normal(self: IAcadHatch) = value
"""

    NumberOfLoops = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: NumberOfLoops(self: IAcadHatch) -> int

"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: IAcadHatch) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: IAcadHatch) -> str

"""

    Origin = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Origin(self: IAcadHatch) -> object

Set: Origin(self: IAcadHatch) = value
"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: IAcadHatch) -> Int64

"""

    PatternAngle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PatternAngle(self: IAcadHatch) -> float

Set: PatternAngle(self: IAcadHatch) = value
"""

    PatternDouble = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PatternDouble(self: IAcadHatch) -> bool

Set: PatternDouble(self: IAcadHatch) = value
"""

    PatternName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PatternName(self: IAcadHatch) -> str

"""

    PatternScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PatternScale(self: IAcadHatch) -> float

Set: PatternScale(self: IAcadHatch) = value
"""

    PatternSpace = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PatternSpace(self: IAcadHatch) -> float

Set: PatternSpace(self: IAcadHatch) = value
"""

    PatternType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PatternType(self: IAcadHatch) -> AcPatternType

"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: IAcadHatch) -> str

Set: PlotStyleName(self: IAcadHatch) = value
"""

    TrueColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TrueColor(self: IAcadHatch) -> AcadAcCmColor

Set: TrueColor(self: IAcadHatch) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: IAcadHatch) -> bool

Set: Visible(self: IAcadHatch) = value
"""



class AcadHatch(IAcadHatch, IAcadEntity, IAcadObject, IAcadObjectEvents_Event):
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class AcadHatchClass(__ComObject):
    # no doc
    def add_Modified(self, A_1):
        """ add_Modified(self: AcadHatchClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def AppendInnerLoop(self, ObjectArray):
        """ AppendInnerLoop(self: AcadHatchClass, ObjectArray: object) """
        pass

    def AppendOuterLoop(self, ObjectArray):
        """ AppendOuterLoop(self: AcadHatchClass, ObjectArray: object) """
        pass

    def ArrayPolar(self, NumberOfObjects, AngleToFill, CenterPoint):
        """ ArrayPolar(self: AcadHatchClass, NumberOfObjects: int, AngleToFill: float, CenterPoint: object) -> object """
        pass

    def ArrayRectangular(self, NumberOfRows, NumberOfColumns, NumberOfLevels, DistBetweenRows, DistBetweenCols, DistBetweenLevels):
        """ ArrayRectangular(self: AcadHatchClass, NumberOfRows: int, NumberOfColumns: int, NumberOfLevels: int, DistBetweenRows: float, DistBetweenCols: float, DistBetweenLevels: float) -> object """
        pass

    def Copy(self):
        """ Copy(self: AcadHatchClass) -> object """
        pass

    def Delete(self):
        """ Delete(self: AcadHatchClass) """
        pass

    def Erase(self):
        """ Erase(self: AcadHatchClass) """
        pass

    def Evaluate(self):
        """ Evaluate(self: AcadHatchClass) """
        pass

    def GetBoundingBox(self, MinPoint, MaxPoint):
        """ GetBoundingBox(self: AcadHatchClass) -> (object, object) """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: AcadHatchClass) -> AcadDictionary """
        pass

    def GetLoopAt(self, Index, ObjectArray):
        """ GetLoopAt(self: AcadHatchClass, Index: int) -> object """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: AcadHatchClass, AppName: str) -> (object, object) """
        pass

    def Highlight(self, HighlightFlag):
        """ Highlight(self: AcadHatchClass, HighlightFlag: bool) """
        pass

    def InsertLoopAt(self, Index, LoopType, ObjectArray):
        """ InsertLoopAt(self: AcadHatchClass, Index: int, LoopType: AcLoopType, ObjectArray: object) """
        pass

    def IntersectWith(self, IntersectObject, option):
        """ IntersectWith(self: AcadHatchClass, IntersectObject: object, option: AcExtendOption) -> object """
        pass

    def Mirror(self, Point1, Point2):
        """ Mirror(self: AcadHatchClass, Point1: object, Point2: object) -> object """
        pass

    def Mirror3D(self, Point1, Point2, point3):
        """ Mirror3D(self: AcadHatchClass, Point1: object, Point2: object, point3: object) -> object """
        pass

    def Move(self, FromPoint, ToPoint):
        """ Move(self: AcadHatchClass, FromPoint: object, ToPoint: object) """
        pass

    def remove_Modified(self, A_1):
        """ remove_Modified(self: AcadHatchClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def Rotate(self, BasePoint, RotationAngle):
        """ Rotate(self: AcadHatchClass, BasePoint: object, RotationAngle: float) """
        pass

    def Rotate3D(self, Point1, Point2, RotationAngle):
        """ Rotate3D(self: AcadHatchClass, Point1: object, Point2: object, RotationAngle: float) """
        pass

    def ScaleEntity(self, BasePoint, ScaleFactor):
        """ ScaleEntity(self: AcadHatchClass, BasePoint: object, ScaleFactor: float) """
        pass

    def SetPattern(self, PatternType, PatternName):
        """ SetPattern(self: AcadHatchClass, PatternType: int, PatternName: str) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: AcadHatchClass, XDataType: object, XDataValue: object) """
        pass

    def TransformBy(self, TransformationMatrix):
        """ TransformBy(self: AcadHatchClass, TransformationMatrix: object) """
        pass

    def Update(self):
        """ Update(self: AcadHatchClass) """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: AcadHatchClass) -> object

"""

    Area = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Area(self: AcadHatchClass) -> float

"""

    AssociativeHatch = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AssociativeHatch(self: AcadHatchClass) -> bool

Set: AssociativeHatch(self: AcadHatchClass) = value
"""

    BackgroundColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BackgroundColor(self: AcadHatchClass) -> AcadAcCmColor

Set: BackgroundColor(self: AcadHatchClass) = value
"""

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: AcadHatchClass) -> ACAD_COLOR

Set: color(self: AcadHatchClass) = value
"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: AcadHatchClass) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: AcadHatchClass) -> object

"""

    Elevation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Elevation(self: AcadHatchClass) -> float

Set: Elevation(self: AcadHatchClass) = value
"""

    EntityName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityName(self: AcadHatchClass) -> str

"""

    EntityTransparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityTransparency(self: AcadHatchClass) -> str

Set: EntityTransparency(self: AcadHatchClass) = value
"""

    EntityType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityType(self: AcadHatchClass) -> int

"""

    GradientAngle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: GradientAngle(self: AcadHatchClass) -> float

Set: GradientAngle(self: AcadHatchClass) = value
"""

    GradientCentered = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: GradientCentered(self: AcadHatchClass) -> bool

Set: GradientCentered(self: AcadHatchClass) = value
"""

    GradientColor1 = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: GradientColor1(self: AcadHatchClass) -> AcadAcCmColor

Set: GradientColor1(self: AcadHatchClass) = value
"""

    GradientColor2 = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: GradientColor2(self: AcadHatchClass) -> AcadAcCmColor

Set: GradientColor2(self: AcadHatchClass) = value
"""

    GradientName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: GradientName(self: AcadHatchClass) -> str

Set: GradientName(self: AcadHatchClass) = value
"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: AcadHatchClass) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: AcadHatchClass) -> bool

"""

    HatchObjectType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HatchObjectType(self: AcadHatchClass) -> AcHatchObjectType

Set: HatchObjectType(self: AcadHatchClass) = value
"""

    HatchStyle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HatchStyle(self: AcadHatchClass) -> AcHatchStyle

Set: HatchStyle(self: AcadHatchClass) = value
"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: AcadHatchClass) -> AcadHyperlinks

"""

    ISOPenWidth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ISOPenWidth(self: AcadHatchClass) -> AcISOPenWidth

Set: ISOPenWidth(self: AcadHatchClass) = value
"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layer(self: AcadHatchClass) -> str

Set: Layer(self: AcadHatchClass) = value
"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: AcadHatchClass) -> str

Set: Linetype(self: AcadHatchClass) = value
"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeScale(self: AcadHatchClass) -> float

Set: LinetypeScale(self: AcadHatchClass) = value
"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: AcadHatchClass) -> ACAD_LWEIGHT

Set: Lineweight(self: AcadHatchClass) = value
"""

    Material = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Material(self: AcadHatchClass) -> str

Set: Material(self: AcadHatchClass) = value
"""

    Normal = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Normal(self: AcadHatchClass) -> object

Set: Normal(self: AcadHatchClass) = value
"""

    NumberOfLoops = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: NumberOfLoops(self: AcadHatchClass) -> int

"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: AcadHatchClass) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: AcadHatchClass) -> str

"""

    Origin = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Origin(self: AcadHatchClass) -> object

Set: Origin(self: AcadHatchClass) = value
"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: AcadHatchClass) -> Int64

"""

    PatternAngle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PatternAngle(self: AcadHatchClass) -> float

Set: PatternAngle(self: AcadHatchClass) = value
"""

    PatternDouble = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PatternDouble(self: AcadHatchClass) -> bool

Set: PatternDouble(self: AcadHatchClass) = value
"""

    PatternName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PatternName(self: AcadHatchClass) -> str

"""

    PatternScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PatternScale(self: AcadHatchClass) -> float

Set: PatternScale(self: AcadHatchClass) = value
"""

    PatternSpace = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PatternSpace(self: AcadHatchClass) -> float

Set: PatternSpace(self: AcadHatchClass) = value
"""

    PatternType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PatternType(self: AcadHatchClass) -> AcPatternType

"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: AcadHatchClass) -> str

Set: PlotStyleName(self: AcadHatchClass) = value
"""

    TrueColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TrueColor(self: AcadHatchClass) -> AcadAcCmColor

Set: TrueColor(self: AcadHatchClass) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: AcadHatchClass) -> bool

Set: Visible(self: AcadHatchClass) = value
"""


    Modified = None


class IAcadHelix(IAcadEntity, IAcadObject):
    # no doc
    def ArrayPolar(self, NumberOfObjects, AngleToFill, CenterPoint):
        """ ArrayPolar(self: IAcadHelix, NumberOfObjects: int, AngleToFill: float, CenterPoint: object) -> object """
        pass

    def ArrayRectangular(self, NumberOfRows, NumberOfColumns, NumberOfLevels, DistBetweenRows, DistBetweenCols, DistBetweenLevels):
        """ ArrayRectangular(self: IAcadHelix, NumberOfRows: int, NumberOfColumns: int, NumberOfLevels: int, DistBetweenRows: float, DistBetweenCols: float, DistBetweenLevels: float) -> object """
        pass

    def Copy(self):
        """ Copy(self: IAcadHelix) -> object """
        pass

    def Delete(self):
        """ Delete(self: IAcadHelix) """
        pass

    def Erase(self):
        """ Erase(self: IAcadHelix) """
        pass

    def GetBoundingBox(self, MinPoint, MaxPoint):
        """ GetBoundingBox(self: IAcadHelix) -> (object, object) """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: IAcadHelix) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: IAcadHelix, AppName: str) -> (object, object) """
        pass

    def Highlight(self, HighlightFlag):
        """ Highlight(self: IAcadHelix, HighlightFlag: bool) """
        pass

    def IntersectWith(self, IntersectObject, option):
        """ IntersectWith(self: IAcadHelix, IntersectObject: object, option: AcExtendOption) -> object """
        pass

    def Mirror(self, Point1, Point2):
        """ Mirror(self: IAcadHelix, Point1: object, Point2: object) -> object """
        pass

    def Mirror3D(self, Point1, Point2, point3):
        """ Mirror3D(self: IAcadHelix, Point1: object, Point2: object, point3: object) -> object """
        pass

    def Move(self, FromPoint, ToPoint):
        """ Move(self: IAcadHelix, FromPoint: object, ToPoint: object) """
        pass

    def Rotate(self, BasePoint, RotationAngle):
        """ Rotate(self: IAcadHelix, BasePoint: object, RotationAngle: float) """
        pass

    def Rotate3D(self, Point1, Point2, RotationAngle):
        """ Rotate3D(self: IAcadHelix, Point1: object, Point2: object, RotationAngle: float) """
        pass

    def ScaleEntity(self, BasePoint, ScaleFactor):
        """ ScaleEntity(self: IAcadHelix, BasePoint: object, ScaleFactor: float) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: IAcadHelix, XDataType: object, XDataValue: object) """
        pass

    def TransformBy(self, TransformationMatrix):
        """ TransformBy(self: IAcadHelix, TransformationMatrix: object) """
        pass

    def Update(self):
        """ Update(self: IAcadHelix) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IAcadHelix) -> object

"""

    BaseRadius = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BaseRadius(self: IAcadHelix) -> float

Set: BaseRadius(self: IAcadHelix) = value
"""

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: IAcadHelix) -> ACAD_COLOR

Set: color(self: IAcadHelix) = value
"""

    Constrain = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Constrain(self: IAcadHelix) -> AcHelixConstrainType

Set: Constrain(self: IAcadHelix) = value
"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: IAcadHelix) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: IAcadHelix) -> object

"""

    EntityName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityName(self: IAcadHelix) -> str

"""

    EntityTransparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityTransparency(self: IAcadHelix) -> str

Set: EntityTransparency(self: IAcadHelix) = value
"""

    EntityType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityType(self: IAcadHelix) -> int

"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: IAcadHelix) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: IAcadHelix) -> bool

"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: IAcadHelix) -> float

Set: Height(self: IAcadHelix) = value
"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: IAcadHelix) -> AcadHyperlinks

"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layer(self: IAcadHelix) -> str

Set: Layer(self: IAcadHelix) = value
"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: IAcadHelix) -> str

Set: Linetype(self: IAcadHelix) = value
"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeScale(self: IAcadHelix) -> float

Set: LinetypeScale(self: IAcadHelix) = value
"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: IAcadHelix) -> ACAD_LWEIGHT

Set: Lineweight(self: IAcadHelix) = value
"""

    Material = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Material(self: IAcadHelix) -> str

Set: Material(self: IAcadHelix) = value
"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: IAcadHelix) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: IAcadHelix) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: IAcadHelix) -> Int64

"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: IAcadHelix) -> str

Set: PlotStyleName(self: IAcadHelix) = value
"""

    Position = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Position(self: IAcadHelix) -> object

Set: Position(self: IAcadHelix) = value
"""

    TopRadius = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TopRadius(self: IAcadHelix) -> float

Set: TopRadius(self: IAcadHelix) = value
"""

    TotalLength = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TotalLength(self: IAcadHelix) -> float

"""

    TrueColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TrueColor(self: IAcadHelix) -> AcadAcCmColor

Set: TrueColor(self: IAcadHelix) = value
"""

    TurnHeight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TurnHeight(self: IAcadHelix) -> float

Set: TurnHeight(self: IAcadHelix) = value
"""

    Turns = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Turns(self: IAcadHelix) -> float

Set: Turns(self: IAcadHelix) = value
"""

    TurnSlope = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TurnSlope(self: IAcadHelix) -> float

"""

    Twist = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Twist(self: IAcadHelix) -> AcHelixTwistType

Set: Twist(self: IAcadHelix) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: IAcadHelix) -> bool

Set: Visible(self: IAcadHelix) = value
"""



class AcadHelix(IAcadHelix, IAcadEntity, IAcadObject, IAcadObjectEvents_Event):
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class AcadHelixClass(__ComObject):
    # no doc
    def add_Modified(self, A_1):
        """ add_Modified(self: AcadHelixClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def ArrayPolar(self, NumberOfObjects, AngleToFill, CenterPoint):
        """ ArrayPolar(self: AcadHelixClass, NumberOfObjects: int, AngleToFill: float, CenterPoint: object) -> object """
        pass

    def ArrayRectangular(self, NumberOfRows, NumberOfColumns, NumberOfLevels, DistBetweenRows, DistBetweenCols, DistBetweenLevels):
        """ ArrayRectangular(self: AcadHelixClass, NumberOfRows: int, NumberOfColumns: int, NumberOfLevels: int, DistBetweenRows: float, DistBetweenCols: float, DistBetweenLevels: float) -> object """
        pass

    def Copy(self):
        """ Copy(self: AcadHelixClass) -> object """
        pass

    def Delete(self):
        """ Delete(self: AcadHelixClass) """
        pass

    def Erase(self):
        """ Erase(self: AcadHelixClass) """
        pass

    def GetBoundingBox(self, MinPoint, MaxPoint):
        """ GetBoundingBox(self: AcadHelixClass) -> (object, object) """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: AcadHelixClass) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: AcadHelixClass, AppName: str) -> (object, object) """
        pass

    def Highlight(self, HighlightFlag):
        """ Highlight(self: AcadHelixClass, HighlightFlag: bool) """
        pass

    def IntersectWith(self, IntersectObject, option):
        """ IntersectWith(self: AcadHelixClass, IntersectObject: object, option: AcExtendOption) -> object """
        pass

    def Mirror(self, Point1, Point2):
        """ Mirror(self: AcadHelixClass, Point1: object, Point2: object) -> object """
        pass

    def Mirror3D(self, Point1, Point2, point3):
        """ Mirror3D(self: AcadHelixClass, Point1: object, Point2: object, point3: object) -> object """
        pass

    def Move(self, FromPoint, ToPoint):
        """ Move(self: AcadHelixClass, FromPoint: object, ToPoint: object) """
        pass

    def remove_Modified(self, A_1):
        """ remove_Modified(self: AcadHelixClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def Rotate(self, BasePoint, RotationAngle):
        """ Rotate(self: AcadHelixClass, BasePoint: object, RotationAngle: float) """
        pass

    def Rotate3D(self, Point1, Point2, RotationAngle):
        """ Rotate3D(self: AcadHelixClass, Point1: object, Point2: object, RotationAngle: float) """
        pass

    def ScaleEntity(self, BasePoint, ScaleFactor):
        """ ScaleEntity(self: AcadHelixClass, BasePoint: object, ScaleFactor: float) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: AcadHelixClass, XDataType: object, XDataValue: object) """
        pass

    def TransformBy(self, TransformationMatrix):
        """ TransformBy(self: AcadHelixClass, TransformationMatrix: object) """
        pass

    def Update(self):
        """ Update(self: AcadHelixClass) """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: AcadHelixClass) -> object

"""

    BaseRadius = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BaseRadius(self: AcadHelixClass) -> float

Set: BaseRadius(self: AcadHelixClass) = value
"""

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: AcadHelixClass) -> ACAD_COLOR

Set: color(self: AcadHelixClass) = value
"""

    Constrain = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Constrain(self: AcadHelixClass) -> AcHelixConstrainType

Set: Constrain(self: AcadHelixClass) = value
"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: AcadHelixClass) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: AcadHelixClass) -> object

"""

    EntityName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityName(self: AcadHelixClass) -> str

"""

    EntityTransparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityTransparency(self: AcadHelixClass) -> str

Set: EntityTransparency(self: AcadHelixClass) = value
"""

    EntityType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityType(self: AcadHelixClass) -> int

"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: AcadHelixClass) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: AcadHelixClass) -> bool

"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: AcadHelixClass) -> float

Set: Height(self: AcadHelixClass) = value
"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: AcadHelixClass) -> AcadHyperlinks

"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layer(self: AcadHelixClass) -> str

Set: Layer(self: AcadHelixClass) = value
"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: AcadHelixClass) -> str

Set: Linetype(self: AcadHelixClass) = value
"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeScale(self: AcadHelixClass) -> float

Set: LinetypeScale(self: AcadHelixClass) = value
"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: AcadHelixClass) -> ACAD_LWEIGHT

Set: Lineweight(self: AcadHelixClass) = value
"""

    Material = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Material(self: AcadHelixClass) -> str

Set: Material(self: AcadHelixClass) = value
"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: AcadHelixClass) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: AcadHelixClass) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: AcadHelixClass) -> Int64

"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: AcadHelixClass) -> str

Set: PlotStyleName(self: AcadHelixClass) = value
"""

    Position = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Position(self: AcadHelixClass) -> object

Set: Position(self: AcadHelixClass) = value
"""

    TopRadius = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TopRadius(self: AcadHelixClass) -> float

Set: TopRadius(self: AcadHelixClass) = value
"""

    TotalLength = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TotalLength(self: AcadHelixClass) -> float

"""

    TrueColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TrueColor(self: AcadHelixClass) -> AcadAcCmColor

Set: TrueColor(self: AcadHelixClass) = value
"""

    TurnHeight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TurnHeight(self: AcadHelixClass) -> float

Set: TurnHeight(self: AcadHelixClass) = value
"""

    Turns = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Turns(self: AcadHelixClass) -> float

Set: Turns(self: AcadHelixClass) = value
"""

    TurnSlope = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TurnSlope(self: AcadHelixClass) -> float

"""

    Twist = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Twist(self: AcadHelixClass) -> AcHelixTwistType

Set: Twist(self: AcadHelixClass) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: AcadHelixClass) -> bool

Set: Visible(self: AcadHelixClass) = value
"""


    Modified = None


class IAcadHyperlink:
    # no doc
    def Delete(self):
        """ Delete(self: IAcadHyperlink) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IAcadHyperlink) -> object

"""

    URL = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: URL(self: IAcadHyperlink) -> str

Set: URL(self: IAcadHyperlink) = value
"""

    URLDescription = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: URLDescription(self: IAcadHyperlink) -> str

Set: URLDescription(self: IAcadHyperlink) = value
"""

    URLNamedLocation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: URLNamedLocation(self: IAcadHyperlink) -> str

Set: URLNamedLocation(self: IAcadHyperlink) = value
"""



class AcadHyperlink(IAcadHyperlink):
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class AcadHyperlinkClass(__ComObject):
    # no doc
    def Delete(self):
        """ Delete(self: AcadHyperlinkClass) """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: AcadHyperlinkClass) -> object

"""

    URL = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: URL(self: AcadHyperlinkClass) -> str

Set: URL(self: AcadHyperlinkClass) = value
"""

    URLDescription = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: URLDescription(self: AcadHyperlinkClass) -> str

Set: URLDescription(self: AcadHyperlinkClass) = value
"""

    URLNamedLocation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: URLNamedLocation(self: AcadHyperlinkClass) -> str

Set: URLNamedLocation(self: AcadHyperlinkClass) = value
"""



class IAcadHyperlinks(IEnumerable):
    # no doc
    def Add(self, Name, Description, NamedLocation):
        """ Add(self: IAcadHyperlinks, Name: str, Description: object, NamedLocation: object) -> AcadHyperlink """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: IAcadHyperlinks) -> IEnumerator """
        pass

    def Item(self, Index):
        """ Item(self: IAcadHyperlinks, Index: int) -> AcadHyperlink """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IAcadHyperlinks) -> object

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: IAcadHyperlinks) -> int

"""



class AcadHyperlinks(IAcadHyperlinks, IEnumerable):
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerable) -> object """
        pass


class AcadHyperlinksClass(__ComObject):
    # no doc
    def Add(self, Name, Description, NamedLocation):
        """ Add(self: AcadHyperlinksClass, Name: str, Description: object, NamedLocation: object) -> AcadHyperlink """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: AcadHyperlinksClass) -> IEnumerator """
        pass

    def Item(self, Index):
        """ Item(self: AcadHyperlinksClass, Index: int) -> AcadHyperlink """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerable) -> object """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: AcadHyperlinksClass) -> object

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: AcadHyperlinksClass) -> int

"""



class IAcadIdPair:
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IAcadIdPair) -> object

"""

    IsCloned = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IsCloned(self: IAcadIdPair) -> bool

"""

    IsOwnerXlated = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IsOwnerXlated(self: IAcadIdPair) -> bool

"""

    IsPrimary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IsPrimary(self: IAcadIdPair) -> bool

"""

    key = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: key(self: IAcadIdPair) -> Int64

"""

    Value = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Value(self: IAcadIdPair) -> Int64

"""



class AcadIdPair(IAcadIdPair):
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class AcadIdPairClass(__ComObject):
    # no doc
    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: AcadIdPairClass) -> object

"""

    IsCloned = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IsCloned(self: AcadIdPairClass) -> bool

"""

    IsOwnerXlated = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IsOwnerXlated(self: AcadIdPairClass) -> bool

"""

    IsPrimary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IsPrimary(self: AcadIdPairClass) -> bool

"""

    key = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: key(self: AcadIdPairClass) -> Int64

"""

    Value = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Value(self: AcadIdPairClass) -> Int64

"""



class IAcadLayer(IAcadObject):
    # no doc
    def Delete(self):
        """ Delete(self: IAcadLayer) """
        pass

    def Erase(self):
        """ Erase(self: IAcadLayer) """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: IAcadLayer) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: IAcadLayer, AppName: str) -> (object, object) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: IAcadLayer, XDataType: object, XDataValue: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IAcadLayer) -> object

"""

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: IAcadLayer) -> AcColor

Set: color(self: IAcadLayer) = value
"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: IAcadLayer) -> AcadDatabase

"""

    Description = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Description(self: IAcadLayer) -> str

Set: Description(self: IAcadLayer) = value
"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: IAcadLayer) -> object

"""

    Freeze = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Freeze(self: IAcadLayer) -> bool

Set: Freeze(self: IAcadLayer) = value
"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: IAcadLayer) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: IAcadLayer) -> bool

"""

    LayerOn = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LayerOn(self: IAcadLayer) -> bool

Set: LayerOn(self: IAcadLayer) = value
"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: IAcadLayer) -> str

Set: Linetype(self: IAcadLayer) = value
"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: IAcadLayer) -> ACAD_LWEIGHT

Set: Lineweight(self: IAcadLayer) = value
"""

    Lock = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lock(self: IAcadLayer) -> bool

Set: Lock(self: IAcadLayer) = value
"""

    Material = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Material(self: IAcadLayer) -> str

Set: Material(self: IAcadLayer) = value
"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: IAcadLayer) -> str

Set: Name(self: IAcadLayer) = value
"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: IAcadLayer) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: IAcadLayer) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: IAcadLayer) -> Int64

"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: IAcadLayer) -> str

Set: PlotStyleName(self: IAcadLayer) = value
"""

    Plottable = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Plottable(self: IAcadLayer) -> bool

Set: Plottable(self: IAcadLayer) = value
"""

    TrueColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TrueColor(self: IAcadLayer) -> AcadAcCmColor

Set: TrueColor(self: IAcadLayer) = value
"""

    Used = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Used(self: IAcadLayer) -> bool

"""

    ViewportDefault = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ViewportDefault(self: IAcadLayer) -> bool

Set: ViewportDefault(self: IAcadLayer) = value
"""



class AcadLayer(IAcadLayer, IAcadObject, IAcadObjectEvents_Event):
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class AcadLayerClass(__ComObject):
    # no doc
    def add_Modified(self, A_1):
        """ add_Modified(self: AcadLayerClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def Delete(self):
        """ Delete(self: AcadLayerClass) """
        pass

    def Erase(self):
        """ Erase(self: AcadLayerClass) """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: AcadLayerClass) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: AcadLayerClass, AppName: str) -> (object, object) """
        pass

    def remove_Modified(self, A_1):
        """ remove_Modified(self: AcadLayerClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: AcadLayerClass, XDataType: object, XDataValue: object) """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: AcadLayerClass) -> object

"""

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: AcadLayerClass) -> AcColor

Set: color(self: AcadLayerClass) = value
"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: AcadLayerClass) -> AcadDatabase

"""

    Description = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Description(self: AcadLayerClass) -> str

Set: Description(self: AcadLayerClass) = value
"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: AcadLayerClass) -> object

"""

    Freeze = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Freeze(self: AcadLayerClass) -> bool

Set: Freeze(self: AcadLayerClass) = value
"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: AcadLayerClass) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: AcadLayerClass) -> bool

"""

    LayerOn = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LayerOn(self: AcadLayerClass) -> bool

Set: LayerOn(self: AcadLayerClass) = value
"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: AcadLayerClass) -> str

Set: Linetype(self: AcadLayerClass) = value
"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: AcadLayerClass) -> ACAD_LWEIGHT

Set: Lineweight(self: AcadLayerClass) = value
"""

    Lock = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lock(self: AcadLayerClass) -> bool

Set: Lock(self: AcadLayerClass) = value
"""

    Material = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Material(self: AcadLayerClass) -> str

Set: Material(self: AcadLayerClass) = value
"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: AcadLayerClass) -> str

Set: Name(self: AcadLayerClass) = value
"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: AcadLayerClass) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: AcadLayerClass) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: AcadLayerClass) -> Int64

"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: AcadLayerClass) -> str

Set: PlotStyleName(self: AcadLayerClass) = value
"""

    Plottable = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Plottable(self: AcadLayerClass) -> bool

Set: Plottable(self: AcadLayerClass) = value
"""

    TrueColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TrueColor(self: AcadLayerClass) -> AcadAcCmColor

Set: TrueColor(self: AcadLayerClass) = value
"""

    Used = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Used(self: AcadLayerClass) -> bool

"""

    ViewportDefault = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ViewportDefault(self: AcadLayerClass) -> bool

Set: ViewportDefault(self: AcadLayerClass) = value
"""


    Modified = None


class IAcadLayers(IAcadObject, IEnumerable):
    # no doc
    def Add(self, Name):
        """ Add(self: IAcadLayers, Name: str) -> AcadLayer """
        pass

    def Delete(self):
        """ Delete(self: IAcadLayers) """
        pass

    def Erase(self):
        """ Erase(self: IAcadLayers) """
        pass

    def GenerateUsageData(self):
        """ GenerateUsageData(self: IAcadLayers) """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: IAcadLayers) -> IEnumerator """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: IAcadLayers) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: IAcadLayers, AppName: str) -> (object, object) """
        pass

    def Item(self, Index):
        """ Item(self: IAcadLayers, Index: object) -> AcadLayer """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: IAcadLayers, XDataType: object, XDataValue: object) """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerable) -> object """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IAcadLayers) -> object

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: IAcadLayers) -> int

"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: IAcadLayers) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: IAcadLayers) -> object

"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: IAcadLayers) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: IAcadLayers) -> bool

"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: IAcadLayers) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: IAcadLayers) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: IAcadLayers) -> Int64

"""



class AcadLayers(IAcadLayers, IAcadObject, IEnumerable, IAcadObjectEvents_Event):
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerable) -> object """
        pass


class AcadLayersClass(__ComObject):
    # no doc
    def Add(self, Name):
        """ Add(self: AcadLayersClass, Name: str) -> AcadLayer """
        pass

    def add_Modified(self, A_1):
        """ add_Modified(self: AcadLayersClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def Delete(self):
        """ Delete(self: AcadLayersClass) """
        pass

    def Erase(self):
        """ Erase(self: AcadLayersClass) """
        pass

    def GenerateUsageData(self):
        """ GenerateUsageData(self: AcadLayersClass) """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: AcadLayersClass) -> IEnumerator """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: AcadLayersClass) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: AcadLayersClass, AppName: str) -> (object, object) """
        pass

    def Item(self, Index):
        """ Item(self: AcadLayersClass, Index: object) -> AcadLayer """
        pass

    def remove_Modified(self, A_1):
        """ remove_Modified(self: AcadLayersClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: AcadLayersClass, XDataType: object, XDataValue: object) """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerable) -> object """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: AcadLayersClass) -> object

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: AcadLayersClass) -> int

"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: AcadLayersClass) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: AcadLayersClass) -> object

"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: AcadLayersClass) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: AcadLayersClass) -> bool

"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: AcadLayersClass) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: AcadLayersClass) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: AcadLayersClass) -> Int64

"""


    Modified = None


class IAcadLayerStateManager:
    # no doc
    def Delete(self, bsName):
        """ Delete(self: IAcadLayerStateManager, bsName: str) """
        pass

    def Export(self, bsName, bsFilename):
        """ Export(self: IAcadLayerStateManager, bsName: str, bsFilename: str) """
        pass

    def Import(self, bsFilename):
        """ Import(self: IAcadLayerStateManager, bsFilename: str) """
        pass

    def Rename(self, bsName, bsNewName):
        """ Rename(self: IAcadLayerStateManager, bsName: str, bsNewName: str) """
        pass

    def Restore(self, bsName):
        """ Restore(self: IAcadLayerStateManager, bsName: str) """
        pass

    def Save(self, bsName, eMask):
        """ Save(self: IAcadLayerStateManager, bsName: str, eMask: AcLayerStateMask) """
        pass

    def SetDatabase(self, iHostDb):
        """ SetDatabase(self: IAcadLayerStateManager, iHostDb: AcadDatabase) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class AcadLayerStateManager(IAcadLayerStateManager):
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class AcadLayerStateManagerClass(__ComObject):
    """ AcadLayerStateManagerClass() """
    def Delete(self, bsName):
        """ Delete(self: AcadLayerStateManagerClass, bsName: str) """
        pass

    def Export(self, bsName, bsFilename):
        """ Export(self: AcadLayerStateManagerClass, bsName: str, bsFilename: str) """
        pass

    def Import(self, bsFilename):
        """ Import(self: AcadLayerStateManagerClass, bsFilename: str) """
        pass

    def Rename(self, bsName, bsNewName):
        """ Rename(self: AcadLayerStateManagerClass, bsName: str, bsNewName: str) """
        pass

    def Restore(self, bsName):
        """ Restore(self: AcadLayerStateManagerClass, bsName: str) """
        pass

    def Save(self, bsName, eMask):
        """ Save(self: AcadLayerStateManagerClass, bsName: str, eMask: AcLayerStateMask) """
        pass

    def SetDatabase(self, iHostDb):
        """ SetDatabase(self: AcadLayerStateManagerClass, iHostDb: AcadDatabase) """
        pass


class IAcadPlotConfiguration(IAcadObject):
    # no doc
    def CopyFrom(self, pPlotConfig):
        """ CopyFrom(self: IAcadPlotConfiguration, pPlotConfig: AcadPlotConfiguration) """
        pass

    def Delete(self):
        """ Delete(self: IAcadPlotConfiguration) """
        pass

    def Erase(self):
        """ Erase(self: IAcadPlotConfiguration) """
        pass

    def GetCanonicalMediaNames(self):
        """ GetCanonicalMediaNames(self: IAcadPlotConfiguration) -> object """
        pass

    def GetCustomScale(self, Numerator, Denominator):
        """ GetCustomScale(self: IAcadPlotConfiguration) -> (float, float) """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: IAcadPlotConfiguration) -> AcadDictionary """
        pass

    def GetLocaleMediaName(self, Name):
        """ GetLocaleMediaName(self: IAcadPlotConfiguration, Name: str) -> str """
        pass

    def GetPaperMargins(self, LowerLeft, UpperRight):
        """ GetPaperMargins(self: IAcadPlotConfiguration) -> (object, object) """
        pass

    def GetPaperSize(self, Width, Height):
        """ GetPaperSize(self: IAcadPlotConfiguration) -> (float, float) """
        pass

    def GetPlotDeviceNames(self):
        """ GetPlotDeviceNames(self: IAcadPlotConfiguration) -> object """
        pass

    def GetPlotStyleTableNames(self):
        """ GetPlotStyleTableNames(self: IAcadPlotConfiguration) -> object """
        pass

    def GetWindowToPlot(self, LowerLeft, UpperRight):
        """ GetWindowToPlot(self: IAcadPlotConfiguration) -> (object, object) """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: IAcadPlotConfiguration, AppName: str) -> (object, object) """
        pass

    def RefreshPlotDeviceInfo(self):
        """ RefreshPlotDeviceInfo(self: IAcadPlotConfiguration) """
        pass

    def SetCustomScale(self, Numerator, Denominator):
        """ SetCustomScale(self: IAcadPlotConfiguration, Numerator: float, Denominator: float) """
        pass

    def SetWindowToPlot(self, LowerLeft, UpperRight):
        """ SetWindowToPlot(self: IAcadPlotConfiguration, LowerLeft: object, UpperRight: object) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: IAcadPlotConfiguration, XDataType: object, XDataValue: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IAcadPlotConfiguration) -> object

"""

    CanonicalMediaName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CanonicalMediaName(self: IAcadPlotConfiguration) -> str

Set: CanonicalMediaName(self: IAcadPlotConfiguration) = value
"""

    CenterPlot = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CenterPlot(self: IAcadPlotConfiguration) -> bool

Set: CenterPlot(self: IAcadPlotConfiguration) = value
"""

    ConfigName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ConfigName(self: IAcadPlotConfiguration) -> str

Set: ConfigName(self: IAcadPlotConfiguration) = value
"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: IAcadPlotConfiguration) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: IAcadPlotConfiguration) -> object

"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: IAcadPlotConfiguration) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: IAcadPlotConfiguration) -> bool

"""

    ModelType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ModelType(self: IAcadPlotConfiguration) -> bool

"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: IAcadPlotConfiguration) -> str

Set: Name(self: IAcadPlotConfiguration) = value
"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: IAcadPlotConfiguration) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: IAcadPlotConfiguration) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: IAcadPlotConfiguration) -> Int64

"""

    PaperUnits = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PaperUnits(self: IAcadPlotConfiguration) -> AcPlotPaperUnits

Set: PaperUnits(self: IAcadPlotConfiguration) = value
"""

    PlotHidden = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotHidden(self: IAcadPlotConfiguration) -> bool

Set: PlotHidden(self: IAcadPlotConfiguration) = value
"""

    PlotOrigin = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotOrigin(self: IAcadPlotConfiguration) -> object

Set: PlotOrigin(self: IAcadPlotConfiguration) = value
"""

    PlotRotation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotRotation(self: IAcadPlotConfiguration) -> AcPlotRotation

Set: PlotRotation(self: IAcadPlotConfiguration) = value
"""

    PlotType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotType(self: IAcadPlotConfiguration) -> AcPlotType

Set: PlotType(self: IAcadPlotConfiguration) = value
"""

    PlotViewportBorders = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotViewportBorders(self: IAcadPlotConfiguration) -> bool

Set: PlotViewportBorders(self: IAcadPlotConfiguration) = value
"""

    PlotViewportsFirst = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotViewportsFirst(self: IAcadPlotConfiguration) -> bool

Set: PlotViewportsFirst(self: IAcadPlotConfiguration) = value
"""

    PlotWithLineweights = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotWithLineweights(self: IAcadPlotConfiguration) -> bool

Set: PlotWithLineweights(self: IAcadPlotConfiguration) = value
"""

    PlotWithPlotStyles = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotWithPlotStyles(self: IAcadPlotConfiguration) -> bool

Set: PlotWithPlotStyles(self: IAcadPlotConfiguration) = value
"""

    ScaleLineweights = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ScaleLineweights(self: IAcadPlotConfiguration) -> bool

Set: ScaleLineweights(self: IAcadPlotConfiguration) = value
"""

    ShowPlotStyles = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowPlotStyles(self: IAcadPlotConfiguration) -> bool

Set: ShowPlotStyles(self: IAcadPlotConfiguration) = value
"""

    StandardScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: StandardScale(self: IAcadPlotConfiguration) -> AcPlotScale

Set: StandardScale(self: IAcadPlotConfiguration) = value
"""

    StyleSheet = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: StyleSheet(self: IAcadPlotConfiguration) -> str

Set: StyleSheet(self: IAcadPlotConfiguration) = value
"""

    UseStandardScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: UseStandardScale(self: IAcadPlotConfiguration) -> bool

Set: UseStandardScale(self: IAcadPlotConfiguration) = value
"""

    ViewToPlot = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ViewToPlot(self: IAcadPlotConfiguration) -> str

Set: ViewToPlot(self: IAcadPlotConfiguration) = value
"""



class IAcadLayout(IAcadPlotConfiguration, IAcadObject):
    # no doc
    def CopyFrom(self, pPlotConfig):
        """ CopyFrom(self: IAcadLayout, pPlotConfig: AcadPlotConfiguration) """
        pass

    def Delete(self):
        """ Delete(self: IAcadLayout) """
        pass

    def Erase(self):
        """ Erase(self: IAcadLayout) """
        pass

    def GetCanonicalMediaNames(self):
        """ GetCanonicalMediaNames(self: IAcadLayout) -> object """
        pass

    def GetCustomScale(self, Numerator, Denominator):
        """ GetCustomScale(self: IAcadLayout) -> (float, float) """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: IAcadLayout) -> AcadDictionary """
        pass

    def GetLocaleMediaName(self, Name):
        """ GetLocaleMediaName(self: IAcadLayout, Name: str) -> str """
        pass

    def GetPaperMargins(self, LowerLeft, UpperRight):
        """ GetPaperMargins(self: IAcadLayout) -> (object, object) """
        pass

    def GetPaperSize(self, Width, Height):
        """ GetPaperSize(self: IAcadLayout) -> (float, float) """
        pass

    def GetPlotDeviceNames(self):
        """ GetPlotDeviceNames(self: IAcadLayout) -> object """
        pass

    def GetPlotStyleTableNames(self):
        """ GetPlotStyleTableNames(self: IAcadLayout) -> object """
        pass

    def GetWindowToPlot(self, LowerLeft, UpperRight):
        """ GetWindowToPlot(self: IAcadLayout) -> (object, object) """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: IAcadLayout, AppName: str) -> (object, object) """
        pass

    def RefreshPlotDeviceInfo(self):
        """ RefreshPlotDeviceInfo(self: IAcadLayout) """
        pass

    def SetCustomScale(self, Numerator, Denominator):
        """ SetCustomScale(self: IAcadLayout, Numerator: float, Denominator: float) """
        pass

    def SetWindowToPlot(self, LowerLeft, UpperRight):
        """ SetWindowToPlot(self: IAcadLayout, LowerLeft: object, UpperRight: object) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: IAcadLayout, XDataType: object, XDataValue: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IAcadLayout) -> object

"""

    Block = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Block(self: IAcadLayout) -> AcadBlock

"""

    CanonicalMediaName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CanonicalMediaName(self: IAcadLayout) -> str

Set: CanonicalMediaName(self: IAcadLayout) = value
"""

    CenterPlot = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CenterPlot(self: IAcadLayout) -> bool

Set: CenterPlot(self: IAcadLayout) = value
"""

    ConfigName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ConfigName(self: IAcadLayout) -> str

Set: ConfigName(self: IAcadLayout) = value
"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: IAcadLayout) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: IAcadLayout) -> object

"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: IAcadLayout) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: IAcadLayout) -> bool

"""

    ModelType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ModelType(self: IAcadLayout) -> bool

"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: IAcadLayout) -> str

Set: Name(self: IAcadLayout) = value
"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: IAcadLayout) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: IAcadLayout) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: IAcadLayout) -> Int64

"""

    PaperUnits = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PaperUnits(self: IAcadLayout) -> AcPlotPaperUnits

Set: PaperUnits(self: IAcadLayout) = value
"""

    PlotHidden = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotHidden(self: IAcadLayout) -> bool

Set: PlotHidden(self: IAcadLayout) = value
"""

    PlotOrigin = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotOrigin(self: IAcadLayout) -> object

Set: PlotOrigin(self: IAcadLayout) = value
"""

    PlotRotation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotRotation(self: IAcadLayout) -> AcPlotRotation

Set: PlotRotation(self: IAcadLayout) = value
"""

    PlotType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotType(self: IAcadLayout) -> AcPlotType

Set: PlotType(self: IAcadLayout) = value
"""

    PlotViewportBorders = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotViewportBorders(self: IAcadLayout) -> bool

Set: PlotViewportBorders(self: IAcadLayout) = value
"""

    PlotViewportsFirst = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotViewportsFirst(self: IAcadLayout) -> bool

Set: PlotViewportsFirst(self: IAcadLayout) = value
"""

    PlotWithLineweights = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotWithLineweights(self: IAcadLayout) -> bool

Set: PlotWithLineweights(self: IAcadLayout) = value
"""

    PlotWithPlotStyles = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotWithPlotStyles(self: IAcadLayout) -> bool

Set: PlotWithPlotStyles(self: IAcadLayout) = value
"""

    ScaleLineweights = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ScaleLineweights(self: IAcadLayout) -> bool

Set: ScaleLineweights(self: IAcadLayout) = value
"""

    ShowPlotStyles = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowPlotStyles(self: IAcadLayout) -> bool

Set: ShowPlotStyles(self: IAcadLayout) = value
"""

    StandardScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: StandardScale(self: IAcadLayout) -> AcPlotScale

Set: StandardScale(self: IAcadLayout) = value
"""

    StyleSheet = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: StyleSheet(self: IAcadLayout) -> str

Set: StyleSheet(self: IAcadLayout) = value
"""

    TabOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TabOrder(self: IAcadLayout) -> int

Set: TabOrder(self: IAcadLayout) = value
"""

    UseStandardScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: UseStandardScale(self: IAcadLayout) -> bool

Set: UseStandardScale(self: IAcadLayout) = value
"""

    ViewToPlot = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ViewToPlot(self: IAcadLayout) -> str

Set: ViewToPlot(self: IAcadLayout) = value
"""



class AcadLayout(IAcadLayout, IAcadPlotConfiguration, IAcadObject, IAcadObjectEvents_Event):
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class AcadLayoutClass(__ComObject):
    # no doc
    def add_Modified(self, A_1):
        """ add_Modified(self: AcadLayoutClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def CopyFrom(self, pPlotConfig):
        """ CopyFrom(self: AcadLayoutClass, pPlotConfig: AcadPlotConfiguration) """
        pass

    def Delete(self):
        """ Delete(self: AcadLayoutClass) """
        pass

    def Erase(self):
        """ Erase(self: AcadLayoutClass) """
        pass

    def GetCanonicalMediaNames(self):
        """ GetCanonicalMediaNames(self: AcadLayoutClass) -> object """
        pass

    def GetCustomScale(self, Numerator, Denominator):
        """ GetCustomScale(self: AcadLayoutClass) -> (float, float) """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: AcadLayoutClass) -> AcadDictionary """
        pass

    def GetLocaleMediaName(self, Name):
        """ GetLocaleMediaName(self: AcadLayoutClass, Name: str) -> str """
        pass

    def GetPaperMargins(self, LowerLeft, UpperRight):
        """ GetPaperMargins(self: AcadLayoutClass) -> (object, object) """
        pass

    def GetPaperSize(self, Width, Height):
        """ GetPaperSize(self: AcadLayoutClass) -> (float, float) """
        pass

    def GetPlotDeviceNames(self):
        """ GetPlotDeviceNames(self: AcadLayoutClass) -> object """
        pass

    def GetPlotStyleTableNames(self):
        """ GetPlotStyleTableNames(self: AcadLayoutClass) -> object """
        pass

    def GetWindowToPlot(self, LowerLeft, UpperRight):
        """ GetWindowToPlot(self: AcadLayoutClass) -> (object, object) """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: AcadLayoutClass, AppName: str) -> (object, object) """
        pass

    def RefreshPlotDeviceInfo(self):
        """ RefreshPlotDeviceInfo(self: AcadLayoutClass) """
        pass

    def remove_Modified(self, A_1):
        """ remove_Modified(self: AcadLayoutClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def SetCustomScale(self, Numerator, Denominator):
        """ SetCustomScale(self: AcadLayoutClass, Numerator: float, Denominator: float) """
        pass

    def SetWindowToPlot(self, LowerLeft, UpperRight):
        """ SetWindowToPlot(self: AcadLayoutClass, LowerLeft: object, UpperRight: object) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: AcadLayoutClass, XDataType: object, XDataValue: object) """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: AcadLayoutClass) -> object

"""

    Block = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Block(self: AcadLayoutClass) -> AcadBlock

"""

    CanonicalMediaName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CanonicalMediaName(self: AcadLayoutClass) -> str

Set: CanonicalMediaName(self: AcadLayoutClass) = value
"""

    CenterPlot = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CenterPlot(self: AcadLayoutClass) -> bool

Set: CenterPlot(self: AcadLayoutClass) = value
"""

    ConfigName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ConfigName(self: AcadLayoutClass) -> str

Set: ConfigName(self: AcadLayoutClass) = value
"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: AcadLayoutClass) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: AcadLayoutClass) -> object

"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: AcadLayoutClass) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: AcadLayoutClass) -> bool

"""

    ModelType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ModelType(self: AcadLayoutClass) -> bool

"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: AcadLayoutClass) -> str

Set: Name(self: AcadLayoutClass) = value
"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: AcadLayoutClass) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: AcadLayoutClass) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: AcadLayoutClass) -> Int64

"""

    PaperUnits = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PaperUnits(self: AcadLayoutClass) -> AcPlotPaperUnits

Set: PaperUnits(self: AcadLayoutClass) = value
"""

    PlotHidden = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotHidden(self: AcadLayoutClass) -> bool

Set: PlotHidden(self: AcadLayoutClass) = value
"""

    PlotOrigin = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotOrigin(self: AcadLayoutClass) -> object

Set: PlotOrigin(self: AcadLayoutClass) = value
"""

    PlotRotation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotRotation(self: AcadLayoutClass) -> AcPlotRotation

Set: PlotRotation(self: AcadLayoutClass) = value
"""

    PlotType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotType(self: AcadLayoutClass) -> AcPlotType

Set: PlotType(self: AcadLayoutClass) = value
"""

    PlotViewportBorders = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotViewportBorders(self: AcadLayoutClass) -> bool

Set: PlotViewportBorders(self: AcadLayoutClass) = value
"""

    PlotViewportsFirst = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotViewportsFirst(self: AcadLayoutClass) -> bool

Set: PlotViewportsFirst(self: AcadLayoutClass) = value
"""

    PlotWithLineweights = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotWithLineweights(self: AcadLayoutClass) -> bool

Set: PlotWithLineweights(self: AcadLayoutClass) = value
"""

    PlotWithPlotStyles = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotWithPlotStyles(self: AcadLayoutClass) -> bool

Set: PlotWithPlotStyles(self: AcadLayoutClass) = value
"""

    ScaleLineweights = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ScaleLineweights(self: AcadLayoutClass) -> bool

Set: ScaleLineweights(self: AcadLayoutClass) = value
"""

    ShowPlotStyles = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowPlotStyles(self: AcadLayoutClass) -> bool

Set: ShowPlotStyles(self: AcadLayoutClass) = value
"""

    StandardScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: StandardScale(self: AcadLayoutClass) -> AcPlotScale

Set: StandardScale(self: AcadLayoutClass) = value
"""

    StyleSheet = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: StyleSheet(self: AcadLayoutClass) -> str

Set: StyleSheet(self: AcadLayoutClass) = value
"""

    TabOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TabOrder(self: AcadLayoutClass) -> int

Set: TabOrder(self: AcadLayoutClass) = value
"""

    UseStandardScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: UseStandardScale(self: AcadLayoutClass) -> bool

Set: UseStandardScale(self: AcadLayoutClass) = value
"""

    ViewToPlot = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ViewToPlot(self: AcadLayoutClass) -> str

Set: ViewToPlot(self: AcadLayoutClass) = value
"""


    Modified = None


class IAcadLayouts(IAcadObject, IEnumerable):
    # no doc
    def Add(self, Name):
        """ Add(self: IAcadLayouts, Name: str) -> AcadLayout """
        pass

    def Delete(self):
        """ Delete(self: IAcadLayouts) """
        pass

    def Erase(self):
        """ Erase(self: IAcadLayouts) """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: IAcadLayouts) -> IEnumerator """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: IAcadLayouts) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: IAcadLayouts, AppName: str) -> (object, object) """
        pass

    def Item(self, Index):
        """ Item(self: IAcadLayouts, Index: object) -> AcadLayout """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: IAcadLayouts, XDataType: object, XDataValue: object) """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerable) -> object """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IAcadLayouts) -> object

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: IAcadLayouts) -> int

"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: IAcadLayouts) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: IAcadLayouts) -> object

"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: IAcadLayouts) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: IAcadLayouts) -> bool

"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: IAcadLayouts) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: IAcadLayouts) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: IAcadLayouts) -> Int64

"""



class AcadLayouts(IAcadLayouts, IAcadObject, IEnumerable, IAcadObjectEvents_Event):
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerable) -> object """
        pass


class AcadLayoutsClass(__ComObject):
    # no doc
    def Add(self, Name):
        """ Add(self: AcadLayoutsClass, Name: str) -> AcadLayout """
        pass

    def add_Modified(self, A_1):
        """ add_Modified(self: AcadLayoutsClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def Delete(self):
        """ Delete(self: AcadLayoutsClass) """
        pass

    def Erase(self):
        """ Erase(self: AcadLayoutsClass) """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: AcadLayoutsClass) -> IEnumerator """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: AcadLayoutsClass) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: AcadLayoutsClass, AppName: str) -> (object, object) """
        pass

    def Item(self, Index):
        """ Item(self: AcadLayoutsClass, Index: object) -> AcadLayout """
        pass

    def remove_Modified(self, A_1):
        """ remove_Modified(self: AcadLayoutsClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: AcadLayoutsClass, XDataType: object, XDataValue: object) """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerable) -> object """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: AcadLayoutsClass) -> object

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: AcadLayoutsClass) -> int

"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: AcadLayoutsClass) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: AcadLayoutsClass) -> object

"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: AcadLayoutsClass) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: AcadLayoutsClass) -> bool

"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: AcadLayoutsClass) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: AcadLayoutsClass) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: AcadLayoutsClass) -> Int64

"""


    Modified = None


class IAcadLeader(IAcadEntity, IAcadObject):
    # no doc
    def ArrayPolar(self, NumberOfObjects, AngleToFill, CenterPoint):
        """ ArrayPolar(self: IAcadLeader, NumberOfObjects: int, AngleToFill: float, CenterPoint: object) -> object """
        pass

    def ArrayRectangular(self, NumberOfRows, NumberOfColumns, NumberOfLevels, DistBetweenRows, DistBetweenCols, DistBetweenLevels):
        """ ArrayRectangular(self: IAcadLeader, NumberOfRows: int, NumberOfColumns: int, NumberOfLevels: int, DistBetweenRows: float, DistBetweenCols: float, DistBetweenLevels: float) -> object """
        pass

    def Copy(self):
        """ Copy(self: IAcadLeader) -> object """
        pass

    def Delete(self):
        """ Delete(self: IAcadLeader) """
        pass

    def Erase(self):
        """ Erase(self: IAcadLeader) """
        pass

    def Evaluate(self):
        """ Evaluate(self: IAcadLeader) """
        pass

    def GetBoundingBox(self, MinPoint, MaxPoint):
        """ GetBoundingBox(self: IAcadLeader) -> (object, object) """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: IAcadLeader) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: IAcadLeader, AppName: str) -> (object, object) """
        pass

    def Highlight(self, HighlightFlag):
        """ Highlight(self: IAcadLeader, HighlightFlag: bool) """
        pass

    def IntersectWith(self, IntersectObject, option):
        """ IntersectWith(self: IAcadLeader, IntersectObject: object, option: AcExtendOption) -> object """
        pass

    def Mirror(self, Point1, Point2):
        """ Mirror(self: IAcadLeader, Point1: object, Point2: object) -> object """
        pass

    def Mirror3D(self, Point1, Point2, point3):
        """ Mirror3D(self: IAcadLeader, Point1: object, Point2: object, point3: object) -> object """
        pass

    def Move(self, FromPoint, ToPoint):
        """ Move(self: IAcadLeader, FromPoint: object, ToPoint: object) """
        pass

    def Rotate(self, BasePoint, RotationAngle):
        """ Rotate(self: IAcadLeader, BasePoint: object, RotationAngle: float) """
        pass

    def Rotate3D(self, Point1, Point2, RotationAngle):
        """ Rotate3D(self: IAcadLeader, Point1: object, Point2: object, RotationAngle: float) """
        pass

    def ScaleEntity(self, BasePoint, ScaleFactor):
        """ ScaleEntity(self: IAcadLeader, BasePoint: object, ScaleFactor: float) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: IAcadLeader, XDataType: object, XDataValue: object) """
        pass

    def TransformBy(self, TransformationMatrix):
        """ TransformBy(self: IAcadLeader, TransformationMatrix: object) """
        pass

    def Update(self):
        """ Update(self: IAcadLeader) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Annotation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Annotation(self: IAcadLeader) -> AcadEntity

Set: Annotation(self: IAcadLeader) = value
"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IAcadLeader) -> object

"""

    ArrowheadBlock = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ArrowheadBlock(self: IAcadLeader) -> str

Set: ArrowheadBlock(self: IAcadLeader) = value
"""

    ArrowheadSize = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ArrowheadSize(self: IAcadLeader) -> float

Set: ArrowheadSize(self: IAcadLeader) = value
"""

    ArrowheadType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ArrowheadType(self: IAcadLeader) -> AcDimArrowheadType

Set: ArrowheadType(self: IAcadLeader) = value
"""

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: IAcadLeader) -> ACAD_COLOR

Set: color(self: IAcadLeader) = value
"""

    Coordinates = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Coordinates(self: IAcadLeader) -> object

Set: Coordinates(self: IAcadLeader) = value
"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: IAcadLeader) -> AcadDatabase

"""

    DimensionLineColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimensionLineColor(self: IAcadLeader) -> ACAD_COLOR

Set: DimensionLineColor(self: IAcadLeader) = value
"""

    DimensionLineWeight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimensionLineWeight(self: IAcadLeader) -> ACAD_LWEIGHT

Set: DimensionLineWeight(self: IAcadLeader) = value
"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: IAcadLeader) -> object

"""

    EntityName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityName(self: IAcadLeader) -> str

"""

    EntityTransparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityTransparency(self: IAcadLeader) -> str

Set: EntityTransparency(self: IAcadLeader) = value
"""

    EntityType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityType(self: IAcadLeader) -> int

"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: IAcadLeader) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: IAcadLeader) -> bool

"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: IAcadLeader) -> AcadHyperlinks

"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layer(self: IAcadLeader) -> str

Set: Layer(self: IAcadLeader) = value
"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: IAcadLeader) -> str

Set: Linetype(self: IAcadLeader) = value
"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeScale(self: IAcadLeader) -> float

Set: LinetypeScale(self: IAcadLeader) = value
"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: IAcadLeader) -> ACAD_LWEIGHT

Set: Lineweight(self: IAcadLeader) = value
"""

    Material = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Material(self: IAcadLeader) -> str

Set: Material(self: IAcadLeader) = value
"""

    Normal = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Normal(self: IAcadLeader) -> object

"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: IAcadLeader) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: IAcadLeader) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: IAcadLeader) -> Int64

"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: IAcadLeader) -> str

Set: PlotStyleName(self: IAcadLeader) = value
"""

    ScaleFactor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ScaleFactor(self: IAcadLeader) -> float

Set: ScaleFactor(self: IAcadLeader) = value
"""

    StyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: StyleName(self: IAcadLeader) -> str

Set: StyleName(self: IAcadLeader) = value
"""

    TextGap = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextGap(self: IAcadLeader) -> float

Set: TextGap(self: IAcadLeader) = value
"""

    TrueColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TrueColor(self: IAcadLeader) -> AcadAcCmColor

Set: TrueColor(self: IAcadLeader) = value
"""

    Type = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Type(self: IAcadLeader) -> AcLeaderType

Set: Type(self: IAcadLeader) = value
"""

    VerticalTextPosition = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VerticalTextPosition(self: IAcadLeader) -> AcDimVerticalJustification

Set: VerticalTextPosition(self: IAcadLeader) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: IAcadLeader) -> bool

Set: Visible(self: IAcadLeader) = value
"""



class AcadLeader(IAcadLeader, IAcadEntity, IAcadObject, IAcadObjectEvents_Event):
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class AcadLeaderClass(__ComObject):
    # no doc
    def add_Modified(self, A_1):
        """ add_Modified(self: AcadLeaderClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def ArrayPolar(self, NumberOfObjects, AngleToFill, CenterPoint):
        """ ArrayPolar(self: AcadLeaderClass, NumberOfObjects: int, AngleToFill: float, CenterPoint: object) -> object """
        pass

    def ArrayRectangular(self, NumberOfRows, NumberOfColumns, NumberOfLevels, DistBetweenRows, DistBetweenCols, DistBetweenLevels):
        """ ArrayRectangular(self: AcadLeaderClass, NumberOfRows: int, NumberOfColumns: int, NumberOfLevels: int, DistBetweenRows: float, DistBetweenCols: float, DistBetweenLevels: float) -> object """
        pass

    def Copy(self):
        """ Copy(self: AcadLeaderClass) -> object """
        pass

    def Delete(self):
        """ Delete(self: AcadLeaderClass) """
        pass

    def Erase(self):
        """ Erase(self: AcadLeaderClass) """
        pass

    def Evaluate(self):
        """ Evaluate(self: AcadLeaderClass) """
        pass

    def GetBoundingBox(self, MinPoint, MaxPoint):
        """ GetBoundingBox(self: AcadLeaderClass) -> (object, object) """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: AcadLeaderClass) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: AcadLeaderClass, AppName: str) -> (object, object) """
        pass

    def Highlight(self, HighlightFlag):
        """ Highlight(self: AcadLeaderClass, HighlightFlag: bool) """
        pass

    def IntersectWith(self, IntersectObject, option):
        """ IntersectWith(self: AcadLeaderClass, IntersectObject: object, option: AcExtendOption) -> object """
        pass

    def Mirror(self, Point1, Point2):
        """ Mirror(self: AcadLeaderClass, Point1: object, Point2: object) -> object """
        pass

    def Mirror3D(self, Point1, Point2, point3):
        """ Mirror3D(self: AcadLeaderClass, Point1: object, Point2: object, point3: object) -> object """
        pass

    def Move(self, FromPoint, ToPoint):
        """ Move(self: AcadLeaderClass, FromPoint: object, ToPoint: object) """
        pass

    def remove_Modified(self, A_1):
        """ remove_Modified(self: AcadLeaderClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def Rotate(self, BasePoint, RotationAngle):
        """ Rotate(self: AcadLeaderClass, BasePoint: object, RotationAngle: float) """
        pass

    def Rotate3D(self, Point1, Point2, RotationAngle):
        """ Rotate3D(self: AcadLeaderClass, Point1: object, Point2: object, RotationAngle: float) """
        pass

    def ScaleEntity(self, BasePoint, ScaleFactor):
        """ ScaleEntity(self: AcadLeaderClass, BasePoint: object, ScaleFactor: float) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: AcadLeaderClass, XDataType: object, XDataValue: object) """
        pass

    def TransformBy(self, TransformationMatrix):
        """ TransformBy(self: AcadLeaderClass, TransformationMatrix: object) """
        pass

    def Update(self):
        """ Update(self: AcadLeaderClass) """
        pass

    Annotation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Annotation(self: AcadLeaderClass) -> AcadEntity

Set: Annotation(self: AcadLeaderClass) = value
"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: AcadLeaderClass) -> object

"""

    ArrowheadBlock = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ArrowheadBlock(self: AcadLeaderClass) -> str

Set: ArrowheadBlock(self: AcadLeaderClass) = value
"""

    ArrowheadSize = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ArrowheadSize(self: AcadLeaderClass) -> float

Set: ArrowheadSize(self: AcadLeaderClass) = value
"""

    ArrowheadType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ArrowheadType(self: AcadLeaderClass) -> AcDimArrowheadType

Set: ArrowheadType(self: AcadLeaderClass) = value
"""

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: AcadLeaderClass) -> ACAD_COLOR

Set: color(self: AcadLeaderClass) = value
"""

    Coordinates = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Coordinates(self: AcadLeaderClass) -> object

Set: Coordinates(self: AcadLeaderClass) = value
"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: AcadLeaderClass) -> AcadDatabase

"""

    DimensionLineColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimensionLineColor(self: AcadLeaderClass) -> ACAD_COLOR

Set: DimensionLineColor(self: AcadLeaderClass) = value
"""

    DimensionLineWeight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimensionLineWeight(self: AcadLeaderClass) -> ACAD_LWEIGHT

Set: DimensionLineWeight(self: AcadLeaderClass) = value
"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: AcadLeaderClass) -> object

"""

    EntityName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityName(self: AcadLeaderClass) -> str

"""

    EntityTransparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityTransparency(self: AcadLeaderClass) -> str

Set: EntityTransparency(self: AcadLeaderClass) = value
"""

    EntityType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityType(self: AcadLeaderClass) -> int

"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: AcadLeaderClass) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: AcadLeaderClass) -> bool

"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: AcadLeaderClass) -> AcadHyperlinks

"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layer(self: AcadLeaderClass) -> str

Set: Layer(self: AcadLeaderClass) = value
"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: AcadLeaderClass) -> str

Set: Linetype(self: AcadLeaderClass) = value
"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeScale(self: AcadLeaderClass) -> float

Set: LinetypeScale(self: AcadLeaderClass) = value
"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: AcadLeaderClass) -> ACAD_LWEIGHT

Set: Lineweight(self: AcadLeaderClass) = value
"""

    Material = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Material(self: AcadLeaderClass) -> str

Set: Material(self: AcadLeaderClass) = value
"""

    Normal = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Normal(self: AcadLeaderClass) -> object

"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: AcadLeaderClass) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: AcadLeaderClass) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: AcadLeaderClass) -> Int64

"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: AcadLeaderClass) -> str

Set: PlotStyleName(self: AcadLeaderClass) = value
"""

    ScaleFactor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ScaleFactor(self: AcadLeaderClass) -> float

Set: ScaleFactor(self: AcadLeaderClass) = value
"""

    StyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: StyleName(self: AcadLeaderClass) -> str

Set: StyleName(self: AcadLeaderClass) = value
"""

    TextGap = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextGap(self: AcadLeaderClass) -> float

Set: TextGap(self: AcadLeaderClass) = value
"""

    TrueColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TrueColor(self: AcadLeaderClass) -> AcadAcCmColor

Set: TrueColor(self: AcadLeaderClass) = value
"""

    Type = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Type(self: AcadLeaderClass) -> AcLeaderType

Set: Type(self: AcadLeaderClass) = value
"""

    VerticalTextPosition = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VerticalTextPosition(self: AcadLeaderClass) -> AcDimVerticalJustification

Set: VerticalTextPosition(self: AcadLeaderClass) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: AcadLeaderClass) -> bool

Set: Visible(self: AcadLeaderClass) = value
"""


    Modified = None


class IAcadLine(IAcadEntity, IAcadObject):
    # no doc
    def ArrayPolar(self, NumberOfObjects, AngleToFill, CenterPoint):
        """ ArrayPolar(self: IAcadLine, NumberOfObjects: int, AngleToFill: float, CenterPoint: object) -> object """
        pass

    def ArrayRectangular(self, NumberOfRows, NumberOfColumns, NumberOfLevels, DistBetweenRows, DistBetweenCols, DistBetweenLevels):
        """ ArrayRectangular(self: IAcadLine, NumberOfRows: int, NumberOfColumns: int, NumberOfLevels: int, DistBetweenRows: float, DistBetweenCols: float, DistBetweenLevels: float) -> object """
        pass

    def Copy(self):
        """ Copy(self: IAcadLine) -> object """
        pass

    def Delete(self):
        """ Delete(self: IAcadLine) """
        pass

    def Erase(self):
        """ Erase(self: IAcadLine) """
        pass

    def GetBoundingBox(self, MinPoint, MaxPoint):
        """ GetBoundingBox(self: IAcadLine) -> (object, object) """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: IAcadLine) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: IAcadLine, AppName: str) -> (object, object) """
        pass

    def Highlight(self, HighlightFlag):
        """ Highlight(self: IAcadLine, HighlightFlag: bool) """
        pass

    def IntersectWith(self, IntersectObject, option):
        """ IntersectWith(self: IAcadLine, IntersectObject: object, option: AcExtendOption) -> object """
        pass

    def Mirror(self, Point1, Point2):
        """ Mirror(self: IAcadLine, Point1: object, Point2: object) -> object """
        pass

    def Mirror3D(self, Point1, Point2, point3):
        """ Mirror3D(self: IAcadLine, Point1: object, Point2: object, point3: object) -> object """
        pass

    def Move(self, FromPoint, ToPoint):
        """ Move(self: IAcadLine, FromPoint: object, ToPoint: object) """
        pass

    def Offset(self, Distance):
        """ Offset(self: IAcadLine, Distance: float) -> object """
        pass

    def Rotate(self, BasePoint, RotationAngle):
        """ Rotate(self: IAcadLine, BasePoint: object, RotationAngle: float) """
        pass

    def Rotate3D(self, Point1, Point2, RotationAngle):
        """ Rotate3D(self: IAcadLine, Point1: object, Point2: object, RotationAngle: float) """
        pass

    def ScaleEntity(self, BasePoint, ScaleFactor):
        """ ScaleEntity(self: IAcadLine, BasePoint: object, ScaleFactor: float) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: IAcadLine, XDataType: object, XDataValue: object) """
        pass

    def TransformBy(self, TransformationMatrix):
        """ TransformBy(self: IAcadLine, TransformationMatrix: object) """
        pass

    def Update(self):
        """ Update(self: IAcadLine) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Angle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Angle(self: IAcadLine) -> float

"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IAcadLine) -> object

"""

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: IAcadLine) -> ACAD_COLOR

Set: color(self: IAcadLine) = value
"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: IAcadLine) -> AcadDatabase

"""

    Delta = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Delta(self: IAcadLine) -> object

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: IAcadLine) -> object

"""

    EndPoint = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EndPoint(self: IAcadLine) -> object

Set: EndPoint(self: IAcadLine) = value
"""

    EntityName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityName(self: IAcadLine) -> str

"""

    EntityTransparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityTransparency(self: IAcadLine) -> str

Set: EntityTransparency(self: IAcadLine) = value
"""

    EntityType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityType(self: IAcadLine) -> int

"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: IAcadLine) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: IAcadLine) -> bool

"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: IAcadLine) -> AcadHyperlinks

"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layer(self: IAcadLine) -> str

Set: Layer(self: IAcadLine) = value
"""

    Length = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Length(self: IAcadLine) -> float

"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: IAcadLine) -> str

Set: Linetype(self: IAcadLine) = value
"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeScale(self: IAcadLine) -> float

Set: LinetypeScale(self: IAcadLine) = value
"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: IAcadLine) -> ACAD_LWEIGHT

Set: Lineweight(self: IAcadLine) = value
"""

    Material = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Material(self: IAcadLine) -> str

Set: Material(self: IAcadLine) = value
"""

    Normal = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Normal(self: IAcadLine) -> object

Set: Normal(self: IAcadLine) = value
"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: IAcadLine) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: IAcadLine) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: IAcadLine) -> Int64

"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: IAcadLine) -> str

Set: PlotStyleName(self: IAcadLine) = value
"""

    StartPoint = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: StartPoint(self: IAcadLine) -> object

Set: StartPoint(self: IAcadLine) = value
"""

    Thickness = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Thickness(self: IAcadLine) -> float

Set: Thickness(self: IAcadLine) = value
"""

    TrueColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TrueColor(self: IAcadLine) -> AcadAcCmColor

Set: TrueColor(self: IAcadLine) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: IAcadLine) -> bool

Set: Visible(self: IAcadLine) = value
"""



class AcadLine(IAcadLine, IAcadEntity, IAcadObject, IAcadObjectEvents_Event):
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class AcadLineClass(__ComObject):
    # no doc
    def add_Modified(self, A_1):
        """ add_Modified(self: AcadLineClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def ArrayPolar(self, NumberOfObjects, AngleToFill, CenterPoint):
        """ ArrayPolar(self: AcadLineClass, NumberOfObjects: int, AngleToFill: float, CenterPoint: object) -> object """
        pass

    def ArrayRectangular(self, NumberOfRows, NumberOfColumns, NumberOfLevels, DistBetweenRows, DistBetweenCols, DistBetweenLevels):
        """ ArrayRectangular(self: AcadLineClass, NumberOfRows: int, NumberOfColumns: int, NumberOfLevels: int, DistBetweenRows: float, DistBetweenCols: float, DistBetweenLevels: float) -> object """
        pass

    def Copy(self):
        """ Copy(self: AcadLineClass) -> object """
        pass

    def Delete(self):
        """ Delete(self: AcadLineClass) """
        pass

    def Erase(self):
        """ Erase(self: AcadLineClass) """
        pass

    def GetBoundingBox(self, MinPoint, MaxPoint):
        """ GetBoundingBox(self: AcadLineClass) -> (object, object) """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: AcadLineClass) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: AcadLineClass, AppName: str) -> (object, object) """
        pass

    def Highlight(self, HighlightFlag):
        """ Highlight(self: AcadLineClass, HighlightFlag: bool) """
        pass

    def IntersectWith(self, IntersectObject, option):
        """ IntersectWith(self: AcadLineClass, IntersectObject: object, option: AcExtendOption) -> object """
        pass

    def Mirror(self, Point1, Point2):
        """ Mirror(self: AcadLineClass, Point1: object, Point2: object) -> object """
        pass

    def Mirror3D(self, Point1, Point2, point3):
        """ Mirror3D(self: AcadLineClass, Point1: object, Point2: object, point3: object) -> object """
        pass

    def Move(self, FromPoint, ToPoint):
        """ Move(self: AcadLineClass, FromPoint: object, ToPoint: object) """
        pass

    def Offset(self, Distance):
        """ Offset(self: AcadLineClass, Distance: float) -> object """
        pass

    def remove_Modified(self, A_1):
        """ remove_Modified(self: AcadLineClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def Rotate(self, BasePoint, RotationAngle):
        """ Rotate(self: AcadLineClass, BasePoint: object, RotationAngle: float) """
        pass

    def Rotate3D(self, Point1, Point2, RotationAngle):
        """ Rotate3D(self: AcadLineClass, Point1: object, Point2: object, RotationAngle: float) """
        pass

    def ScaleEntity(self, BasePoint, ScaleFactor):
        """ ScaleEntity(self: AcadLineClass, BasePoint: object, ScaleFactor: float) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: AcadLineClass, XDataType: object, XDataValue: object) """
        pass

    def TransformBy(self, TransformationMatrix):
        """ TransformBy(self: AcadLineClass, TransformationMatrix: object) """
        pass

    def Update(self):
        """ Update(self: AcadLineClass) """
        pass

    Angle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Angle(self: AcadLineClass) -> float

"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: AcadLineClass) -> object

"""

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: AcadLineClass) -> ACAD_COLOR

Set: color(self: AcadLineClass) = value
"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: AcadLineClass) -> AcadDatabase

"""

    Delta = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Delta(self: AcadLineClass) -> object

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: AcadLineClass) -> object

"""

    EndPoint = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EndPoint(self: AcadLineClass) -> object

Set: EndPoint(self: AcadLineClass) = value
"""

    EntityName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityName(self: AcadLineClass) -> str

"""

    EntityTransparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityTransparency(self: AcadLineClass) -> str

Set: EntityTransparency(self: AcadLineClass) = value
"""

    EntityType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityType(self: AcadLineClass) -> int

"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: AcadLineClass) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: AcadLineClass) -> bool

"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: AcadLineClass) -> AcadHyperlinks

"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layer(self: AcadLineClass) -> str

Set: Layer(self: AcadLineClass) = value
"""

    Length = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Length(self: AcadLineClass) -> float

"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: AcadLineClass) -> str

Set: Linetype(self: AcadLineClass) = value
"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeScale(self: AcadLineClass) -> float

Set: LinetypeScale(self: AcadLineClass) = value
"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: AcadLineClass) -> ACAD_LWEIGHT

Set: Lineweight(self: AcadLineClass) = value
"""

    Material = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Material(self: AcadLineClass) -> str

Set: Material(self: AcadLineClass) = value
"""

    Normal = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Normal(self: AcadLineClass) -> object

Set: Normal(self: AcadLineClass) = value
"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: AcadLineClass) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: AcadLineClass) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: AcadLineClass) -> Int64

"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: AcadLineClass) -> str

Set: PlotStyleName(self: AcadLineClass) = value
"""

    StartPoint = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: StartPoint(self: AcadLineClass) -> object

Set: StartPoint(self: AcadLineClass) = value
"""

    Thickness = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Thickness(self: AcadLineClass) -> float

Set: Thickness(self: AcadLineClass) = value
"""

    TrueColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TrueColor(self: AcadLineClass) -> AcadAcCmColor

Set: TrueColor(self: AcadLineClass) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: AcadLineClass) -> bool

Set: Visible(self: AcadLineClass) = value
"""


    Modified = None


class IAcadLineType(IAcadObject):
    # no doc
    def Delete(self):
        """ Delete(self: IAcadLineType) """
        pass

    def Erase(self):
        """ Erase(self: IAcadLineType) """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: IAcadLineType) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: IAcadLineType, AppName: str) -> (object, object) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: IAcadLineType, XDataType: object, XDataValue: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IAcadLineType) -> object

"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: IAcadLineType) -> AcadDatabase

"""

    Description = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Description(self: IAcadLineType) -> str

Set: Description(self: IAcadLineType) = value
"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: IAcadLineType) -> object

"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: IAcadLineType) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: IAcadLineType) -> bool

"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: IAcadLineType) -> str

Set: Name(self: IAcadLineType) = value
"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: IAcadLineType) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: IAcadLineType) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: IAcadLineType) -> Int64

"""



class AcadLineType(IAcadLineType, IAcadObject, IAcadObjectEvents_Event):
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class AcadLineTypeClass(__ComObject):
    # no doc
    def add_Modified(self, A_1):
        """ add_Modified(self: AcadLineTypeClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def Delete(self):
        """ Delete(self: AcadLineTypeClass) """
        pass

    def Erase(self):
        """ Erase(self: AcadLineTypeClass) """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: AcadLineTypeClass) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: AcadLineTypeClass, AppName: str) -> (object, object) """
        pass

    def remove_Modified(self, A_1):
        """ remove_Modified(self: AcadLineTypeClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: AcadLineTypeClass, XDataType: object, XDataValue: object) """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: AcadLineTypeClass) -> object

"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: AcadLineTypeClass) -> AcadDatabase

"""

    Description = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Description(self: AcadLineTypeClass) -> str

Set: Description(self: AcadLineTypeClass) = value
"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: AcadLineTypeClass) -> object

"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: AcadLineTypeClass) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: AcadLineTypeClass) -> bool

"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: AcadLineTypeClass) -> str

Set: Name(self: AcadLineTypeClass) = value
"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: AcadLineTypeClass) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: AcadLineTypeClass) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: AcadLineTypeClass) -> Int64

"""


    Modified = None


class IAcadLineTypes(IAcadObject, IEnumerable):
    # no doc
    def Add(self, Name):
        """ Add(self: IAcadLineTypes, Name: str) -> AcadLineType """
        pass

    def Delete(self):
        """ Delete(self: IAcadLineTypes) """
        pass

    def Erase(self):
        """ Erase(self: IAcadLineTypes) """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: IAcadLineTypes) -> IEnumerator """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: IAcadLineTypes) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: IAcadLineTypes, AppName: str) -> (object, object) """
        pass

    def Item(self, Index):
        """ Item(self: IAcadLineTypes, Index: object) -> AcadLineType """
        pass

    def Load(self, Name, FileName):
        """ Load(self: IAcadLineTypes, Name: str, FileName: str) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: IAcadLineTypes, XDataType: object, XDataValue: object) """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerable) -> object """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IAcadLineTypes) -> object

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: IAcadLineTypes) -> int

"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: IAcadLineTypes) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: IAcadLineTypes) -> object

"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: IAcadLineTypes) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: IAcadLineTypes) -> bool

"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: IAcadLineTypes) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: IAcadLineTypes) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: IAcadLineTypes) -> Int64

"""



class AcadLineTypes(IAcadLineTypes, IAcadObject, IEnumerable, IAcadObjectEvents_Event):
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerable) -> object """
        pass


class AcadLineTypesClass(__ComObject):
    # no doc
    def Add(self, Name):
        """ Add(self: AcadLineTypesClass, Name: str) -> AcadLineType """
        pass

    def add_Modified(self, A_1):
        """ add_Modified(self: AcadLineTypesClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def Delete(self):
        """ Delete(self: AcadLineTypesClass) """
        pass

    def Erase(self):
        """ Erase(self: AcadLineTypesClass) """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: AcadLineTypesClass) -> IEnumerator """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: AcadLineTypesClass) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: AcadLineTypesClass, AppName: str) -> (object, object) """
        pass

    def Item(self, Index):
        """ Item(self: AcadLineTypesClass, Index: object) -> AcadLineType """
        pass

    def Load(self, Name, FileName):
        """ Load(self: AcadLineTypesClass, Name: str, FileName: str) """
        pass

    def remove_Modified(self, A_1):
        """ remove_Modified(self: AcadLineTypesClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: AcadLineTypesClass, XDataType: object, XDataValue: object) """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerable) -> object """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: AcadLineTypesClass) -> object

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: AcadLineTypesClass) -> int

"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: AcadLineTypesClass) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: AcadLineTypesClass) -> object

"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: AcadLineTypesClass) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: AcadLineTypesClass) -> bool

"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: AcadLineTypesClass) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: AcadLineTypesClass) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: AcadLineTypesClass) -> Int64

"""


    Modified = None


class IAcadLoftedSurface(IAcadSurface, IAcadEntity, IAcadObject):
    # no doc
    def ArrayPolar(self, NumberOfObjects, AngleToFill, CenterPoint):
        """ ArrayPolar(self: IAcadLoftedSurface, NumberOfObjects: int, AngleToFill: float, CenterPoint: object) -> object """
        pass

    def ArrayRectangular(self, NumberOfRows, NumberOfColumns, NumberOfLevels, DistBetweenRows, DistBetweenCols, DistBetweenLevels):
        """ ArrayRectangular(self: IAcadLoftedSurface, NumberOfRows: int, NumberOfColumns: int, NumberOfLevels: int, DistBetweenRows: float, DistBetweenCols: float, DistBetweenLevels: float) -> object """
        pass

    def Copy(self):
        """ Copy(self: IAcadLoftedSurface) -> object """
        pass

    def Delete(self):
        """ Delete(self: IAcadLoftedSurface) """
        pass

    def Erase(self):
        """ Erase(self: IAcadLoftedSurface) """
        pass

    def GetBoundingBox(self, MinPoint, MaxPoint):
        """ GetBoundingBox(self: IAcadLoftedSurface) -> (object, object) """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: IAcadLoftedSurface) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: IAcadLoftedSurface, AppName: str) -> (object, object) """
        pass

    def Highlight(self, HighlightFlag):
        """ Highlight(self: IAcadLoftedSurface, HighlightFlag: bool) """
        pass

    def IntersectWith(self, IntersectObject, option):
        """ IntersectWith(self: IAcadLoftedSurface, IntersectObject: object, option: AcExtendOption) -> object """
        pass

    def Mirror(self, Point1, Point2):
        """ Mirror(self: IAcadLoftedSurface, Point1: object, Point2: object) -> object """
        pass

    def Mirror3D(self, Point1, Point2, point3):
        """ Mirror3D(self: IAcadLoftedSurface, Point1: object, Point2: object, point3: object) -> object """
        pass

    def Move(self, FromPoint, ToPoint):
        """ Move(self: IAcadLoftedSurface, FromPoint: object, ToPoint: object) """
        pass

    def Rotate(self, BasePoint, RotationAngle):
        """ Rotate(self: IAcadLoftedSurface, BasePoint: object, RotationAngle: float) """
        pass

    def Rotate3D(self, Point1, Point2, RotationAngle):
        """ Rotate3D(self: IAcadLoftedSurface, Point1: object, Point2: object, RotationAngle: float) """
        pass

    def ScaleEntity(self, BasePoint, ScaleFactor):
        """ ScaleEntity(self: IAcadLoftedSurface, BasePoint: object, ScaleFactor: float) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: IAcadLoftedSurface, XDataType: object, XDataValue: object) """
        pass

    def TransformBy(self, TransformationMatrix):
        """ TransformBy(self: IAcadLoftedSurface, TransformationMatrix: object) """
        pass

    def Update(self):
        """ Update(self: IAcadLoftedSurface) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IAcadLoftedSurface) -> object

"""

    Closed = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Closed(self: IAcadLoftedSurface) -> bool

Set: Closed(self: IAcadLoftedSurface) = value
"""

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: IAcadLoftedSurface) -> ACAD_COLOR

Set: color(self: IAcadLoftedSurface) = value
"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: IAcadLoftedSurface) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: IAcadLoftedSurface) -> object

"""

    EdgeExtensionDistances = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EdgeExtensionDistances(self: IAcadLoftedSurface) -> object

Set: EdgeExtensionDistances(self: IAcadLoftedSurface) = value
"""

    EndDraftAngle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EndDraftAngle(self: IAcadLoftedSurface) -> float

Set: EndDraftAngle(self: IAcadLoftedSurface) = value
"""

    EndDraftMagnitude = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EndDraftMagnitude(self: IAcadLoftedSurface) -> float

Set: EndDraftMagnitude(self: IAcadLoftedSurface) = value
"""

    EndSmoothContinuity = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EndSmoothContinuity(self: IAcadLoftedSurface) -> int

Set: EndSmoothContinuity(self: IAcadLoftedSurface) = value
"""

    EndSmoothMagnitude = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EndSmoothMagnitude(self: IAcadLoftedSurface) -> float

Set: EndSmoothMagnitude(self: IAcadLoftedSurface) = value
"""

    EntityName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityName(self: IAcadLoftedSurface) -> str

"""

    EntityTransparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityTransparency(self: IAcadLoftedSurface) -> str

Set: EntityTransparency(self: IAcadLoftedSurface) = value
"""

    EntityType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityType(self: IAcadLoftedSurface) -> int

"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: IAcadLoftedSurface) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: IAcadLoftedSurface) -> bool

"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: IAcadLoftedSurface) -> AcadHyperlinks

"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layer(self: IAcadLoftedSurface) -> str

Set: Layer(self: IAcadLoftedSurface) = value
"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: IAcadLoftedSurface) -> str

Set: Linetype(self: IAcadLoftedSurface) = value
"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeScale(self: IAcadLoftedSurface) -> float

Set: LinetypeScale(self: IAcadLoftedSurface) = value
"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: IAcadLoftedSurface) -> ACAD_LWEIGHT

Set: Lineweight(self: IAcadLoftedSurface) = value
"""

    MaintainAssociativity = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MaintainAssociativity(self: IAcadLoftedSurface) -> int

Set: MaintainAssociativity(self: IAcadLoftedSurface) = value
"""

    Material = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Material(self: IAcadLoftedSurface) -> str

Set: Material(self: IAcadLoftedSurface) = value
"""

    NumCrossSections = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: NumCrossSections(self: IAcadLoftedSurface) -> int

"""

    NumGuidePaths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: NumGuidePaths(self: IAcadLoftedSurface) -> int

"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: IAcadLoftedSurface) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: IAcadLoftedSurface) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: IAcadLoftedSurface) -> Int64

"""

    Periodic = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Periodic(self: IAcadLoftedSurface) -> bool

Set: Periodic(self: IAcadLoftedSurface) = value
"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: IAcadLoftedSurface) -> str

Set: PlotStyleName(self: IAcadLoftedSurface) = value
"""

    ShowAssociativity = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowAssociativity(self: IAcadLoftedSurface) -> bool

Set: ShowAssociativity(self: IAcadLoftedSurface) = value
"""

    StartDraftAngle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: StartDraftAngle(self: IAcadLoftedSurface) -> float

Set: StartDraftAngle(self: IAcadLoftedSurface) = value
"""

    StartDraftMagnitude = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: StartDraftMagnitude(self: IAcadLoftedSurface) -> float

Set: StartDraftMagnitude(self: IAcadLoftedSurface) = value
"""

    StartSmoothContinuity = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: StartSmoothContinuity(self: IAcadLoftedSurface) -> int

Set: StartSmoothContinuity(self: IAcadLoftedSurface) = value
"""

    StartSmoothMagnitude = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: StartSmoothMagnitude(self: IAcadLoftedSurface) -> float

Set: StartSmoothMagnitude(self: IAcadLoftedSurface) = value
"""

    SurfaceNormals = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SurfaceNormals(self: IAcadLoftedSurface) -> AcLoftedSurfaceNormalType

Set: SurfaceNormals(self: IAcadLoftedSurface) = value
"""

    SurfaceType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SurfaceType(self: IAcadLoftedSurface) -> str

"""

    SurfTrimAssociativity = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SurfTrimAssociativity(self: IAcadLoftedSurface) -> object

Set: SurfTrimAssociativity(self: IAcadLoftedSurface) = value
"""

    TrueColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TrueColor(self: IAcadLoftedSurface) -> AcadAcCmColor

Set: TrueColor(self: IAcadLoftedSurface) = value
"""

    UIsolineDensity = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: UIsolineDensity(self: IAcadLoftedSurface) -> int

Set: UIsolineDensity(self: IAcadLoftedSurface) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: IAcadLoftedSurface) -> bool

Set: Visible(self: IAcadLoftedSurface) = value
"""

    VIsolineDensity = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VIsolineDensity(self: IAcadLoftedSurface) -> int

Set: VIsolineDensity(self: IAcadLoftedSurface) = value
"""

    WireframeType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: WireframeType(self: IAcadLoftedSurface) -> AcWireframeType

Set: WireframeType(self: IAcadLoftedSurface) = value
"""



class AcadLoftedSurface(IAcadLoftedSurface, IAcadSurface, IAcadEntity, IAcadObject, IAcadObjectEvents_Event):
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class AcadLoftedSurfaceClass(__ComObject):
    # no doc
    def add_Modified(self, A_1):
        """ add_Modified(self: AcadLoftedSurfaceClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def ArrayPolar(self, NumberOfObjects, AngleToFill, CenterPoint):
        """ ArrayPolar(self: AcadLoftedSurfaceClass, NumberOfObjects: int, AngleToFill: float, CenterPoint: object) -> object """
        pass

    def ArrayRectangular(self, NumberOfRows, NumberOfColumns, NumberOfLevels, DistBetweenRows, DistBetweenCols, DistBetweenLevels):
        """ ArrayRectangular(self: AcadLoftedSurfaceClass, NumberOfRows: int, NumberOfColumns: int, NumberOfLevels: int, DistBetweenRows: float, DistBetweenCols: float, DistBetweenLevels: float) -> object """
        pass

    def Copy(self):
        """ Copy(self: AcadLoftedSurfaceClass) -> object """
        pass

    def Delete(self):
        """ Delete(self: AcadLoftedSurfaceClass) """
        pass

    def Erase(self):
        """ Erase(self: AcadLoftedSurfaceClass) """
        pass

    def GetBoundingBox(self, MinPoint, MaxPoint):
        """ GetBoundingBox(self: AcadLoftedSurfaceClass) -> (object, object) """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: AcadLoftedSurfaceClass) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: AcadLoftedSurfaceClass, AppName: str) -> (object, object) """
        pass

    def Highlight(self, HighlightFlag):
        """ Highlight(self: AcadLoftedSurfaceClass, HighlightFlag: bool) """
        pass

    def IntersectWith(self, IntersectObject, option):
        """ IntersectWith(self: AcadLoftedSurfaceClass, IntersectObject: object, option: AcExtendOption) -> object """
        pass

    def Mirror(self, Point1, Point2):
        """ Mirror(self: AcadLoftedSurfaceClass, Point1: object, Point2: object) -> object """
        pass

    def Mirror3D(self, Point1, Point2, point3):
        """ Mirror3D(self: AcadLoftedSurfaceClass, Point1: object, Point2: object, point3: object) -> object """
        pass

    def Move(self, FromPoint, ToPoint):
        """ Move(self: AcadLoftedSurfaceClass, FromPoint: object, ToPoint: object) """
        pass

    def remove_Modified(self, A_1):
        """ remove_Modified(self: AcadLoftedSurfaceClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def Rotate(self, BasePoint, RotationAngle):
        """ Rotate(self: AcadLoftedSurfaceClass, BasePoint: object, RotationAngle: float) """
        pass

    def Rotate3D(self, Point1, Point2, RotationAngle):
        """ Rotate3D(self: AcadLoftedSurfaceClass, Point1: object, Point2: object, RotationAngle: float) """
        pass

    def ScaleEntity(self, BasePoint, ScaleFactor):
        """ ScaleEntity(self: AcadLoftedSurfaceClass, BasePoint: object, ScaleFactor: float) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: AcadLoftedSurfaceClass, XDataType: object, XDataValue: object) """
        pass

    def TransformBy(self, TransformationMatrix):
        """ TransformBy(self: AcadLoftedSurfaceClass, TransformationMatrix: object) """
        pass

    def Update(self):
        """ Update(self: AcadLoftedSurfaceClass) """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: AcadLoftedSurfaceClass) -> object

"""

    Closed = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Closed(self: AcadLoftedSurfaceClass) -> bool

Set: Closed(self: AcadLoftedSurfaceClass) = value
"""

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: AcadLoftedSurfaceClass) -> ACAD_COLOR

Set: color(self: AcadLoftedSurfaceClass) = value
"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: AcadLoftedSurfaceClass) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: AcadLoftedSurfaceClass) -> object

"""

    EdgeExtensionDistances = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EdgeExtensionDistances(self: AcadLoftedSurfaceClass) -> object

Set: EdgeExtensionDistances(self: AcadLoftedSurfaceClass) = value
"""

    EndDraftAngle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EndDraftAngle(self: AcadLoftedSurfaceClass) -> float

Set: EndDraftAngle(self: AcadLoftedSurfaceClass) = value
"""

    EndDraftMagnitude = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EndDraftMagnitude(self: AcadLoftedSurfaceClass) -> float

Set: EndDraftMagnitude(self: AcadLoftedSurfaceClass) = value
"""

    EndSmoothContinuity = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EndSmoothContinuity(self: AcadLoftedSurfaceClass) -> int

Set: EndSmoothContinuity(self: AcadLoftedSurfaceClass) = value
"""

    EndSmoothMagnitude = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EndSmoothMagnitude(self: AcadLoftedSurfaceClass) -> float

Set: EndSmoothMagnitude(self: AcadLoftedSurfaceClass) = value
"""

    EntityName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityName(self: AcadLoftedSurfaceClass) -> str

"""

    EntityTransparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityTransparency(self: AcadLoftedSurfaceClass) -> str

Set: EntityTransparency(self: AcadLoftedSurfaceClass) = value
"""

    EntityType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityType(self: AcadLoftedSurfaceClass) -> int

"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: AcadLoftedSurfaceClass) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: AcadLoftedSurfaceClass) -> bool

"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: AcadLoftedSurfaceClass) -> AcadHyperlinks

"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layer(self: AcadLoftedSurfaceClass) -> str

Set: Layer(self: AcadLoftedSurfaceClass) = value
"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: AcadLoftedSurfaceClass) -> str

Set: Linetype(self: AcadLoftedSurfaceClass) = value
"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeScale(self: AcadLoftedSurfaceClass) -> float

Set: LinetypeScale(self: AcadLoftedSurfaceClass) = value
"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: AcadLoftedSurfaceClass) -> ACAD_LWEIGHT

Set: Lineweight(self: AcadLoftedSurfaceClass) = value
"""

    MaintainAssociativity = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MaintainAssociativity(self: AcadLoftedSurfaceClass) -> int

Set: MaintainAssociativity(self: AcadLoftedSurfaceClass) = value
"""

    Material = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Material(self: AcadLoftedSurfaceClass) -> str

Set: Material(self: AcadLoftedSurfaceClass) = value
"""

    NumCrossSections = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: NumCrossSections(self: AcadLoftedSurfaceClass) -> int

"""

    NumGuidePaths = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: NumGuidePaths(self: AcadLoftedSurfaceClass) -> int

"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: AcadLoftedSurfaceClass) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: AcadLoftedSurfaceClass) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: AcadLoftedSurfaceClass) -> Int64

"""

    Periodic = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Periodic(self: AcadLoftedSurfaceClass) -> bool

Set: Periodic(self: AcadLoftedSurfaceClass) = value
"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: AcadLoftedSurfaceClass) -> str

Set: PlotStyleName(self: AcadLoftedSurfaceClass) = value
"""

    ShowAssociativity = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowAssociativity(self: AcadLoftedSurfaceClass) -> bool

Set: ShowAssociativity(self: AcadLoftedSurfaceClass) = value
"""

    StartDraftAngle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: StartDraftAngle(self: AcadLoftedSurfaceClass) -> float

Set: StartDraftAngle(self: AcadLoftedSurfaceClass) = value
"""

    StartDraftMagnitude = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: StartDraftMagnitude(self: AcadLoftedSurfaceClass) -> float

Set: StartDraftMagnitude(self: AcadLoftedSurfaceClass) = value
"""

    StartSmoothContinuity = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: StartSmoothContinuity(self: AcadLoftedSurfaceClass) -> int

Set: StartSmoothContinuity(self: AcadLoftedSurfaceClass) = value
"""

    StartSmoothMagnitude = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: StartSmoothMagnitude(self: AcadLoftedSurfaceClass) -> float

Set: StartSmoothMagnitude(self: AcadLoftedSurfaceClass) = value
"""

    SurfaceNormals = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SurfaceNormals(self: AcadLoftedSurfaceClass) -> AcLoftedSurfaceNormalType

Set: SurfaceNormals(self: AcadLoftedSurfaceClass) = value
"""

    SurfaceType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SurfaceType(self: AcadLoftedSurfaceClass) -> str

"""

    SurfTrimAssociativity = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SurfTrimAssociativity(self: AcadLoftedSurfaceClass) -> object

Set: SurfTrimAssociativity(self: AcadLoftedSurfaceClass) = value
"""

    TrueColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TrueColor(self: AcadLoftedSurfaceClass) -> AcadAcCmColor

Set: TrueColor(self: AcadLoftedSurfaceClass) = value
"""

    UIsolineDensity = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: UIsolineDensity(self: AcadLoftedSurfaceClass) -> int

Set: UIsolineDensity(self: AcadLoftedSurfaceClass) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: AcadLoftedSurfaceClass) -> bool

Set: Visible(self: AcadLoftedSurfaceClass) = value
"""

    VIsolineDensity = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VIsolineDensity(self: AcadLoftedSurfaceClass) -> int

Set: VIsolineDensity(self: AcadLoftedSurfaceClass) = value
"""

    WireframeType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: WireframeType(self: AcadLoftedSurfaceClass) -> AcWireframeType

Set: WireframeType(self: AcadLoftedSurfaceClass) = value
"""


    Modified = None


class IAcadLWPolyline(IAcadEntity, IAcadObject):
    # no doc
    def AddVertex(self, Index, vertex):
        """ AddVertex(self: IAcadLWPolyline, Index: int, vertex: object) """
        pass

    def ArrayPolar(self, NumberOfObjects, AngleToFill, CenterPoint):
        """ ArrayPolar(self: IAcadLWPolyline, NumberOfObjects: int, AngleToFill: float, CenterPoint: object) -> object """
        pass

    def ArrayRectangular(self, NumberOfRows, NumberOfColumns, NumberOfLevels, DistBetweenRows, DistBetweenCols, DistBetweenLevels):
        """ ArrayRectangular(self: IAcadLWPolyline, NumberOfRows: int, NumberOfColumns: int, NumberOfLevels: int, DistBetweenRows: float, DistBetweenCols: float, DistBetweenLevels: float) -> object """
        pass

    def Copy(self):
        """ Copy(self: IAcadLWPolyline) -> object """
        pass

    def Delete(self):
        """ Delete(self: IAcadLWPolyline) """
        pass

    def Erase(self):
        """ Erase(self: IAcadLWPolyline) """
        pass

    def Explode(self):
        """ Explode(self: IAcadLWPolyline) -> object """
        pass

    def GetBoundingBox(self, MinPoint, MaxPoint):
        """ GetBoundingBox(self: IAcadLWPolyline) -> (object, object) """
        pass

    def GetBulge(self, Index):
        """ GetBulge(self: IAcadLWPolyline, Index: int) -> float """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: IAcadLWPolyline) -> AcadDictionary """
        pass

    def GetWidth(self, Index, StartWidth, EndWidth):
        """ GetWidth(self: IAcadLWPolyline, Index: int) -> (float, float) """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: IAcadLWPolyline, AppName: str) -> (object, object) """
        pass

    def Highlight(self, HighlightFlag):
        """ Highlight(self: IAcadLWPolyline, HighlightFlag: bool) """
        pass

    def IntersectWith(self, IntersectObject, option):
        """ IntersectWith(self: IAcadLWPolyline, IntersectObject: object, option: AcExtendOption) -> object """
        pass

    def Mirror(self, Point1, Point2):
        """ Mirror(self: IAcadLWPolyline, Point1: object, Point2: object) -> object """
        pass

    def Mirror3D(self, Point1, Point2, point3):
        """ Mirror3D(self: IAcadLWPolyline, Point1: object, Point2: object, point3: object) -> object """
        pass

    def Move(self, FromPoint, ToPoint):
        """ Move(self: IAcadLWPolyline, FromPoint: object, ToPoint: object) """
        pass

    def Offset(self, Distance):
        """ Offset(self: IAcadLWPolyline, Distance: float) -> object """
        pass

    def Rotate(self, BasePoint, RotationAngle):
        """ Rotate(self: IAcadLWPolyline, BasePoint: object, RotationAngle: float) """
        pass

    def Rotate3D(self, Point1, Point2, RotationAngle):
        """ Rotate3D(self: IAcadLWPolyline, Point1: object, Point2: object, RotationAngle: float) """
        pass

    def ScaleEntity(self, BasePoint, ScaleFactor):
        """ ScaleEntity(self: IAcadLWPolyline, BasePoint: object, ScaleFactor: float) """
        pass

    def SetBulge(self, Index, bulge):
        """ SetBulge(self: IAcadLWPolyline, Index: int, bulge: float) """
        pass

    def SetWidth(self, Index, StartWidth, EndWidth):
        """ SetWidth(self: IAcadLWPolyline, Index: int, StartWidth: float, EndWidth: float) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: IAcadLWPolyline, XDataType: object, XDataValue: object) """
        pass

    def TransformBy(self, TransformationMatrix):
        """ TransformBy(self: IAcadLWPolyline, TransformationMatrix: object) """
        pass

    def Update(self):
        """ Update(self: IAcadLWPolyline) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IAcadLWPolyline) -> object

"""

    Area = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Area(self: IAcadLWPolyline) -> float

"""

    Closed = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Closed(self: IAcadLWPolyline) -> bool

Set: Closed(self: IAcadLWPolyline) = value
"""

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: IAcadLWPolyline) -> ACAD_COLOR

Set: color(self: IAcadLWPolyline) = value
"""

    ConstantWidth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ConstantWidth(self: IAcadLWPolyline) -> float

Set: ConstantWidth(self: IAcadLWPolyline) = value
"""

    Coordinates = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Coordinates(self: IAcadLWPolyline) -> object

Set: Coordinates(self: IAcadLWPolyline) = value
"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: IAcadLWPolyline) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: IAcadLWPolyline) -> object

"""

    Elevation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Elevation(self: IAcadLWPolyline) -> float

Set: Elevation(self: IAcadLWPolyline) = value
"""

    EntityName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityName(self: IAcadLWPolyline) -> str

"""

    EntityTransparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityTransparency(self: IAcadLWPolyline) -> str

Set: EntityTransparency(self: IAcadLWPolyline) = value
"""

    EntityType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityType(self: IAcadLWPolyline) -> int

"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: IAcadLWPolyline) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: IAcadLWPolyline) -> bool

"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: IAcadLWPolyline) -> AcadHyperlinks

"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layer(self: IAcadLWPolyline) -> str

Set: Layer(self: IAcadLWPolyline) = value
"""

    Length = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Length(self: IAcadLWPolyline) -> float

"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: IAcadLWPolyline) -> str

Set: Linetype(self: IAcadLWPolyline) = value
"""

    LinetypeGeneration = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeGeneration(self: IAcadLWPolyline) -> bool

Set: LinetypeGeneration(self: IAcadLWPolyline) = value
"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeScale(self: IAcadLWPolyline) -> float

Set: LinetypeScale(self: IAcadLWPolyline) = value
"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: IAcadLWPolyline) -> ACAD_LWEIGHT

Set: Lineweight(self: IAcadLWPolyline) = value
"""

    Material = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Material(self: IAcadLWPolyline) -> str

Set: Material(self: IAcadLWPolyline) = value
"""

    Normal = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Normal(self: IAcadLWPolyline) -> object

Set: Normal(self: IAcadLWPolyline) = value
"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: IAcadLWPolyline) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: IAcadLWPolyline) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: IAcadLWPolyline) -> Int64

"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: IAcadLWPolyline) -> str

Set: PlotStyleName(self: IAcadLWPolyline) = value
"""

    Thickness = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Thickness(self: IAcadLWPolyline) -> float

Set: Thickness(self: IAcadLWPolyline) = value
"""

    TrueColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TrueColor(self: IAcadLWPolyline) -> AcadAcCmColor

Set: TrueColor(self: IAcadLWPolyline) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: IAcadLWPolyline) -> bool

Set: Visible(self: IAcadLWPolyline) = value
"""



class AcadLWPolyline(IAcadLWPolyline, IAcadEntity, IAcadObject, IAcadObjectEvents_Event):
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class AcadLWPolylineClass(__ComObject):
    # no doc
    def AddVertex(self, Index, vertex):
        """ AddVertex(self: AcadLWPolylineClass, Index: int, vertex: object) """
        pass

    def add_Modified(self, A_1):
        """ add_Modified(self: AcadLWPolylineClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def ArrayPolar(self, NumberOfObjects, AngleToFill, CenterPoint):
        """ ArrayPolar(self: AcadLWPolylineClass, NumberOfObjects: int, AngleToFill: float, CenterPoint: object) -> object """
        pass

    def ArrayRectangular(self, NumberOfRows, NumberOfColumns, NumberOfLevels, DistBetweenRows, DistBetweenCols, DistBetweenLevels):
        """ ArrayRectangular(self: AcadLWPolylineClass, NumberOfRows: int, NumberOfColumns: int, NumberOfLevels: int, DistBetweenRows: float, DistBetweenCols: float, DistBetweenLevels: float) -> object """
        pass

    def Copy(self):
        """ Copy(self: AcadLWPolylineClass) -> object """
        pass

    def Delete(self):
        """ Delete(self: AcadLWPolylineClass) """
        pass

    def Erase(self):
        """ Erase(self: AcadLWPolylineClass) """
        pass

    def Explode(self):
        """ Explode(self: AcadLWPolylineClass) -> object """
        pass

    def GetBoundingBox(self, MinPoint, MaxPoint):
        """ GetBoundingBox(self: AcadLWPolylineClass) -> (object, object) """
        pass

    def GetBulge(self, Index):
        """ GetBulge(self: AcadLWPolylineClass, Index: int) -> float """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: AcadLWPolylineClass) -> AcadDictionary """
        pass

    def GetWidth(self, Index, StartWidth, EndWidth):
        """ GetWidth(self: AcadLWPolylineClass, Index: int) -> (float, float) """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: AcadLWPolylineClass, AppName: str) -> (object, object) """
        pass

    def Highlight(self, HighlightFlag):
        """ Highlight(self: AcadLWPolylineClass, HighlightFlag: bool) """
        pass

    def IntersectWith(self, IntersectObject, option):
        """ IntersectWith(self: AcadLWPolylineClass, IntersectObject: object, option: AcExtendOption) -> object """
        pass

    def Mirror(self, Point1, Point2):
        """ Mirror(self: AcadLWPolylineClass, Point1: object, Point2: object) -> object """
        pass

    def Mirror3D(self, Point1, Point2, point3):
        """ Mirror3D(self: AcadLWPolylineClass, Point1: object, Point2: object, point3: object) -> object """
        pass

    def Move(self, FromPoint, ToPoint):
        """ Move(self: AcadLWPolylineClass, FromPoint: object, ToPoint: object) """
        pass

    def Offset(self, Distance):
        """ Offset(self: AcadLWPolylineClass, Distance: float) -> object """
        pass

    def remove_Modified(self, A_1):
        """ remove_Modified(self: AcadLWPolylineClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def Rotate(self, BasePoint, RotationAngle):
        """ Rotate(self: AcadLWPolylineClass, BasePoint: object, RotationAngle: float) """
        pass

    def Rotate3D(self, Point1, Point2, RotationAngle):
        """ Rotate3D(self: AcadLWPolylineClass, Point1: object, Point2: object, RotationAngle: float) """
        pass

    def ScaleEntity(self, BasePoint, ScaleFactor):
        """ ScaleEntity(self: AcadLWPolylineClass, BasePoint: object, ScaleFactor: float) """
        pass

    def SetBulge(self, Index, bulge):
        """ SetBulge(self: AcadLWPolylineClass, Index: int, bulge: float) """
        pass

    def SetWidth(self, Index, StartWidth, EndWidth):
        """ SetWidth(self: AcadLWPolylineClass, Index: int, StartWidth: float, EndWidth: float) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: AcadLWPolylineClass, XDataType: object, XDataValue: object) """
        pass

    def TransformBy(self, TransformationMatrix):
        """ TransformBy(self: AcadLWPolylineClass, TransformationMatrix: object) """
        pass

    def Update(self):
        """ Update(self: AcadLWPolylineClass) """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: AcadLWPolylineClass) -> object

"""

    Area = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Area(self: AcadLWPolylineClass) -> float

"""

    Closed = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Closed(self: AcadLWPolylineClass) -> bool

Set: Closed(self: AcadLWPolylineClass) = value
"""

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: AcadLWPolylineClass) -> ACAD_COLOR

Set: color(self: AcadLWPolylineClass) = value
"""

    ConstantWidth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ConstantWidth(self: AcadLWPolylineClass) -> float

Set: ConstantWidth(self: AcadLWPolylineClass) = value
"""

    Coordinates = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Coordinates(self: AcadLWPolylineClass) -> object

Set: Coordinates(self: AcadLWPolylineClass) = value
"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: AcadLWPolylineClass) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: AcadLWPolylineClass) -> object

"""

    Elevation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Elevation(self: AcadLWPolylineClass) -> float

Set: Elevation(self: AcadLWPolylineClass) = value
"""

    EntityName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityName(self: AcadLWPolylineClass) -> str

"""

    EntityTransparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityTransparency(self: AcadLWPolylineClass) -> str

Set: EntityTransparency(self: AcadLWPolylineClass) = value
"""

    EntityType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityType(self: AcadLWPolylineClass) -> int

"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: AcadLWPolylineClass) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: AcadLWPolylineClass) -> bool

"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: AcadLWPolylineClass) -> AcadHyperlinks

"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layer(self: AcadLWPolylineClass) -> str

Set: Layer(self: AcadLWPolylineClass) = value
"""

    Length = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Length(self: AcadLWPolylineClass) -> float

"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: AcadLWPolylineClass) -> str

Set: Linetype(self: AcadLWPolylineClass) = value
"""

    LinetypeGeneration = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeGeneration(self: AcadLWPolylineClass) -> bool

Set: LinetypeGeneration(self: AcadLWPolylineClass) = value
"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeScale(self: AcadLWPolylineClass) -> float

Set: LinetypeScale(self: AcadLWPolylineClass) = value
"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: AcadLWPolylineClass) -> ACAD_LWEIGHT

Set: Lineweight(self: AcadLWPolylineClass) = value
"""

    Material = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Material(self: AcadLWPolylineClass) -> str

Set: Material(self: AcadLWPolylineClass) = value
"""

    Normal = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Normal(self: AcadLWPolylineClass) -> object

Set: Normal(self: AcadLWPolylineClass) = value
"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: AcadLWPolylineClass) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: AcadLWPolylineClass) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: AcadLWPolylineClass) -> Int64

"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: AcadLWPolylineClass) -> str

Set: PlotStyleName(self: AcadLWPolylineClass) = value
"""

    Thickness = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Thickness(self: AcadLWPolylineClass) -> float

Set: Thickness(self: AcadLWPolylineClass) = value
"""

    TrueColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TrueColor(self: AcadLWPolylineClass) -> AcadAcCmColor

Set: TrueColor(self: AcadLWPolylineClass) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: AcadLWPolylineClass) -> bool

Set: Visible(self: AcadLWPolylineClass) = value
"""


    Modified = None


class IAcadMaterial(IAcadObject):
    # no doc
    def Delete(self):
        """ Delete(self: IAcadMaterial) """
        pass

    def Erase(self):
        """ Erase(self: IAcadMaterial) """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: IAcadMaterial) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: IAcadMaterial, AppName: str) -> (object, object) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: IAcadMaterial, XDataType: object, XDataValue: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IAcadMaterial) -> object

"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: IAcadMaterial) -> AcadDatabase

"""

    Description = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Description(self: IAcadMaterial) -> str

Set: Description(self: IAcadMaterial) = value
"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: IAcadMaterial) -> object

"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: IAcadMaterial) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: IAcadMaterial) -> bool

"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: IAcadMaterial) -> str

Set: Name(self: IAcadMaterial) = value
"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: IAcadMaterial) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: IAcadMaterial) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: IAcadMaterial) -> Int64

"""



class AcadMaterial(IAcadMaterial, IAcadObject, IAcadObjectEvents_Event):
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class AcadMaterialClass(__ComObject):
    # no doc
    def add_Modified(self, A_1):
        """ add_Modified(self: AcadMaterialClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def Delete(self):
        """ Delete(self: AcadMaterialClass) """
        pass

    def Erase(self):
        """ Erase(self: AcadMaterialClass) """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: AcadMaterialClass) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: AcadMaterialClass, AppName: str) -> (object, object) """
        pass

    def remove_Modified(self, A_1):
        """ remove_Modified(self: AcadMaterialClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: AcadMaterialClass, XDataType: object, XDataValue: object) """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: AcadMaterialClass) -> object

"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: AcadMaterialClass) -> AcadDatabase

"""

    Description = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Description(self: AcadMaterialClass) -> str

Set: Description(self: AcadMaterialClass) = value
"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: AcadMaterialClass) -> object

"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: AcadMaterialClass) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: AcadMaterialClass) -> bool

"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: AcadMaterialClass) -> str

Set: Name(self: AcadMaterialClass) = value
"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: AcadMaterialClass) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: AcadMaterialClass) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: AcadMaterialClass) -> Int64

"""


    Modified = None


class IAcadMaterials(IAcadObject, IEnumerable):
    # no doc
    def Add(self, Name):
        """ Add(self: IAcadMaterials, Name: str) -> AcadMaterial """
        pass

    def Delete(self):
        """ Delete(self: IAcadMaterials) """
        pass

    def Erase(self):
        """ Erase(self: IAcadMaterials) """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: IAcadMaterials) -> IEnumerator """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: IAcadMaterials) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: IAcadMaterials, AppName: str) -> (object, object) """
        pass

    def Item(self, Index):
        """ Item(self: IAcadMaterials, Index: object) -> AcadMaterial """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: IAcadMaterials, XDataType: object, XDataValue: object) """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerable) -> object """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IAcadMaterials) -> object

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: IAcadMaterials) -> int

"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: IAcadMaterials) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: IAcadMaterials) -> object

"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: IAcadMaterials) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: IAcadMaterials) -> bool

"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: IAcadMaterials) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: IAcadMaterials) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: IAcadMaterials) -> Int64

"""



class AcadMaterials(IAcadMaterials, IAcadObject, IEnumerable, IAcadObjectEvents_Event):
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerable) -> object """
        pass


class AcadMaterialsClass(__ComObject):
    # no doc
    def Add(self, Name):
        """ Add(self: AcadMaterialsClass, Name: str) -> AcadMaterial """
        pass

    def add_Modified(self, A_1):
        """ add_Modified(self: AcadMaterialsClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def Delete(self):
        """ Delete(self: AcadMaterialsClass) """
        pass

    def Erase(self):
        """ Erase(self: AcadMaterialsClass) """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: AcadMaterialsClass) -> IEnumerator """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: AcadMaterialsClass) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: AcadMaterialsClass, AppName: str) -> (object, object) """
        pass

    def Item(self, Index):
        """ Item(self: AcadMaterialsClass, Index: object) -> AcadMaterial """
        pass

    def remove_Modified(self, A_1):
        """ remove_Modified(self: AcadMaterialsClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: AcadMaterialsClass, XDataType: object, XDataValue: object) """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerable) -> object """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: AcadMaterialsClass) -> object

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: AcadMaterialsClass) -> int

"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: AcadMaterialsClass) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: AcadMaterialsClass) -> object

"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: AcadMaterialsClass) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: AcadMaterialsClass) -> bool

"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: AcadMaterialsClass) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: AcadMaterialsClass) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: AcadMaterialsClass) -> Int64

"""


    Modified = None


class IAcadMInsertBlock(IAcadBlockReference, IAcadEntity, IAcadObject):
    # no doc
    def ArrayPolar(self, NumberOfObjects, AngleToFill, CenterPoint):
        """ ArrayPolar(self: IAcadMInsertBlock, NumberOfObjects: int, AngleToFill: float, CenterPoint: object) -> object """
        pass

    def ArrayRectangular(self, NumberOfRows, NumberOfColumns, NumberOfLevels, DistBetweenRows, DistBetweenCols, DistBetweenLevels):
        """ ArrayRectangular(self: IAcadMInsertBlock, NumberOfRows: int, NumberOfColumns: int, NumberOfLevels: int, DistBetweenRows: float, DistBetweenCols: float, DistBetweenLevels: float) -> object """
        pass

    def ConvertToAnonymousBlock(self):
        """ ConvertToAnonymousBlock(self: IAcadMInsertBlock) """
        pass

    def ConvertToStaticBlock(self, newBlockName):
        """ ConvertToStaticBlock(self: IAcadMInsertBlock, newBlockName: str) """
        pass

    def Copy(self):
        """ Copy(self: IAcadMInsertBlock) -> object """
        pass

    def Delete(self):
        """ Delete(self: IAcadMInsertBlock) """
        pass

    def Erase(self):
        """ Erase(self: IAcadMInsertBlock) """
        pass

    def Explode(self):
        """ Explode(self: IAcadMInsertBlock) -> object """
        pass

    def GetAttributes(self):
        """ GetAttributes(self: IAcadMInsertBlock) -> object """
        pass

    def GetBoundingBox(self, MinPoint, MaxPoint):
        """ GetBoundingBox(self: IAcadMInsertBlock) -> (object, object) """
        pass

    def GetConstantAttributes(self):
        """ GetConstantAttributes(self: IAcadMInsertBlock) -> object """
        pass

    def GetDynamicBlockProperties(self):
        """ GetDynamicBlockProperties(self: IAcadMInsertBlock) -> object """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: IAcadMInsertBlock) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: IAcadMInsertBlock, AppName: str) -> (object, object) """
        pass

    def Highlight(self, HighlightFlag):
        """ Highlight(self: IAcadMInsertBlock, HighlightFlag: bool) """
        pass

    def IntersectWith(self, IntersectObject, option):
        """ IntersectWith(self: IAcadMInsertBlock, IntersectObject: object, option: AcExtendOption) -> object """
        pass

    def Mirror(self, Point1, Point2):
        """ Mirror(self: IAcadMInsertBlock, Point1: object, Point2: object) -> object """
        pass

    def Mirror3D(self, Point1, Point2, point3):
        """ Mirror3D(self: IAcadMInsertBlock, Point1: object, Point2: object, point3: object) -> object """
        pass

    def Move(self, FromPoint, ToPoint):
        """ Move(self: IAcadMInsertBlock, FromPoint: object, ToPoint: object) """
        pass

    def ResetBlock(self):
        """ ResetBlock(self: IAcadMInsertBlock) """
        pass

    def Rotate(self, BasePoint, RotationAngle):
        """ Rotate(self: IAcadMInsertBlock, BasePoint: object, RotationAngle: float) """
        pass

    def Rotate3D(self, Point1, Point2, RotationAngle):
        """ Rotate3D(self: IAcadMInsertBlock, Point1: object, Point2: object, RotationAngle: float) """
        pass

    def ScaleEntity(self, BasePoint, ScaleFactor):
        """ ScaleEntity(self: IAcadMInsertBlock, BasePoint: object, ScaleFactor: float) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: IAcadMInsertBlock, XDataType: object, XDataValue: object) """
        pass

    def TransformBy(self, TransformationMatrix):
        """ TransformBy(self: IAcadMInsertBlock, TransformationMatrix: object) """
        pass

    def Update(self):
        """ Update(self: IAcadMInsertBlock) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IAcadMInsertBlock) -> object

"""

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: IAcadMInsertBlock) -> ACAD_COLOR

Set: color(self: IAcadMInsertBlock) = value
"""

    Columns = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Columns(self: IAcadMInsertBlock) -> int

Set: Columns(self: IAcadMInsertBlock) = value
"""

    ColumnSpacing = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ColumnSpacing(self: IAcadMInsertBlock) -> float

Set: ColumnSpacing(self: IAcadMInsertBlock) = value
"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: IAcadMInsertBlock) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: IAcadMInsertBlock) -> object

"""

    EffectiveName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EffectiveName(self: IAcadMInsertBlock) -> str

"""

    EntityName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityName(self: IAcadMInsertBlock) -> str

"""

    EntityTransparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityTransparency(self: IAcadMInsertBlock) -> str

Set: EntityTransparency(self: IAcadMInsertBlock) = value
"""

    EntityType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityType(self: IAcadMInsertBlock) -> int

"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: IAcadMInsertBlock) -> str

"""

    HasAttributes = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasAttributes(self: IAcadMInsertBlock) -> bool

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: IAcadMInsertBlock) -> bool

"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: IAcadMInsertBlock) -> AcadHyperlinks

"""

    InsertionPoint = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: InsertionPoint(self: IAcadMInsertBlock) -> object

Set: InsertionPoint(self: IAcadMInsertBlock) = value
"""

    InsUnits = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: InsUnits(self: IAcadMInsertBlock) -> str

"""

    InsUnitsFactor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: InsUnitsFactor(self: IAcadMInsertBlock) -> float

"""

    IsDynamicBlock = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IsDynamicBlock(self: IAcadMInsertBlock) -> bool

"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layer(self: IAcadMInsertBlock) -> str

Set: Layer(self: IAcadMInsertBlock) = value
"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: IAcadMInsertBlock) -> str

Set: Linetype(self: IAcadMInsertBlock) = value
"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeScale(self: IAcadMInsertBlock) -> float

Set: LinetypeScale(self: IAcadMInsertBlock) = value
"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: IAcadMInsertBlock) -> ACAD_LWEIGHT

Set: Lineweight(self: IAcadMInsertBlock) = value
"""

    Material = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Material(self: IAcadMInsertBlock) -> str

Set: Material(self: IAcadMInsertBlock) = value
"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: IAcadMInsertBlock) -> str

Set: Name(self: IAcadMInsertBlock) = value
"""

    Normal = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Normal(self: IAcadMInsertBlock) -> object

Set: Normal(self: IAcadMInsertBlock) = value
"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: IAcadMInsertBlock) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: IAcadMInsertBlock) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: IAcadMInsertBlock) -> Int64

"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: IAcadMInsertBlock) -> str

Set: PlotStyleName(self: IAcadMInsertBlock) = value
"""

    Rotation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Rotation(self: IAcadMInsertBlock) -> float

Set: Rotation(self: IAcadMInsertBlock) = value
"""

    Rows = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Rows(self: IAcadMInsertBlock) -> int

Set: Rows(self: IAcadMInsertBlock) = value
"""

    RowSpacing = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RowSpacing(self: IAcadMInsertBlock) -> float

Set: RowSpacing(self: IAcadMInsertBlock) = value
"""

    TrueColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TrueColor(self: IAcadMInsertBlock) -> AcadAcCmColor

Set: TrueColor(self: IAcadMInsertBlock) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: IAcadMInsertBlock) -> bool

Set: Visible(self: IAcadMInsertBlock) = value
"""

    XEffectiveScaleFactor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: XEffectiveScaleFactor(self: IAcadMInsertBlock) -> float

Set: XEffectiveScaleFactor(self: IAcadMInsertBlock) = value
"""

    XScaleFactor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: XScaleFactor(self: IAcadMInsertBlock) -> float

Set: XScaleFactor(self: IAcadMInsertBlock) = value
"""

    YEffectiveScaleFactor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: YEffectiveScaleFactor(self: IAcadMInsertBlock) -> float

Set: YEffectiveScaleFactor(self: IAcadMInsertBlock) = value
"""

    YScaleFactor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: YScaleFactor(self: IAcadMInsertBlock) -> float

Set: YScaleFactor(self: IAcadMInsertBlock) = value
"""

    ZEffectiveScaleFactor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ZEffectiveScaleFactor(self: IAcadMInsertBlock) -> float

Set: ZEffectiveScaleFactor(self: IAcadMInsertBlock) = value
"""

    ZScaleFactor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ZScaleFactor(self: IAcadMInsertBlock) -> float

Set: ZScaleFactor(self: IAcadMInsertBlock) = value
"""



class AcadMInsertBlock(IAcadMInsertBlock, IAcadBlockReference, IAcadEntity, IAcadObject, IAcadObjectEvents_Event):
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class AcadMInsertBlockClass(__ComObject):
    # no doc
    def add_Modified(self, A_1):
        """ add_Modified(self: AcadMInsertBlockClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def ArrayPolar(self, NumberOfObjects, AngleToFill, CenterPoint):
        """ ArrayPolar(self: AcadMInsertBlockClass, NumberOfObjects: int, AngleToFill: float, CenterPoint: object) -> object """
        pass

    def ArrayRectangular(self, NumberOfRows, NumberOfColumns, NumberOfLevels, DistBetweenRows, DistBetweenCols, DistBetweenLevels):
        """ ArrayRectangular(self: AcadMInsertBlockClass, NumberOfRows: int, NumberOfColumns: int, NumberOfLevels: int, DistBetweenRows: float, DistBetweenCols: float, DistBetweenLevels: float) -> object """
        pass

    def ConvertToAnonymousBlock(self):
        """ ConvertToAnonymousBlock(self: AcadMInsertBlockClass) """
        pass

    def ConvertToStaticBlock(self, newBlockName):
        """ ConvertToStaticBlock(self: AcadMInsertBlockClass, newBlockName: str) """
        pass

    def Copy(self):
        """ Copy(self: AcadMInsertBlockClass) -> object """
        pass

    def Delete(self):
        """ Delete(self: AcadMInsertBlockClass) """
        pass

    def Erase(self):
        """ Erase(self: AcadMInsertBlockClass) """
        pass

    def Explode(self):
        """ Explode(self: AcadMInsertBlockClass) -> object """
        pass

    def GetAttributes(self):
        """ GetAttributes(self: AcadMInsertBlockClass) -> object """
        pass

    def GetBoundingBox(self, MinPoint, MaxPoint):
        """ GetBoundingBox(self: AcadMInsertBlockClass) -> (object, object) """
        pass

    def GetConstantAttributes(self):
        """ GetConstantAttributes(self: AcadMInsertBlockClass) -> object """
        pass

    def GetDynamicBlockProperties(self):
        """ GetDynamicBlockProperties(self: AcadMInsertBlockClass) -> object """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: AcadMInsertBlockClass) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: AcadMInsertBlockClass, AppName: str) -> (object, object) """
        pass

    def Highlight(self, HighlightFlag):
        """ Highlight(self: AcadMInsertBlockClass, HighlightFlag: bool) """
        pass

    def IntersectWith(self, IntersectObject, option):
        """ IntersectWith(self: AcadMInsertBlockClass, IntersectObject: object, option: AcExtendOption) -> object """
        pass

    def Mirror(self, Point1, Point2):
        """ Mirror(self: AcadMInsertBlockClass, Point1: object, Point2: object) -> object """
        pass

    def Mirror3D(self, Point1, Point2, point3):
        """ Mirror3D(self: AcadMInsertBlockClass, Point1: object, Point2: object, point3: object) -> object """
        pass

    def Move(self, FromPoint, ToPoint):
        """ Move(self: AcadMInsertBlockClass, FromPoint: object, ToPoint: object) """
        pass

    def remove_Modified(self, A_1):
        """ remove_Modified(self: AcadMInsertBlockClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def ResetBlock(self):
        """ ResetBlock(self: AcadMInsertBlockClass) """
        pass

    def Rotate(self, BasePoint, RotationAngle):
        """ Rotate(self: AcadMInsertBlockClass, BasePoint: object, RotationAngle: float) """
        pass

    def Rotate3D(self, Point1, Point2, RotationAngle):
        """ Rotate3D(self: AcadMInsertBlockClass, Point1: object, Point2: object, RotationAngle: float) """
        pass

    def ScaleEntity(self, BasePoint, ScaleFactor):
        """ ScaleEntity(self: AcadMInsertBlockClass, BasePoint: object, ScaleFactor: float) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: AcadMInsertBlockClass, XDataType: object, XDataValue: object) """
        pass

    def TransformBy(self, TransformationMatrix):
        """ TransformBy(self: AcadMInsertBlockClass, TransformationMatrix: object) """
        pass

    def Update(self):
        """ Update(self: AcadMInsertBlockClass) """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: AcadMInsertBlockClass) -> object

"""

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: AcadMInsertBlockClass) -> ACAD_COLOR

Set: color(self: AcadMInsertBlockClass) = value
"""

    Columns = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Columns(self: AcadMInsertBlockClass) -> int

Set: Columns(self: AcadMInsertBlockClass) = value
"""

    ColumnSpacing = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ColumnSpacing(self: AcadMInsertBlockClass) -> float

Set: ColumnSpacing(self: AcadMInsertBlockClass) = value
"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: AcadMInsertBlockClass) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: AcadMInsertBlockClass) -> object

"""

    EffectiveName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EffectiveName(self: AcadMInsertBlockClass) -> str

"""

    EntityName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityName(self: AcadMInsertBlockClass) -> str

"""

    EntityTransparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityTransparency(self: AcadMInsertBlockClass) -> str

Set: EntityTransparency(self: AcadMInsertBlockClass) = value
"""

    EntityType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityType(self: AcadMInsertBlockClass) -> int

"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: AcadMInsertBlockClass) -> str

"""

    HasAttributes = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasAttributes(self: AcadMInsertBlockClass) -> bool

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: AcadMInsertBlockClass) -> bool

"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: AcadMInsertBlockClass) -> AcadHyperlinks

"""

    InsertionPoint = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: InsertionPoint(self: AcadMInsertBlockClass) -> object

Set: InsertionPoint(self: AcadMInsertBlockClass) = value
"""

    InsUnits = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: InsUnits(self: AcadMInsertBlockClass) -> str

"""

    InsUnitsFactor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: InsUnitsFactor(self: AcadMInsertBlockClass) -> float

"""

    IsDynamicBlock = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IsDynamicBlock(self: AcadMInsertBlockClass) -> bool

"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layer(self: AcadMInsertBlockClass) -> str

Set: Layer(self: AcadMInsertBlockClass) = value
"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: AcadMInsertBlockClass) -> str

Set: Linetype(self: AcadMInsertBlockClass) = value
"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeScale(self: AcadMInsertBlockClass) -> float

Set: LinetypeScale(self: AcadMInsertBlockClass) = value
"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: AcadMInsertBlockClass) -> ACAD_LWEIGHT

Set: Lineweight(self: AcadMInsertBlockClass) = value
"""

    Material = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Material(self: AcadMInsertBlockClass) -> str

Set: Material(self: AcadMInsertBlockClass) = value
"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: AcadMInsertBlockClass) -> str

Set: Name(self: AcadMInsertBlockClass) = value
"""

    Normal = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Normal(self: AcadMInsertBlockClass) -> object

Set: Normal(self: AcadMInsertBlockClass) = value
"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: AcadMInsertBlockClass) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: AcadMInsertBlockClass) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: AcadMInsertBlockClass) -> Int64

"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: AcadMInsertBlockClass) -> str

Set: PlotStyleName(self: AcadMInsertBlockClass) = value
"""

    Rotation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Rotation(self: AcadMInsertBlockClass) -> float

Set: Rotation(self: AcadMInsertBlockClass) = value
"""

    Rows = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Rows(self: AcadMInsertBlockClass) -> int

Set: Rows(self: AcadMInsertBlockClass) = value
"""

    RowSpacing = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RowSpacing(self: AcadMInsertBlockClass) -> float

Set: RowSpacing(self: AcadMInsertBlockClass) = value
"""

    TrueColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TrueColor(self: AcadMInsertBlockClass) -> AcadAcCmColor

Set: TrueColor(self: AcadMInsertBlockClass) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: AcadMInsertBlockClass) -> bool

Set: Visible(self: AcadMInsertBlockClass) = value
"""

    XEffectiveScaleFactor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: XEffectiveScaleFactor(self: AcadMInsertBlockClass) -> float

Set: XEffectiveScaleFactor(self: AcadMInsertBlockClass) = value
"""

    XScaleFactor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: XScaleFactor(self: AcadMInsertBlockClass) -> float

Set: XScaleFactor(self: AcadMInsertBlockClass) = value
"""

    YEffectiveScaleFactor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: YEffectiveScaleFactor(self: AcadMInsertBlockClass) -> float

Set: YEffectiveScaleFactor(self: AcadMInsertBlockClass) = value
"""

    YScaleFactor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: YScaleFactor(self: AcadMInsertBlockClass) -> float

Set: YScaleFactor(self: AcadMInsertBlockClass) = value
"""

    ZEffectiveScaleFactor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ZEffectiveScaleFactor(self: AcadMInsertBlockClass) -> float

Set: ZEffectiveScaleFactor(self: AcadMInsertBlockClass) = value
"""

    ZScaleFactor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ZScaleFactor(self: AcadMInsertBlockClass) -> float

Set: ZScaleFactor(self: AcadMInsertBlockClass) = value
"""


    Modified = None


class IAcadMLeader(IAcadEntity, IAcadObject):
    # no doc
    def AddLeader(self):
        """ AddLeader(self: IAcadMLeader) -> int """
        pass

    def AddLeaderLine(self, leaderIndex, pointArray):
        """ AddLeaderLine(self: IAcadMLeader, leaderIndex: int, pointArray: object) -> int """
        pass

    def AddLeaderLineEx(self, pointArray):
        """ AddLeaderLineEx(self: IAcadMLeader, pointArray: object) -> int """
        pass

    def ArrayPolar(self, NumberOfObjects, AngleToFill, CenterPoint):
        """ ArrayPolar(self: IAcadMLeader, NumberOfObjects: int, AngleToFill: float, CenterPoint: object) -> object """
        pass

    def ArrayRectangular(self, NumberOfRows, NumberOfColumns, NumberOfLevels, DistBetweenRows, DistBetweenCols, DistBetweenLevels):
        """ ArrayRectangular(self: IAcadMLeader, NumberOfRows: int, NumberOfColumns: int, NumberOfLevels: int, DistBetweenRows: float, DistBetweenCols: float, DistBetweenLevels: float) -> object """
        pass

    def Copy(self):
        """ Copy(self: IAcadMLeader) -> object """
        pass

    def Delete(self):
        """ Delete(self: IAcadMLeader) """
        pass

    def Erase(self):
        """ Erase(self: IAcadMLeader) """
        pass

    def GetBlockAttributeValue(self, attdefId):
        """ GetBlockAttributeValue(self: IAcadMLeader, attdefId: Int64) -> str """
        pass

    def GetBoundingBox(self, MinPoint, MaxPoint):
        """ GetBoundingBox(self: IAcadMLeader) -> (object, object) """
        pass

    def GetDoglegDirection(self, leaderIndex):
        """ GetDoglegDirection(self: IAcadMLeader, leaderIndex: int) -> object """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: IAcadMLeader) -> AcadDictionary """
        pass

    def GetLeaderIndex(self, leaderLineIndex):
        """ GetLeaderIndex(self: IAcadMLeader, leaderLineIndex: int) -> int """
        pass

    def GetLeaderLineIndexes(self, leaderIndex):
        """ GetLeaderLineIndexes(self: IAcadMLeader, leaderIndex: int) -> object """
        pass

    def GetLeaderLineVertices(self, leaderLineIndex):
        """ GetLeaderLineVertices(self: IAcadMLeader, leaderLineIndex: int) -> object """
        pass

    def GetVertexCount(self, leaderLineIndex):
        """ GetVertexCount(self: IAcadMLeader, leaderLineIndex: int) -> int """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: IAcadMLeader, AppName: str) -> (object, object) """
        pass

    def Highlight(self, HighlightFlag):
        """ Highlight(self: IAcadMLeader, HighlightFlag: bool) """
        pass

    def IntersectWith(self, IntersectObject, option):
        """ IntersectWith(self: IAcadMLeader, IntersectObject: object, option: AcExtendOption) -> object """
        pass

    def Mirror(self, Point1, Point2):
        """ Mirror(self: IAcadMLeader, Point1: object, Point2: object) -> object """
        pass

    def Mirror3D(self, Point1, Point2, point3):
        """ Mirror3D(self: IAcadMLeader, Point1: object, Point2: object, point3: object) -> object """
        pass

    def Move(self, FromPoint, ToPoint):
        """ Move(self: IAcadMLeader, FromPoint: object, ToPoint: object) """
        pass

    def RemoveLeader(self, leaderIndex):
        """ RemoveLeader(self: IAcadMLeader, leaderIndex: int) """
        pass

    def RemoveLeaderLine(self, leaderLineIndex):
        """ RemoveLeaderLine(self: IAcadMLeader, leaderLineIndex: int) """
        pass

    def Rotate(self, BasePoint, RotationAngle):
        """ Rotate(self: IAcadMLeader, BasePoint: object, RotationAngle: float) """
        pass

    def Rotate3D(self, Point1, Point2, RotationAngle):
        """ Rotate3D(self: IAcadMLeader, Point1: object, Point2: object, RotationAngle: float) """
        pass

    def ScaleEntity(self, BasePoint, ScaleFactor):
        """ ScaleEntity(self: IAcadMLeader, BasePoint: object, ScaleFactor: float) """
        pass

    def SetBlockAttributeValue(self, attdefId, Value):
        """ SetBlockAttributeValue(self: IAcadMLeader, attdefId: Int64, Value: str) """
        pass

    def SetDoglegDirection(self, leaderIndex, dirVec):
        """ SetDoglegDirection(self: IAcadMLeader, leaderIndex: int, dirVec: object) """
        pass

    def SetLeaderLineVertices(self, leaderLineIndex, pointArray):
        """ SetLeaderLineVertices(self: IAcadMLeader, leaderLineIndex: int, pointArray: object) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: IAcadMLeader, XDataType: object, XDataValue: object) """
        pass

    def TransformBy(self, TransformationMatrix):
        """ TransformBy(self: IAcadMLeader, TransformationMatrix: object) """
        pass

    def Update(self):
        """ Update(self: IAcadMLeader) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IAcadMLeader) -> object

"""

    ArrowheadBlock = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ArrowheadBlock(self: IAcadMLeader) -> str

Set: ArrowheadBlock(self: IAcadMLeader) = value
"""

    ArrowheadSize = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ArrowheadSize(self: IAcadMLeader) -> float

Set: ArrowheadSize(self: IAcadMLeader) = value
"""

    ArrowheadType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ArrowheadType(self: IAcadMLeader) -> AcDimArrowheadType

Set: ArrowheadType(self: IAcadMLeader) = value
"""

    BlockConnectionType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BlockConnectionType(self: IAcadMLeader) -> AcBlockConnectionType

Set: BlockConnectionType(self: IAcadMLeader) = value
"""

    BlockScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BlockScale(self: IAcadMLeader) -> float

Set: BlockScale(self: IAcadMLeader) = value
"""

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: IAcadMLeader) -> ACAD_COLOR

Set: color(self: IAcadMLeader) = value
"""

    ContentBlockName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ContentBlockName(self: IAcadMLeader) -> str

Set: ContentBlockName(self: IAcadMLeader) = value
"""

    ContentBlockType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ContentBlockType(self: IAcadMLeader) -> AcPredefBlockType

Set: ContentBlockType(self: IAcadMLeader) = value
"""

    ContentType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ContentType(self: IAcadMLeader) -> AcMLeaderContentType

Set: ContentType(self: IAcadMLeader) = value
"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: IAcadMLeader) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: IAcadMLeader) -> object

"""

    DogLegged = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DogLegged(self: IAcadMLeader) -> bool

Set: DogLegged(self: IAcadMLeader) = value
"""

    DoglegLength = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DoglegLength(self: IAcadMLeader) -> float

Set: DoglegLength(self: IAcadMLeader) = value
"""

    EntityName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityName(self: IAcadMLeader) -> str

"""

    EntityTransparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityTransparency(self: IAcadMLeader) -> str

Set: EntityTransparency(self: IAcadMLeader) = value
"""

    EntityType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityType(self: IAcadMLeader) -> int

"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: IAcadMLeader) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: IAcadMLeader) -> bool

"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: IAcadMLeader) -> AcadHyperlinks

"""

    LandingGap = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LandingGap(self: IAcadMLeader) -> float

Set: LandingGap(self: IAcadMLeader) = value
"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layer(self: IAcadMLeader) -> str

Set: Layer(self: IAcadMLeader) = value
"""

    LeaderCount = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LeaderCount(self: IAcadMLeader) -> int

"""

    LeaderLineColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LeaderLineColor(self: IAcadMLeader) -> AcadAcCmColor

Set: LeaderLineColor(self: IAcadMLeader) = value
"""

    LeaderLinetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LeaderLinetype(self: IAcadMLeader) -> str

Set: LeaderLinetype(self: IAcadMLeader) = value
"""

    LeaderLineWeight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LeaderLineWeight(self: IAcadMLeader) -> ACAD_LWEIGHT

Set: LeaderLineWeight(self: IAcadMLeader) = value
"""

    LeaderType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LeaderType(self: IAcadMLeader) -> AcMLeaderType

Set: LeaderType(self: IAcadMLeader) = value
"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: IAcadMLeader) -> str

Set: Linetype(self: IAcadMLeader) = value
"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeScale(self: IAcadMLeader) -> float

Set: LinetypeScale(self: IAcadMLeader) = value
"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: IAcadMLeader) -> ACAD_LWEIGHT

Set: Lineweight(self: IAcadMLeader) = value
"""

    Material = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Material(self: IAcadMLeader) -> str

Set: Material(self: IAcadMLeader) = value
"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: IAcadMLeader) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: IAcadMLeader) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: IAcadMLeader) -> Int64

"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: IAcadMLeader) -> str

Set: PlotStyleName(self: IAcadMLeader) = value
"""

    ScaleFactor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ScaleFactor(self: IAcadMLeader) -> float

Set: ScaleFactor(self: IAcadMLeader) = value
"""

    StyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: StyleName(self: IAcadMLeader) -> str

Set: StyleName(self: IAcadMLeader) = value
"""

    TextAttachmentDirection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextAttachmentDirection(self: IAcadMLeader) -> AcTextAttachmentDirection

Set: TextAttachmentDirection(self: IAcadMLeader) = value
"""

    TextBackgroundFill = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextBackgroundFill(self: IAcadMLeader) -> bool

Set: TextBackgroundFill(self: IAcadMLeader) = value
"""

    TextBottomAttachmentType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextBottomAttachmentType(self: IAcadMLeader) -> AcVerticalTextAttachmentType

Set: TextBottomAttachmentType(self: IAcadMLeader) = value
"""

    TextDirection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextDirection(self: IAcadMLeader) -> AcDrawingDirection

Set: TextDirection(self: IAcadMLeader) = value
"""

    TextFrameDisplay = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextFrameDisplay(self: IAcadMLeader) -> bool

Set: TextFrameDisplay(self: IAcadMLeader) = value
"""

    TextHeight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextHeight(self: IAcadMLeader) -> float

Set: TextHeight(self: IAcadMLeader) = value
"""

    TextJustify = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextJustify(self: IAcadMLeader) -> AcAttachmentPoint

Set: TextJustify(self: IAcadMLeader) = value
"""

    TextLeftAttachmentType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextLeftAttachmentType(self: IAcadMLeader) -> AcTextAttachmentType

Set: TextLeftAttachmentType(self: IAcadMLeader) = value
"""

    TextLineSpacingDistance = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextLineSpacingDistance(self: IAcadMLeader) -> float

Set: TextLineSpacingDistance(self: IAcadMLeader) = value
"""

    TextLineSpacingFactor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextLineSpacingFactor(self: IAcadMLeader) -> float

Set: TextLineSpacingFactor(self: IAcadMLeader) = value
"""

    TextLineSpacingStyle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextLineSpacingStyle(self: IAcadMLeader) -> AcLineSpacingStyle

Set: TextLineSpacingStyle(self: IAcadMLeader) = value
"""

    TextRightAttachmentType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextRightAttachmentType(self: IAcadMLeader) -> AcTextAttachmentType

Set: TextRightAttachmentType(self: IAcadMLeader) = value
"""

    TextRotation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextRotation(self: IAcadMLeader) -> float

Set: TextRotation(self: IAcadMLeader) = value
"""

    TextString = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextString(self: IAcadMLeader) -> str

Set: TextString(self: IAcadMLeader) = value
"""

    TextStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextStyleName(self: IAcadMLeader) -> str

Set: TextStyleName(self: IAcadMLeader) = value
"""

    TextTopAttachmentType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextTopAttachmentType(self: IAcadMLeader) -> AcVerticalTextAttachmentType

Set: TextTopAttachmentType(self: IAcadMLeader) = value
"""

    TextWidth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextWidth(self: IAcadMLeader) -> float

Set: TextWidth(self: IAcadMLeader) = value
"""

    TrueColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TrueColor(self: IAcadMLeader) -> AcadAcCmColor

Set: TrueColor(self: IAcadMLeader) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: IAcadMLeader) -> bool

Set: Visible(self: IAcadMLeader) = value
"""



class AcadMLeader(IAcadMLeader, IAcadEntity, IAcadObject, IAcadObjectEvents_Event):
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class AcadMLeaderClass(__ComObject):
    # no doc
    def AddLeader(self):
        """ AddLeader(self: AcadMLeaderClass) -> int """
        pass

    def AddLeaderLine(self, leaderIndex, pointArray):
        """ AddLeaderLine(self: AcadMLeaderClass, leaderIndex: int, pointArray: object) -> int """
        pass

    def AddLeaderLineEx(self, pointArray):
        """ AddLeaderLineEx(self: AcadMLeaderClass, pointArray: object) -> int """
        pass

    def add_Modified(self, A_1):
        """ add_Modified(self: AcadMLeaderClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def ArrayPolar(self, NumberOfObjects, AngleToFill, CenterPoint):
        """ ArrayPolar(self: AcadMLeaderClass, NumberOfObjects: int, AngleToFill: float, CenterPoint: object) -> object """
        pass

    def ArrayRectangular(self, NumberOfRows, NumberOfColumns, NumberOfLevels, DistBetweenRows, DistBetweenCols, DistBetweenLevels):
        """ ArrayRectangular(self: AcadMLeaderClass, NumberOfRows: int, NumberOfColumns: int, NumberOfLevels: int, DistBetweenRows: float, DistBetweenCols: float, DistBetweenLevels: float) -> object """
        pass

    def Copy(self):
        """ Copy(self: AcadMLeaderClass) -> object """
        pass

    def Delete(self):
        """ Delete(self: AcadMLeaderClass) """
        pass

    def Erase(self):
        """ Erase(self: AcadMLeaderClass) """
        pass

    def GetBlockAttributeValue(self, attdefId):
        """ GetBlockAttributeValue(self: AcadMLeaderClass, attdefId: Int64) -> str """
        pass

    def GetBoundingBox(self, MinPoint, MaxPoint):
        """ GetBoundingBox(self: AcadMLeaderClass) -> (object, object) """
        pass

    def GetDoglegDirection(self, leaderIndex):
        """ GetDoglegDirection(self: AcadMLeaderClass, leaderIndex: int) -> object """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: AcadMLeaderClass) -> AcadDictionary """
        pass

    def GetLeaderIndex(self, leaderLineIndex):
        """ GetLeaderIndex(self: AcadMLeaderClass, leaderLineIndex: int) -> int """
        pass

    def GetLeaderLineIndexes(self, leaderIndex):
        """ GetLeaderLineIndexes(self: AcadMLeaderClass, leaderIndex: int) -> object """
        pass

    def GetLeaderLineVertices(self, leaderLineIndex):
        """ GetLeaderLineVertices(self: AcadMLeaderClass, leaderLineIndex: int) -> object """
        pass

    def GetVertexCount(self, leaderLineIndex):
        """ GetVertexCount(self: AcadMLeaderClass, leaderLineIndex: int) -> int """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: AcadMLeaderClass, AppName: str) -> (object, object) """
        pass

    def Highlight(self, HighlightFlag):
        """ Highlight(self: AcadMLeaderClass, HighlightFlag: bool) """
        pass

    def IntersectWith(self, IntersectObject, option):
        """ IntersectWith(self: AcadMLeaderClass, IntersectObject: object, option: AcExtendOption) -> object """
        pass

    def Mirror(self, Point1, Point2):
        """ Mirror(self: AcadMLeaderClass, Point1: object, Point2: object) -> object """
        pass

    def Mirror3D(self, Point1, Point2, point3):
        """ Mirror3D(self: AcadMLeaderClass, Point1: object, Point2: object, point3: object) -> object """
        pass

    def Move(self, FromPoint, ToPoint):
        """ Move(self: AcadMLeaderClass, FromPoint: object, ToPoint: object) """
        pass

    def RemoveLeader(self, leaderIndex):
        """ RemoveLeader(self: AcadMLeaderClass, leaderIndex: int) """
        pass

    def RemoveLeaderLine(self, leaderLineIndex):
        """ RemoveLeaderLine(self: AcadMLeaderClass, leaderLineIndex: int) """
        pass

    def remove_Modified(self, A_1):
        """ remove_Modified(self: AcadMLeaderClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def Rotate(self, BasePoint, RotationAngle):
        """ Rotate(self: AcadMLeaderClass, BasePoint: object, RotationAngle: float) """
        pass

    def Rotate3D(self, Point1, Point2, RotationAngle):
        """ Rotate3D(self: AcadMLeaderClass, Point1: object, Point2: object, RotationAngle: float) """
        pass

    def ScaleEntity(self, BasePoint, ScaleFactor):
        """ ScaleEntity(self: AcadMLeaderClass, BasePoint: object, ScaleFactor: float) """
        pass

    def SetBlockAttributeValue(self, attdefId, Value):
        """ SetBlockAttributeValue(self: AcadMLeaderClass, attdefId: Int64, Value: str) """
        pass

    def SetDoglegDirection(self, leaderIndex, dirVec):
        """ SetDoglegDirection(self: AcadMLeaderClass, leaderIndex: int, dirVec: object) """
        pass

    def SetLeaderLineVertices(self, leaderLineIndex, pointArray):
        """ SetLeaderLineVertices(self: AcadMLeaderClass, leaderLineIndex: int, pointArray: object) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: AcadMLeaderClass, XDataType: object, XDataValue: object) """
        pass

    def TransformBy(self, TransformationMatrix):
        """ TransformBy(self: AcadMLeaderClass, TransformationMatrix: object) """
        pass

    def Update(self):
        """ Update(self: AcadMLeaderClass) """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: AcadMLeaderClass) -> object

"""

    ArrowheadBlock = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ArrowheadBlock(self: AcadMLeaderClass) -> str

Set: ArrowheadBlock(self: AcadMLeaderClass) = value
"""

    ArrowheadSize = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ArrowheadSize(self: AcadMLeaderClass) -> float

Set: ArrowheadSize(self: AcadMLeaderClass) = value
"""

    ArrowheadType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ArrowheadType(self: AcadMLeaderClass) -> AcDimArrowheadType

Set: ArrowheadType(self: AcadMLeaderClass) = value
"""

    BlockConnectionType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BlockConnectionType(self: AcadMLeaderClass) -> AcBlockConnectionType

Set: BlockConnectionType(self: AcadMLeaderClass) = value
"""

    BlockScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BlockScale(self: AcadMLeaderClass) -> float

Set: BlockScale(self: AcadMLeaderClass) = value
"""

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: AcadMLeaderClass) -> ACAD_COLOR

Set: color(self: AcadMLeaderClass) = value
"""

    ContentBlockName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ContentBlockName(self: AcadMLeaderClass) -> str

Set: ContentBlockName(self: AcadMLeaderClass) = value
"""

    ContentBlockType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ContentBlockType(self: AcadMLeaderClass) -> AcPredefBlockType

Set: ContentBlockType(self: AcadMLeaderClass) = value
"""

    ContentType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ContentType(self: AcadMLeaderClass) -> AcMLeaderContentType

Set: ContentType(self: AcadMLeaderClass) = value
"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: AcadMLeaderClass) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: AcadMLeaderClass) -> object

"""

    DogLegged = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DogLegged(self: AcadMLeaderClass) -> bool

Set: DogLegged(self: AcadMLeaderClass) = value
"""

    DoglegLength = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DoglegLength(self: AcadMLeaderClass) -> float

Set: DoglegLength(self: AcadMLeaderClass) = value
"""

    EntityName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityName(self: AcadMLeaderClass) -> str

"""

    EntityTransparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityTransparency(self: AcadMLeaderClass) -> str

Set: EntityTransparency(self: AcadMLeaderClass) = value
"""

    EntityType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityType(self: AcadMLeaderClass) -> int

"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: AcadMLeaderClass) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: AcadMLeaderClass) -> bool

"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: AcadMLeaderClass) -> AcadHyperlinks

"""

    LandingGap = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LandingGap(self: AcadMLeaderClass) -> float

Set: LandingGap(self: AcadMLeaderClass) = value
"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layer(self: AcadMLeaderClass) -> str

Set: Layer(self: AcadMLeaderClass) = value
"""

    LeaderCount = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LeaderCount(self: AcadMLeaderClass) -> int

"""

    LeaderLineColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LeaderLineColor(self: AcadMLeaderClass) -> AcadAcCmColor

Set: LeaderLineColor(self: AcadMLeaderClass) = value
"""

    LeaderLinetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LeaderLinetype(self: AcadMLeaderClass) -> str

Set: LeaderLinetype(self: AcadMLeaderClass) = value
"""

    LeaderLineWeight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LeaderLineWeight(self: AcadMLeaderClass) -> ACAD_LWEIGHT

Set: LeaderLineWeight(self: AcadMLeaderClass) = value
"""

    LeaderType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LeaderType(self: AcadMLeaderClass) -> AcMLeaderType

Set: LeaderType(self: AcadMLeaderClass) = value
"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: AcadMLeaderClass) -> str

Set: Linetype(self: AcadMLeaderClass) = value
"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeScale(self: AcadMLeaderClass) -> float

Set: LinetypeScale(self: AcadMLeaderClass) = value
"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: AcadMLeaderClass) -> ACAD_LWEIGHT

Set: Lineweight(self: AcadMLeaderClass) = value
"""

    Material = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Material(self: AcadMLeaderClass) -> str

Set: Material(self: AcadMLeaderClass) = value
"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: AcadMLeaderClass) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: AcadMLeaderClass) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: AcadMLeaderClass) -> Int64

"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: AcadMLeaderClass) -> str

Set: PlotStyleName(self: AcadMLeaderClass) = value
"""

    ScaleFactor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ScaleFactor(self: AcadMLeaderClass) -> float

Set: ScaleFactor(self: AcadMLeaderClass) = value
"""

    StyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: StyleName(self: AcadMLeaderClass) -> str

Set: StyleName(self: AcadMLeaderClass) = value
"""

    TextAttachmentDirection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextAttachmentDirection(self: AcadMLeaderClass) -> AcTextAttachmentDirection

Set: TextAttachmentDirection(self: AcadMLeaderClass) = value
"""

    TextBackgroundFill = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextBackgroundFill(self: AcadMLeaderClass) -> bool

Set: TextBackgroundFill(self: AcadMLeaderClass) = value
"""

    TextBottomAttachmentType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextBottomAttachmentType(self: AcadMLeaderClass) -> AcVerticalTextAttachmentType

Set: TextBottomAttachmentType(self: AcadMLeaderClass) = value
"""

    TextDirection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextDirection(self: AcadMLeaderClass) -> AcDrawingDirection

Set: TextDirection(self: AcadMLeaderClass) = value
"""

    TextFrameDisplay = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextFrameDisplay(self: AcadMLeaderClass) -> bool

Set: TextFrameDisplay(self: AcadMLeaderClass) = value
"""

    TextHeight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextHeight(self: AcadMLeaderClass) -> float

Set: TextHeight(self: AcadMLeaderClass) = value
"""

    TextJustify = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextJustify(self: AcadMLeaderClass) -> AcAttachmentPoint

Set: TextJustify(self: AcadMLeaderClass) = value
"""

    TextLeftAttachmentType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextLeftAttachmentType(self: AcadMLeaderClass) -> AcTextAttachmentType

Set: TextLeftAttachmentType(self: AcadMLeaderClass) = value
"""

    TextLineSpacingDistance = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextLineSpacingDistance(self: AcadMLeaderClass) -> float

Set: TextLineSpacingDistance(self: AcadMLeaderClass) = value
"""

    TextLineSpacingFactor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextLineSpacingFactor(self: AcadMLeaderClass) -> float

Set: TextLineSpacingFactor(self: AcadMLeaderClass) = value
"""

    TextLineSpacingStyle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextLineSpacingStyle(self: AcadMLeaderClass) -> AcLineSpacingStyle

Set: TextLineSpacingStyle(self: AcadMLeaderClass) = value
"""

    TextRightAttachmentType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextRightAttachmentType(self: AcadMLeaderClass) -> AcTextAttachmentType

Set: TextRightAttachmentType(self: AcadMLeaderClass) = value
"""

    TextRotation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextRotation(self: AcadMLeaderClass) -> float

Set: TextRotation(self: AcadMLeaderClass) = value
"""

    TextString = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextString(self: AcadMLeaderClass) -> str

Set: TextString(self: AcadMLeaderClass) = value
"""

    TextStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextStyleName(self: AcadMLeaderClass) -> str

Set: TextStyleName(self: AcadMLeaderClass) = value
"""

    TextTopAttachmentType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextTopAttachmentType(self: AcadMLeaderClass) -> AcVerticalTextAttachmentType

Set: TextTopAttachmentType(self: AcadMLeaderClass) = value
"""

    TextWidth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextWidth(self: AcadMLeaderClass) -> float

Set: TextWidth(self: AcadMLeaderClass) = value
"""

    TrueColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TrueColor(self: AcadMLeaderClass) -> AcadAcCmColor

Set: TrueColor(self: AcadMLeaderClass) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: AcadMLeaderClass) -> bool

Set: Visible(self: AcadMLeaderClass) = value
"""


    Modified = None


class IAcadSubEntity:
    # no doc
    def OnModified(self):
        """ OnModified(self: IAcadSubEntity) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: IAcadSubEntity) -> AcadAcCmColor

Set: color(self: IAcadSubEntity) = value
"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: IAcadSubEntity) -> AcadHyperlinks

"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layer(self: IAcadSubEntity) -> str

"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: IAcadSubEntity) -> str

"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeScale(self: IAcadSubEntity) -> float

"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: IAcadSubEntity) -> ACAD_LWEIGHT

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: IAcadSubEntity) -> str

"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: IAcadSubEntity) -> str

"""



class IAcadMLeaderLeader(IAcadSubEntity):
    # no doc
    def OnModified(self):
        """ OnModified(self: IAcadMLeaderLeader) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    ArrowheadBlock = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ArrowheadBlock(self: IAcadMLeaderLeader) -> str

Set: ArrowheadBlock(self: IAcadMLeaderLeader) = value
"""

    ArrowheadSize = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ArrowheadSize(self: IAcadMLeaderLeader) -> float

Set: ArrowheadSize(self: IAcadMLeaderLeader) = value
"""

    ArrowheadType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ArrowheadType(self: IAcadMLeaderLeader) -> AcDimArrowheadType

Set: ArrowheadType(self: IAcadMLeaderLeader) = value
"""

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: IAcadMLeaderLeader) -> AcadAcCmColor

Set: color(self: IAcadMLeaderLeader) = value
"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: IAcadMLeaderLeader) -> AcadHyperlinks

"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layer(self: IAcadMLeaderLeader) -> str

"""

    LeaderLineColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LeaderLineColor(self: IAcadMLeaderLeader) -> AcadAcCmColor

Set: LeaderLineColor(self: IAcadMLeaderLeader) = value
"""

    LeaderLinetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LeaderLinetype(self: IAcadMLeaderLeader) -> str

Set: LeaderLinetype(self: IAcadMLeaderLeader) = value
"""

    LeaderLineWeight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LeaderLineWeight(self: IAcadMLeaderLeader) -> ACAD_LWEIGHT

Set: LeaderLineWeight(self: IAcadMLeaderLeader) = value
"""

    LeaderType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LeaderType(self: IAcadMLeaderLeader) -> AcMLeaderType

Set: LeaderType(self: IAcadMLeaderLeader) = value
"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: IAcadMLeaderLeader) -> str

"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeScale(self: IAcadMLeaderLeader) -> float

"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: IAcadMLeaderLeader) -> ACAD_LWEIGHT

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: IAcadMLeaderLeader) -> str

"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: IAcadMLeaderLeader) -> str

"""



class AcadMLeaderLeader(IAcadMLeaderLeader, IAcadSubEntity, IAcadObjectEvents_Event):
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class AcadMLeaderLeaderClass(__ComObject):
    # no doc
    def add_Modified(self, A_1):
        """ add_Modified(self: AcadMLeaderLeaderClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def OnModified(self):
        """ OnModified(self: AcadMLeaderLeaderClass) """
        pass

    def remove_Modified(self, A_1):
        """ remove_Modified(self: AcadMLeaderLeaderClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    ArrowheadBlock = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ArrowheadBlock(self: AcadMLeaderLeaderClass) -> str

Set: ArrowheadBlock(self: AcadMLeaderLeaderClass) = value
"""

    ArrowheadSize = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ArrowheadSize(self: AcadMLeaderLeaderClass) -> float

Set: ArrowheadSize(self: AcadMLeaderLeaderClass) = value
"""

    ArrowheadType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ArrowheadType(self: AcadMLeaderLeaderClass) -> AcDimArrowheadType

Set: ArrowheadType(self: AcadMLeaderLeaderClass) = value
"""

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: AcadMLeaderLeaderClass) -> AcadAcCmColor

Set: color(self: AcadMLeaderLeaderClass) = value
"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: AcadMLeaderLeaderClass) -> AcadHyperlinks

"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layer(self: AcadMLeaderLeaderClass) -> str

"""

    LeaderLineColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LeaderLineColor(self: AcadMLeaderLeaderClass) -> AcadAcCmColor

Set: LeaderLineColor(self: AcadMLeaderLeaderClass) = value
"""

    LeaderLinetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LeaderLinetype(self: AcadMLeaderLeaderClass) -> str

Set: LeaderLinetype(self: AcadMLeaderLeaderClass) = value
"""

    LeaderLineWeight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LeaderLineWeight(self: AcadMLeaderLeaderClass) -> ACAD_LWEIGHT

Set: LeaderLineWeight(self: AcadMLeaderLeaderClass) = value
"""

    LeaderType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LeaderType(self: AcadMLeaderLeaderClass) -> AcMLeaderType

Set: LeaderType(self: AcadMLeaderLeaderClass) = value
"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: AcadMLeaderLeaderClass) -> str

"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeScale(self: AcadMLeaderLeaderClass) -> float

"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: AcadMLeaderLeaderClass) -> ACAD_LWEIGHT

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: AcadMLeaderLeaderClass) -> str

"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: AcadMLeaderLeaderClass) -> str

"""


    Modified = None


class IAcadMLeaderStyle(IAcadObject):
    # no doc
    def Delete(self):
        """ Delete(self: IAcadMLeaderStyle) """
        pass

    def Erase(self):
        """ Erase(self: IAcadMLeaderStyle) """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: IAcadMLeaderStyle) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: IAcadMLeaderStyle, AppName: str) -> (object, object) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: IAcadMLeaderStyle, XDataType: object, XDataValue: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    AlignSpace = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AlignSpace(self: IAcadMLeaderStyle) -> float

Set: AlignSpace(self: IAcadMLeaderStyle) = value
"""

    Annotative = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Annotative(self: IAcadMLeaderStyle) -> bool

Set: Annotative(self: IAcadMLeaderStyle) = value
"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IAcadMLeaderStyle) -> object

"""

    ArrowSize = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ArrowSize(self: IAcadMLeaderStyle) -> float

Set: ArrowSize(self: IAcadMLeaderStyle) = value
"""

    ArrowSymbol = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ArrowSymbol(self: IAcadMLeaderStyle) -> str

Set: ArrowSymbol(self: IAcadMLeaderStyle) = value
"""

    BitFlags = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BitFlags(self: IAcadMLeaderStyle) -> int

Set: BitFlags(self: IAcadMLeaderStyle) = value
"""

    Block = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Block(self: IAcadMLeaderStyle) -> str

Set: Block(self: IAcadMLeaderStyle) = value
"""

    BlockColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BlockColor(self: IAcadMLeaderStyle) -> AcadAcCmColor

Set: BlockColor(self: IAcadMLeaderStyle) = value
"""

    BlockConnectionType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BlockConnectionType(self: IAcadMLeaderStyle) -> AcBlockConnectionType

Set: BlockConnectionType(self: IAcadMLeaderStyle) = value
"""

    BlockRotation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BlockRotation(self: IAcadMLeaderStyle) -> float

Set: BlockRotation(self: IAcadMLeaderStyle) = value
"""

    BlockScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BlockScale(self: IAcadMLeaderStyle) -> float

Set: BlockScale(self: IAcadMLeaderStyle) = value
"""

    BreakSize = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BreakSize(self: IAcadMLeaderStyle) -> float

Set: BreakSize(self: IAcadMLeaderStyle) = value
"""

    ContentType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ContentType(self: IAcadMLeaderStyle) -> AcMLeaderContentType

Set: ContentType(self: IAcadMLeaderStyle) = value
"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: IAcadMLeaderStyle) -> AcadDatabase

"""

    Description = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Description(self: IAcadMLeaderStyle) -> str

Set: Description(self: IAcadMLeaderStyle) = value
"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: IAcadMLeaderStyle) -> object

"""

    DoglegLength = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DoglegLength(self: IAcadMLeaderStyle) -> float

Set: DoglegLength(self: IAcadMLeaderStyle) = value
"""

    DrawLeaderOrderType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DrawLeaderOrderType(self: IAcadMLeaderStyle) -> AcDrawLeaderOrderType

Set: DrawLeaderOrderType(self: IAcadMLeaderStyle) = value
"""

    DrawMLeaderOrderType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DrawMLeaderOrderType(self: IAcadMLeaderStyle) -> AcDrawMLeaderOrderType

Set: DrawMLeaderOrderType(self: IAcadMLeaderStyle) = value
"""

    EnableBlockRotation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EnableBlockRotation(self: IAcadMLeaderStyle) -> bool

Set: EnableBlockRotation(self: IAcadMLeaderStyle) = value
"""

    EnableBlockScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EnableBlockScale(self: IAcadMLeaderStyle) -> bool

Set: EnableBlockScale(self: IAcadMLeaderStyle) = value
"""

    EnableDogleg = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EnableDogleg(self: IAcadMLeaderStyle) -> bool

Set: EnableDogleg(self: IAcadMLeaderStyle) = value
"""

    EnableFrameText = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EnableFrameText(self: IAcadMLeaderStyle) -> bool

Set: EnableFrameText(self: IAcadMLeaderStyle) = value
"""

    EnableLanding = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EnableLanding(self: IAcadMLeaderStyle) -> bool

Set: EnableLanding(self: IAcadMLeaderStyle) = value
"""

    FirstSegmentAngleConstraint = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FirstSegmentAngleConstraint(self: IAcadMLeaderStyle) -> AcSegmentAngleType

Set: FirstSegmentAngleConstraint(self: IAcadMLeaderStyle) = value
"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: IAcadMLeaderStyle) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: IAcadMLeaderStyle) -> bool

"""

    LandingGap = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LandingGap(self: IAcadMLeaderStyle) -> float

Set: LandingGap(self: IAcadMLeaderStyle) = value
"""

    LeaderLineColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LeaderLineColor(self: IAcadMLeaderStyle) -> AcadAcCmColor

Set: LeaderLineColor(self: IAcadMLeaderStyle) = value
"""

    LeaderLinetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LeaderLinetype(self: IAcadMLeaderStyle) -> AcMLeaderType

Set: LeaderLinetype(self: IAcadMLeaderStyle) = value
"""

    LeaderLineTypeId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LeaderLineTypeId(self: IAcadMLeaderStyle) -> str

Set: LeaderLineTypeId(self: IAcadMLeaderStyle) = value
"""

    LeaderLineWeight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LeaderLineWeight(self: IAcadMLeaderStyle) -> AcLineWeight

Set: LeaderLineWeight(self: IAcadMLeaderStyle) = value
"""

    MaxLeaderSegmentsPoints = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MaxLeaderSegmentsPoints(self: IAcadMLeaderStyle) -> int

Set: MaxLeaderSegmentsPoints(self: IAcadMLeaderStyle) = value
"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: IAcadMLeaderStyle) -> str

Set: Name(self: IAcadMLeaderStyle) = value
"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: IAcadMLeaderStyle) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: IAcadMLeaderStyle) -> str

"""

    OverwritePropChanged = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OverwritePropChanged(self: IAcadMLeaderStyle) -> bool

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: IAcadMLeaderStyle) -> Int64

"""

    ScaleFactor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ScaleFactor(self: IAcadMLeaderStyle) -> float

Set: ScaleFactor(self: IAcadMLeaderStyle) = value
"""

    SecondSegmentAngleConstraint = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SecondSegmentAngleConstraint(self: IAcadMLeaderStyle) -> AcSegmentAngleType

Set: SecondSegmentAngleConstraint(self: IAcadMLeaderStyle) = value
"""

    TextAlignmentType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextAlignmentType(self: IAcadMLeaderStyle) -> AcTextAlignmentType

Set: TextAlignmentType(self: IAcadMLeaderStyle) = value
"""

    TextAngleType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextAngleType(self: IAcadMLeaderStyle) -> AcTextAngleType

Set: TextAngleType(self: IAcadMLeaderStyle) = value
"""

    TextAttachmentDirection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextAttachmentDirection(self: IAcadMLeaderStyle) -> AcTextAttachmentDirection

Set: TextAttachmentDirection(self: IAcadMLeaderStyle) = value
"""

    TextBottomAttachmentType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextBottomAttachmentType(self: IAcadMLeaderStyle) -> AcVerticalTextAttachmentType

Set: TextBottomAttachmentType(self: IAcadMLeaderStyle) = value
"""

    TextColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextColor(self: IAcadMLeaderStyle) -> AcadAcCmColor

Set: TextColor(self: IAcadMLeaderStyle) = value
"""

    TextHeight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextHeight(self: IAcadMLeaderStyle) -> float

Set: TextHeight(self: IAcadMLeaderStyle) = value
"""

    TextLeftAttachmentType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextLeftAttachmentType(self: IAcadMLeaderStyle) -> AcTextAttachmentType

Set: TextLeftAttachmentType(self: IAcadMLeaderStyle) = value
"""

    TextRightAttachmentType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextRightAttachmentType(self: IAcadMLeaderStyle) -> AcTextAttachmentType

Set: TextRightAttachmentType(self: IAcadMLeaderStyle) = value
"""

    TextString = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextString(self: IAcadMLeaderStyle) -> str

Set: TextString(self: IAcadMLeaderStyle) = value
"""

    TextStyle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextStyle(self: IAcadMLeaderStyle) -> str

Set: TextStyle(self: IAcadMLeaderStyle) = value
"""

    TextTopAttachmentType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextTopAttachmentType(self: IAcadMLeaderStyle) -> AcVerticalTextAttachmentType

Set: TextTopAttachmentType(self: IAcadMLeaderStyle) = value
"""



class AcadMLeaderStyle(IAcadMLeaderStyle, IAcadObject, IAcadObjectEvents_Event):
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class AcadMLeaderStyleClass(__ComObject):
    """ AcadMLeaderStyleClass() """
    def add_Modified(self, A_1):
        """ add_Modified(self: AcadMLeaderStyleClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def Delete(self):
        """ Delete(self: AcadMLeaderStyleClass) """
        pass

    def Erase(self):
        """ Erase(self: AcadMLeaderStyleClass) """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: AcadMLeaderStyleClass) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: AcadMLeaderStyleClass, AppName: str) -> (object, object) """
        pass

    def remove_Modified(self, A_1):
        """ remove_Modified(self: AcadMLeaderStyleClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: AcadMLeaderStyleClass, XDataType: object, XDataValue: object) """
        pass

    AlignSpace = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AlignSpace(self: AcadMLeaderStyleClass) -> float

Set: AlignSpace(self: AcadMLeaderStyleClass) = value
"""

    Annotative = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Annotative(self: AcadMLeaderStyleClass) -> bool

Set: Annotative(self: AcadMLeaderStyleClass) = value
"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: AcadMLeaderStyleClass) -> object

"""

    ArrowSize = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ArrowSize(self: AcadMLeaderStyleClass) -> float

Set: ArrowSize(self: AcadMLeaderStyleClass) = value
"""

    ArrowSymbol = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ArrowSymbol(self: AcadMLeaderStyleClass) -> str

Set: ArrowSymbol(self: AcadMLeaderStyleClass) = value
"""

    BitFlags = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BitFlags(self: AcadMLeaderStyleClass) -> int

Set: BitFlags(self: AcadMLeaderStyleClass) = value
"""

    Block = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Block(self: AcadMLeaderStyleClass) -> str

Set: Block(self: AcadMLeaderStyleClass) = value
"""

    BlockColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BlockColor(self: AcadMLeaderStyleClass) -> AcadAcCmColor

Set: BlockColor(self: AcadMLeaderStyleClass) = value
"""

    BlockConnectionType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BlockConnectionType(self: AcadMLeaderStyleClass) -> AcBlockConnectionType

Set: BlockConnectionType(self: AcadMLeaderStyleClass) = value
"""

    BlockRotation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BlockRotation(self: AcadMLeaderStyleClass) -> float

Set: BlockRotation(self: AcadMLeaderStyleClass) = value
"""

    BlockScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BlockScale(self: AcadMLeaderStyleClass) -> float

Set: BlockScale(self: AcadMLeaderStyleClass) = value
"""

    BreakSize = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BreakSize(self: AcadMLeaderStyleClass) -> float

Set: BreakSize(self: AcadMLeaderStyleClass) = value
"""

    ContentType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ContentType(self: AcadMLeaderStyleClass) -> AcMLeaderContentType

Set: ContentType(self: AcadMLeaderStyleClass) = value
"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: AcadMLeaderStyleClass) -> AcadDatabase

"""

    Description = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Description(self: AcadMLeaderStyleClass) -> str

Set: Description(self: AcadMLeaderStyleClass) = value
"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: AcadMLeaderStyleClass) -> object

"""

    DoglegLength = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DoglegLength(self: AcadMLeaderStyleClass) -> float

Set: DoglegLength(self: AcadMLeaderStyleClass) = value
"""

    DrawLeaderOrderType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DrawLeaderOrderType(self: AcadMLeaderStyleClass) -> AcDrawLeaderOrderType

Set: DrawLeaderOrderType(self: AcadMLeaderStyleClass) = value
"""

    DrawMLeaderOrderType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DrawMLeaderOrderType(self: AcadMLeaderStyleClass) -> AcDrawMLeaderOrderType

Set: DrawMLeaderOrderType(self: AcadMLeaderStyleClass) = value
"""

    EnableBlockRotation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EnableBlockRotation(self: AcadMLeaderStyleClass) -> bool

Set: EnableBlockRotation(self: AcadMLeaderStyleClass) = value
"""

    EnableBlockScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EnableBlockScale(self: AcadMLeaderStyleClass) -> bool

Set: EnableBlockScale(self: AcadMLeaderStyleClass) = value
"""

    EnableDogleg = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EnableDogleg(self: AcadMLeaderStyleClass) -> bool

Set: EnableDogleg(self: AcadMLeaderStyleClass) = value
"""

    EnableFrameText = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EnableFrameText(self: AcadMLeaderStyleClass) -> bool

Set: EnableFrameText(self: AcadMLeaderStyleClass) = value
"""

    EnableLanding = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EnableLanding(self: AcadMLeaderStyleClass) -> bool

Set: EnableLanding(self: AcadMLeaderStyleClass) = value
"""

    FirstSegmentAngleConstraint = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FirstSegmentAngleConstraint(self: AcadMLeaderStyleClass) -> AcSegmentAngleType

Set: FirstSegmentAngleConstraint(self: AcadMLeaderStyleClass) = value
"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: AcadMLeaderStyleClass) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: AcadMLeaderStyleClass) -> bool

"""

    LandingGap = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LandingGap(self: AcadMLeaderStyleClass) -> float

Set: LandingGap(self: AcadMLeaderStyleClass) = value
"""

    LeaderLineColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LeaderLineColor(self: AcadMLeaderStyleClass) -> AcadAcCmColor

Set: LeaderLineColor(self: AcadMLeaderStyleClass) = value
"""

    LeaderLinetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LeaderLinetype(self: AcadMLeaderStyleClass) -> AcMLeaderType

Set: LeaderLinetype(self: AcadMLeaderStyleClass) = value
"""

    LeaderLineTypeId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LeaderLineTypeId(self: AcadMLeaderStyleClass) -> str

Set: LeaderLineTypeId(self: AcadMLeaderStyleClass) = value
"""

    LeaderLineWeight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LeaderLineWeight(self: AcadMLeaderStyleClass) -> AcLineWeight

Set: LeaderLineWeight(self: AcadMLeaderStyleClass) = value
"""

    MaxLeaderSegmentsPoints = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MaxLeaderSegmentsPoints(self: AcadMLeaderStyleClass) -> int

Set: MaxLeaderSegmentsPoints(self: AcadMLeaderStyleClass) = value
"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: AcadMLeaderStyleClass) -> str

Set: Name(self: AcadMLeaderStyleClass) = value
"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: AcadMLeaderStyleClass) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: AcadMLeaderStyleClass) -> str

"""

    OverwritePropChanged = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OverwritePropChanged(self: AcadMLeaderStyleClass) -> bool

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: AcadMLeaderStyleClass) -> Int64

"""

    ScaleFactor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ScaleFactor(self: AcadMLeaderStyleClass) -> float

Set: ScaleFactor(self: AcadMLeaderStyleClass) = value
"""

    SecondSegmentAngleConstraint = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SecondSegmentAngleConstraint(self: AcadMLeaderStyleClass) -> AcSegmentAngleType

Set: SecondSegmentAngleConstraint(self: AcadMLeaderStyleClass) = value
"""

    TextAlignmentType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextAlignmentType(self: AcadMLeaderStyleClass) -> AcTextAlignmentType

Set: TextAlignmentType(self: AcadMLeaderStyleClass) = value
"""

    TextAngleType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextAngleType(self: AcadMLeaderStyleClass) -> AcTextAngleType

Set: TextAngleType(self: AcadMLeaderStyleClass) = value
"""

    TextAttachmentDirection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextAttachmentDirection(self: AcadMLeaderStyleClass) -> AcTextAttachmentDirection

Set: TextAttachmentDirection(self: AcadMLeaderStyleClass) = value
"""

    TextBottomAttachmentType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextBottomAttachmentType(self: AcadMLeaderStyleClass) -> AcVerticalTextAttachmentType

Set: TextBottomAttachmentType(self: AcadMLeaderStyleClass) = value
"""

    TextColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextColor(self: AcadMLeaderStyleClass) -> AcadAcCmColor

Set: TextColor(self: AcadMLeaderStyleClass) = value
"""

    TextHeight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextHeight(self: AcadMLeaderStyleClass) -> float

Set: TextHeight(self: AcadMLeaderStyleClass) = value
"""

    TextLeftAttachmentType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextLeftAttachmentType(self: AcadMLeaderStyleClass) -> AcTextAttachmentType

Set: TextLeftAttachmentType(self: AcadMLeaderStyleClass) = value
"""

    TextRightAttachmentType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextRightAttachmentType(self: AcadMLeaderStyleClass) -> AcTextAttachmentType

Set: TextRightAttachmentType(self: AcadMLeaderStyleClass) = value
"""

    TextString = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextString(self: AcadMLeaderStyleClass) -> str

Set: TextString(self: AcadMLeaderStyleClass) = value
"""

    TextStyle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextStyle(self: AcadMLeaderStyleClass) -> str

Set: TextStyle(self: AcadMLeaderStyleClass) = value
"""

    TextTopAttachmentType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextTopAttachmentType(self: AcadMLeaderStyleClass) -> AcVerticalTextAttachmentType

Set: TextTopAttachmentType(self: AcadMLeaderStyleClass) = value
"""


    Modified = None


class IAcadMLine(IAcadEntity, IAcadObject):
    # no doc
    def ArrayPolar(self, NumberOfObjects, AngleToFill, CenterPoint):
        """ ArrayPolar(self: IAcadMLine, NumberOfObjects: int, AngleToFill: float, CenterPoint: object) -> object """
        pass

    def ArrayRectangular(self, NumberOfRows, NumberOfColumns, NumberOfLevels, DistBetweenRows, DistBetweenCols, DistBetweenLevels):
        """ ArrayRectangular(self: IAcadMLine, NumberOfRows: int, NumberOfColumns: int, NumberOfLevels: int, DistBetweenRows: float, DistBetweenCols: float, DistBetweenLevels: float) -> object """
        pass

    def Copy(self):
        """ Copy(self: IAcadMLine) -> object """
        pass

    def Delete(self):
        """ Delete(self: IAcadMLine) """
        pass

    def Erase(self):
        """ Erase(self: IAcadMLine) """
        pass

    def GetBoundingBox(self, MinPoint, MaxPoint):
        """ GetBoundingBox(self: IAcadMLine) -> (object, object) """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: IAcadMLine) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: IAcadMLine, AppName: str) -> (object, object) """
        pass

    def Highlight(self, HighlightFlag):
        """ Highlight(self: IAcadMLine, HighlightFlag: bool) """
        pass

    def IntersectWith(self, IntersectObject, option):
        """ IntersectWith(self: IAcadMLine, IntersectObject: object, option: AcExtendOption) -> object """
        pass

    def Mirror(self, Point1, Point2):
        """ Mirror(self: IAcadMLine, Point1: object, Point2: object) -> object """
        pass

    def Mirror3D(self, Point1, Point2, point3):
        """ Mirror3D(self: IAcadMLine, Point1: object, Point2: object, point3: object) -> object """
        pass

    def Move(self, FromPoint, ToPoint):
        """ Move(self: IAcadMLine, FromPoint: object, ToPoint: object) """
        pass

    def Rotate(self, BasePoint, RotationAngle):
        """ Rotate(self: IAcadMLine, BasePoint: object, RotationAngle: float) """
        pass

    def Rotate3D(self, Point1, Point2, RotationAngle):
        """ Rotate3D(self: IAcadMLine, Point1: object, Point2: object, RotationAngle: float) """
        pass

    def ScaleEntity(self, BasePoint, ScaleFactor):
        """ ScaleEntity(self: IAcadMLine, BasePoint: object, ScaleFactor: float) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: IAcadMLine, XDataType: object, XDataValue: object) """
        pass

    def TransformBy(self, TransformationMatrix):
        """ TransformBy(self: IAcadMLine, TransformationMatrix: object) """
        pass

    def Update(self):
        """ Update(self: IAcadMLine) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IAcadMLine) -> object

"""

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: IAcadMLine) -> ACAD_COLOR

Set: color(self: IAcadMLine) = value
"""

    Coordinates = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Coordinates(self: IAcadMLine) -> object

Set: Coordinates(self: IAcadMLine) = value
"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: IAcadMLine) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: IAcadMLine) -> object

"""

    EntityName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityName(self: IAcadMLine) -> str

"""

    EntityTransparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityTransparency(self: IAcadMLine) -> str

Set: EntityTransparency(self: IAcadMLine) = value
"""

    EntityType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityType(self: IAcadMLine) -> int

"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: IAcadMLine) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: IAcadMLine) -> bool

"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: IAcadMLine) -> AcadHyperlinks

"""

    Justification = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Justification(self: IAcadMLine) -> AcMLineJustification

Set: Justification(self: IAcadMLine) = value
"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layer(self: IAcadMLine) -> str

Set: Layer(self: IAcadMLine) = value
"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: IAcadMLine) -> str

Set: Linetype(self: IAcadMLine) = value
"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeScale(self: IAcadMLine) -> float

Set: LinetypeScale(self: IAcadMLine) = value
"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: IAcadMLine) -> ACAD_LWEIGHT

Set: Lineweight(self: IAcadMLine) = value
"""

    Material = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Material(self: IAcadMLine) -> str

Set: Material(self: IAcadMLine) = value
"""

    MLineScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MLineScale(self: IAcadMLine) -> float

Set: MLineScale(self: IAcadMLine) = value
"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: IAcadMLine) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: IAcadMLine) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: IAcadMLine) -> Int64

"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: IAcadMLine) -> str

Set: PlotStyleName(self: IAcadMLine) = value
"""

    StyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: StyleName(self: IAcadMLine) -> str

"""

    TrueColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TrueColor(self: IAcadMLine) -> AcadAcCmColor

Set: TrueColor(self: IAcadMLine) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: IAcadMLine) -> bool

Set: Visible(self: IAcadMLine) = value
"""



class AcadMLine(IAcadMLine, IAcadEntity, IAcadObject, IAcadObjectEvents_Event):
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class AcadMLineClass(__ComObject):
    # no doc
    def add_Modified(self, A_1):
        """ add_Modified(self: AcadMLineClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def ArrayPolar(self, NumberOfObjects, AngleToFill, CenterPoint):
        """ ArrayPolar(self: AcadMLineClass, NumberOfObjects: int, AngleToFill: float, CenterPoint: object) -> object """
        pass

    def ArrayRectangular(self, NumberOfRows, NumberOfColumns, NumberOfLevels, DistBetweenRows, DistBetweenCols, DistBetweenLevels):
        """ ArrayRectangular(self: AcadMLineClass, NumberOfRows: int, NumberOfColumns: int, NumberOfLevels: int, DistBetweenRows: float, DistBetweenCols: float, DistBetweenLevels: float) -> object """
        pass

    def Copy(self):
        """ Copy(self: AcadMLineClass) -> object """
        pass

    def Delete(self):
        """ Delete(self: AcadMLineClass) """
        pass

    def Erase(self):
        """ Erase(self: AcadMLineClass) """
        pass

    def GetBoundingBox(self, MinPoint, MaxPoint):
        """ GetBoundingBox(self: AcadMLineClass) -> (object, object) """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: AcadMLineClass) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: AcadMLineClass, AppName: str) -> (object, object) """
        pass

    def Highlight(self, HighlightFlag):
        """ Highlight(self: AcadMLineClass, HighlightFlag: bool) """
        pass

    def IntersectWith(self, IntersectObject, option):
        """ IntersectWith(self: AcadMLineClass, IntersectObject: object, option: AcExtendOption) -> object """
        pass

    def Mirror(self, Point1, Point2):
        """ Mirror(self: AcadMLineClass, Point1: object, Point2: object) -> object """
        pass

    def Mirror3D(self, Point1, Point2, point3):
        """ Mirror3D(self: AcadMLineClass, Point1: object, Point2: object, point3: object) -> object """
        pass

    def Move(self, FromPoint, ToPoint):
        """ Move(self: AcadMLineClass, FromPoint: object, ToPoint: object) """
        pass

    def remove_Modified(self, A_1):
        """ remove_Modified(self: AcadMLineClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def Rotate(self, BasePoint, RotationAngle):
        """ Rotate(self: AcadMLineClass, BasePoint: object, RotationAngle: float) """
        pass

    def Rotate3D(self, Point1, Point2, RotationAngle):
        """ Rotate3D(self: AcadMLineClass, Point1: object, Point2: object, RotationAngle: float) """
        pass

    def ScaleEntity(self, BasePoint, ScaleFactor):
        """ ScaleEntity(self: AcadMLineClass, BasePoint: object, ScaleFactor: float) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: AcadMLineClass, XDataType: object, XDataValue: object) """
        pass

    def TransformBy(self, TransformationMatrix):
        """ TransformBy(self: AcadMLineClass, TransformationMatrix: object) """
        pass

    def Update(self):
        """ Update(self: AcadMLineClass) """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: AcadMLineClass) -> object

"""

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: AcadMLineClass) -> ACAD_COLOR

Set: color(self: AcadMLineClass) = value
"""

    Coordinates = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Coordinates(self: AcadMLineClass) -> object

Set: Coordinates(self: AcadMLineClass) = value
"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: AcadMLineClass) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: AcadMLineClass) -> object

"""

    EntityName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityName(self: AcadMLineClass) -> str

"""

    EntityTransparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityTransparency(self: AcadMLineClass) -> str

Set: EntityTransparency(self: AcadMLineClass) = value
"""

    EntityType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityType(self: AcadMLineClass) -> int

"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: AcadMLineClass) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: AcadMLineClass) -> bool

"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: AcadMLineClass) -> AcadHyperlinks

"""

    Justification = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Justification(self: AcadMLineClass) -> AcMLineJustification

Set: Justification(self: AcadMLineClass) = value
"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layer(self: AcadMLineClass) -> str

Set: Layer(self: AcadMLineClass) = value
"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: AcadMLineClass) -> str

Set: Linetype(self: AcadMLineClass) = value
"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeScale(self: AcadMLineClass) -> float

Set: LinetypeScale(self: AcadMLineClass) = value
"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: AcadMLineClass) -> ACAD_LWEIGHT

Set: Lineweight(self: AcadMLineClass) = value
"""

    Material = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Material(self: AcadMLineClass) -> str

Set: Material(self: AcadMLineClass) = value
"""

    MLineScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MLineScale(self: AcadMLineClass) -> float

Set: MLineScale(self: AcadMLineClass) = value
"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: AcadMLineClass) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: AcadMLineClass) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: AcadMLineClass) -> Int64

"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: AcadMLineClass) -> str

Set: PlotStyleName(self: AcadMLineClass) = value
"""

    StyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: StyleName(self: AcadMLineClass) -> str

"""

    TrueColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TrueColor(self: AcadMLineClass) -> AcadAcCmColor

Set: TrueColor(self: AcadMLineClass) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: AcadMLineClass) -> bool

Set: Visible(self: AcadMLineClass) = value
"""


    Modified = None


class IAcadModelSpace(IAcadBlock, IAcadObject, IEnumerable):
    # no doc
    def Add3DFace(self, Point1, Point2, point3, Point4):
        """ Add3DFace(self: IAcadModelSpace, Point1: object, Point2: object, point3: object, Point4: object) -> Acad3DFace """
        pass

    def Add3DMesh(self, M, N, PointsMatrix):
        """ Add3DMesh(self: IAcadModelSpace, M: int, N: int, PointsMatrix: object) -> AcadPolygonMesh """
        pass

    def Add3DPoly(self, PointsArray):
        """ Add3DPoly(self: IAcadModelSpace, PointsArray: object) -> Acad3DPolyline """
        pass

    def AddArc(self, Center, Radius, StartAngle, EndAngle):
        """ AddArc(self: IAcadModelSpace, Center: object, Radius: float, StartAngle: float, EndAngle: float) -> AcadArc """
        pass

    def AddAttribute(self, Height, Mode, Prompt, InsertionPoint, Tag, Value):
        """ AddAttribute(self: IAcadModelSpace, Height: float, Mode: AcAttributeMode, Prompt: str, InsertionPoint: object, Tag: str, Value: str) -> AcadAttribute """
        pass

    def AddBox(self, Origin, Length, Width, Height):
        """ AddBox(self: IAcadModelSpace, Origin: object, Length: float, Width: float, Height: float) -> Acad3DSolid """
        pass

    def AddCircle(self, Center, Radius):
        """ AddCircle(self: IAcadModelSpace, Center: object, Radius: float) -> AcadCircle """
        pass

    def AddCone(self, Center, BaseRadius, Height):
        """ AddCone(self: IAcadModelSpace, Center: object, BaseRadius: float, Height: float) -> Acad3DSolid """
        pass

    def AddCustomObject(self, ClassName):
        """ AddCustomObject(self: IAcadModelSpace, ClassName: str) -> object """
        pass

    def AddCylinder(self, Center, Radius, Height):
        """ AddCylinder(self: IAcadModelSpace, Center: object, Radius: float, Height: float) -> Acad3DSolid """
        pass

    def AddDim3PointAngular(self, AngleVertex, FirstEndPoint, SecondEndPoint, TextPoint):
        """ AddDim3PointAngular(self: IAcadModelSpace, AngleVertex: object, FirstEndPoint: object, SecondEndPoint: object, TextPoint: object) -> AcadDim3PointAngular """
        pass

    def AddDimAligned(self, ExtLine1Point, ExtLine2Point, TextPosition):
        """ AddDimAligned(self: IAcadModelSpace, ExtLine1Point: object, ExtLine2Point: object, TextPosition: object) -> AcadDimAligned """
        pass

    def AddDimAngular(self, AngleVertex, FirstEndPoint, SecondEndPoint, TextPoint):
        """ AddDimAngular(self: IAcadModelSpace, AngleVertex: object, FirstEndPoint: object, SecondEndPoint: object, TextPoint: object) -> AcadDimAngular """
        pass

    def AddDimArc(self, ArcCenter, FirstEndPoint, SecondEndPoint, ArcPoint):
        """ AddDimArc(self: IAcadModelSpace, ArcCenter: object, FirstEndPoint: object, SecondEndPoint: object, ArcPoint: object) -> AcadDimArcLength """
        pass

    def AddDimDiametric(self, ChordPoint, FarChordPoint, LeaderLength):
        """ AddDimDiametric(self: IAcadModelSpace, ChordPoint: object, FarChordPoint: object, LeaderLength: float) -> AcadDimDiametric """
        pass

    def AddDimOrdinate(self, DefinitionPoint, LeaderEndPoint, UseXAxis):
        """ AddDimOrdinate(self: IAcadModelSpace, DefinitionPoint: object, LeaderEndPoint: object, UseXAxis: int) -> AcadDimOrdinate """
        pass

    def AddDimRadial(self, Center, ChordPoint, LeaderLength):
        """ AddDimRadial(self: IAcadModelSpace, Center: object, ChordPoint: object, LeaderLength: float) -> AcadDimRadial """
        pass

    def AddDimRadialLarge(self, Center, ChordPoint, OverrideCenter, JogPoint, JogAngle):
        """ AddDimRadialLarge(self: IAcadModelSpace, Center: object, ChordPoint: object, OverrideCenter: object, JogPoint: object, JogAngle: float) -> AcadDimRadialLarge """
        pass

    def AddDimRotated(self, ExtLine1Point, ExtLine2Point, DimLineLocation, RotationAngle):
        """ AddDimRotated(self: IAcadModelSpace, ExtLine1Point: object, ExtLine2Point: object, DimLineLocation: object, RotationAngle: float) -> AcadDimRotated """
        pass

    def AddEllipse(self, Center, MajorAxis, RadiusRatio):
        """ AddEllipse(self: IAcadModelSpace, Center: object, MajorAxis: object, RadiusRatio: float) -> AcadEllipse """
        pass

    def AddEllipticalCone(self, Center, MajorRadius, MinorRadius, Height):
        """ AddEllipticalCone(self: IAcadModelSpace, Center: object, MajorRadius: float, MinorRadius: float, Height: float) -> Acad3DSolid """
        pass

    def AddEllipticalCylinder(self, Center, MajorRadius, MinorRadius, Height):
        """ AddEllipticalCylinder(self: IAcadModelSpace, Center: object, MajorRadius: float, MinorRadius: float, Height: float) -> Acad3DSolid """
        pass

    def AddExtrudedSolid(self, Profile, Height, TaperAngle):
        """ AddExtrudedSolid(self: IAcadModelSpace, Profile: AcadRegion, Height: float, TaperAngle: float) -> Acad3DSolid """
        pass

    def AddExtrudedSolidAlongPath(self, Profile, Path):
        """ AddExtrudedSolidAlongPath(self: IAcadModelSpace, Profile: AcadRegion, Path: object) -> Acad3DSolid """
        pass

    def AddHatch(self, PatternType, PatternName, Associativity, HatchObjectType):
        """ AddHatch(self: IAcadModelSpace, PatternType: int, PatternName: str, Associativity: bool, HatchObjectType: object) -> AcadHatch """
        pass

    def AddLeader(self, PointsArray, Annotation, Type):
        """ AddLeader(self: IAcadModelSpace, PointsArray: object, Annotation: AcadEntity, Type: AcLeaderType) -> AcadLeader """
        pass

    def AddLightWeightPolyline(self, VerticesList):
        """ AddLightWeightPolyline(self: IAcadModelSpace, VerticesList: object) -> AcadLWPolyline """
        pass

    def AddLine(self, StartPoint, EndPoint):
        """ AddLine(self: IAcadModelSpace, StartPoint: object, EndPoint: object) -> AcadLine """
        pass

    def AddMInsertBlock(self, InsertionPoint, Name, Xscale, Yscale, Zscale, Rotation, NumRows, NumColumns, RowSpacing, ColumnSpacing, Password):
        """ AddMInsertBlock(self: IAcadModelSpace, InsertionPoint: object, Name: str, Xscale: float, Yscale: float, Zscale: float, Rotation: float, NumRows: int, NumColumns: int, RowSpacing: int, ColumnSpacing: int, Password: object) -> AcadMInsertBlock """
        pass

    def AddMLeader(self, PointsArray, leaderLineIndex):
        """ AddMLeader(self: IAcadModelSpace, PointsArray: object) -> (AcadMLeader, int) """
        pass

    def AddMLine(self, VertexList):
        """ AddMLine(self: IAcadModelSpace, VertexList: object) -> AcadMLine """
        pass

    def AddMText(self, InsertionPoint, Width, Text):
        """ AddMText(self: IAcadModelSpace, InsertionPoint: object, Width: float, Text: str) -> AcadMText """
        pass

    def AddPoint(self, Point):
        """ AddPoint(self: IAcadModelSpace, Point: object) -> AcadPoint """
        pass

    def AddPolyfaceMesh(self, VertexList, FaceList):
        """ AddPolyfaceMesh(self: IAcadModelSpace, VertexList: object, FaceList: object) -> AcadPolyfaceMesh """
        pass

    def AddPolyline(self, VerticesList):
        """ AddPolyline(self: IAcadModelSpace, VerticesList: object) -> AcadPolyline """
        pass

    def AddRaster(self, imageFileName, InsertionPoint, ScaleFactor, RotationAngle):
        """ AddRaster(self: IAcadModelSpace, imageFileName: str, InsertionPoint: object, ScaleFactor: float, RotationAngle: float) -> AcadRasterImage """
        pass

    def AddRay(self, Point1, Point2):
        """ AddRay(self: IAcadModelSpace, Point1: object, Point2: object) -> AcadRay """
        pass

    def AddRegion(self, ObjectList):
        """ AddRegion(self: IAcadModelSpace, ObjectList: object) -> object """
        pass

    def AddRevolvedSolid(self, Profile, AxisPoint, AxisDir, Angle):
        """ AddRevolvedSolid(self: IAcadModelSpace, Profile: AcadRegion, AxisPoint: object, AxisDir: object, Angle: float) -> Acad3DSolid """
        pass

    def AddSection(self, FromPoint, ToPoint, planeVector):
        """ AddSection(self: IAcadModelSpace, FromPoint: object, ToPoint: object, planeVector: object) -> IAcadSection """
        pass

    def AddShape(self, Name, InsertionPoint, ScaleFactor, RotationAngle):
        """ AddShape(self: IAcadModelSpace, Name: str, InsertionPoint: object, ScaleFactor: float, RotationAngle: float) -> AcadShape """
        pass

    def AddSolid(self, Point1, Point2, point3, Point4):
        """ AddSolid(self: IAcadModelSpace, Point1: object, Point2: object, point3: object, Point4: object) -> AcadSolid """
        pass

    def AddSphere(self, Center, Radius):
        """ AddSphere(self: IAcadModelSpace, Center: object, Radius: float) -> Acad3DSolid """
        pass

    def AddSpline(self, PointsArray, StartTangent, EndTangent):
        """ AddSpline(self: IAcadModelSpace, PointsArray: object, StartTangent: object, EndTangent: object) -> AcadSpline """
        pass

    def AddTable(self, InsertionPoint, NumRows, NumColumns, RowHeight, ColWidth):
        """ AddTable(self: IAcadModelSpace, InsertionPoint: object, NumRows: int, NumColumns: int, RowHeight: float, ColWidth: float) -> AcadTable """
        pass

    def AddText(self, TextString, InsertionPoint, Height):
        """ AddText(self: IAcadModelSpace, TextString: str, InsertionPoint: object, Height: float) -> AcadText """
        pass

    def AddTolerance(self, Text, InsertionPoint, Direction):
        """ AddTolerance(self: IAcadModelSpace, Text: str, InsertionPoint: object, Direction: object) -> AcadTolerance """
        pass

    def AddTorus(self, Center, TorusRadius, TubeRadius):
        """ AddTorus(self: IAcadModelSpace, Center: object, TorusRadius: float, TubeRadius: float) -> Acad3DSolid """
        pass

    def AddTrace(self, PointsArray):
        """ AddTrace(self: IAcadModelSpace, PointsArray: object) -> AcadTrace """
        pass

    def AddWedge(self, Center, Length, Width, Height):
        """ AddWedge(self: IAcadModelSpace, Center: object, Length: float, Width: float, Height: float) -> Acad3DSolid """
        pass

    def AddXline(self, Point1, Point2):
        """ AddXline(self: IAcadModelSpace, Point1: object, Point2: object) -> AcadXline """
        pass

    def AttachExternalReference(self, PathName, Name, InsertionPoint, Xscale, Yscale, Zscale, Rotation, bOverlay, Password):
        """ AttachExternalReference(self: IAcadModelSpace, PathName: str, Name: str, InsertionPoint: object, Xscale: float, Yscale: float, Zscale: float, Rotation: float, bOverlay: bool, Password: object) -> AcadExternalReference """
        pass

    def Bind(self, bPrefixName):
        """ Bind(self: IAcadModelSpace, bPrefixName: bool) """
        pass

    def Delete(self):
        """ Delete(self: IAcadModelSpace) """
        pass

    def Detach(self):
        """ Detach(self: IAcadModelSpace) """
        pass

    def Erase(self):
        """ Erase(self: IAcadModelSpace) """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: IAcadModelSpace) -> IEnumerator """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: IAcadModelSpace) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: IAcadModelSpace, AppName: str) -> (object, object) """
        pass

    def InsertBlock(self, InsertionPoint, Name, Xscale, Yscale, Zscale, Rotation, Password):
        """ InsertBlock(self: IAcadModelSpace, InsertionPoint: object, Name: str, Xscale: float, Yscale: float, Zscale: float, Rotation: float, Password: object) -> AcadBlockReference """
        pass

    def Item(self, Index):
        """ Item(self: IAcadModelSpace, Index: object) -> AcadEntity """
        pass

    def Reload(self):
        """ Reload(self: IAcadModelSpace) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: IAcadModelSpace, XDataType: object, XDataValue: object) """
        pass

    def Unload(self):
        """ Unload(self: IAcadModelSpace) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerable) -> object """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IAcadModelSpace) -> object

"""

    BlockScaling = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BlockScaling(self: IAcadModelSpace) -> AcBlockScaling

Set: BlockScaling(self: IAcadModelSpace) = value
"""

    Comments = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Comments(self: IAcadModelSpace) -> str

Set: Comments(self: IAcadModelSpace) = value
"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: IAcadModelSpace) -> int

"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: IAcadModelSpace) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: IAcadModelSpace) -> object

"""

    Explodable = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Explodable(self: IAcadModelSpace) -> bool

Set: Explodable(self: IAcadModelSpace) = value
"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: IAcadModelSpace) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: IAcadModelSpace) -> bool

"""

    IsDynamicBlock = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IsDynamicBlock(self: IAcadModelSpace) -> bool

"""

    IsLayout = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IsLayout(self: IAcadModelSpace) -> bool

"""

    IsXRef = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IsXRef(self: IAcadModelSpace) -> bool

"""

    Layout = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layout(self: IAcadModelSpace) -> AcadLayout

"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: IAcadModelSpace) -> str

Set: Name(self: IAcadModelSpace) = value
"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: IAcadModelSpace) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: IAcadModelSpace) -> str

"""

    Origin = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Origin(self: IAcadModelSpace) -> object

Set: Origin(self: IAcadModelSpace) = value
"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: IAcadModelSpace) -> Int64

"""

    Path = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Path(self: IAcadModelSpace) -> str

Set: Path(self: IAcadModelSpace) = value
"""

    Units = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Units(self: IAcadModelSpace) -> AcInsertUnits

Set: Units(self: IAcadModelSpace) = value
"""

    XRefDatabase = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: XRefDatabase(self: IAcadModelSpace) -> AcadDatabase

"""



class AcadModelSpace(IAcadModelSpace, IAcadBlock, IAcadObject, IEnumerable, IAcadObjectEvents_Event):
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerable) -> object """
        pass


class AcadModelSpaceClass(__ComObject):
    # no doc
    def Add3DFace(self, Point1, Point2, point3, Point4):
        """ Add3DFace(self: AcadModelSpaceClass, Point1: object, Point2: object, point3: object, Point4: object) -> Acad3DFace """
        pass

    def Add3DMesh(self, M, N, PointsMatrix):
        """ Add3DMesh(self: AcadModelSpaceClass, M: int, N: int, PointsMatrix: object) -> AcadPolygonMesh """
        pass

    def Add3DPoly(self, PointsArray):
        """ Add3DPoly(self: AcadModelSpaceClass, PointsArray: object) -> Acad3DPolyline """
        pass

    def AddArc(self, Center, Radius, StartAngle, EndAngle):
        """ AddArc(self: AcadModelSpaceClass, Center: object, Radius: float, StartAngle: float, EndAngle: float) -> AcadArc """
        pass

    def AddAttribute(self, Height, Mode, Prompt, InsertionPoint, Tag, Value):
        """ AddAttribute(self: AcadModelSpaceClass, Height: float, Mode: AcAttributeMode, Prompt: str, InsertionPoint: object, Tag: str, Value: str) -> AcadAttribute """
        pass

    def AddBox(self, Origin, Length, Width, Height):
        """ AddBox(self: AcadModelSpaceClass, Origin: object, Length: float, Width: float, Height: float) -> Acad3DSolid """
        pass

    def AddCircle(self, Center, Radius):
        """ AddCircle(self: AcadModelSpaceClass, Center: object, Radius: float) -> AcadCircle """
        pass

    def AddCone(self, Center, BaseRadius, Height):
        """ AddCone(self: AcadModelSpaceClass, Center: object, BaseRadius: float, Height: float) -> Acad3DSolid """
        pass

    def AddCustomObject(self, ClassName):
        """ AddCustomObject(self: AcadModelSpaceClass, ClassName: str) -> object """
        pass

    def AddCylinder(self, Center, Radius, Height):
        """ AddCylinder(self: AcadModelSpaceClass, Center: object, Radius: float, Height: float) -> Acad3DSolid """
        pass

    def AddDim3PointAngular(self, AngleVertex, FirstEndPoint, SecondEndPoint, TextPoint):
        """ AddDim3PointAngular(self: AcadModelSpaceClass, AngleVertex: object, FirstEndPoint: object, SecondEndPoint: object, TextPoint: object) -> AcadDim3PointAngular """
        pass

    def AddDimAligned(self, ExtLine1Point, ExtLine2Point, TextPosition):
        """ AddDimAligned(self: AcadModelSpaceClass, ExtLine1Point: object, ExtLine2Point: object, TextPosition: object) -> AcadDimAligned """
        pass

    def AddDimAngular(self, AngleVertex, FirstEndPoint, SecondEndPoint, TextPoint):
        """ AddDimAngular(self: AcadModelSpaceClass, AngleVertex: object, FirstEndPoint: object, SecondEndPoint: object, TextPoint: object) -> AcadDimAngular """
        pass

    def AddDimArc(self, ArcCenter, FirstEndPoint, SecondEndPoint, ArcPoint):
        """ AddDimArc(self: AcadModelSpaceClass, ArcCenter: object, FirstEndPoint: object, SecondEndPoint: object, ArcPoint: object) -> AcadDimArcLength """
        pass

    def AddDimDiametric(self, ChordPoint, FarChordPoint, LeaderLength):
        """ AddDimDiametric(self: AcadModelSpaceClass, ChordPoint: object, FarChordPoint: object, LeaderLength: float) -> AcadDimDiametric """
        pass

    def AddDimOrdinate(self, DefinitionPoint, LeaderEndPoint, UseXAxis):
        """ AddDimOrdinate(self: AcadModelSpaceClass, DefinitionPoint: object, LeaderEndPoint: object, UseXAxis: int) -> AcadDimOrdinate """
        pass

    def AddDimRadial(self, Center, ChordPoint, LeaderLength):
        """ AddDimRadial(self: AcadModelSpaceClass, Center: object, ChordPoint: object, LeaderLength: float) -> AcadDimRadial """
        pass

    def AddDimRadialLarge(self, Center, ChordPoint, OverrideCenter, JogPoint, JogAngle):
        """ AddDimRadialLarge(self: AcadModelSpaceClass, Center: object, ChordPoint: object, OverrideCenter: object, JogPoint: object, JogAngle: float) -> AcadDimRadialLarge """
        pass

    def AddDimRotated(self, ExtLine1Point, ExtLine2Point, DimLineLocation, RotationAngle):
        """ AddDimRotated(self: AcadModelSpaceClass, ExtLine1Point: object, ExtLine2Point: object, DimLineLocation: object, RotationAngle: float) -> AcadDimRotated """
        pass

    def AddEllipse(self, Center, MajorAxis, RadiusRatio):
        """ AddEllipse(self: AcadModelSpaceClass, Center: object, MajorAxis: object, RadiusRatio: float) -> AcadEllipse """
        pass

    def AddEllipticalCone(self, Center, MajorRadius, MinorRadius, Height):
        """ AddEllipticalCone(self: AcadModelSpaceClass, Center: object, MajorRadius: float, MinorRadius: float, Height: float) -> Acad3DSolid """
        pass

    def AddEllipticalCylinder(self, Center, MajorRadius, MinorRadius, Height):
        """ AddEllipticalCylinder(self: AcadModelSpaceClass, Center: object, MajorRadius: float, MinorRadius: float, Height: float) -> Acad3DSolid """
        pass

    def AddExtrudedSolid(self, Profile, Height, TaperAngle):
        """ AddExtrudedSolid(self: AcadModelSpaceClass, Profile: AcadRegion, Height: float, TaperAngle: float) -> Acad3DSolid """
        pass

    def AddExtrudedSolidAlongPath(self, Profile, Path):
        """ AddExtrudedSolidAlongPath(self: AcadModelSpaceClass, Profile: AcadRegion, Path: object) -> Acad3DSolid """
        pass

    def AddHatch(self, PatternType, PatternName, Associativity, HatchObjectType):
        """ AddHatch(self: AcadModelSpaceClass, PatternType: int, PatternName: str, Associativity: bool, HatchObjectType: object) -> AcadHatch """
        pass

    def AddLeader(self, PointsArray, Annotation, Type):
        """ AddLeader(self: AcadModelSpaceClass, PointsArray: object, Annotation: AcadEntity, Type: AcLeaderType) -> AcadLeader """
        pass

    def AddLightWeightPolyline(self, VerticesList):
        """ AddLightWeightPolyline(self: AcadModelSpaceClass, VerticesList: object) -> AcadLWPolyline """
        pass

    def AddLine(self, StartPoint, EndPoint):
        """ AddLine(self: AcadModelSpaceClass, StartPoint: object, EndPoint: object) -> AcadLine """
        pass

    def AddMInsertBlock(self, InsertionPoint, Name, Xscale, Yscale, Zscale, Rotation, NumRows, NumColumns, RowSpacing, ColumnSpacing, Password):
        """ AddMInsertBlock(self: AcadModelSpaceClass, InsertionPoint: object, Name: str, Xscale: float, Yscale: float, Zscale: float, Rotation: float, NumRows: int, NumColumns: int, RowSpacing: int, ColumnSpacing: int, Password: object) -> AcadMInsertBlock """
        pass

    def AddMLeader(self, PointsArray, leaderLineIndex):
        """ AddMLeader(self: AcadModelSpaceClass, PointsArray: object) -> (AcadMLeader, int) """
        pass

    def AddMLine(self, VertexList):
        """ AddMLine(self: AcadModelSpaceClass, VertexList: object) -> AcadMLine """
        pass

    def AddMText(self, InsertionPoint, Width, Text):
        """ AddMText(self: AcadModelSpaceClass, InsertionPoint: object, Width: float, Text: str) -> AcadMText """
        pass

    def AddPoint(self, Point):
        """ AddPoint(self: AcadModelSpaceClass, Point: object) -> AcadPoint """
        pass

    def AddPolyfaceMesh(self, VertexList, FaceList):
        """ AddPolyfaceMesh(self: AcadModelSpaceClass, VertexList: object, FaceList: object) -> AcadPolyfaceMesh """
        pass

    def AddPolyline(self, VerticesList):
        """ AddPolyline(self: AcadModelSpaceClass, VerticesList: object) -> AcadPolyline """
        pass

    def AddRaster(self, imageFileName, InsertionPoint, ScaleFactor, RotationAngle):
        """ AddRaster(self: AcadModelSpaceClass, imageFileName: str, InsertionPoint: object, ScaleFactor: float, RotationAngle: float) -> AcadRasterImage """
        pass

    def AddRay(self, Point1, Point2):
        """ AddRay(self: AcadModelSpaceClass, Point1: object, Point2: object) -> AcadRay """
        pass

    def AddRegion(self, ObjectList):
        """ AddRegion(self: AcadModelSpaceClass, ObjectList: object) -> object """
        pass

    def AddRevolvedSolid(self, Profile, AxisPoint, AxisDir, Angle):
        """ AddRevolvedSolid(self: AcadModelSpaceClass, Profile: AcadRegion, AxisPoint: object, AxisDir: object, Angle: float) -> Acad3DSolid """
        pass

    def AddSection(self, FromPoint, ToPoint, planeVector):
        """ AddSection(self: AcadModelSpaceClass, FromPoint: object, ToPoint: object, planeVector: object) -> IAcadSection """
        pass

    def AddShape(self, Name, InsertionPoint, ScaleFactor, RotationAngle):
        """ AddShape(self: AcadModelSpaceClass, Name: str, InsertionPoint: object, ScaleFactor: float, RotationAngle: float) -> AcadShape """
        pass

    def AddSolid(self, Point1, Point2, point3, Point4):
        """ AddSolid(self: AcadModelSpaceClass, Point1: object, Point2: object, point3: object, Point4: object) -> AcadSolid """
        pass

    def AddSphere(self, Center, Radius):
        """ AddSphere(self: AcadModelSpaceClass, Center: object, Radius: float) -> Acad3DSolid """
        pass

    def AddSpline(self, PointsArray, StartTangent, EndTangent):
        """ AddSpline(self: AcadModelSpaceClass, PointsArray: object, StartTangent: object, EndTangent: object) -> AcadSpline """
        pass

    def AddTable(self, InsertionPoint, NumRows, NumColumns, RowHeight, ColWidth):
        """ AddTable(self: AcadModelSpaceClass, InsertionPoint: object, NumRows: int, NumColumns: int, RowHeight: float, ColWidth: float) -> AcadTable """
        pass

    def AddText(self, TextString, InsertionPoint, Height):
        """ AddText(self: AcadModelSpaceClass, TextString: str, InsertionPoint: object, Height: float) -> AcadText """
        pass

    def AddTolerance(self, Text, InsertionPoint, Direction):
        """ AddTolerance(self: AcadModelSpaceClass, Text: str, InsertionPoint: object, Direction: object) -> AcadTolerance """
        pass

    def AddTorus(self, Center, TorusRadius, TubeRadius):
        """ AddTorus(self: AcadModelSpaceClass, Center: object, TorusRadius: float, TubeRadius: float) -> Acad3DSolid """
        pass

    def AddTrace(self, PointsArray):
        """ AddTrace(self: AcadModelSpaceClass, PointsArray: object) -> AcadTrace """
        pass

    def AddWedge(self, Center, Length, Width, Height):
        """ AddWedge(self: AcadModelSpaceClass, Center: object, Length: float, Width: float, Height: float) -> Acad3DSolid """
        pass

    def AddXline(self, Point1, Point2):
        """ AddXline(self: AcadModelSpaceClass, Point1: object, Point2: object) -> AcadXline """
        pass

    def add_Modified(self, A_1):
        """ add_Modified(self: AcadModelSpaceClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def AttachExternalReference(self, PathName, Name, InsertionPoint, Xscale, Yscale, Zscale, Rotation, bOverlay, Password):
        """ AttachExternalReference(self: AcadModelSpaceClass, PathName: str, Name: str, InsertionPoint: object, Xscale: float, Yscale: float, Zscale: float, Rotation: float, bOverlay: bool, Password: object) -> AcadExternalReference """
        pass

    def Bind(self, bPrefixName):
        """ Bind(self: AcadModelSpaceClass, bPrefixName: bool) """
        pass

    def Delete(self):
        """ Delete(self: AcadModelSpaceClass) """
        pass

    def Detach(self):
        """ Detach(self: AcadModelSpaceClass) """
        pass

    def Erase(self):
        """ Erase(self: AcadModelSpaceClass) """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: AcadModelSpaceClass) -> IEnumerator """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: AcadModelSpaceClass) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: AcadModelSpaceClass, AppName: str) -> (object, object) """
        pass

    def InsertBlock(self, InsertionPoint, Name, Xscale, Yscale, Zscale, Rotation, Password):
        """ InsertBlock(self: AcadModelSpaceClass, InsertionPoint: object, Name: str, Xscale: float, Yscale: float, Zscale: float, Rotation: float, Password: object) -> AcadBlockReference """
        pass

    def Item(self, Index):
        """ Item(self: AcadModelSpaceClass, Index: object) -> AcadEntity """
        pass

    def Reload(self):
        """ Reload(self: AcadModelSpaceClass) """
        pass

    def remove_Modified(self, A_1):
        """ remove_Modified(self: AcadModelSpaceClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: AcadModelSpaceClass, XDataType: object, XDataValue: object) """
        pass

    def Unload(self):
        """ Unload(self: AcadModelSpaceClass) """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerable) -> object """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: AcadModelSpaceClass) -> object

"""

    BlockScaling = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BlockScaling(self: AcadModelSpaceClass) -> AcBlockScaling

Set: BlockScaling(self: AcadModelSpaceClass) = value
"""

    Comments = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Comments(self: AcadModelSpaceClass) -> str

Set: Comments(self: AcadModelSpaceClass) = value
"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: AcadModelSpaceClass) -> int

"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: AcadModelSpaceClass) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: AcadModelSpaceClass) -> object

"""

    Explodable = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Explodable(self: AcadModelSpaceClass) -> bool

Set: Explodable(self: AcadModelSpaceClass) = value
"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: AcadModelSpaceClass) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: AcadModelSpaceClass) -> bool

"""

    IsDynamicBlock = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IsDynamicBlock(self: AcadModelSpaceClass) -> bool

"""

    IsLayout = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IsLayout(self: AcadModelSpaceClass) -> bool

"""

    IsXRef = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IsXRef(self: AcadModelSpaceClass) -> bool

"""

    Layout = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layout(self: AcadModelSpaceClass) -> AcadLayout

"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: AcadModelSpaceClass) -> str

Set: Name(self: AcadModelSpaceClass) = value
"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: AcadModelSpaceClass) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: AcadModelSpaceClass) -> str

"""

    Origin = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Origin(self: AcadModelSpaceClass) -> object

Set: Origin(self: AcadModelSpaceClass) = value
"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: AcadModelSpaceClass) -> Int64

"""

    Path = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Path(self: AcadModelSpaceClass) -> str

Set: Path(self: AcadModelSpaceClass) = value
"""

    Units = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Units(self: AcadModelSpaceClass) -> AcInsertUnits

Set: Units(self: AcadModelSpaceClass) = value
"""

    XRefDatabase = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: XRefDatabase(self: AcadModelSpaceClass) -> AcadDatabase

"""


    Modified = None


class IAcadMText(IAcadEntity, IAcadObject):
    # no doc
    def ArrayPolar(self, NumberOfObjects, AngleToFill, CenterPoint):
        """ ArrayPolar(self: IAcadMText, NumberOfObjects: int, AngleToFill: float, CenterPoint: object) -> object """
        pass

    def ArrayRectangular(self, NumberOfRows, NumberOfColumns, NumberOfLevels, DistBetweenRows, DistBetweenCols, DistBetweenLevels):
        """ ArrayRectangular(self: IAcadMText, NumberOfRows: int, NumberOfColumns: int, NumberOfLevels: int, DistBetweenRows: float, DistBetweenCols: float, DistBetweenLevels: float) -> object """
        pass

    def Copy(self):
        """ Copy(self: IAcadMText) -> object """
        pass

    def Delete(self):
        """ Delete(self: IAcadMText) """
        pass

    def Erase(self):
        """ Erase(self: IAcadMText) """
        pass

    def FieldCode(self):
        """ FieldCode(self: IAcadMText) -> str """
        pass

    def GetBoundingBox(self, MinPoint, MaxPoint):
        """ GetBoundingBox(self: IAcadMText) -> (object, object) """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: IAcadMText) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: IAcadMText, AppName: str) -> (object, object) """
        pass

    def Highlight(self, HighlightFlag):
        """ Highlight(self: IAcadMText, HighlightFlag: bool) """
        pass

    def IntersectWith(self, IntersectObject, option):
        """ IntersectWith(self: IAcadMText, IntersectObject: object, option: AcExtendOption) -> object """
        pass

    def Mirror(self, Point1, Point2):
        """ Mirror(self: IAcadMText, Point1: object, Point2: object) -> object """
        pass

    def Mirror3D(self, Point1, Point2, point3):
        """ Mirror3D(self: IAcadMText, Point1: object, Point2: object, point3: object) -> object """
        pass

    def Move(self, FromPoint, ToPoint):
        """ Move(self: IAcadMText, FromPoint: object, ToPoint: object) """
        pass

    def Rotate(self, BasePoint, RotationAngle):
        """ Rotate(self: IAcadMText, BasePoint: object, RotationAngle: float) """
        pass

    def Rotate3D(self, Point1, Point2, RotationAngle):
        """ Rotate3D(self: IAcadMText, Point1: object, Point2: object, RotationAngle: float) """
        pass

    def ScaleEntity(self, BasePoint, ScaleFactor):
        """ ScaleEntity(self: IAcadMText, BasePoint: object, ScaleFactor: float) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: IAcadMText, XDataType: object, XDataValue: object) """
        pass

    def TransformBy(self, TransformationMatrix):
        """ TransformBy(self: IAcadMText, TransformationMatrix: object) """
        pass

    def Update(self):
        """ Update(self: IAcadMText) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IAcadMText) -> object

"""

    AttachmentPoint = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AttachmentPoint(self: IAcadMText) -> AcAttachmentPoint

Set: AttachmentPoint(self: IAcadMText) = value
"""

    BackgroundFill = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BackgroundFill(self: IAcadMText) -> bool

Set: BackgroundFill(self: IAcadMText) = value
"""

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: IAcadMText) -> ACAD_COLOR

Set: color(self: IAcadMText) = value
"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: IAcadMText) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: IAcadMText) -> object

"""

    DrawingDirection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DrawingDirection(self: IAcadMText) -> AcDrawingDirection

Set: DrawingDirection(self: IAcadMText) = value
"""

    EntityName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityName(self: IAcadMText) -> str

"""

    EntityTransparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityTransparency(self: IAcadMText) -> str

Set: EntityTransparency(self: IAcadMText) = value
"""

    EntityType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityType(self: IAcadMText) -> int

"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: IAcadMText) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: IAcadMText) -> bool

"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: IAcadMText) -> float

Set: Height(self: IAcadMText) = value
"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: IAcadMText) -> AcadHyperlinks

"""

    InsertionPoint = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: InsertionPoint(self: IAcadMText) -> object

Set: InsertionPoint(self: IAcadMText) = value
"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layer(self: IAcadMText) -> str

Set: Layer(self: IAcadMText) = value
"""

    LineSpacingDistance = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LineSpacingDistance(self: IAcadMText) -> float

Set: LineSpacingDistance(self: IAcadMText) = value
"""

    LineSpacingFactor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LineSpacingFactor(self: IAcadMText) -> float

Set: LineSpacingFactor(self: IAcadMText) = value
"""

    LineSpacingStyle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LineSpacingStyle(self: IAcadMText) -> AcLineSpacingStyle

Set: LineSpacingStyle(self: IAcadMText) = value
"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: IAcadMText) -> str

Set: Linetype(self: IAcadMText) = value
"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeScale(self: IAcadMText) -> float

Set: LinetypeScale(self: IAcadMText) = value
"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: IAcadMText) -> ACAD_LWEIGHT

Set: Lineweight(self: IAcadMText) = value
"""

    Material = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Material(self: IAcadMText) -> str

Set: Material(self: IAcadMText) = value
"""

    Normal = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Normal(self: IAcadMText) -> object

Set: Normal(self: IAcadMText) = value
"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: IAcadMText) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: IAcadMText) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: IAcadMText) -> Int64

"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: IAcadMText) -> str

Set: PlotStyleName(self: IAcadMText) = value
"""

    Rotation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Rotation(self: IAcadMText) -> float

Set: Rotation(self: IAcadMText) = value
"""

    StyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: StyleName(self: IAcadMText) -> str

Set: StyleName(self: IAcadMText) = value
"""

    TextString = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextString(self: IAcadMText) -> str

Set: TextString(self: IAcadMText) = value
"""

    TrueColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TrueColor(self: IAcadMText) -> AcadAcCmColor

Set: TrueColor(self: IAcadMText) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: IAcadMText) -> bool

Set: Visible(self: IAcadMText) = value
"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: IAcadMText) -> float

Set: Width(self: IAcadMText) = value
"""



class AcadMText(IAcadMText, IAcadEntity, IAcadObject, IAcadObjectEvents_Event):
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class AcadMTextClass(__ComObject):
    # no doc
    def add_Modified(self, A_1):
        """ add_Modified(self: AcadMTextClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def ArrayPolar(self, NumberOfObjects, AngleToFill, CenterPoint):
        """ ArrayPolar(self: AcadMTextClass, NumberOfObjects: int, AngleToFill: float, CenterPoint: object) -> object """
        pass

    def ArrayRectangular(self, NumberOfRows, NumberOfColumns, NumberOfLevels, DistBetweenRows, DistBetweenCols, DistBetweenLevels):
        """ ArrayRectangular(self: AcadMTextClass, NumberOfRows: int, NumberOfColumns: int, NumberOfLevels: int, DistBetweenRows: float, DistBetweenCols: float, DistBetweenLevels: float) -> object """
        pass

    def Copy(self):
        """ Copy(self: AcadMTextClass) -> object """
        pass

    def Delete(self):
        """ Delete(self: AcadMTextClass) """
        pass

    def Erase(self):
        """ Erase(self: AcadMTextClass) """
        pass

    def FieldCode(self):
        """ FieldCode(self: AcadMTextClass) -> str """
        pass

    def GetBoundingBox(self, MinPoint, MaxPoint):
        """ GetBoundingBox(self: AcadMTextClass) -> (object, object) """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: AcadMTextClass) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: AcadMTextClass, AppName: str) -> (object, object) """
        pass

    def Highlight(self, HighlightFlag):
        """ Highlight(self: AcadMTextClass, HighlightFlag: bool) """
        pass

    def IntersectWith(self, IntersectObject, option):
        """ IntersectWith(self: AcadMTextClass, IntersectObject: object, option: AcExtendOption) -> object """
        pass

    def Mirror(self, Point1, Point2):
        """ Mirror(self: AcadMTextClass, Point1: object, Point2: object) -> object """
        pass

    def Mirror3D(self, Point1, Point2, point3):
        """ Mirror3D(self: AcadMTextClass, Point1: object, Point2: object, point3: object) -> object """
        pass

    def Move(self, FromPoint, ToPoint):
        """ Move(self: AcadMTextClass, FromPoint: object, ToPoint: object) """
        pass

    def remove_Modified(self, A_1):
        """ remove_Modified(self: AcadMTextClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def Rotate(self, BasePoint, RotationAngle):
        """ Rotate(self: AcadMTextClass, BasePoint: object, RotationAngle: float) """
        pass

    def Rotate3D(self, Point1, Point2, RotationAngle):
        """ Rotate3D(self: AcadMTextClass, Point1: object, Point2: object, RotationAngle: float) """
        pass

    def ScaleEntity(self, BasePoint, ScaleFactor):
        """ ScaleEntity(self: AcadMTextClass, BasePoint: object, ScaleFactor: float) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: AcadMTextClass, XDataType: object, XDataValue: object) """
        pass

    def TransformBy(self, TransformationMatrix):
        """ TransformBy(self: AcadMTextClass, TransformationMatrix: object) """
        pass

    def Update(self):
        """ Update(self: AcadMTextClass) """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: AcadMTextClass) -> object

"""

    AttachmentPoint = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AttachmentPoint(self: AcadMTextClass) -> AcAttachmentPoint

Set: AttachmentPoint(self: AcadMTextClass) = value
"""

    BackgroundFill = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BackgroundFill(self: AcadMTextClass) -> bool

Set: BackgroundFill(self: AcadMTextClass) = value
"""

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: AcadMTextClass) -> ACAD_COLOR

Set: color(self: AcadMTextClass) = value
"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: AcadMTextClass) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: AcadMTextClass) -> object

"""

    DrawingDirection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DrawingDirection(self: AcadMTextClass) -> AcDrawingDirection

Set: DrawingDirection(self: AcadMTextClass) = value
"""

    EntityName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityName(self: AcadMTextClass) -> str

"""

    EntityTransparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityTransparency(self: AcadMTextClass) -> str

Set: EntityTransparency(self: AcadMTextClass) = value
"""

    EntityType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityType(self: AcadMTextClass) -> int

"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: AcadMTextClass) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: AcadMTextClass) -> bool

"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: AcadMTextClass) -> float

Set: Height(self: AcadMTextClass) = value
"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: AcadMTextClass) -> AcadHyperlinks

"""

    InsertionPoint = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: InsertionPoint(self: AcadMTextClass) -> object

Set: InsertionPoint(self: AcadMTextClass) = value
"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layer(self: AcadMTextClass) -> str

Set: Layer(self: AcadMTextClass) = value
"""

    LineSpacingDistance = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LineSpacingDistance(self: AcadMTextClass) -> float

Set: LineSpacingDistance(self: AcadMTextClass) = value
"""

    LineSpacingFactor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LineSpacingFactor(self: AcadMTextClass) -> float

Set: LineSpacingFactor(self: AcadMTextClass) = value
"""

    LineSpacingStyle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LineSpacingStyle(self: AcadMTextClass) -> AcLineSpacingStyle

Set: LineSpacingStyle(self: AcadMTextClass) = value
"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: AcadMTextClass) -> str

Set: Linetype(self: AcadMTextClass) = value
"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeScale(self: AcadMTextClass) -> float

Set: LinetypeScale(self: AcadMTextClass) = value
"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: AcadMTextClass) -> ACAD_LWEIGHT

Set: Lineweight(self: AcadMTextClass) = value
"""

    Material = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Material(self: AcadMTextClass) -> str

Set: Material(self: AcadMTextClass) = value
"""

    Normal = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Normal(self: AcadMTextClass) -> object

Set: Normal(self: AcadMTextClass) = value
"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: AcadMTextClass) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: AcadMTextClass) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: AcadMTextClass) -> Int64

"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: AcadMTextClass) -> str

Set: PlotStyleName(self: AcadMTextClass) = value
"""

    Rotation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Rotation(self: AcadMTextClass) -> float

Set: Rotation(self: AcadMTextClass) = value
"""

    StyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: StyleName(self: AcadMTextClass) -> str

Set: StyleName(self: AcadMTextClass) = value
"""

    TextString = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextString(self: AcadMTextClass) -> str

Set: TextString(self: AcadMTextClass) = value
"""

    TrueColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TrueColor(self: AcadMTextClass) -> AcadAcCmColor

Set: TrueColor(self: AcadMTextClass) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: AcadMTextClass) -> bool

Set: Visible(self: AcadMTextClass) = value
"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: AcadMTextClass) -> float

Set: Width(self: AcadMTextClass) = value
"""


    Modified = None


class IAcadNurbSurface(IAcadSurface, IAcadEntity, IAcadObject):
    # no doc
    def ArrayPolar(self, NumberOfObjects, AngleToFill, CenterPoint):
        """ ArrayPolar(self: IAcadNurbSurface, NumberOfObjects: int, AngleToFill: float, CenterPoint: object) -> object """
        pass

    def ArrayRectangular(self, NumberOfRows, NumberOfColumns, NumberOfLevels, DistBetweenRows, DistBetweenCols, DistBetweenLevels):
        """ ArrayRectangular(self: IAcadNurbSurface, NumberOfRows: int, NumberOfColumns: int, NumberOfLevels: int, DistBetweenRows: float, DistBetweenCols: float, DistBetweenLevels: float) -> object """
        pass

    def Copy(self):
        """ Copy(self: IAcadNurbSurface) -> object """
        pass

    def Delete(self):
        """ Delete(self: IAcadNurbSurface) """
        pass

    def Erase(self):
        """ Erase(self: IAcadNurbSurface) """
        pass

    def GetBoundingBox(self, MinPoint, MaxPoint):
        """ GetBoundingBox(self: IAcadNurbSurface) -> (object, object) """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: IAcadNurbSurface) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: IAcadNurbSurface, AppName: str) -> (object, object) """
        pass

    def Highlight(self, HighlightFlag):
        """ Highlight(self: IAcadNurbSurface, HighlightFlag: bool) """
        pass

    def IntersectWith(self, IntersectObject, option):
        """ IntersectWith(self: IAcadNurbSurface, IntersectObject: object, option: AcExtendOption) -> object """
        pass

    def Mirror(self, Point1, Point2):
        """ Mirror(self: IAcadNurbSurface, Point1: object, Point2: object) -> object """
        pass

    def Mirror3D(self, Point1, Point2, point3):
        """ Mirror3D(self: IAcadNurbSurface, Point1: object, Point2: object, point3: object) -> object """
        pass

    def Move(self, FromPoint, ToPoint):
        """ Move(self: IAcadNurbSurface, FromPoint: object, ToPoint: object) """
        pass

    def Rotate(self, BasePoint, RotationAngle):
        """ Rotate(self: IAcadNurbSurface, BasePoint: object, RotationAngle: float) """
        pass

    def Rotate3D(self, Point1, Point2, RotationAngle):
        """ Rotate3D(self: IAcadNurbSurface, Point1: object, Point2: object, RotationAngle: float) """
        pass

    def ScaleEntity(self, BasePoint, ScaleFactor):
        """ ScaleEntity(self: IAcadNurbSurface, BasePoint: object, ScaleFactor: float) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: IAcadNurbSurface, XDataType: object, XDataValue: object) """
        pass

    def TransformBy(self, TransformationMatrix):
        """ TransformBy(self: IAcadNurbSurface, TransformationMatrix: object) """
        pass

    def Update(self):
        """ Update(self: IAcadNurbSurface) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IAcadNurbSurface) -> object

"""

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: IAcadNurbSurface) -> ACAD_COLOR

Set: color(self: IAcadNurbSurface) = value
"""

    CvHullDisplay = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CvHullDisplay(self: IAcadNurbSurface) -> bool

Set: CvHullDisplay(self: IAcadNurbSurface) = value
"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: IAcadNurbSurface) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: IAcadNurbSurface) -> object

"""

    EdgeExtensionDistances = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EdgeExtensionDistances(self: IAcadNurbSurface) -> object

Set: EdgeExtensionDistances(self: IAcadNurbSurface) = value
"""

    EntityName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityName(self: IAcadNurbSurface) -> str

"""

    EntityTransparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityTransparency(self: IAcadNurbSurface) -> str

Set: EntityTransparency(self: IAcadNurbSurface) = value
"""

    EntityType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityType(self: IAcadNurbSurface) -> int

"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: IAcadNurbSurface) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: IAcadNurbSurface) -> bool

"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: IAcadNurbSurface) -> AcadHyperlinks

"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layer(self: IAcadNurbSurface) -> str

Set: Layer(self: IAcadNurbSurface) = value
"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: IAcadNurbSurface) -> str

Set: Linetype(self: IAcadNurbSurface) = value
"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeScale(self: IAcadNurbSurface) -> float

Set: LinetypeScale(self: IAcadNurbSurface) = value
"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: IAcadNurbSurface) -> ACAD_LWEIGHT

Set: Lineweight(self: IAcadNurbSurface) = value
"""

    MaintainAssociativity = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MaintainAssociativity(self: IAcadNurbSurface) -> int

Set: MaintainAssociativity(self: IAcadNurbSurface) = value
"""

    Material = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Material(self: IAcadNurbSurface) -> str

Set: Material(self: IAcadNurbSurface) = value
"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: IAcadNurbSurface) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: IAcadNurbSurface) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: IAcadNurbSurface) -> Int64

"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: IAcadNurbSurface) -> str

Set: PlotStyleName(self: IAcadNurbSurface) = value
"""

    ShowAssociativity = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowAssociativity(self: IAcadNurbSurface) -> bool

Set: ShowAssociativity(self: IAcadNurbSurface) = value
"""

    SurfaceType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SurfaceType(self: IAcadNurbSurface) -> str

"""

    SurfTrimAssociativity = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SurfTrimAssociativity(self: IAcadNurbSurface) -> object

Set: SurfTrimAssociativity(self: IAcadNurbSurface) = value
"""

    TrueColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TrueColor(self: IAcadNurbSurface) -> AcadAcCmColor

Set: TrueColor(self: IAcadNurbSurface) = value
"""

    UIsolineDensity = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: UIsolineDensity(self: IAcadNurbSurface) -> int

Set: UIsolineDensity(self: IAcadNurbSurface) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: IAcadNurbSurface) -> bool

Set: Visible(self: IAcadNurbSurface) = value
"""

    VIsolineDensity = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VIsolineDensity(self: IAcadNurbSurface) -> int

Set: VIsolineDensity(self: IAcadNurbSurface) = value
"""

    WireframeType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: WireframeType(self: IAcadNurbSurface) -> AcWireframeType

Set: WireframeType(self: IAcadNurbSurface) = value
"""



class AcadNurbSurface(IAcadNurbSurface, IAcadSurface, IAcadEntity, IAcadObject, IAcadObjectEvents_Event):
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class AcadNurbSurfaceClass(__ComObject):
    # no doc
    def add_Modified(self, A_1):
        """ add_Modified(self: AcadNurbSurfaceClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def ArrayPolar(self, NumberOfObjects, AngleToFill, CenterPoint):
        """ ArrayPolar(self: AcadNurbSurfaceClass, NumberOfObjects: int, AngleToFill: float, CenterPoint: object) -> object """
        pass

    def ArrayRectangular(self, NumberOfRows, NumberOfColumns, NumberOfLevels, DistBetweenRows, DistBetweenCols, DistBetweenLevels):
        """ ArrayRectangular(self: AcadNurbSurfaceClass, NumberOfRows: int, NumberOfColumns: int, NumberOfLevels: int, DistBetweenRows: float, DistBetweenCols: float, DistBetweenLevels: float) -> object """
        pass

    def Copy(self):
        """ Copy(self: AcadNurbSurfaceClass) -> object """
        pass

    def Delete(self):
        """ Delete(self: AcadNurbSurfaceClass) """
        pass

    def Erase(self):
        """ Erase(self: AcadNurbSurfaceClass) """
        pass

    def GetBoundingBox(self, MinPoint, MaxPoint):
        """ GetBoundingBox(self: AcadNurbSurfaceClass) -> (object, object) """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: AcadNurbSurfaceClass) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: AcadNurbSurfaceClass, AppName: str) -> (object, object) """
        pass

    def Highlight(self, HighlightFlag):
        """ Highlight(self: AcadNurbSurfaceClass, HighlightFlag: bool) """
        pass

    def IntersectWith(self, IntersectObject, option):
        """ IntersectWith(self: AcadNurbSurfaceClass, IntersectObject: object, option: AcExtendOption) -> object """
        pass

    def Mirror(self, Point1, Point2):
        """ Mirror(self: AcadNurbSurfaceClass, Point1: object, Point2: object) -> object """
        pass

    def Mirror3D(self, Point1, Point2, point3):
        """ Mirror3D(self: AcadNurbSurfaceClass, Point1: object, Point2: object, point3: object) -> object """
        pass

    def Move(self, FromPoint, ToPoint):
        """ Move(self: AcadNurbSurfaceClass, FromPoint: object, ToPoint: object) """
        pass

    def remove_Modified(self, A_1):
        """ remove_Modified(self: AcadNurbSurfaceClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def Rotate(self, BasePoint, RotationAngle):
        """ Rotate(self: AcadNurbSurfaceClass, BasePoint: object, RotationAngle: float) """
        pass

    def Rotate3D(self, Point1, Point2, RotationAngle):
        """ Rotate3D(self: AcadNurbSurfaceClass, Point1: object, Point2: object, RotationAngle: float) """
        pass

    def ScaleEntity(self, BasePoint, ScaleFactor):
        """ ScaleEntity(self: AcadNurbSurfaceClass, BasePoint: object, ScaleFactor: float) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: AcadNurbSurfaceClass, XDataType: object, XDataValue: object) """
        pass

    def TransformBy(self, TransformationMatrix):
        """ TransformBy(self: AcadNurbSurfaceClass, TransformationMatrix: object) """
        pass

    def Update(self):
        """ Update(self: AcadNurbSurfaceClass) """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: AcadNurbSurfaceClass) -> object

"""

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: AcadNurbSurfaceClass) -> ACAD_COLOR

Set: color(self: AcadNurbSurfaceClass) = value
"""

    CvHullDisplay = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CvHullDisplay(self: AcadNurbSurfaceClass) -> bool

Set: CvHullDisplay(self: AcadNurbSurfaceClass) = value
"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: AcadNurbSurfaceClass) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: AcadNurbSurfaceClass) -> object

"""

    EdgeExtensionDistances = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EdgeExtensionDistances(self: AcadNurbSurfaceClass) -> object

Set: EdgeExtensionDistances(self: AcadNurbSurfaceClass) = value
"""

    EntityName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityName(self: AcadNurbSurfaceClass) -> str

"""

    EntityTransparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityTransparency(self: AcadNurbSurfaceClass) -> str

Set: EntityTransparency(self: AcadNurbSurfaceClass) = value
"""

    EntityType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityType(self: AcadNurbSurfaceClass) -> int

"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: AcadNurbSurfaceClass) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: AcadNurbSurfaceClass) -> bool

"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: AcadNurbSurfaceClass) -> AcadHyperlinks

"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layer(self: AcadNurbSurfaceClass) -> str

Set: Layer(self: AcadNurbSurfaceClass) = value
"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: AcadNurbSurfaceClass) -> str

Set: Linetype(self: AcadNurbSurfaceClass) = value
"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeScale(self: AcadNurbSurfaceClass) -> float

Set: LinetypeScale(self: AcadNurbSurfaceClass) = value
"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: AcadNurbSurfaceClass) -> ACAD_LWEIGHT

Set: Lineweight(self: AcadNurbSurfaceClass) = value
"""

    MaintainAssociativity = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MaintainAssociativity(self: AcadNurbSurfaceClass) -> int

Set: MaintainAssociativity(self: AcadNurbSurfaceClass) = value
"""

    Material = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Material(self: AcadNurbSurfaceClass) -> str

Set: Material(self: AcadNurbSurfaceClass) = value
"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: AcadNurbSurfaceClass) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: AcadNurbSurfaceClass) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: AcadNurbSurfaceClass) -> Int64

"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: AcadNurbSurfaceClass) -> str

Set: PlotStyleName(self: AcadNurbSurfaceClass) = value
"""

    ShowAssociativity = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowAssociativity(self: AcadNurbSurfaceClass) -> bool

Set: ShowAssociativity(self: AcadNurbSurfaceClass) = value
"""

    SurfaceType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SurfaceType(self: AcadNurbSurfaceClass) -> str

"""

    SurfTrimAssociativity = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SurfTrimAssociativity(self: AcadNurbSurfaceClass) -> object

Set: SurfTrimAssociativity(self: AcadNurbSurfaceClass) = value
"""

    TrueColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TrueColor(self: AcadNurbSurfaceClass) -> AcadAcCmColor

Set: TrueColor(self: AcadNurbSurfaceClass) = value
"""

    UIsolineDensity = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: UIsolineDensity(self: AcadNurbSurfaceClass) -> int

Set: UIsolineDensity(self: AcadNurbSurfaceClass) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: AcadNurbSurfaceClass) -> bool

Set: Visible(self: AcadNurbSurfaceClass) = value
"""

    VIsolineDensity = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VIsolineDensity(self: AcadNurbSurfaceClass) -> int

Set: VIsolineDensity(self: AcadNurbSurfaceClass) = value
"""

    WireframeType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: WireframeType(self: AcadNurbSurfaceClass) -> AcWireframeType

Set: WireframeType(self: AcadNurbSurfaceClass) = value
"""


    Modified = None


class AcadObject(IAcadObject, IAcadObjectEvents_Event):
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class AcadObjectClass(__ComObject):
    # no doc
    def add_Modified(self, A_1):
        """ add_Modified(self: AcadObjectClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def Delete(self):
        """ Delete(self: AcadObjectClass) """
        pass

    def Erase(self):
        """ Erase(self: AcadObjectClass) """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: AcadObjectClass) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: AcadObjectClass, AppName: str) -> (object, object) """
        pass

    def remove_Modified(self, A_1):
        """ remove_Modified(self: AcadObjectClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: AcadObjectClass, XDataType: object, XDataValue: object) """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: AcadObjectClass) -> object

"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: AcadObjectClass) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: AcadObjectClass) -> object

"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: AcadObjectClass) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: AcadObjectClass) -> bool

"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: AcadObjectClass) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: AcadObjectClass) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: AcadObjectClass) -> Int64

"""


    Modified = None


class IAcadOle(IAcadEntity, IAcadObject):
    # no doc
    def ArrayPolar(self, NumberOfObjects, AngleToFill, CenterPoint):
        """ ArrayPolar(self: IAcadOle, NumberOfObjects: int, AngleToFill: float, CenterPoint: object) -> object """
        pass

    def ArrayRectangular(self, NumberOfRows, NumberOfColumns, NumberOfLevels, DistBetweenRows, DistBetweenCols, DistBetweenLevels):
        """ ArrayRectangular(self: IAcadOle, NumberOfRows: int, NumberOfColumns: int, NumberOfLevels: int, DistBetweenRows: float, DistBetweenCols: float, DistBetweenLevels: float) -> object """
        pass

    def Copy(self):
        """ Copy(self: IAcadOle) -> object """
        pass

    def Delete(self):
        """ Delete(self: IAcadOle) """
        pass

    def Erase(self):
        """ Erase(self: IAcadOle) """
        pass

    def GetBoundingBox(self, MinPoint, MaxPoint):
        """ GetBoundingBox(self: IAcadOle) -> (object, object) """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: IAcadOle) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: IAcadOle, AppName: str) -> (object, object) """
        pass

    def Highlight(self, HighlightFlag):
        """ Highlight(self: IAcadOle, HighlightFlag: bool) """
        pass

    def IntersectWith(self, IntersectObject, option):
        """ IntersectWith(self: IAcadOle, IntersectObject: object, option: AcExtendOption) -> object """
        pass

    def Mirror(self, Point1, Point2):
        """ Mirror(self: IAcadOle, Point1: object, Point2: object) -> object """
        pass

    def Mirror3D(self, Point1, Point2, point3):
        """ Mirror3D(self: IAcadOle, Point1: object, Point2: object, point3: object) -> object """
        pass

    def Move(self, FromPoint, ToPoint):
        """ Move(self: IAcadOle, FromPoint: object, ToPoint: object) """
        pass

    def Rotate(self, BasePoint, RotationAngle):
        """ Rotate(self: IAcadOle, BasePoint: object, RotationAngle: float) """
        pass

    def Rotate3D(self, Point1, Point2, RotationAngle):
        """ Rotate3D(self: IAcadOle, Point1: object, Point2: object, RotationAngle: float) """
        pass

    def ScaleEntity(self, BasePoint, ScaleFactor):
        """ ScaleEntity(self: IAcadOle, BasePoint: object, ScaleFactor: float) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: IAcadOle, XDataType: object, XDataValue: object) """
        pass

    def TransformBy(self, TransformationMatrix):
        """ TransformBy(self: IAcadOle, TransformationMatrix: object) """
        pass

    def Update(self):
        """ Update(self: IAcadOle) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IAcadOle) -> object

"""

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: IAcadOle) -> ACAD_COLOR

Set: color(self: IAcadOle) = value
"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: IAcadOle) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: IAcadOle) -> object

"""

    EntityName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityName(self: IAcadOle) -> str

"""

    EntityTransparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityTransparency(self: IAcadOle) -> str

Set: EntityTransparency(self: IAcadOle) = value
"""

    EntityType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityType(self: IAcadOle) -> int

"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: IAcadOle) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: IAcadOle) -> bool

"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: IAcadOle) -> float

Set: Height(self: IAcadOle) = value
"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: IAcadOle) -> AcadHyperlinks

"""

    InsertionPoint = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: InsertionPoint(self: IAcadOle) -> object

Set: InsertionPoint(self: IAcadOle) = value
"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layer(self: IAcadOle) -> str

Set: Layer(self: IAcadOle) = value
"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: IAcadOle) -> str

Set: Linetype(self: IAcadOle) = value
"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeScale(self: IAcadOle) -> float

Set: LinetypeScale(self: IAcadOle) = value
"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: IAcadOle) -> ACAD_LWEIGHT

Set: Lineweight(self: IAcadOle) = value
"""

    LockAspectRatio = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LockAspectRatio(self: IAcadOle) -> bool

Set: LockAspectRatio(self: IAcadOle) = value
"""

    Material = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Material(self: IAcadOle) -> str

Set: Material(self: IAcadOle) = value
"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: IAcadOle) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: IAcadOle) -> str

"""

    OleItemType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OleItemType(self: IAcadOle) -> AcOleType

Set: OleItemType(self: IAcadOle) = value
"""

    OlePlotQuality = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OlePlotQuality(self: IAcadOle) -> AcOlePlotQuality

Set: OlePlotQuality(self: IAcadOle) = value
"""

    OleSourceApp = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OleSourceApp(self: IAcadOle) -> str

Set: OleSourceApp(self: IAcadOle) = value
"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: IAcadOle) -> Int64

"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: IAcadOle) -> str

Set: PlotStyleName(self: IAcadOle) = value
"""

    Rotation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Rotation(self: IAcadOle) -> float

Set: Rotation(self: IAcadOle) = value
"""

    ScaleHeight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ScaleHeight(self: IAcadOle) -> float

Set: ScaleHeight(self: IAcadOle) = value
"""

    ScaleWidth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ScaleWidth(self: IAcadOle) -> float

Set: ScaleWidth(self: IAcadOle) = value
"""

    TrueColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TrueColor(self: IAcadOle) -> AcadAcCmColor

Set: TrueColor(self: IAcadOle) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: IAcadOle) -> bool

Set: Visible(self: IAcadOle) = value
"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: IAcadOle) -> float

Set: Width(self: IAcadOle) = value
"""



class AcadOle(IAcadOle, IAcadEntity, IAcadObject, IAcadObjectEvents_Event):
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class AcadOleClass(__ComObject):
    # no doc
    def add_Modified(self, A_1):
        """ add_Modified(self: AcadOleClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def ArrayPolar(self, NumberOfObjects, AngleToFill, CenterPoint):
        """ ArrayPolar(self: AcadOleClass, NumberOfObjects: int, AngleToFill: float, CenterPoint: object) -> object """
        pass

    def ArrayRectangular(self, NumberOfRows, NumberOfColumns, NumberOfLevels, DistBetweenRows, DistBetweenCols, DistBetweenLevels):
        """ ArrayRectangular(self: AcadOleClass, NumberOfRows: int, NumberOfColumns: int, NumberOfLevels: int, DistBetweenRows: float, DistBetweenCols: float, DistBetweenLevels: float) -> object """
        pass

    def Copy(self):
        """ Copy(self: AcadOleClass) -> object """
        pass

    def Delete(self):
        """ Delete(self: AcadOleClass) """
        pass

    def Erase(self):
        """ Erase(self: AcadOleClass) """
        pass

    def GetBoundingBox(self, MinPoint, MaxPoint):
        """ GetBoundingBox(self: AcadOleClass) -> (object, object) """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: AcadOleClass) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: AcadOleClass, AppName: str) -> (object, object) """
        pass

    def Highlight(self, HighlightFlag):
        """ Highlight(self: AcadOleClass, HighlightFlag: bool) """
        pass

    def IntersectWith(self, IntersectObject, option):
        """ IntersectWith(self: AcadOleClass, IntersectObject: object, option: AcExtendOption) -> object """
        pass

    def Mirror(self, Point1, Point2):
        """ Mirror(self: AcadOleClass, Point1: object, Point2: object) -> object """
        pass

    def Mirror3D(self, Point1, Point2, point3):
        """ Mirror3D(self: AcadOleClass, Point1: object, Point2: object, point3: object) -> object """
        pass

    def Move(self, FromPoint, ToPoint):
        """ Move(self: AcadOleClass, FromPoint: object, ToPoint: object) """
        pass

    def remove_Modified(self, A_1):
        """ remove_Modified(self: AcadOleClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def Rotate(self, BasePoint, RotationAngle):
        """ Rotate(self: AcadOleClass, BasePoint: object, RotationAngle: float) """
        pass

    def Rotate3D(self, Point1, Point2, RotationAngle):
        """ Rotate3D(self: AcadOleClass, Point1: object, Point2: object, RotationAngle: float) """
        pass

    def ScaleEntity(self, BasePoint, ScaleFactor):
        """ ScaleEntity(self: AcadOleClass, BasePoint: object, ScaleFactor: float) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: AcadOleClass, XDataType: object, XDataValue: object) """
        pass

    def TransformBy(self, TransformationMatrix):
        """ TransformBy(self: AcadOleClass, TransformationMatrix: object) """
        pass

    def Update(self):
        """ Update(self: AcadOleClass) """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: AcadOleClass) -> object

"""

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: AcadOleClass) -> ACAD_COLOR

Set: color(self: AcadOleClass) = value
"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: AcadOleClass) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: AcadOleClass) -> object

"""

    EntityName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityName(self: AcadOleClass) -> str

"""

    EntityTransparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityTransparency(self: AcadOleClass) -> str

Set: EntityTransparency(self: AcadOleClass) = value
"""

    EntityType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityType(self: AcadOleClass) -> int

"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: AcadOleClass) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: AcadOleClass) -> bool

"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: AcadOleClass) -> float

Set: Height(self: AcadOleClass) = value
"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: AcadOleClass) -> AcadHyperlinks

"""

    InsertionPoint = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: InsertionPoint(self: AcadOleClass) -> object

Set: InsertionPoint(self: AcadOleClass) = value
"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layer(self: AcadOleClass) -> str

Set: Layer(self: AcadOleClass) = value
"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: AcadOleClass) -> str

Set: Linetype(self: AcadOleClass) = value
"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeScale(self: AcadOleClass) -> float

Set: LinetypeScale(self: AcadOleClass) = value
"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: AcadOleClass) -> ACAD_LWEIGHT

Set: Lineweight(self: AcadOleClass) = value
"""

    LockAspectRatio = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LockAspectRatio(self: AcadOleClass) -> bool

Set: LockAspectRatio(self: AcadOleClass) = value
"""

    Material = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Material(self: AcadOleClass) -> str

Set: Material(self: AcadOleClass) = value
"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: AcadOleClass) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: AcadOleClass) -> str

"""

    OleItemType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OleItemType(self: AcadOleClass) -> AcOleType

Set: OleItemType(self: AcadOleClass) = value
"""

    OlePlotQuality = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OlePlotQuality(self: AcadOleClass) -> AcOlePlotQuality

Set: OlePlotQuality(self: AcadOleClass) = value
"""

    OleSourceApp = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OleSourceApp(self: AcadOleClass) -> str

Set: OleSourceApp(self: AcadOleClass) = value
"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: AcadOleClass) -> Int64

"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: AcadOleClass) -> str

Set: PlotStyleName(self: AcadOleClass) = value
"""

    Rotation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Rotation(self: AcadOleClass) -> float

Set: Rotation(self: AcadOleClass) = value
"""

    ScaleHeight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ScaleHeight(self: AcadOleClass) -> float

Set: ScaleHeight(self: AcadOleClass) = value
"""

    ScaleWidth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ScaleWidth(self: AcadOleClass) -> float

Set: ScaleWidth(self: AcadOleClass) = value
"""

    TrueColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TrueColor(self: AcadOleClass) -> AcadAcCmColor

Set: TrueColor(self: AcadOleClass) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: AcadOleClass) -> bool

Set: Visible(self: AcadOleClass) = value
"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: AcadOleClass) -> float

Set: Width(self: AcadOleClass) = value
"""


    Modified = None


class IAcadPaperSpace(IAcadBlock, IAcadObject, IEnumerable):
    # no doc
    def Add3DFace(self, Point1, Point2, point3, Point4):
        """ Add3DFace(self: IAcadPaperSpace, Point1: object, Point2: object, point3: object, Point4: object) -> Acad3DFace """
        pass

    def Add3DMesh(self, M, N, PointsMatrix):
        """ Add3DMesh(self: IAcadPaperSpace, M: int, N: int, PointsMatrix: object) -> AcadPolygonMesh """
        pass

    def Add3DPoly(self, PointsArray):
        """ Add3DPoly(self: IAcadPaperSpace, PointsArray: object) -> Acad3DPolyline """
        pass

    def AddArc(self, Center, Radius, StartAngle, EndAngle):
        """ AddArc(self: IAcadPaperSpace, Center: object, Radius: float, StartAngle: float, EndAngle: float) -> AcadArc """
        pass

    def AddAttribute(self, Height, Mode, Prompt, InsertionPoint, Tag, Value):
        """ AddAttribute(self: IAcadPaperSpace, Height: float, Mode: AcAttributeMode, Prompt: str, InsertionPoint: object, Tag: str, Value: str) -> AcadAttribute """
        pass

    def AddBox(self, Origin, Length, Width, Height):
        """ AddBox(self: IAcadPaperSpace, Origin: object, Length: float, Width: float, Height: float) -> Acad3DSolid """
        pass

    def AddCircle(self, Center, Radius):
        """ AddCircle(self: IAcadPaperSpace, Center: object, Radius: float) -> AcadCircle """
        pass

    def AddCone(self, Center, BaseRadius, Height):
        """ AddCone(self: IAcadPaperSpace, Center: object, BaseRadius: float, Height: float) -> Acad3DSolid """
        pass

    def AddCustomObject(self, ClassName):
        """ AddCustomObject(self: IAcadPaperSpace, ClassName: str) -> object """
        pass

    def AddCylinder(self, Center, Radius, Height):
        """ AddCylinder(self: IAcadPaperSpace, Center: object, Radius: float, Height: float) -> Acad3DSolid """
        pass

    def AddDim3PointAngular(self, AngleVertex, FirstEndPoint, SecondEndPoint, TextPoint):
        """ AddDim3PointAngular(self: IAcadPaperSpace, AngleVertex: object, FirstEndPoint: object, SecondEndPoint: object, TextPoint: object) -> AcadDim3PointAngular """
        pass

    def AddDimAligned(self, ExtLine1Point, ExtLine2Point, TextPosition):
        """ AddDimAligned(self: IAcadPaperSpace, ExtLine1Point: object, ExtLine2Point: object, TextPosition: object) -> AcadDimAligned """
        pass

    def AddDimAngular(self, AngleVertex, FirstEndPoint, SecondEndPoint, TextPoint):
        """ AddDimAngular(self: IAcadPaperSpace, AngleVertex: object, FirstEndPoint: object, SecondEndPoint: object, TextPoint: object) -> AcadDimAngular """
        pass

    def AddDimArc(self, ArcCenter, FirstEndPoint, SecondEndPoint, ArcPoint):
        """ AddDimArc(self: IAcadPaperSpace, ArcCenter: object, FirstEndPoint: object, SecondEndPoint: object, ArcPoint: object) -> AcadDimArcLength """
        pass

    def AddDimDiametric(self, ChordPoint, FarChordPoint, LeaderLength):
        """ AddDimDiametric(self: IAcadPaperSpace, ChordPoint: object, FarChordPoint: object, LeaderLength: float) -> AcadDimDiametric """
        pass

    def AddDimOrdinate(self, DefinitionPoint, LeaderEndPoint, UseXAxis):
        """ AddDimOrdinate(self: IAcadPaperSpace, DefinitionPoint: object, LeaderEndPoint: object, UseXAxis: int) -> AcadDimOrdinate """
        pass

    def AddDimRadial(self, Center, ChordPoint, LeaderLength):
        """ AddDimRadial(self: IAcadPaperSpace, Center: object, ChordPoint: object, LeaderLength: float) -> AcadDimRadial """
        pass

    def AddDimRadialLarge(self, Center, ChordPoint, OverrideCenter, JogPoint, JogAngle):
        """ AddDimRadialLarge(self: IAcadPaperSpace, Center: object, ChordPoint: object, OverrideCenter: object, JogPoint: object, JogAngle: float) -> AcadDimRadialLarge """
        pass

    def AddDimRotated(self, ExtLine1Point, ExtLine2Point, DimLineLocation, RotationAngle):
        """ AddDimRotated(self: IAcadPaperSpace, ExtLine1Point: object, ExtLine2Point: object, DimLineLocation: object, RotationAngle: float) -> AcadDimRotated """
        pass

    def AddEllipse(self, Center, MajorAxis, RadiusRatio):
        """ AddEllipse(self: IAcadPaperSpace, Center: object, MajorAxis: object, RadiusRatio: float) -> AcadEllipse """
        pass

    def AddEllipticalCone(self, Center, MajorRadius, MinorRadius, Height):
        """ AddEllipticalCone(self: IAcadPaperSpace, Center: object, MajorRadius: float, MinorRadius: float, Height: float) -> Acad3DSolid """
        pass

    def AddEllipticalCylinder(self, Center, MajorRadius, MinorRadius, Height):
        """ AddEllipticalCylinder(self: IAcadPaperSpace, Center: object, MajorRadius: float, MinorRadius: float, Height: float) -> Acad3DSolid """
        pass

    def AddExtrudedSolid(self, Profile, Height, TaperAngle):
        """ AddExtrudedSolid(self: IAcadPaperSpace, Profile: AcadRegion, Height: float, TaperAngle: float) -> Acad3DSolid """
        pass

    def AddExtrudedSolidAlongPath(self, Profile, Path):
        """ AddExtrudedSolidAlongPath(self: IAcadPaperSpace, Profile: AcadRegion, Path: object) -> Acad3DSolid """
        pass

    def AddHatch(self, PatternType, PatternName, Associativity, HatchObjectType):
        """ AddHatch(self: IAcadPaperSpace, PatternType: int, PatternName: str, Associativity: bool, HatchObjectType: object) -> AcadHatch """
        pass

    def AddLeader(self, PointsArray, Annotation, Type):
        """ AddLeader(self: IAcadPaperSpace, PointsArray: object, Annotation: AcadEntity, Type: AcLeaderType) -> AcadLeader """
        pass

    def AddLightWeightPolyline(self, VerticesList):
        """ AddLightWeightPolyline(self: IAcadPaperSpace, VerticesList: object) -> AcadLWPolyline """
        pass

    def AddLine(self, StartPoint, EndPoint):
        """ AddLine(self: IAcadPaperSpace, StartPoint: object, EndPoint: object) -> AcadLine """
        pass

    def AddMInsertBlock(self, InsertionPoint, Name, Xscale, Yscale, Zscale, Rotation, NumRows, NumColumns, RowSpacing, ColumnSpacing, Password):
        """ AddMInsertBlock(self: IAcadPaperSpace, InsertionPoint: object, Name: str, Xscale: float, Yscale: float, Zscale: float, Rotation: float, NumRows: int, NumColumns: int, RowSpacing: int, ColumnSpacing: int, Password: object) -> AcadMInsertBlock """
        pass

    def AddMLeader(self, PointsArray, leaderLineIndex):
        """ AddMLeader(self: IAcadPaperSpace, PointsArray: object) -> (AcadMLeader, int) """
        pass

    def AddMLine(self, VertexList):
        """ AddMLine(self: IAcadPaperSpace, VertexList: object) -> AcadMLine """
        pass

    def AddMText(self, InsertionPoint, Width, Text):
        """ AddMText(self: IAcadPaperSpace, InsertionPoint: object, Width: float, Text: str) -> AcadMText """
        pass

    def AddPoint(self, Point):
        """ AddPoint(self: IAcadPaperSpace, Point: object) -> AcadPoint """
        pass

    def AddPolyfaceMesh(self, VertexList, FaceList):
        """ AddPolyfaceMesh(self: IAcadPaperSpace, VertexList: object, FaceList: object) -> AcadPolyfaceMesh """
        pass

    def AddPolyline(self, VerticesList):
        """ AddPolyline(self: IAcadPaperSpace, VerticesList: object) -> AcadPolyline """
        pass

    def AddPViewport(self, Center, Width, Height):
        """ AddPViewport(self: IAcadPaperSpace, Center: object, Width: float, Height: float) -> AcadPViewport """
        pass

    def AddRaster(self, imageFileName, InsertionPoint, ScaleFactor, RotationAngle):
        """ AddRaster(self: IAcadPaperSpace, imageFileName: str, InsertionPoint: object, ScaleFactor: float, RotationAngle: float) -> AcadRasterImage """
        pass

    def AddRay(self, Point1, Point2):
        """ AddRay(self: IAcadPaperSpace, Point1: object, Point2: object) -> AcadRay """
        pass

    def AddRegion(self, ObjectList):
        """ AddRegion(self: IAcadPaperSpace, ObjectList: object) -> object """
        pass

    def AddRevolvedSolid(self, Profile, AxisPoint, AxisDir, Angle):
        """ AddRevolvedSolid(self: IAcadPaperSpace, Profile: AcadRegion, AxisPoint: object, AxisDir: object, Angle: float) -> Acad3DSolid """
        pass

    def AddSection(self, FromPoint, ToPoint, planeVector):
        """ AddSection(self: IAcadPaperSpace, FromPoint: object, ToPoint: object, planeVector: object) -> IAcadSection """
        pass

    def AddShape(self, Name, InsertionPoint, ScaleFactor, RotationAngle):
        """ AddShape(self: IAcadPaperSpace, Name: str, InsertionPoint: object, ScaleFactor: float, RotationAngle: float) -> AcadShape """
        pass

    def AddSolid(self, Point1, Point2, point3, Point4):
        """ AddSolid(self: IAcadPaperSpace, Point1: object, Point2: object, point3: object, Point4: object) -> AcadSolid """
        pass

    def AddSphere(self, Center, Radius):
        """ AddSphere(self: IAcadPaperSpace, Center: object, Radius: float) -> Acad3DSolid """
        pass

    def AddSpline(self, PointsArray, StartTangent, EndTangent):
        """ AddSpline(self: IAcadPaperSpace, PointsArray: object, StartTangent: object, EndTangent: object) -> AcadSpline """
        pass

    def AddTable(self, InsertionPoint, NumRows, NumColumns, RowHeight, ColWidth):
        """ AddTable(self: IAcadPaperSpace, InsertionPoint: object, NumRows: int, NumColumns: int, RowHeight: float, ColWidth: float) -> AcadTable """
        pass

    def AddText(self, TextString, InsertionPoint, Height):
        """ AddText(self: IAcadPaperSpace, TextString: str, InsertionPoint: object, Height: float) -> AcadText """
        pass

    def AddTolerance(self, Text, InsertionPoint, Direction):
        """ AddTolerance(self: IAcadPaperSpace, Text: str, InsertionPoint: object, Direction: object) -> AcadTolerance """
        pass

    def AddTorus(self, Center, TorusRadius, TubeRadius):
        """ AddTorus(self: IAcadPaperSpace, Center: object, TorusRadius: float, TubeRadius: float) -> Acad3DSolid """
        pass

    def AddTrace(self, PointsArray):
        """ AddTrace(self: IAcadPaperSpace, PointsArray: object) -> AcadTrace """
        pass

    def AddWedge(self, Center, Length, Width, Height):
        """ AddWedge(self: IAcadPaperSpace, Center: object, Length: float, Width: float, Height: float) -> Acad3DSolid """
        pass

    def AddXline(self, Point1, Point2):
        """ AddXline(self: IAcadPaperSpace, Point1: object, Point2: object) -> AcadXline """
        pass

    def AttachExternalReference(self, PathName, Name, InsertionPoint, Xscale, Yscale, Zscale, Rotation, bOverlay, Password):
        """ AttachExternalReference(self: IAcadPaperSpace, PathName: str, Name: str, InsertionPoint: object, Xscale: float, Yscale: float, Zscale: float, Rotation: float, bOverlay: bool, Password: object) -> AcadExternalReference """
        pass

    def Bind(self, bPrefixName):
        """ Bind(self: IAcadPaperSpace, bPrefixName: bool) """
        pass

    def Delete(self):
        """ Delete(self: IAcadPaperSpace) """
        pass

    def Detach(self):
        """ Detach(self: IAcadPaperSpace) """
        pass

    def Erase(self):
        """ Erase(self: IAcadPaperSpace) """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: IAcadPaperSpace) -> IEnumerator """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: IAcadPaperSpace) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: IAcadPaperSpace, AppName: str) -> (object, object) """
        pass

    def InsertBlock(self, InsertionPoint, Name, Xscale, Yscale, Zscale, Rotation, Password):
        """ InsertBlock(self: IAcadPaperSpace, InsertionPoint: object, Name: str, Xscale: float, Yscale: float, Zscale: float, Rotation: float, Password: object) -> AcadBlockReference """
        pass

    def Item(self, Index):
        """ Item(self: IAcadPaperSpace, Index: object) -> AcadEntity """
        pass

    def Reload(self):
        """ Reload(self: IAcadPaperSpace) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: IAcadPaperSpace, XDataType: object, XDataValue: object) """
        pass

    def Unload(self):
        """ Unload(self: IAcadPaperSpace) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerable) -> object """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IAcadPaperSpace) -> object

"""

    BlockScaling = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BlockScaling(self: IAcadPaperSpace) -> AcBlockScaling

Set: BlockScaling(self: IAcadPaperSpace) = value
"""

    Comments = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Comments(self: IAcadPaperSpace) -> str

Set: Comments(self: IAcadPaperSpace) = value
"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: IAcadPaperSpace) -> int

"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: IAcadPaperSpace) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: IAcadPaperSpace) -> object

"""

    Explodable = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Explodable(self: IAcadPaperSpace) -> bool

Set: Explodable(self: IAcadPaperSpace) = value
"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: IAcadPaperSpace) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: IAcadPaperSpace) -> bool

"""

    IsDynamicBlock = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IsDynamicBlock(self: IAcadPaperSpace) -> bool

"""

    IsLayout = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IsLayout(self: IAcadPaperSpace) -> bool

"""

    IsXRef = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IsXRef(self: IAcadPaperSpace) -> bool

"""

    Layout = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layout(self: IAcadPaperSpace) -> AcadLayout

"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: IAcadPaperSpace) -> str

Set: Name(self: IAcadPaperSpace) = value
"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: IAcadPaperSpace) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: IAcadPaperSpace) -> str

"""

    Origin = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Origin(self: IAcadPaperSpace) -> object

Set: Origin(self: IAcadPaperSpace) = value
"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: IAcadPaperSpace) -> Int64

"""

    Path = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Path(self: IAcadPaperSpace) -> str

Set: Path(self: IAcadPaperSpace) = value
"""

    Units = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Units(self: IAcadPaperSpace) -> AcInsertUnits

Set: Units(self: IAcadPaperSpace) = value
"""

    XRefDatabase = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: XRefDatabase(self: IAcadPaperSpace) -> AcadDatabase

"""



class AcadPaperSpace(IAcadPaperSpace, IAcadBlock, IAcadObject, IEnumerable, IAcadObjectEvents_Event):
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerable) -> object """
        pass


class AcadPaperSpaceClass(__ComObject):
    # no doc
    def Add3DFace(self, Point1, Point2, point3, Point4):
        """ Add3DFace(self: AcadPaperSpaceClass, Point1: object, Point2: object, point3: object, Point4: object) -> Acad3DFace """
        pass

    def Add3DMesh(self, M, N, PointsMatrix):
        """ Add3DMesh(self: AcadPaperSpaceClass, M: int, N: int, PointsMatrix: object) -> AcadPolygonMesh """
        pass

    def Add3DPoly(self, PointsArray):
        """ Add3DPoly(self: AcadPaperSpaceClass, PointsArray: object) -> Acad3DPolyline """
        pass

    def AddArc(self, Center, Radius, StartAngle, EndAngle):
        """ AddArc(self: AcadPaperSpaceClass, Center: object, Radius: float, StartAngle: float, EndAngle: float) -> AcadArc """
        pass

    def AddAttribute(self, Height, Mode, Prompt, InsertionPoint, Tag, Value):
        """ AddAttribute(self: AcadPaperSpaceClass, Height: float, Mode: AcAttributeMode, Prompt: str, InsertionPoint: object, Tag: str, Value: str) -> AcadAttribute """
        pass

    def AddBox(self, Origin, Length, Width, Height):
        """ AddBox(self: AcadPaperSpaceClass, Origin: object, Length: float, Width: float, Height: float) -> Acad3DSolid """
        pass

    def AddCircle(self, Center, Radius):
        """ AddCircle(self: AcadPaperSpaceClass, Center: object, Radius: float) -> AcadCircle """
        pass

    def AddCone(self, Center, BaseRadius, Height):
        """ AddCone(self: AcadPaperSpaceClass, Center: object, BaseRadius: float, Height: float) -> Acad3DSolid """
        pass

    def AddCustomObject(self, ClassName):
        """ AddCustomObject(self: AcadPaperSpaceClass, ClassName: str) -> object """
        pass

    def AddCylinder(self, Center, Radius, Height):
        """ AddCylinder(self: AcadPaperSpaceClass, Center: object, Radius: float, Height: float) -> Acad3DSolid """
        pass

    def AddDim3PointAngular(self, AngleVertex, FirstEndPoint, SecondEndPoint, TextPoint):
        """ AddDim3PointAngular(self: AcadPaperSpaceClass, AngleVertex: object, FirstEndPoint: object, SecondEndPoint: object, TextPoint: object) -> AcadDim3PointAngular """
        pass

    def AddDimAligned(self, ExtLine1Point, ExtLine2Point, TextPosition):
        """ AddDimAligned(self: AcadPaperSpaceClass, ExtLine1Point: object, ExtLine2Point: object, TextPosition: object) -> AcadDimAligned """
        pass

    def AddDimAngular(self, AngleVertex, FirstEndPoint, SecondEndPoint, TextPoint):
        """ AddDimAngular(self: AcadPaperSpaceClass, AngleVertex: object, FirstEndPoint: object, SecondEndPoint: object, TextPoint: object) -> AcadDimAngular """
        pass

    def AddDimArc(self, ArcCenter, FirstEndPoint, SecondEndPoint, ArcPoint):
        """ AddDimArc(self: AcadPaperSpaceClass, ArcCenter: object, FirstEndPoint: object, SecondEndPoint: object, ArcPoint: object) -> AcadDimArcLength """
        pass

    def AddDimDiametric(self, ChordPoint, FarChordPoint, LeaderLength):
        """ AddDimDiametric(self: AcadPaperSpaceClass, ChordPoint: object, FarChordPoint: object, LeaderLength: float) -> AcadDimDiametric """
        pass

    def AddDimOrdinate(self, DefinitionPoint, LeaderEndPoint, UseXAxis):
        """ AddDimOrdinate(self: AcadPaperSpaceClass, DefinitionPoint: object, LeaderEndPoint: object, UseXAxis: int) -> AcadDimOrdinate """
        pass

    def AddDimRadial(self, Center, ChordPoint, LeaderLength):
        """ AddDimRadial(self: AcadPaperSpaceClass, Center: object, ChordPoint: object, LeaderLength: float) -> AcadDimRadial """
        pass

    def AddDimRadialLarge(self, Center, ChordPoint, OverrideCenter, JogPoint, JogAngle):
        """ AddDimRadialLarge(self: AcadPaperSpaceClass, Center: object, ChordPoint: object, OverrideCenter: object, JogPoint: object, JogAngle: float) -> AcadDimRadialLarge """
        pass

    def AddDimRotated(self, ExtLine1Point, ExtLine2Point, DimLineLocation, RotationAngle):
        """ AddDimRotated(self: AcadPaperSpaceClass, ExtLine1Point: object, ExtLine2Point: object, DimLineLocation: object, RotationAngle: float) -> AcadDimRotated """
        pass

    def AddEllipse(self, Center, MajorAxis, RadiusRatio):
        """ AddEllipse(self: AcadPaperSpaceClass, Center: object, MajorAxis: object, RadiusRatio: float) -> AcadEllipse """
        pass

    def AddEllipticalCone(self, Center, MajorRadius, MinorRadius, Height):
        """ AddEllipticalCone(self: AcadPaperSpaceClass, Center: object, MajorRadius: float, MinorRadius: float, Height: float) -> Acad3DSolid """
        pass

    def AddEllipticalCylinder(self, Center, MajorRadius, MinorRadius, Height):
        """ AddEllipticalCylinder(self: AcadPaperSpaceClass, Center: object, MajorRadius: float, MinorRadius: float, Height: float) -> Acad3DSolid """
        pass

    def AddExtrudedSolid(self, Profile, Height, TaperAngle):
        """ AddExtrudedSolid(self: AcadPaperSpaceClass, Profile: AcadRegion, Height: float, TaperAngle: float) -> Acad3DSolid """
        pass

    def AddExtrudedSolidAlongPath(self, Profile, Path):
        """ AddExtrudedSolidAlongPath(self: AcadPaperSpaceClass, Profile: AcadRegion, Path: object) -> Acad3DSolid """
        pass

    def AddHatch(self, PatternType, PatternName, Associativity, HatchObjectType):
        """ AddHatch(self: AcadPaperSpaceClass, PatternType: int, PatternName: str, Associativity: bool, HatchObjectType: object) -> AcadHatch """
        pass

    def AddLeader(self, PointsArray, Annotation, Type):
        """ AddLeader(self: AcadPaperSpaceClass, PointsArray: object, Annotation: AcadEntity, Type: AcLeaderType) -> AcadLeader """
        pass

    def AddLightWeightPolyline(self, VerticesList):
        """ AddLightWeightPolyline(self: AcadPaperSpaceClass, VerticesList: object) -> AcadLWPolyline """
        pass

    def AddLine(self, StartPoint, EndPoint):
        """ AddLine(self: AcadPaperSpaceClass, StartPoint: object, EndPoint: object) -> AcadLine """
        pass

    def AddMInsertBlock(self, InsertionPoint, Name, Xscale, Yscale, Zscale, Rotation, NumRows, NumColumns, RowSpacing, ColumnSpacing, Password):
        """ AddMInsertBlock(self: AcadPaperSpaceClass, InsertionPoint: object, Name: str, Xscale: float, Yscale: float, Zscale: float, Rotation: float, NumRows: int, NumColumns: int, RowSpacing: int, ColumnSpacing: int, Password: object) -> AcadMInsertBlock """
        pass

    def AddMLeader(self, PointsArray, leaderLineIndex):
        """ AddMLeader(self: AcadPaperSpaceClass, PointsArray: object) -> (AcadMLeader, int) """
        pass

    def AddMLine(self, VertexList):
        """ AddMLine(self: AcadPaperSpaceClass, VertexList: object) -> AcadMLine """
        pass

    def AddMText(self, InsertionPoint, Width, Text):
        """ AddMText(self: AcadPaperSpaceClass, InsertionPoint: object, Width: float, Text: str) -> AcadMText """
        pass

    def AddPoint(self, Point):
        """ AddPoint(self: AcadPaperSpaceClass, Point: object) -> AcadPoint """
        pass

    def AddPolyfaceMesh(self, VertexList, FaceList):
        """ AddPolyfaceMesh(self: AcadPaperSpaceClass, VertexList: object, FaceList: object) -> AcadPolyfaceMesh """
        pass

    def AddPolyline(self, VerticesList):
        """ AddPolyline(self: AcadPaperSpaceClass, VerticesList: object) -> AcadPolyline """
        pass

    def AddPViewport(self, Center, Width, Height):
        """ AddPViewport(self: AcadPaperSpaceClass, Center: object, Width: float, Height: float) -> AcadPViewport """
        pass

    def AddRaster(self, imageFileName, InsertionPoint, ScaleFactor, RotationAngle):
        """ AddRaster(self: AcadPaperSpaceClass, imageFileName: str, InsertionPoint: object, ScaleFactor: float, RotationAngle: float) -> AcadRasterImage """
        pass

    def AddRay(self, Point1, Point2):
        """ AddRay(self: AcadPaperSpaceClass, Point1: object, Point2: object) -> AcadRay """
        pass

    def AddRegion(self, ObjectList):
        """ AddRegion(self: AcadPaperSpaceClass, ObjectList: object) -> object """
        pass

    def AddRevolvedSolid(self, Profile, AxisPoint, AxisDir, Angle):
        """ AddRevolvedSolid(self: AcadPaperSpaceClass, Profile: AcadRegion, AxisPoint: object, AxisDir: object, Angle: float) -> Acad3DSolid """
        pass

    def AddSection(self, FromPoint, ToPoint, planeVector):
        """ AddSection(self: AcadPaperSpaceClass, FromPoint: object, ToPoint: object, planeVector: object) -> IAcadSection """
        pass

    def AddShape(self, Name, InsertionPoint, ScaleFactor, RotationAngle):
        """ AddShape(self: AcadPaperSpaceClass, Name: str, InsertionPoint: object, ScaleFactor: float, RotationAngle: float) -> AcadShape """
        pass

    def AddSolid(self, Point1, Point2, point3, Point4):
        """ AddSolid(self: AcadPaperSpaceClass, Point1: object, Point2: object, point3: object, Point4: object) -> AcadSolid """
        pass

    def AddSphere(self, Center, Radius):
        """ AddSphere(self: AcadPaperSpaceClass, Center: object, Radius: float) -> Acad3DSolid """
        pass

    def AddSpline(self, PointsArray, StartTangent, EndTangent):
        """ AddSpline(self: AcadPaperSpaceClass, PointsArray: object, StartTangent: object, EndTangent: object) -> AcadSpline """
        pass

    def AddTable(self, InsertionPoint, NumRows, NumColumns, RowHeight, ColWidth):
        """ AddTable(self: AcadPaperSpaceClass, InsertionPoint: object, NumRows: int, NumColumns: int, RowHeight: float, ColWidth: float) -> AcadTable """
        pass

    def AddText(self, TextString, InsertionPoint, Height):
        """ AddText(self: AcadPaperSpaceClass, TextString: str, InsertionPoint: object, Height: float) -> AcadText """
        pass

    def AddTolerance(self, Text, InsertionPoint, Direction):
        """ AddTolerance(self: AcadPaperSpaceClass, Text: str, InsertionPoint: object, Direction: object) -> AcadTolerance """
        pass

    def AddTorus(self, Center, TorusRadius, TubeRadius):
        """ AddTorus(self: AcadPaperSpaceClass, Center: object, TorusRadius: float, TubeRadius: float) -> Acad3DSolid """
        pass

    def AddTrace(self, PointsArray):
        """ AddTrace(self: AcadPaperSpaceClass, PointsArray: object) -> AcadTrace """
        pass

    def AddWedge(self, Center, Length, Width, Height):
        """ AddWedge(self: AcadPaperSpaceClass, Center: object, Length: float, Width: float, Height: float) -> Acad3DSolid """
        pass

    def AddXline(self, Point1, Point2):
        """ AddXline(self: AcadPaperSpaceClass, Point1: object, Point2: object) -> AcadXline """
        pass

    def add_Modified(self, A_1):
        """ add_Modified(self: AcadPaperSpaceClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def AttachExternalReference(self, PathName, Name, InsertionPoint, Xscale, Yscale, Zscale, Rotation, bOverlay, Password):
        """ AttachExternalReference(self: AcadPaperSpaceClass, PathName: str, Name: str, InsertionPoint: object, Xscale: float, Yscale: float, Zscale: float, Rotation: float, bOverlay: bool, Password: object) -> AcadExternalReference """
        pass

    def Bind(self, bPrefixName):
        """ Bind(self: AcadPaperSpaceClass, bPrefixName: bool) """
        pass

    def Delete(self):
        """ Delete(self: AcadPaperSpaceClass) """
        pass

    def Detach(self):
        """ Detach(self: AcadPaperSpaceClass) """
        pass

    def Erase(self):
        """ Erase(self: AcadPaperSpaceClass) """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: AcadPaperSpaceClass) -> IEnumerator """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: AcadPaperSpaceClass) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: AcadPaperSpaceClass, AppName: str) -> (object, object) """
        pass

    def InsertBlock(self, InsertionPoint, Name, Xscale, Yscale, Zscale, Rotation, Password):
        """ InsertBlock(self: AcadPaperSpaceClass, InsertionPoint: object, Name: str, Xscale: float, Yscale: float, Zscale: float, Rotation: float, Password: object) -> AcadBlockReference """
        pass

    def Item(self, Index):
        """ Item(self: AcadPaperSpaceClass, Index: object) -> AcadEntity """
        pass

    def Reload(self):
        """ Reload(self: AcadPaperSpaceClass) """
        pass

    def remove_Modified(self, A_1):
        """ remove_Modified(self: AcadPaperSpaceClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: AcadPaperSpaceClass, XDataType: object, XDataValue: object) """
        pass

    def Unload(self):
        """ Unload(self: AcadPaperSpaceClass) """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerable) -> object """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: AcadPaperSpaceClass) -> object

"""

    BlockScaling = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BlockScaling(self: AcadPaperSpaceClass) -> AcBlockScaling

Set: BlockScaling(self: AcadPaperSpaceClass) = value
"""

    Comments = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Comments(self: AcadPaperSpaceClass) -> str

Set: Comments(self: AcadPaperSpaceClass) = value
"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: AcadPaperSpaceClass) -> int

"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: AcadPaperSpaceClass) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: AcadPaperSpaceClass) -> object

"""

    Explodable = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Explodable(self: AcadPaperSpaceClass) -> bool

Set: Explodable(self: AcadPaperSpaceClass) = value
"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: AcadPaperSpaceClass) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: AcadPaperSpaceClass) -> bool

"""

    IsDynamicBlock = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IsDynamicBlock(self: AcadPaperSpaceClass) -> bool

"""

    IsLayout = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IsLayout(self: AcadPaperSpaceClass) -> bool

"""

    IsXRef = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IsXRef(self: AcadPaperSpaceClass) -> bool

"""

    Layout = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layout(self: AcadPaperSpaceClass) -> AcadLayout

"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: AcadPaperSpaceClass) -> str

Set: Name(self: AcadPaperSpaceClass) = value
"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: AcadPaperSpaceClass) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: AcadPaperSpaceClass) -> str

"""

    Origin = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Origin(self: AcadPaperSpaceClass) -> object

Set: Origin(self: AcadPaperSpaceClass) = value
"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: AcadPaperSpaceClass) -> Int64

"""

    Path = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Path(self: AcadPaperSpaceClass) -> str

Set: Path(self: AcadPaperSpaceClass) = value
"""

    Units = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Units(self: AcadPaperSpaceClass) -> AcInsertUnits

Set: Units(self: AcadPaperSpaceClass) = value
"""

    XRefDatabase = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: XRefDatabase(self: AcadPaperSpaceClass) -> AcadDatabase

"""


    Modified = None


class AcadPdfUnderlay(IAcadUnderlay, IAcadEntity, IAcadObject, IAcadObjectEvents_Event):
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class AcadPdfUnderlayClass(__ComObject):
    # no doc
    def add_Modified(self, A_1):
        """ add_Modified(self: AcadPdfUnderlayClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def ArrayPolar(self, NumberOfObjects, AngleToFill, CenterPoint):
        """ ArrayPolar(self: AcadPdfUnderlayClass, NumberOfObjects: int, AngleToFill: float, CenterPoint: object) -> object """
        pass

    def ArrayRectangular(self, NumberOfRows, NumberOfColumns, NumberOfLevels, DistBetweenRows, DistBetweenCols, DistBetweenLevels):
        """ ArrayRectangular(self: AcadPdfUnderlayClass, NumberOfRows: int, NumberOfColumns: int, NumberOfLevels: int, DistBetweenRows: float, DistBetweenCols: float, DistBetweenLevels: float) -> object """
        pass

    def ClipBoundary(self, boundry):
        """ ClipBoundary(self: AcadPdfUnderlayClass, boundry: object) """
        pass

    def Copy(self):
        """ Copy(self: AcadPdfUnderlayClass) -> object """
        pass

    def Delete(self):
        """ Delete(self: AcadPdfUnderlayClass) """
        pass

    def Erase(self):
        """ Erase(self: AcadPdfUnderlayClass) """
        pass

    def GetBoundingBox(self, MinPoint, MaxPoint):
        """ GetBoundingBox(self: AcadPdfUnderlayClass) -> (object, object) """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: AcadPdfUnderlayClass) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: AcadPdfUnderlayClass, AppName: str) -> (object, object) """
        pass

    def Highlight(self, HighlightFlag):
        """ Highlight(self: AcadPdfUnderlayClass, HighlightFlag: bool) """
        pass

    def IntersectWith(self, IntersectObject, option):
        """ IntersectWith(self: AcadPdfUnderlayClass, IntersectObject: object, option: AcExtendOption) -> object """
        pass

    def Mirror(self, Point1, Point2):
        """ Mirror(self: AcadPdfUnderlayClass, Point1: object, Point2: object) -> object """
        pass

    def Mirror3D(self, Point1, Point2, point3):
        """ Mirror3D(self: AcadPdfUnderlayClass, Point1: object, Point2: object, point3: object) -> object """
        pass

    def Move(self, FromPoint, ToPoint):
        """ Move(self: AcadPdfUnderlayClass, FromPoint: object, ToPoint: object) """
        pass

    def remove_Modified(self, A_1):
        """ remove_Modified(self: AcadPdfUnderlayClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def Rotate(self, BasePoint, RotationAngle):
        """ Rotate(self: AcadPdfUnderlayClass, BasePoint: object, RotationAngle: float) """
        pass

    def Rotate3D(self, Point1, Point2, RotationAngle):
        """ Rotate3D(self: AcadPdfUnderlayClass, Point1: object, Point2: object, RotationAngle: float) """
        pass

    def ScaleEntity(self, BasePoint, ScaleFactor):
        """ ScaleEntity(self: AcadPdfUnderlayClass, BasePoint: object, ScaleFactor: float) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: AcadPdfUnderlayClass, XDataType: object, XDataValue: object) """
        pass

    def TransformBy(self, TransformationMatrix):
        """ TransformBy(self: AcadPdfUnderlayClass, TransformationMatrix: object) """
        pass

    def Update(self):
        """ Update(self: AcadPdfUnderlayClass) """
        pass

    AdjustForBackground = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AdjustForBackground(self: AcadPdfUnderlayClass) -> bool

Set: AdjustForBackground(self: AcadPdfUnderlayClass) = value
"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: AcadPdfUnderlayClass) -> object

"""

    ClippingEnabled = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ClippingEnabled(self: AcadPdfUnderlayClass) -> bool

Set: ClippingEnabled(self: AcadPdfUnderlayClass) = value
"""

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: AcadPdfUnderlayClass) -> ACAD_COLOR

Set: color(self: AcadPdfUnderlayClass) = value
"""

    Contrast = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Contrast(self: AcadPdfUnderlayClass) -> int

Set: Contrast(self: AcadPdfUnderlayClass) = value
"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: AcadPdfUnderlayClass) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: AcadPdfUnderlayClass) -> object

"""

    EntityName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityName(self: AcadPdfUnderlayClass) -> str

"""

    EntityTransparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityTransparency(self: AcadPdfUnderlayClass) -> str

Set: EntityTransparency(self: AcadPdfUnderlayClass) = value
"""

    EntityType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityType(self: AcadPdfUnderlayClass) -> int

"""

    Fade = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Fade(self: AcadPdfUnderlayClass) -> int

Set: Fade(self: AcadPdfUnderlayClass) = value
"""

    File = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: File(self: AcadPdfUnderlayClass) -> str

Set: File(self: AcadPdfUnderlayClass) = value
"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: AcadPdfUnderlayClass) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: AcadPdfUnderlayClass) -> bool

"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: AcadPdfUnderlayClass) -> float

Set: Height(self: AcadPdfUnderlayClass) = value
"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: AcadPdfUnderlayClass) -> AcadHyperlinks

"""

    ItemName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ItemName(self: AcadPdfUnderlayClass) -> str

Set: ItemName(self: AcadPdfUnderlayClass) = value
"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layer(self: AcadPdfUnderlayClass) -> str

Set: Layer(self: AcadPdfUnderlayClass) = value
"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: AcadPdfUnderlayClass) -> str

Set: Linetype(self: AcadPdfUnderlayClass) = value
"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeScale(self: AcadPdfUnderlayClass) -> float

Set: LinetypeScale(self: AcadPdfUnderlayClass) = value
"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: AcadPdfUnderlayClass) -> ACAD_LWEIGHT

Set: Lineweight(self: AcadPdfUnderlayClass) = value
"""

    Material = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Material(self: AcadPdfUnderlayClass) -> str

Set: Material(self: AcadPdfUnderlayClass) = value
"""

    Monochrome = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Monochrome(self: AcadPdfUnderlayClass) -> bool

Set: Monochrome(self: AcadPdfUnderlayClass) = value
"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: AcadPdfUnderlayClass) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: AcadPdfUnderlayClass) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: AcadPdfUnderlayClass) -> Int64

"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: AcadPdfUnderlayClass) -> str

Set: PlotStyleName(self: AcadPdfUnderlayClass) = value
"""

    Position = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Position(self: AcadPdfUnderlayClass) -> object

Set: Position(self: AcadPdfUnderlayClass) = value
"""

    Rotation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Rotation(self: AcadPdfUnderlayClass) -> float

Set: Rotation(self: AcadPdfUnderlayClass) = value
"""

    ScaleFactor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ScaleFactor(self: AcadPdfUnderlayClass) -> float

Set: ScaleFactor(self: AcadPdfUnderlayClass) = value
"""

    TrueColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TrueColor(self: AcadPdfUnderlayClass) -> AcadAcCmColor

Set: TrueColor(self: AcadPdfUnderlayClass) = value
"""

    UnderlayLayerOverrideApplied = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: UnderlayLayerOverrideApplied(self: AcadPdfUnderlayClass) -> AcUnderlayLayerOverrideType

Set: UnderlayLayerOverrideApplied(self: AcadPdfUnderlayClass) = value
"""

    UnderlayName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: UnderlayName(self: AcadPdfUnderlayClass) -> str

Set: UnderlayName(self: AcadPdfUnderlayClass) = value
"""

    UnderlayVisibility = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: UnderlayVisibility(self: AcadPdfUnderlayClass) -> bool

Set: UnderlayVisibility(self: AcadPdfUnderlayClass) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: AcadPdfUnderlayClass) -> bool

Set: Visible(self: AcadPdfUnderlayClass) = value
"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: AcadPdfUnderlayClass) -> float

Set: Width(self: AcadPdfUnderlayClass) = value
"""


    Modified = None


class IAcadPlaneSurface(IAcadSurface, IAcadEntity, IAcadObject):
    # no doc
    def ArrayPolar(self, NumberOfObjects, AngleToFill, CenterPoint):
        """ ArrayPolar(self: IAcadPlaneSurface, NumberOfObjects: int, AngleToFill: float, CenterPoint: object) -> object """
        pass

    def ArrayRectangular(self, NumberOfRows, NumberOfColumns, NumberOfLevels, DistBetweenRows, DistBetweenCols, DistBetweenLevels):
        """ ArrayRectangular(self: IAcadPlaneSurface, NumberOfRows: int, NumberOfColumns: int, NumberOfLevels: int, DistBetweenRows: float, DistBetweenCols: float, DistBetweenLevels: float) -> object """
        pass

    def Copy(self):
        """ Copy(self: IAcadPlaneSurface) -> object """
        pass

    def Delete(self):
        """ Delete(self: IAcadPlaneSurface) """
        pass

    def Erase(self):
        """ Erase(self: IAcadPlaneSurface) """
        pass

    def GetBoundingBox(self, MinPoint, MaxPoint):
        """ GetBoundingBox(self: IAcadPlaneSurface) -> (object, object) """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: IAcadPlaneSurface) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: IAcadPlaneSurface, AppName: str) -> (object, object) """
        pass

    def Highlight(self, HighlightFlag):
        """ Highlight(self: IAcadPlaneSurface, HighlightFlag: bool) """
        pass

    def IntersectWith(self, IntersectObject, option):
        """ IntersectWith(self: IAcadPlaneSurface, IntersectObject: object, option: AcExtendOption) -> object """
        pass

    def Mirror(self, Point1, Point2):
        """ Mirror(self: IAcadPlaneSurface, Point1: object, Point2: object) -> object """
        pass

    def Mirror3D(self, Point1, Point2, point3):
        """ Mirror3D(self: IAcadPlaneSurface, Point1: object, Point2: object, point3: object) -> object """
        pass

    def Move(self, FromPoint, ToPoint):
        """ Move(self: IAcadPlaneSurface, FromPoint: object, ToPoint: object) """
        pass

    def Rotate(self, BasePoint, RotationAngle):
        """ Rotate(self: IAcadPlaneSurface, BasePoint: object, RotationAngle: float) """
        pass

    def Rotate3D(self, Point1, Point2, RotationAngle):
        """ Rotate3D(self: IAcadPlaneSurface, Point1: object, Point2: object, RotationAngle: float) """
        pass

    def ScaleEntity(self, BasePoint, ScaleFactor):
        """ ScaleEntity(self: IAcadPlaneSurface, BasePoint: object, ScaleFactor: float) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: IAcadPlaneSurface, XDataType: object, XDataValue: object) """
        pass

    def TransformBy(self, TransformationMatrix):
        """ TransformBy(self: IAcadPlaneSurface, TransformationMatrix: object) """
        pass

    def Update(self):
        """ Update(self: IAcadPlaneSurface) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IAcadPlaneSurface) -> object

"""

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: IAcadPlaneSurface) -> ACAD_COLOR

Set: color(self: IAcadPlaneSurface) = value
"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: IAcadPlaneSurface) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: IAcadPlaneSurface) -> object

"""

    EdgeExtensionDistances = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EdgeExtensionDistances(self: IAcadPlaneSurface) -> object

Set: EdgeExtensionDistances(self: IAcadPlaneSurface) = value
"""

    EntityName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityName(self: IAcadPlaneSurface) -> str

"""

    EntityTransparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityTransparency(self: IAcadPlaneSurface) -> str

Set: EntityTransparency(self: IAcadPlaneSurface) = value
"""

    EntityType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityType(self: IAcadPlaneSurface) -> int

"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: IAcadPlaneSurface) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: IAcadPlaneSurface) -> bool

"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: IAcadPlaneSurface) -> AcadHyperlinks

"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layer(self: IAcadPlaneSurface) -> str

Set: Layer(self: IAcadPlaneSurface) = value
"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: IAcadPlaneSurface) -> str

Set: Linetype(self: IAcadPlaneSurface) = value
"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeScale(self: IAcadPlaneSurface) -> float

Set: LinetypeScale(self: IAcadPlaneSurface) = value
"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: IAcadPlaneSurface) -> ACAD_LWEIGHT

Set: Lineweight(self: IAcadPlaneSurface) = value
"""

    MaintainAssociativity = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MaintainAssociativity(self: IAcadPlaneSurface) -> int

Set: MaintainAssociativity(self: IAcadPlaneSurface) = value
"""

    Material = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Material(self: IAcadPlaneSurface) -> str

Set: Material(self: IAcadPlaneSurface) = value
"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: IAcadPlaneSurface) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: IAcadPlaneSurface) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: IAcadPlaneSurface) -> Int64

"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: IAcadPlaneSurface) -> str

Set: PlotStyleName(self: IAcadPlaneSurface) = value
"""

    ShowAssociativity = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowAssociativity(self: IAcadPlaneSurface) -> bool

Set: ShowAssociativity(self: IAcadPlaneSurface) = value
"""

    SurfaceType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SurfaceType(self: IAcadPlaneSurface) -> str

"""

    SurfTrimAssociativity = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SurfTrimAssociativity(self: IAcadPlaneSurface) -> object

Set: SurfTrimAssociativity(self: IAcadPlaneSurface) = value
"""

    TrueColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TrueColor(self: IAcadPlaneSurface) -> AcadAcCmColor

Set: TrueColor(self: IAcadPlaneSurface) = value
"""

    UIsolineDensity = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: UIsolineDensity(self: IAcadPlaneSurface) -> int

Set: UIsolineDensity(self: IAcadPlaneSurface) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: IAcadPlaneSurface) -> bool

Set: Visible(self: IAcadPlaneSurface) = value
"""

    VIsolineDensity = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VIsolineDensity(self: IAcadPlaneSurface) -> int

Set: VIsolineDensity(self: IAcadPlaneSurface) = value
"""

    WireframeType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: WireframeType(self: IAcadPlaneSurface) -> AcWireframeType

Set: WireframeType(self: IAcadPlaneSurface) = value
"""



class AcadPlaneSurface(IAcadPlaneSurface, IAcadSurface, IAcadEntity, IAcadObject, IAcadObjectEvents_Event):
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class AcadPlaneSurfaceClass(__ComObject):
    # no doc
    def add_Modified(self, A_1):
        """ add_Modified(self: AcadPlaneSurfaceClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def ArrayPolar(self, NumberOfObjects, AngleToFill, CenterPoint):
        """ ArrayPolar(self: AcadPlaneSurfaceClass, NumberOfObjects: int, AngleToFill: float, CenterPoint: object) -> object """
        pass

    def ArrayRectangular(self, NumberOfRows, NumberOfColumns, NumberOfLevels, DistBetweenRows, DistBetweenCols, DistBetweenLevels):
        """ ArrayRectangular(self: AcadPlaneSurfaceClass, NumberOfRows: int, NumberOfColumns: int, NumberOfLevels: int, DistBetweenRows: float, DistBetweenCols: float, DistBetweenLevels: float) -> object """
        pass

    def Copy(self):
        """ Copy(self: AcadPlaneSurfaceClass) -> object """
        pass

    def Delete(self):
        """ Delete(self: AcadPlaneSurfaceClass) """
        pass

    def Erase(self):
        """ Erase(self: AcadPlaneSurfaceClass) """
        pass

    def GetBoundingBox(self, MinPoint, MaxPoint):
        """ GetBoundingBox(self: AcadPlaneSurfaceClass) -> (object, object) """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: AcadPlaneSurfaceClass) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: AcadPlaneSurfaceClass, AppName: str) -> (object, object) """
        pass

    def Highlight(self, HighlightFlag):
        """ Highlight(self: AcadPlaneSurfaceClass, HighlightFlag: bool) """
        pass

    def IntersectWith(self, IntersectObject, option):
        """ IntersectWith(self: AcadPlaneSurfaceClass, IntersectObject: object, option: AcExtendOption) -> object """
        pass

    def Mirror(self, Point1, Point2):
        """ Mirror(self: AcadPlaneSurfaceClass, Point1: object, Point2: object) -> object """
        pass

    def Mirror3D(self, Point1, Point2, point3):
        """ Mirror3D(self: AcadPlaneSurfaceClass, Point1: object, Point2: object, point3: object) -> object """
        pass

    def Move(self, FromPoint, ToPoint):
        """ Move(self: AcadPlaneSurfaceClass, FromPoint: object, ToPoint: object) """
        pass

    def remove_Modified(self, A_1):
        """ remove_Modified(self: AcadPlaneSurfaceClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def Rotate(self, BasePoint, RotationAngle):
        """ Rotate(self: AcadPlaneSurfaceClass, BasePoint: object, RotationAngle: float) """
        pass

    def Rotate3D(self, Point1, Point2, RotationAngle):
        """ Rotate3D(self: AcadPlaneSurfaceClass, Point1: object, Point2: object, RotationAngle: float) """
        pass

    def ScaleEntity(self, BasePoint, ScaleFactor):
        """ ScaleEntity(self: AcadPlaneSurfaceClass, BasePoint: object, ScaleFactor: float) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: AcadPlaneSurfaceClass, XDataType: object, XDataValue: object) """
        pass

    def TransformBy(self, TransformationMatrix):
        """ TransformBy(self: AcadPlaneSurfaceClass, TransformationMatrix: object) """
        pass

    def Update(self):
        """ Update(self: AcadPlaneSurfaceClass) """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: AcadPlaneSurfaceClass) -> object

"""

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: AcadPlaneSurfaceClass) -> ACAD_COLOR

Set: color(self: AcadPlaneSurfaceClass) = value
"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: AcadPlaneSurfaceClass) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: AcadPlaneSurfaceClass) -> object

"""

    EdgeExtensionDistances = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EdgeExtensionDistances(self: AcadPlaneSurfaceClass) -> object

Set: EdgeExtensionDistances(self: AcadPlaneSurfaceClass) = value
"""

    EntityName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityName(self: AcadPlaneSurfaceClass) -> str

"""

    EntityTransparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityTransparency(self: AcadPlaneSurfaceClass) -> str

Set: EntityTransparency(self: AcadPlaneSurfaceClass) = value
"""

    EntityType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityType(self: AcadPlaneSurfaceClass) -> int

"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: AcadPlaneSurfaceClass) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: AcadPlaneSurfaceClass) -> bool

"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: AcadPlaneSurfaceClass) -> AcadHyperlinks

"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layer(self: AcadPlaneSurfaceClass) -> str

Set: Layer(self: AcadPlaneSurfaceClass) = value
"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: AcadPlaneSurfaceClass) -> str

Set: Linetype(self: AcadPlaneSurfaceClass) = value
"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeScale(self: AcadPlaneSurfaceClass) -> float

Set: LinetypeScale(self: AcadPlaneSurfaceClass) = value
"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: AcadPlaneSurfaceClass) -> ACAD_LWEIGHT

Set: Lineweight(self: AcadPlaneSurfaceClass) = value
"""

    MaintainAssociativity = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MaintainAssociativity(self: AcadPlaneSurfaceClass) -> int

Set: MaintainAssociativity(self: AcadPlaneSurfaceClass) = value
"""

    Material = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Material(self: AcadPlaneSurfaceClass) -> str

Set: Material(self: AcadPlaneSurfaceClass) = value
"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: AcadPlaneSurfaceClass) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: AcadPlaneSurfaceClass) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: AcadPlaneSurfaceClass) -> Int64

"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: AcadPlaneSurfaceClass) -> str

Set: PlotStyleName(self: AcadPlaneSurfaceClass) = value
"""

    ShowAssociativity = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowAssociativity(self: AcadPlaneSurfaceClass) -> bool

Set: ShowAssociativity(self: AcadPlaneSurfaceClass) = value
"""

    SurfaceType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SurfaceType(self: AcadPlaneSurfaceClass) -> str

"""

    SurfTrimAssociativity = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SurfTrimAssociativity(self: AcadPlaneSurfaceClass) -> object

Set: SurfTrimAssociativity(self: AcadPlaneSurfaceClass) = value
"""

    TrueColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TrueColor(self: AcadPlaneSurfaceClass) -> AcadAcCmColor

Set: TrueColor(self: AcadPlaneSurfaceClass) = value
"""

    UIsolineDensity = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: UIsolineDensity(self: AcadPlaneSurfaceClass) -> int

Set: UIsolineDensity(self: AcadPlaneSurfaceClass) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: AcadPlaneSurfaceClass) -> bool

Set: Visible(self: AcadPlaneSurfaceClass) = value
"""

    VIsolineDensity = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VIsolineDensity(self: AcadPlaneSurfaceClass) -> int

Set: VIsolineDensity(self: AcadPlaneSurfaceClass) = value
"""

    WireframeType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: WireframeType(self: AcadPlaneSurfaceClass) -> AcWireframeType

Set: WireframeType(self: AcadPlaneSurfaceClass) = value
"""


    Modified = None


class AcadPlotConfiguration(IAcadPlotConfiguration, IAcadObject, IAcadObjectEvents_Event):
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class AcadPlotConfigurationClass(__ComObject):
    # no doc
    def add_Modified(self, A_1):
        """ add_Modified(self: AcadPlotConfigurationClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def CopyFrom(self, pPlotConfig):
        """ CopyFrom(self: AcadPlotConfigurationClass, pPlotConfig: AcadPlotConfiguration) """
        pass

    def Delete(self):
        """ Delete(self: AcadPlotConfigurationClass) """
        pass

    def Erase(self):
        """ Erase(self: AcadPlotConfigurationClass) """
        pass

    def GetCanonicalMediaNames(self):
        """ GetCanonicalMediaNames(self: AcadPlotConfigurationClass) -> object """
        pass

    def GetCustomScale(self, Numerator, Denominator):
        """ GetCustomScale(self: AcadPlotConfigurationClass) -> (float, float) """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: AcadPlotConfigurationClass) -> AcadDictionary """
        pass

    def GetLocaleMediaName(self, Name):
        """ GetLocaleMediaName(self: AcadPlotConfigurationClass, Name: str) -> str """
        pass

    def GetPaperMargins(self, LowerLeft, UpperRight):
        """ GetPaperMargins(self: AcadPlotConfigurationClass) -> (object, object) """
        pass

    def GetPaperSize(self, Width, Height):
        """ GetPaperSize(self: AcadPlotConfigurationClass) -> (float, float) """
        pass

    def GetPlotDeviceNames(self):
        """ GetPlotDeviceNames(self: AcadPlotConfigurationClass) -> object """
        pass

    def GetPlotStyleTableNames(self):
        """ GetPlotStyleTableNames(self: AcadPlotConfigurationClass) -> object """
        pass

    def GetWindowToPlot(self, LowerLeft, UpperRight):
        """ GetWindowToPlot(self: AcadPlotConfigurationClass) -> (object, object) """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: AcadPlotConfigurationClass, AppName: str) -> (object, object) """
        pass

    def RefreshPlotDeviceInfo(self):
        """ RefreshPlotDeviceInfo(self: AcadPlotConfigurationClass) """
        pass

    def remove_Modified(self, A_1):
        """ remove_Modified(self: AcadPlotConfigurationClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def SetCustomScale(self, Numerator, Denominator):
        """ SetCustomScale(self: AcadPlotConfigurationClass, Numerator: float, Denominator: float) """
        pass

    def SetWindowToPlot(self, LowerLeft, UpperRight):
        """ SetWindowToPlot(self: AcadPlotConfigurationClass, LowerLeft: object, UpperRight: object) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: AcadPlotConfigurationClass, XDataType: object, XDataValue: object) """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: AcadPlotConfigurationClass) -> object

"""

    CanonicalMediaName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CanonicalMediaName(self: AcadPlotConfigurationClass) -> str

Set: CanonicalMediaName(self: AcadPlotConfigurationClass) = value
"""

    CenterPlot = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CenterPlot(self: AcadPlotConfigurationClass) -> bool

Set: CenterPlot(self: AcadPlotConfigurationClass) = value
"""

    ConfigName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ConfigName(self: AcadPlotConfigurationClass) -> str

Set: ConfigName(self: AcadPlotConfigurationClass) = value
"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: AcadPlotConfigurationClass) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: AcadPlotConfigurationClass) -> object

"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: AcadPlotConfigurationClass) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: AcadPlotConfigurationClass) -> bool

"""

    ModelType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ModelType(self: AcadPlotConfigurationClass) -> bool

"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: AcadPlotConfigurationClass) -> str

Set: Name(self: AcadPlotConfigurationClass) = value
"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: AcadPlotConfigurationClass) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: AcadPlotConfigurationClass) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: AcadPlotConfigurationClass) -> Int64

"""

    PaperUnits = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PaperUnits(self: AcadPlotConfigurationClass) -> AcPlotPaperUnits

Set: PaperUnits(self: AcadPlotConfigurationClass) = value
"""

    PlotHidden = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotHidden(self: AcadPlotConfigurationClass) -> bool

Set: PlotHidden(self: AcadPlotConfigurationClass) = value
"""

    PlotOrigin = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotOrigin(self: AcadPlotConfigurationClass) -> object

Set: PlotOrigin(self: AcadPlotConfigurationClass) = value
"""

    PlotRotation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotRotation(self: AcadPlotConfigurationClass) -> AcPlotRotation

Set: PlotRotation(self: AcadPlotConfigurationClass) = value
"""

    PlotType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotType(self: AcadPlotConfigurationClass) -> AcPlotType

Set: PlotType(self: AcadPlotConfigurationClass) = value
"""

    PlotViewportBorders = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotViewportBorders(self: AcadPlotConfigurationClass) -> bool

Set: PlotViewportBorders(self: AcadPlotConfigurationClass) = value
"""

    PlotViewportsFirst = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotViewportsFirst(self: AcadPlotConfigurationClass) -> bool

Set: PlotViewportsFirst(self: AcadPlotConfigurationClass) = value
"""

    PlotWithLineweights = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotWithLineweights(self: AcadPlotConfigurationClass) -> bool

Set: PlotWithLineweights(self: AcadPlotConfigurationClass) = value
"""

    PlotWithPlotStyles = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotWithPlotStyles(self: AcadPlotConfigurationClass) -> bool

Set: PlotWithPlotStyles(self: AcadPlotConfigurationClass) = value
"""

    ScaleLineweights = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ScaleLineweights(self: AcadPlotConfigurationClass) -> bool

Set: ScaleLineweights(self: AcadPlotConfigurationClass) = value
"""

    ShowPlotStyles = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowPlotStyles(self: AcadPlotConfigurationClass) -> bool

Set: ShowPlotStyles(self: AcadPlotConfigurationClass) = value
"""

    StandardScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: StandardScale(self: AcadPlotConfigurationClass) -> AcPlotScale

Set: StandardScale(self: AcadPlotConfigurationClass) = value
"""

    StyleSheet = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: StyleSheet(self: AcadPlotConfigurationClass) -> str

Set: StyleSheet(self: AcadPlotConfigurationClass) = value
"""

    UseStandardScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: UseStandardScale(self: AcadPlotConfigurationClass) -> bool

Set: UseStandardScale(self: AcadPlotConfigurationClass) = value
"""

    ViewToPlot = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ViewToPlot(self: AcadPlotConfigurationClass) -> str

Set: ViewToPlot(self: AcadPlotConfigurationClass) = value
"""


    Modified = None


class IAcadPlotConfigurations(IAcadObject, IEnumerable):
    # no doc
    def Add(self, Name, ModelType):
        """ Add(self: IAcadPlotConfigurations, Name: str, ModelType: object) -> AcadPlotConfiguration """
        pass

    def Delete(self):
        """ Delete(self: IAcadPlotConfigurations) """
        pass

    def Erase(self):
        """ Erase(self: IAcadPlotConfigurations) """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: IAcadPlotConfigurations) -> IEnumerator """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: IAcadPlotConfigurations) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: IAcadPlotConfigurations, AppName: str) -> (object, object) """
        pass

    def Item(self, Index):
        """ Item(self: IAcadPlotConfigurations, Index: object) -> AcadPlotConfiguration """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: IAcadPlotConfigurations, XDataType: object, XDataValue: object) """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerable) -> object """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IAcadPlotConfigurations) -> object

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: IAcadPlotConfigurations) -> int

"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: IAcadPlotConfigurations) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: IAcadPlotConfigurations) -> object

"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: IAcadPlotConfigurations) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: IAcadPlotConfigurations) -> bool

"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: IAcadPlotConfigurations) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: IAcadPlotConfigurations) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: IAcadPlotConfigurations) -> Int64

"""



class AcadPlotConfigurations(IAcadPlotConfigurations, IAcadObject, IEnumerable, IAcadObjectEvents_Event):
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerable) -> object """
        pass


class AcadPlotConfigurationsClass(__ComObject):
    # no doc
    def Add(self, Name, ModelType):
        """ Add(self: AcadPlotConfigurationsClass, Name: str, ModelType: object) -> AcadPlotConfiguration """
        pass

    def add_Modified(self, A_1):
        """ add_Modified(self: AcadPlotConfigurationsClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def Delete(self):
        """ Delete(self: AcadPlotConfigurationsClass) """
        pass

    def Erase(self):
        """ Erase(self: AcadPlotConfigurationsClass) """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: AcadPlotConfigurationsClass) -> IEnumerator """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: AcadPlotConfigurationsClass) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: AcadPlotConfigurationsClass, AppName: str) -> (object, object) """
        pass

    def Item(self, Index):
        """ Item(self: AcadPlotConfigurationsClass, Index: object) -> AcadPlotConfiguration """
        pass

    def remove_Modified(self, A_1):
        """ remove_Modified(self: AcadPlotConfigurationsClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: AcadPlotConfigurationsClass, XDataType: object, XDataValue: object) """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerable) -> object """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: AcadPlotConfigurationsClass) -> object

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: AcadPlotConfigurationsClass) -> int

"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: AcadPlotConfigurationsClass) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: AcadPlotConfigurationsClass) -> object

"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: AcadPlotConfigurationsClass) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: AcadPlotConfigurationsClass) -> bool

"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: AcadPlotConfigurationsClass) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: AcadPlotConfigurationsClass) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: AcadPlotConfigurationsClass) -> Int64

"""


    Modified = None


class IAcadPoint(IAcadEntity, IAcadObject):
    # no doc
    def ArrayPolar(self, NumberOfObjects, AngleToFill, CenterPoint):
        """ ArrayPolar(self: IAcadPoint, NumberOfObjects: int, AngleToFill: float, CenterPoint: object) -> object """
        pass

    def ArrayRectangular(self, NumberOfRows, NumberOfColumns, NumberOfLevels, DistBetweenRows, DistBetweenCols, DistBetweenLevels):
        """ ArrayRectangular(self: IAcadPoint, NumberOfRows: int, NumberOfColumns: int, NumberOfLevels: int, DistBetweenRows: float, DistBetweenCols: float, DistBetweenLevels: float) -> object """
        pass

    def Copy(self):
        """ Copy(self: IAcadPoint) -> object """
        pass

    def Delete(self):
        """ Delete(self: IAcadPoint) """
        pass

    def Erase(self):
        """ Erase(self: IAcadPoint) """
        pass

    def GetBoundingBox(self, MinPoint, MaxPoint):
        """ GetBoundingBox(self: IAcadPoint) -> (object, object) """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: IAcadPoint) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: IAcadPoint, AppName: str) -> (object, object) """
        pass

    def Highlight(self, HighlightFlag):
        """ Highlight(self: IAcadPoint, HighlightFlag: bool) """
        pass

    def IntersectWith(self, IntersectObject, option):
        """ IntersectWith(self: IAcadPoint, IntersectObject: object, option: AcExtendOption) -> object """
        pass

    def Mirror(self, Point1, Point2):
        """ Mirror(self: IAcadPoint, Point1: object, Point2: object) -> object """
        pass

    def Mirror3D(self, Point1, Point2, point3):
        """ Mirror3D(self: IAcadPoint, Point1: object, Point2: object, point3: object) -> object """
        pass

    def Move(self, FromPoint, ToPoint):
        """ Move(self: IAcadPoint, FromPoint: object, ToPoint: object) """
        pass

    def Rotate(self, BasePoint, RotationAngle):
        """ Rotate(self: IAcadPoint, BasePoint: object, RotationAngle: float) """
        pass

    def Rotate3D(self, Point1, Point2, RotationAngle):
        """ Rotate3D(self: IAcadPoint, Point1: object, Point2: object, RotationAngle: float) """
        pass

    def ScaleEntity(self, BasePoint, ScaleFactor):
        """ ScaleEntity(self: IAcadPoint, BasePoint: object, ScaleFactor: float) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: IAcadPoint, XDataType: object, XDataValue: object) """
        pass

    def TransformBy(self, TransformationMatrix):
        """ TransformBy(self: IAcadPoint, TransformationMatrix: object) """
        pass

    def Update(self):
        """ Update(self: IAcadPoint) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IAcadPoint) -> object

"""

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: IAcadPoint) -> ACAD_COLOR

Set: color(self: IAcadPoint) = value
"""

    Coordinates = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Coordinates(self: IAcadPoint) -> object

Set: Coordinates(self: IAcadPoint) = value
"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: IAcadPoint) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: IAcadPoint) -> object

"""

    EntityName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityName(self: IAcadPoint) -> str

"""

    EntityTransparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityTransparency(self: IAcadPoint) -> str

Set: EntityTransparency(self: IAcadPoint) = value
"""

    EntityType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityType(self: IAcadPoint) -> int

"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: IAcadPoint) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: IAcadPoint) -> bool

"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: IAcadPoint) -> AcadHyperlinks

"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layer(self: IAcadPoint) -> str

Set: Layer(self: IAcadPoint) = value
"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: IAcadPoint) -> str

Set: Linetype(self: IAcadPoint) = value
"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeScale(self: IAcadPoint) -> float

Set: LinetypeScale(self: IAcadPoint) = value
"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: IAcadPoint) -> ACAD_LWEIGHT

Set: Lineweight(self: IAcadPoint) = value
"""

    Material = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Material(self: IAcadPoint) -> str

Set: Material(self: IAcadPoint) = value
"""

    Normal = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Normal(self: IAcadPoint) -> object

Set: Normal(self: IAcadPoint) = value
"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: IAcadPoint) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: IAcadPoint) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: IAcadPoint) -> Int64

"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: IAcadPoint) -> str

Set: PlotStyleName(self: IAcadPoint) = value
"""

    Thickness = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Thickness(self: IAcadPoint) -> float

Set: Thickness(self: IAcadPoint) = value
"""

    TrueColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TrueColor(self: IAcadPoint) -> AcadAcCmColor

Set: TrueColor(self: IAcadPoint) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: IAcadPoint) -> bool

Set: Visible(self: IAcadPoint) = value
"""



class AcadPoint(IAcadPoint, IAcadEntity, IAcadObject, IAcadObjectEvents_Event):
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class AcadPointClass(__ComObject):
    # no doc
    def add_Modified(self, A_1):
        """ add_Modified(self: AcadPointClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def ArrayPolar(self, NumberOfObjects, AngleToFill, CenterPoint):
        """ ArrayPolar(self: AcadPointClass, NumberOfObjects: int, AngleToFill: float, CenterPoint: object) -> object """
        pass

    def ArrayRectangular(self, NumberOfRows, NumberOfColumns, NumberOfLevels, DistBetweenRows, DistBetweenCols, DistBetweenLevels):
        """ ArrayRectangular(self: AcadPointClass, NumberOfRows: int, NumberOfColumns: int, NumberOfLevels: int, DistBetweenRows: float, DistBetweenCols: float, DistBetweenLevels: float) -> object """
        pass

    def Copy(self):
        """ Copy(self: AcadPointClass) -> object """
        pass

    def Delete(self):
        """ Delete(self: AcadPointClass) """
        pass

    def Erase(self):
        """ Erase(self: AcadPointClass) """
        pass

    def GetBoundingBox(self, MinPoint, MaxPoint):
        """ GetBoundingBox(self: AcadPointClass) -> (object, object) """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: AcadPointClass) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: AcadPointClass, AppName: str) -> (object, object) """
        pass

    def Highlight(self, HighlightFlag):
        """ Highlight(self: AcadPointClass, HighlightFlag: bool) """
        pass

    def IntersectWith(self, IntersectObject, option):
        """ IntersectWith(self: AcadPointClass, IntersectObject: object, option: AcExtendOption) -> object """
        pass

    def Mirror(self, Point1, Point2):
        """ Mirror(self: AcadPointClass, Point1: object, Point2: object) -> object """
        pass

    def Mirror3D(self, Point1, Point2, point3):
        """ Mirror3D(self: AcadPointClass, Point1: object, Point2: object, point3: object) -> object """
        pass

    def Move(self, FromPoint, ToPoint):
        """ Move(self: AcadPointClass, FromPoint: object, ToPoint: object) """
        pass

    def remove_Modified(self, A_1):
        """ remove_Modified(self: AcadPointClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def Rotate(self, BasePoint, RotationAngle):
        """ Rotate(self: AcadPointClass, BasePoint: object, RotationAngle: float) """
        pass

    def Rotate3D(self, Point1, Point2, RotationAngle):
        """ Rotate3D(self: AcadPointClass, Point1: object, Point2: object, RotationAngle: float) """
        pass

    def ScaleEntity(self, BasePoint, ScaleFactor):
        """ ScaleEntity(self: AcadPointClass, BasePoint: object, ScaleFactor: float) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: AcadPointClass, XDataType: object, XDataValue: object) """
        pass

    def TransformBy(self, TransformationMatrix):
        """ TransformBy(self: AcadPointClass, TransformationMatrix: object) """
        pass

    def Update(self):
        """ Update(self: AcadPointClass) """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: AcadPointClass) -> object

"""

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: AcadPointClass) -> ACAD_COLOR

Set: color(self: AcadPointClass) = value
"""

    Coordinates = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Coordinates(self: AcadPointClass) -> object

Set: Coordinates(self: AcadPointClass) = value
"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: AcadPointClass) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: AcadPointClass) -> object

"""

    EntityName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityName(self: AcadPointClass) -> str

"""

    EntityTransparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityTransparency(self: AcadPointClass) -> str

Set: EntityTransparency(self: AcadPointClass) = value
"""

    EntityType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityType(self: AcadPointClass) -> int

"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: AcadPointClass) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: AcadPointClass) -> bool

"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: AcadPointClass) -> AcadHyperlinks

"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layer(self: AcadPointClass) -> str

Set: Layer(self: AcadPointClass) = value
"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: AcadPointClass) -> str

Set: Linetype(self: AcadPointClass) = value
"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeScale(self: AcadPointClass) -> float

Set: LinetypeScale(self: AcadPointClass) = value
"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: AcadPointClass) -> ACAD_LWEIGHT

Set: Lineweight(self: AcadPointClass) = value
"""

    Material = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Material(self: AcadPointClass) -> str

Set: Material(self: AcadPointClass) = value
"""

    Normal = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Normal(self: AcadPointClass) -> object

Set: Normal(self: AcadPointClass) = value
"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: AcadPointClass) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: AcadPointClass) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: AcadPointClass) -> Int64

"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: AcadPointClass) -> str

Set: PlotStyleName(self: AcadPointClass) = value
"""

    Thickness = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Thickness(self: AcadPointClass) -> float

Set: Thickness(self: AcadPointClass) = value
"""

    TrueColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TrueColor(self: AcadPointClass) -> AcadAcCmColor

Set: TrueColor(self: AcadPointClass) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: AcadPointClass) -> bool

Set: Visible(self: AcadPointClass) = value
"""


    Modified = None


class IAcadPointCloud(IAcadEntity, IAcadObject):
    # no doc
    def ArrayPolar(self, NumberOfObjects, AngleToFill, CenterPoint):
        """ ArrayPolar(self: IAcadPointCloud, NumberOfObjects: int, AngleToFill: float, CenterPoint: object) -> object """
        pass

    def ArrayRectangular(self, NumberOfRows, NumberOfColumns, NumberOfLevels, DistBetweenRows, DistBetweenCols, DistBetweenLevels):
        """ ArrayRectangular(self: IAcadPointCloud, NumberOfRows: int, NumberOfColumns: int, NumberOfLevels: int, DistBetweenRows: float, DistBetweenCols: float, DistBetweenLevels: float) -> object """
        pass

    def Copy(self):
        """ Copy(self: IAcadPointCloud) -> object """
        pass

    def Delete(self):
        """ Delete(self: IAcadPointCloud) """
        pass

    def Erase(self):
        """ Erase(self: IAcadPointCloud) """
        pass

    def GetBoundingBox(self, MinPoint, MaxPoint):
        """ GetBoundingBox(self: IAcadPointCloud) -> (object, object) """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: IAcadPointCloud) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: IAcadPointCloud, AppName: str) -> (object, object) """
        pass

    def Highlight(self, HighlightFlag):
        """ Highlight(self: IAcadPointCloud, HighlightFlag: bool) """
        pass

    def IntersectWith(self, IntersectObject, option):
        """ IntersectWith(self: IAcadPointCloud, IntersectObject: object, option: AcExtendOption) -> object """
        pass

    def Mirror(self, Point1, Point2):
        """ Mirror(self: IAcadPointCloud, Point1: object, Point2: object) -> object """
        pass

    def Mirror3D(self, Point1, Point2, point3):
        """ Mirror3D(self: IAcadPointCloud, Point1: object, Point2: object, point3: object) -> object """
        pass

    def Move(self, FromPoint, ToPoint):
        """ Move(self: IAcadPointCloud, FromPoint: object, ToPoint: object) """
        pass

    def Rotate(self, BasePoint, RotationAngle):
        """ Rotate(self: IAcadPointCloud, BasePoint: object, RotationAngle: float) """
        pass

    def Rotate3D(self, Point1, Point2, RotationAngle):
        """ Rotate3D(self: IAcadPointCloud, Point1: object, Point2: object, RotationAngle: float) """
        pass

    def ScaleEntity(self, BasePoint, ScaleFactor):
        """ ScaleEntity(self: IAcadPointCloud, BasePoint: object, ScaleFactor: float) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: IAcadPointCloud, XDataType: object, XDataValue: object) """
        pass

    def TransformBy(self, TransformationMatrix):
        """ TransformBy(self: IAcadPointCloud, TransformationMatrix: object) """
        pass

    def Update(self):
        """ Update(self: IAcadPointCloud) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IAcadPointCloud) -> object

"""

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: IAcadPointCloud) -> ACAD_COLOR

Set: color(self: IAcadPointCloud) = value
"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: IAcadPointCloud) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: IAcadPointCloud) -> object

"""

    EntityName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityName(self: IAcadPointCloud) -> str

"""

    EntityTransparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityTransparency(self: IAcadPointCloud) -> str

Set: EntityTransparency(self: IAcadPointCloud) = value
"""

    EntityType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityType(self: IAcadPointCloud) -> int

"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: IAcadPointCloud) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: IAcadPointCloud) -> bool

"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: IAcadPointCloud) -> float

Set: Height(self: IAcadPointCloud) = value
"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: IAcadPointCloud) -> AcadHyperlinks

"""

    InsertionPoint = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: InsertionPoint(self: IAcadPointCloud) -> object

Set: InsertionPoint(self: IAcadPointCloud) = value
"""

    IntensityColorScheme = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IntensityColorScheme(self: IAcadPointCloud) -> AcPointCloudIntensityStyle

Set: IntensityColorScheme(self: IAcadPointCloud) = value
"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layer(self: IAcadPointCloud) -> str

Set: Layer(self: IAcadPointCloud) = value
"""

    Length = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Length(self: IAcadPointCloud) -> float

Set: Length(self: IAcadPointCloud) = value
"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: IAcadPointCloud) -> str

Set: Linetype(self: IAcadPointCloud) = value
"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeScale(self: IAcadPointCloud) -> float

Set: LinetypeScale(self: IAcadPointCloud) = value
"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: IAcadPointCloud) -> ACAD_LWEIGHT

Set: Lineweight(self: IAcadPointCloud) = value
"""

    Locked = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Locked(self: IAcadPointCloud) -> bool

Set: Locked(self: IAcadPointCloud) = value
"""

    Material = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Material(self: IAcadPointCloud) -> str

Set: Material(self: IAcadPointCloud) = value
"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: IAcadPointCloud) -> str

"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: IAcadPointCloud) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: IAcadPointCloud) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: IAcadPointCloud) -> Int64

"""

    Path = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Path(self: IAcadPointCloud) -> str

"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: IAcadPointCloud) -> str

Set: PlotStyleName(self: IAcadPointCloud) = value
"""

    Rotation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Rotation(self: IAcadPointCloud) -> float

Set: Rotation(self: IAcadPointCloud) = value
"""

    scale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: scale(self: IAcadPointCloud) -> float

Set: scale(self: IAcadPointCloud) = value
"""

    ShowClipped = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowClipped(self: IAcadPointCloud) -> bool

Set: ShowClipped(self: IAcadPointCloud) = value
"""

    ShowIntensity = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowIntensity(self: IAcadPointCloud) -> bool

Set: ShowIntensity(self: IAcadPointCloud) = value
"""

    Stylization = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Stylization(self: IAcadPointCloud) -> AcPointCloudStylizationType

Set: Stylization(self: IAcadPointCloud) = value
"""

    TrueColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TrueColor(self: IAcadPointCloud) -> AcadAcCmColor

Set: TrueColor(self: IAcadPointCloud) = value
"""

    Unit = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Unit(self: IAcadPointCloud) -> str

"""

    UnitFactor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: UnitFactor(self: IAcadPointCloud) -> float

"""

    UseEntityColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: UseEntityColor(self: IAcadPointCloud) -> AcPointCloudColorType

Set: UseEntityColor(self: IAcadPointCloud) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: IAcadPointCloud) -> bool

Set: Visible(self: IAcadPointCloud) = value
"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: IAcadPointCloud) -> float

Set: Width(self: IAcadPointCloud) = value
"""



class AcadPointCloud(IAcadPointCloud, IAcadEntity, IAcadObject, IAcadObjectEvents_Event):
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class AcadPointCloudClass(__ComObject):
    # no doc
    def add_Modified(self, A_1):
        """ add_Modified(self: AcadPointCloudClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def ArrayPolar(self, NumberOfObjects, AngleToFill, CenterPoint):
        """ ArrayPolar(self: AcadPointCloudClass, NumberOfObjects: int, AngleToFill: float, CenterPoint: object) -> object """
        pass

    def ArrayRectangular(self, NumberOfRows, NumberOfColumns, NumberOfLevels, DistBetweenRows, DistBetweenCols, DistBetweenLevels):
        """ ArrayRectangular(self: AcadPointCloudClass, NumberOfRows: int, NumberOfColumns: int, NumberOfLevels: int, DistBetweenRows: float, DistBetweenCols: float, DistBetweenLevels: float) -> object """
        pass

    def Copy(self):
        """ Copy(self: AcadPointCloudClass) -> object """
        pass

    def Delete(self):
        """ Delete(self: AcadPointCloudClass) """
        pass

    def Erase(self):
        """ Erase(self: AcadPointCloudClass) """
        pass

    def GetBoundingBox(self, MinPoint, MaxPoint):
        """ GetBoundingBox(self: AcadPointCloudClass) -> (object, object) """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: AcadPointCloudClass) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: AcadPointCloudClass, AppName: str) -> (object, object) """
        pass

    def Highlight(self, HighlightFlag):
        """ Highlight(self: AcadPointCloudClass, HighlightFlag: bool) """
        pass

    def IntersectWith(self, IntersectObject, option):
        """ IntersectWith(self: AcadPointCloudClass, IntersectObject: object, option: AcExtendOption) -> object """
        pass

    def Mirror(self, Point1, Point2):
        """ Mirror(self: AcadPointCloudClass, Point1: object, Point2: object) -> object """
        pass

    def Mirror3D(self, Point1, Point2, point3):
        """ Mirror3D(self: AcadPointCloudClass, Point1: object, Point2: object, point3: object) -> object """
        pass

    def Move(self, FromPoint, ToPoint):
        """ Move(self: AcadPointCloudClass, FromPoint: object, ToPoint: object) """
        pass

    def remove_Modified(self, A_1):
        """ remove_Modified(self: AcadPointCloudClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def Rotate(self, BasePoint, RotationAngle):
        """ Rotate(self: AcadPointCloudClass, BasePoint: object, RotationAngle: float) """
        pass

    def Rotate3D(self, Point1, Point2, RotationAngle):
        """ Rotate3D(self: AcadPointCloudClass, Point1: object, Point2: object, RotationAngle: float) """
        pass

    def ScaleEntity(self, BasePoint, ScaleFactor):
        """ ScaleEntity(self: AcadPointCloudClass, BasePoint: object, ScaleFactor: float) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: AcadPointCloudClass, XDataType: object, XDataValue: object) """
        pass

    def TransformBy(self, TransformationMatrix):
        """ TransformBy(self: AcadPointCloudClass, TransformationMatrix: object) """
        pass

    def Update(self):
        """ Update(self: AcadPointCloudClass) """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: AcadPointCloudClass) -> object

"""

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: AcadPointCloudClass) -> ACAD_COLOR

Set: color(self: AcadPointCloudClass) = value
"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: AcadPointCloudClass) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: AcadPointCloudClass) -> object

"""

    EntityName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityName(self: AcadPointCloudClass) -> str

"""

    EntityTransparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityTransparency(self: AcadPointCloudClass) -> str

Set: EntityTransparency(self: AcadPointCloudClass) = value
"""

    EntityType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityType(self: AcadPointCloudClass) -> int

"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: AcadPointCloudClass) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: AcadPointCloudClass) -> bool

"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: AcadPointCloudClass) -> float

Set: Height(self: AcadPointCloudClass) = value
"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: AcadPointCloudClass) -> AcadHyperlinks

"""

    InsertionPoint = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: InsertionPoint(self: AcadPointCloudClass) -> object

Set: InsertionPoint(self: AcadPointCloudClass) = value
"""

    IntensityColorScheme = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IntensityColorScheme(self: AcadPointCloudClass) -> AcPointCloudIntensityStyle

Set: IntensityColorScheme(self: AcadPointCloudClass) = value
"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layer(self: AcadPointCloudClass) -> str

Set: Layer(self: AcadPointCloudClass) = value
"""

    Length = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Length(self: AcadPointCloudClass) -> float

Set: Length(self: AcadPointCloudClass) = value
"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: AcadPointCloudClass) -> str

Set: Linetype(self: AcadPointCloudClass) = value
"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeScale(self: AcadPointCloudClass) -> float

Set: LinetypeScale(self: AcadPointCloudClass) = value
"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: AcadPointCloudClass) -> ACAD_LWEIGHT

Set: Lineweight(self: AcadPointCloudClass) = value
"""

    Locked = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Locked(self: AcadPointCloudClass) -> bool

Set: Locked(self: AcadPointCloudClass) = value
"""

    Material = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Material(self: AcadPointCloudClass) -> str

Set: Material(self: AcadPointCloudClass) = value
"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: AcadPointCloudClass) -> str

"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: AcadPointCloudClass) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: AcadPointCloudClass) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: AcadPointCloudClass) -> Int64

"""

    Path = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Path(self: AcadPointCloudClass) -> str

"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: AcadPointCloudClass) -> str

Set: PlotStyleName(self: AcadPointCloudClass) = value
"""

    Rotation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Rotation(self: AcadPointCloudClass) -> float

Set: Rotation(self: AcadPointCloudClass) = value
"""

    scale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: scale(self: AcadPointCloudClass) -> float

Set: scale(self: AcadPointCloudClass) = value
"""

    ShowClipped = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowClipped(self: AcadPointCloudClass) -> bool

Set: ShowClipped(self: AcadPointCloudClass) = value
"""

    ShowIntensity = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowIntensity(self: AcadPointCloudClass) -> bool

Set: ShowIntensity(self: AcadPointCloudClass) = value
"""

    Stylization = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Stylization(self: AcadPointCloudClass) -> AcPointCloudStylizationType

Set: Stylization(self: AcadPointCloudClass) = value
"""

    TrueColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TrueColor(self: AcadPointCloudClass) -> AcadAcCmColor

Set: TrueColor(self: AcadPointCloudClass) = value
"""

    Unit = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Unit(self: AcadPointCloudClass) -> str

"""

    UnitFactor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: UnitFactor(self: AcadPointCloudClass) -> float

"""

    UseEntityColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: UseEntityColor(self: AcadPointCloudClass) -> AcPointCloudColorType

Set: UseEntityColor(self: AcadPointCloudClass) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: AcadPointCloudClass) -> bool

Set: Visible(self: AcadPointCloudClass) = value
"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: AcadPointCloudClass) -> float

Set: Width(self: AcadPointCloudClass) = value
"""


    Modified = None


class IAcadPointCloudEx(IAcadEntity, IAcadObject):
    # no doc
    def ArrayPolar(self, NumberOfObjects, AngleToFill, CenterPoint):
        """ ArrayPolar(self: IAcadPointCloudEx, NumberOfObjects: int, AngleToFill: float, CenterPoint: object) -> object """
        pass

    def ArrayRectangular(self, NumberOfRows, NumberOfColumns, NumberOfLevels, DistBetweenRows, DistBetweenCols, DistBetweenLevels):
        """ ArrayRectangular(self: IAcadPointCloudEx, NumberOfRows: int, NumberOfColumns: int, NumberOfLevels: int, DistBetweenRows: float, DistBetweenCols: float, DistBetweenLevels: float) -> object """
        pass

    def Copy(self):
        """ Copy(self: IAcadPointCloudEx) -> object """
        pass

    def Delete(self):
        """ Delete(self: IAcadPointCloudEx) """
        pass

    def Erase(self):
        """ Erase(self: IAcadPointCloudEx) """
        pass

    def GetBoundingBox(self, MinPoint, MaxPoint):
        """ GetBoundingBox(self: IAcadPointCloudEx) -> (object, object) """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: IAcadPointCloudEx) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: IAcadPointCloudEx, AppName: str) -> (object, object) """
        pass

    def Highlight(self, HighlightFlag):
        """ Highlight(self: IAcadPointCloudEx, HighlightFlag: bool) """
        pass

    def IntersectWith(self, IntersectObject, option):
        """ IntersectWith(self: IAcadPointCloudEx, IntersectObject: object, option: AcExtendOption) -> object """
        pass

    def Mirror(self, Point1, Point2):
        """ Mirror(self: IAcadPointCloudEx, Point1: object, Point2: object) -> object """
        pass

    def Mirror3D(self, Point1, Point2, point3):
        """ Mirror3D(self: IAcadPointCloudEx, Point1: object, Point2: object, point3: object) -> object """
        pass

    def Move(self, FromPoint, ToPoint):
        """ Move(self: IAcadPointCloudEx, FromPoint: object, ToPoint: object) """
        pass

    def Rotate(self, BasePoint, RotationAngle):
        """ Rotate(self: IAcadPointCloudEx, BasePoint: object, RotationAngle: float) """
        pass

    def Rotate3D(self, Point1, Point2, RotationAngle):
        """ Rotate3D(self: IAcadPointCloudEx, Point1: object, Point2: object, RotationAngle: float) """
        pass

    def ScaleEntity(self, BasePoint, ScaleFactor):
        """ ScaleEntity(self: IAcadPointCloudEx, BasePoint: object, ScaleFactor: float) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: IAcadPointCloudEx, XDataType: object, XDataValue: object) """
        pass

    def TransformBy(self, TransformationMatrix):
        """ TransformBy(self: IAcadPointCloudEx, TransformationMatrix: object) """
        pass

    def Update(self):
        """ Update(self: IAcadPointCloudEx) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IAcadPointCloudEx) -> object

"""

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: IAcadPointCloudEx) -> ACAD_COLOR

Set: color(self: IAcadPointCloudEx) = value
"""

    ColorScheme = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ColorScheme(self: IAcadPointCloudEx) -> str

Set: ColorScheme(self: IAcadPointCloudEx) = value
"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: IAcadPointCloudEx) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: IAcadPointCloudEx) -> object

"""

    EntityName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityName(self: IAcadPointCloudEx) -> str

"""

    EntityTransparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityTransparency(self: IAcadPointCloudEx) -> str

Set: EntityTransparency(self: IAcadPointCloudEx) = value
"""

    EntityType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityType(self: IAcadPointCloudEx) -> int

"""

    Geolocate = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Geolocate(self: IAcadPointCloudEx) -> bool

Set: Geolocate(self: IAcadPointCloudEx) = value
"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: IAcadPointCloudEx) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: IAcadPointCloudEx) -> bool

"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: IAcadPointCloudEx) -> AcadHyperlinks

"""

    InsertionPoint = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: InsertionPoint(self: IAcadPointCloudEx) -> object

Set: InsertionPoint(self: IAcadPointCloudEx) = value
"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layer(self: IAcadPointCloudEx) -> str

Set: Layer(self: IAcadPointCloudEx) = value
"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: IAcadPointCloudEx) -> str

Set: Linetype(self: IAcadPointCloudEx) = value
"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeScale(self: IAcadPointCloudEx) -> float

Set: LinetypeScale(self: IAcadPointCloudEx) = value
"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: IAcadPointCloudEx) -> ACAD_LWEIGHT

Set: Lineweight(self: IAcadPointCloudEx) = value
"""

    Locked = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Locked(self: IAcadPointCloudEx) -> bool

Set: Locked(self: IAcadPointCloudEx) = value
"""

    Material = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Material(self: IAcadPointCloudEx) -> str

Set: Material(self: IAcadPointCloudEx) = value
"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: IAcadPointCloudEx) -> str

Set: Name(self: IAcadPointCloudEx) = value
"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: IAcadPointCloudEx) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: IAcadPointCloudEx) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: IAcadPointCloudEx) -> Int64

"""

    Path = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Path(self: IAcadPointCloudEx) -> str

"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: IAcadPointCloudEx) -> str

Set: PlotStyleName(self: IAcadPointCloudEx) = value
"""

    Rotation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Rotation(self: IAcadPointCloudEx) -> float

Set: Rotation(self: IAcadPointCloudEx) = value
"""

    scale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: scale(self: IAcadPointCloudEx) -> float

Set: scale(self: IAcadPointCloudEx) = value
"""

    ShowCropped = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowCropped(self: IAcadPointCloudEx) -> bool

Set: ShowCropped(self: IAcadPointCloudEx) = value
"""

    Stylization = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Stylization(self: IAcadPointCloudEx) -> AcPointCloudExStylizationType

Set: Stylization(self: IAcadPointCloudEx) = value
"""

    TrueColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TrueColor(self: IAcadPointCloudEx) -> AcadAcCmColor

Set: TrueColor(self: IAcadPointCloudEx) = value
"""

    Unit = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Unit(self: IAcadPointCloudEx) -> str

"""

    UnitFactor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: UnitFactor(self: IAcadPointCloudEx) -> float

"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: IAcadPointCloudEx) -> bool

Set: Visible(self: IAcadPointCloudEx) = value
"""



class IAcadPointCloudEx2(IAcadPointCloudEx, IAcadEntity, IAcadObject):
    # no doc
    def ArrayPolar(self, NumberOfObjects, AngleToFill, CenterPoint):
        """ ArrayPolar(self: IAcadPointCloudEx2, NumberOfObjects: int, AngleToFill: float, CenterPoint: object) -> object """
        pass

    def ArrayRectangular(self, NumberOfRows, NumberOfColumns, NumberOfLevels, DistBetweenRows, DistBetweenCols, DistBetweenLevels):
        """ ArrayRectangular(self: IAcadPointCloudEx2, NumberOfRows: int, NumberOfColumns: int, NumberOfLevels: int, DistBetweenRows: float, DistBetweenCols: float, DistBetweenLevels: float) -> object """
        pass

    def Copy(self):
        """ Copy(self: IAcadPointCloudEx2) -> object """
        pass

    def Delete(self):
        """ Delete(self: IAcadPointCloudEx2) """
        pass

    def Erase(self):
        """ Erase(self: IAcadPointCloudEx2) """
        pass

    def GetBoundingBox(self, MinPoint, MaxPoint):
        """ GetBoundingBox(self: IAcadPointCloudEx2) -> (object, object) """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: IAcadPointCloudEx2) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: IAcadPointCloudEx2, AppName: str) -> (object, object) """
        pass

    def Highlight(self, HighlightFlag):
        """ Highlight(self: IAcadPointCloudEx2, HighlightFlag: bool) """
        pass

    def IntersectWith(self, IntersectObject, option):
        """ IntersectWith(self: IAcadPointCloudEx2, IntersectObject: object, option: AcExtendOption) -> object """
        pass

    def Mirror(self, Point1, Point2):
        """ Mirror(self: IAcadPointCloudEx2, Point1: object, Point2: object) -> object """
        pass

    def Mirror3D(self, Point1, Point2, point3):
        """ Mirror3D(self: IAcadPointCloudEx2, Point1: object, Point2: object, point3: object) -> object """
        pass

    def Move(self, FromPoint, ToPoint):
        """ Move(self: IAcadPointCloudEx2, FromPoint: object, ToPoint: object) """
        pass

    def Rotate(self, BasePoint, RotationAngle):
        """ Rotate(self: IAcadPointCloudEx2, BasePoint: object, RotationAngle: float) """
        pass

    def Rotate3D(self, Point1, Point2, RotationAngle):
        """ Rotate3D(self: IAcadPointCloudEx2, Point1: object, Point2: object, RotationAngle: float) """
        pass

    def ScaleEntity(self, BasePoint, ScaleFactor):
        """ ScaleEntity(self: IAcadPointCloudEx2, BasePoint: object, ScaleFactor: float) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: IAcadPointCloudEx2, XDataType: object, XDataValue: object) """
        pass

    def TransformBy(self, TransformationMatrix):
        """ TransformBy(self: IAcadPointCloudEx2, TransformationMatrix: object) """
        pass

    def Update(self):
        """ Update(self: IAcadPointCloudEx2) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IAcadPointCloudEx2) -> object

"""

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: IAcadPointCloudEx2) -> ACAD_COLOR

Set: color(self: IAcadPointCloudEx2) = value
"""

    ColorScheme = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ColorScheme(self: IAcadPointCloudEx2) -> str

Set: ColorScheme(self: IAcadPointCloudEx2) = value
"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: IAcadPointCloudEx2) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: IAcadPointCloudEx2) -> object

"""

    EntityName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityName(self: IAcadPointCloudEx2) -> str

"""

    EntityTransparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityTransparency(self: IAcadPointCloudEx2) -> str

Set: EntityTransparency(self: IAcadPointCloudEx2) = value
"""

    EntityType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityType(self: IAcadPointCloudEx2) -> int

"""

    Geolocate = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Geolocate(self: IAcadPointCloudEx2) -> bool

Set: Geolocate(self: IAcadPointCloudEx2) = value
"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: IAcadPointCloudEx2) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: IAcadPointCloudEx2) -> bool

"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: IAcadPointCloudEx2) -> AcadHyperlinks

"""

    InsertionPoint = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: InsertionPoint(self: IAcadPointCloudEx2) -> object

Set: InsertionPoint(self: IAcadPointCloudEx2) = value
"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layer(self: IAcadPointCloudEx2) -> str

Set: Layer(self: IAcadPointCloudEx2) = value
"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: IAcadPointCloudEx2) -> str

Set: Linetype(self: IAcadPointCloudEx2) = value
"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeScale(self: IAcadPointCloudEx2) -> float

Set: LinetypeScale(self: IAcadPointCloudEx2) = value
"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: IAcadPointCloudEx2) -> ACAD_LWEIGHT

Set: Lineweight(self: IAcadPointCloudEx2) = value
"""

    Locked = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Locked(self: IAcadPointCloudEx2) -> bool

Set: Locked(self: IAcadPointCloudEx2) = value
"""

    Material = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Material(self: IAcadPointCloudEx2) -> str

Set: Material(self: IAcadPointCloudEx2) = value
"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: IAcadPointCloudEx2) -> str

Set: Name(self: IAcadPointCloudEx2) = value
"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: IAcadPointCloudEx2) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: IAcadPointCloudEx2) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: IAcadPointCloudEx2) -> Int64

"""

    Path = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Path(self: IAcadPointCloudEx2) -> str

"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: IAcadPointCloudEx2) -> str

Set: PlotStyleName(self: IAcadPointCloudEx2) = value
"""

    Rotation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Rotation(self: IAcadPointCloudEx2) -> float

Set: Rotation(self: IAcadPointCloudEx2) = value
"""

    scale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: scale(self: IAcadPointCloudEx2) -> float

Set: scale(self: IAcadPointCloudEx2) = value
"""

    Segmentation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Segmentation(self: IAcadPointCloudEx2) -> str

"""

    ShowCropped = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowCropped(self: IAcadPointCloudEx2) -> bool

Set: ShowCropped(self: IAcadPointCloudEx2) = value
"""

    Stylization = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Stylization(self: IAcadPointCloudEx2) -> AcPointCloudExStylizationType

Set: Stylization(self: IAcadPointCloudEx2) = value
"""

    TrueColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TrueColor(self: IAcadPointCloudEx2) -> AcadAcCmColor

Set: TrueColor(self: IAcadPointCloudEx2) = value
"""

    Unit = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Unit(self: IAcadPointCloudEx2) -> str

"""

    UnitFactor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: UnitFactor(self: IAcadPointCloudEx2) -> float

"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: IAcadPointCloudEx2) -> bool

Set: Visible(self: IAcadPointCloudEx2) = value
"""



class AcadPointCloudEx(IAcadPointCloudEx2, IAcadPointCloudEx, IAcadEntity, IAcadObject, IAcadObjectEvents_Event):
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class AcadPointCloudExClass(__ComObject):
    # no doc
    def add_Modified(self, A_1):
        """ add_Modified(self: AcadPointCloudExClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def ArrayPolar(self, NumberOfObjects, AngleToFill, CenterPoint):
        """ ArrayPolar(self: AcadPointCloudExClass, NumberOfObjects: int, AngleToFill: float, CenterPoint: object) -> object """
        pass

    def ArrayRectangular(self, NumberOfRows, NumberOfColumns, NumberOfLevels, DistBetweenRows, DistBetweenCols, DistBetweenLevels):
        """ ArrayRectangular(self: AcadPointCloudExClass, NumberOfRows: int, NumberOfColumns: int, NumberOfLevels: int, DistBetweenRows: float, DistBetweenCols: float, DistBetweenLevels: float) -> object """
        pass

    def Copy(self):
        """ Copy(self: AcadPointCloudExClass) -> object """
        pass

    def Delete(self):
        """ Delete(self: AcadPointCloudExClass) """
        pass

    def Erase(self):
        """ Erase(self: AcadPointCloudExClass) """
        pass

    def GetBoundingBox(self, MinPoint, MaxPoint):
        """ GetBoundingBox(self: AcadPointCloudExClass) -> (object, object) """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: AcadPointCloudExClass) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: AcadPointCloudExClass, AppName: str) -> (object, object) """
        pass

    def Highlight(self, HighlightFlag):
        """ Highlight(self: AcadPointCloudExClass, HighlightFlag: bool) """
        pass

    def IntersectWith(self, IntersectObject, option):
        """ IntersectWith(self: AcadPointCloudExClass, IntersectObject: object, option: AcExtendOption) -> object """
        pass

    def Mirror(self, Point1, Point2):
        """ Mirror(self: AcadPointCloudExClass, Point1: object, Point2: object) -> object """
        pass

    def Mirror3D(self, Point1, Point2, point3):
        """ Mirror3D(self: AcadPointCloudExClass, Point1: object, Point2: object, point3: object) -> object """
        pass

    def Move(self, FromPoint, ToPoint):
        """ Move(self: AcadPointCloudExClass, FromPoint: object, ToPoint: object) """
        pass

    def remove_Modified(self, A_1):
        """ remove_Modified(self: AcadPointCloudExClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def Rotate(self, BasePoint, RotationAngle):
        """ Rotate(self: AcadPointCloudExClass, BasePoint: object, RotationAngle: float) """
        pass

    def Rotate3D(self, Point1, Point2, RotationAngle):
        """ Rotate3D(self: AcadPointCloudExClass, Point1: object, Point2: object, RotationAngle: float) """
        pass

    def ScaleEntity(self, BasePoint, ScaleFactor):
        """ ScaleEntity(self: AcadPointCloudExClass, BasePoint: object, ScaleFactor: float) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: AcadPointCloudExClass, XDataType: object, XDataValue: object) """
        pass

    def TransformBy(self, TransformationMatrix):
        """ TransformBy(self: AcadPointCloudExClass, TransformationMatrix: object) """
        pass

    def Update(self):
        """ Update(self: AcadPointCloudExClass) """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: AcadPointCloudExClass) -> object

"""

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: AcadPointCloudExClass) -> ACAD_COLOR

Set: color(self: AcadPointCloudExClass) = value
"""

    ColorScheme = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ColorScheme(self: AcadPointCloudExClass) -> str

Set: ColorScheme(self: AcadPointCloudExClass) = value
"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: AcadPointCloudExClass) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: AcadPointCloudExClass) -> object

"""

    EntityName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityName(self: AcadPointCloudExClass) -> str

"""

    EntityTransparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityTransparency(self: AcadPointCloudExClass) -> str

Set: EntityTransparency(self: AcadPointCloudExClass) = value
"""

    EntityType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityType(self: AcadPointCloudExClass) -> int

"""

    Geolocate = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Geolocate(self: AcadPointCloudExClass) -> bool

Set: Geolocate(self: AcadPointCloudExClass) = value
"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: AcadPointCloudExClass) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: AcadPointCloudExClass) -> bool

"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: AcadPointCloudExClass) -> AcadHyperlinks

"""

    InsertionPoint = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: InsertionPoint(self: AcadPointCloudExClass) -> object

Set: InsertionPoint(self: AcadPointCloudExClass) = value
"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layer(self: AcadPointCloudExClass) -> str

Set: Layer(self: AcadPointCloudExClass) = value
"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: AcadPointCloudExClass) -> str

Set: Linetype(self: AcadPointCloudExClass) = value
"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeScale(self: AcadPointCloudExClass) -> float

Set: LinetypeScale(self: AcadPointCloudExClass) = value
"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: AcadPointCloudExClass) -> ACAD_LWEIGHT

Set: Lineweight(self: AcadPointCloudExClass) = value
"""

    Locked = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Locked(self: AcadPointCloudExClass) -> bool

Set: Locked(self: AcadPointCloudExClass) = value
"""

    Material = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Material(self: AcadPointCloudExClass) -> str

Set: Material(self: AcadPointCloudExClass) = value
"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: AcadPointCloudExClass) -> str

Set: Name(self: AcadPointCloudExClass) = value
"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: AcadPointCloudExClass) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: AcadPointCloudExClass) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: AcadPointCloudExClass) -> Int64

"""

    Path = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Path(self: AcadPointCloudExClass) -> str

"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: AcadPointCloudExClass) -> str

Set: PlotStyleName(self: AcadPointCloudExClass) = value
"""

    Rotation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Rotation(self: AcadPointCloudExClass) -> float

Set: Rotation(self: AcadPointCloudExClass) = value
"""

    scale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: scale(self: AcadPointCloudExClass) -> float

Set: scale(self: AcadPointCloudExClass) = value
"""

    Segmentation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Segmentation(self: AcadPointCloudExClass) -> str

"""

    ShowCropped = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowCropped(self: AcadPointCloudExClass) -> bool

Set: ShowCropped(self: AcadPointCloudExClass) = value
"""

    Stylization = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Stylization(self: AcadPointCloudExClass) -> AcPointCloudExStylizationType

Set: Stylization(self: AcadPointCloudExClass) = value
"""

    TrueColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TrueColor(self: AcadPointCloudExClass) -> AcadAcCmColor

Set: TrueColor(self: AcadPointCloudExClass) = value
"""

    Unit = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Unit(self: AcadPointCloudExClass) -> str

"""

    UnitFactor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: UnitFactor(self: AcadPointCloudExClass) -> float

"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: AcadPointCloudExClass) -> bool

Set: Visible(self: AcadPointCloudExClass) = value
"""


    Modified = None


class IAcadPolyfaceMesh(IAcadEntity, IAcadObject):
    # no doc
    def ArrayPolar(self, NumberOfObjects, AngleToFill, CenterPoint):
        """ ArrayPolar(self: IAcadPolyfaceMesh, NumberOfObjects: int, AngleToFill: float, CenterPoint: object) -> object """
        pass

    def ArrayRectangular(self, NumberOfRows, NumberOfColumns, NumberOfLevels, DistBetweenRows, DistBetweenCols, DistBetweenLevels):
        """ ArrayRectangular(self: IAcadPolyfaceMesh, NumberOfRows: int, NumberOfColumns: int, NumberOfLevels: int, DistBetweenRows: float, DistBetweenCols: float, DistBetweenLevels: float) -> object """
        pass

    def Copy(self):
        """ Copy(self: IAcadPolyfaceMesh) -> object """
        pass

    def Delete(self):
        """ Delete(self: IAcadPolyfaceMesh) """
        pass

    def Erase(self):
        """ Erase(self: IAcadPolyfaceMesh) """
        pass

    def GetBoundingBox(self, MinPoint, MaxPoint):
        """ GetBoundingBox(self: IAcadPolyfaceMesh) -> (object, object) """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: IAcadPolyfaceMesh) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: IAcadPolyfaceMesh, AppName: str) -> (object, object) """
        pass

    def Highlight(self, HighlightFlag):
        """ Highlight(self: IAcadPolyfaceMesh, HighlightFlag: bool) """
        pass

    def IntersectWith(self, IntersectObject, option):
        """ IntersectWith(self: IAcadPolyfaceMesh, IntersectObject: object, option: AcExtendOption) -> object """
        pass

    def Mirror(self, Point1, Point2):
        """ Mirror(self: IAcadPolyfaceMesh, Point1: object, Point2: object) -> object """
        pass

    def Mirror3D(self, Point1, Point2, point3):
        """ Mirror3D(self: IAcadPolyfaceMesh, Point1: object, Point2: object, point3: object) -> object """
        pass

    def Move(self, FromPoint, ToPoint):
        """ Move(self: IAcadPolyfaceMesh, FromPoint: object, ToPoint: object) """
        pass

    def Rotate(self, BasePoint, RotationAngle):
        """ Rotate(self: IAcadPolyfaceMesh, BasePoint: object, RotationAngle: float) """
        pass

    def Rotate3D(self, Point1, Point2, RotationAngle):
        """ Rotate3D(self: IAcadPolyfaceMesh, Point1: object, Point2: object, RotationAngle: float) """
        pass

    def ScaleEntity(self, BasePoint, ScaleFactor):
        """ ScaleEntity(self: IAcadPolyfaceMesh, BasePoint: object, ScaleFactor: float) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: IAcadPolyfaceMesh, XDataType: object, XDataValue: object) """
        pass

    def TransformBy(self, TransformationMatrix):
        """ TransformBy(self: IAcadPolyfaceMesh, TransformationMatrix: object) """
        pass

    def Update(self):
        """ Update(self: IAcadPolyfaceMesh) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IAcadPolyfaceMesh) -> object

"""

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: IAcadPolyfaceMesh) -> ACAD_COLOR

Set: color(self: IAcadPolyfaceMesh) = value
"""

    Coordinates = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Coordinates(self: IAcadPolyfaceMesh) -> object

Set: Coordinates(self: IAcadPolyfaceMesh) = value
"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: IAcadPolyfaceMesh) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: IAcadPolyfaceMesh) -> object

"""

    EntityName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityName(self: IAcadPolyfaceMesh) -> str

"""

    EntityTransparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityTransparency(self: IAcadPolyfaceMesh) -> str

Set: EntityTransparency(self: IAcadPolyfaceMesh) = value
"""

    EntityType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityType(self: IAcadPolyfaceMesh) -> int

"""

    Faces = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Set: Faces(self: IAcadPolyfaceMesh) = value
"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: IAcadPolyfaceMesh) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: IAcadPolyfaceMesh) -> bool

"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: IAcadPolyfaceMesh) -> AcadHyperlinks

"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layer(self: IAcadPolyfaceMesh) -> str

Set: Layer(self: IAcadPolyfaceMesh) = value
"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: IAcadPolyfaceMesh) -> str

Set: Linetype(self: IAcadPolyfaceMesh) = value
"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeScale(self: IAcadPolyfaceMesh) -> float

Set: LinetypeScale(self: IAcadPolyfaceMesh) = value
"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: IAcadPolyfaceMesh) -> ACAD_LWEIGHT

Set: Lineweight(self: IAcadPolyfaceMesh) = value
"""

    Material = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Material(self: IAcadPolyfaceMesh) -> str

Set: Material(self: IAcadPolyfaceMesh) = value
"""

    NumberOfFaces = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: NumberOfFaces(self: IAcadPolyfaceMesh) -> int

"""

    NumberOfVertices = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: NumberOfVertices(self: IAcadPolyfaceMesh) -> int

"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: IAcadPolyfaceMesh) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: IAcadPolyfaceMesh) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: IAcadPolyfaceMesh) -> Int64

"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: IAcadPolyfaceMesh) -> str

Set: PlotStyleName(self: IAcadPolyfaceMesh) = value
"""

    TrueColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TrueColor(self: IAcadPolyfaceMesh) -> AcadAcCmColor

Set: TrueColor(self: IAcadPolyfaceMesh) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: IAcadPolyfaceMesh) -> bool

Set: Visible(self: IAcadPolyfaceMesh) = value
"""



class AcadPolyfaceMesh(IAcadPolyfaceMesh, IAcadEntity, IAcadObject, IAcadObjectEvents_Event):
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class AcadPolyfaceMeshClass(__ComObject):
    # no doc
    def add_Modified(self, A_1):
        """ add_Modified(self: AcadPolyfaceMeshClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def ArrayPolar(self, NumberOfObjects, AngleToFill, CenterPoint):
        """ ArrayPolar(self: AcadPolyfaceMeshClass, NumberOfObjects: int, AngleToFill: float, CenterPoint: object) -> object """
        pass

    def ArrayRectangular(self, NumberOfRows, NumberOfColumns, NumberOfLevels, DistBetweenRows, DistBetweenCols, DistBetweenLevels):
        """ ArrayRectangular(self: AcadPolyfaceMeshClass, NumberOfRows: int, NumberOfColumns: int, NumberOfLevels: int, DistBetweenRows: float, DistBetweenCols: float, DistBetweenLevels: float) -> object """
        pass

    def Copy(self):
        """ Copy(self: AcadPolyfaceMeshClass) -> object """
        pass

    def Delete(self):
        """ Delete(self: AcadPolyfaceMeshClass) """
        pass

    def Erase(self):
        """ Erase(self: AcadPolyfaceMeshClass) """
        pass

    def GetBoundingBox(self, MinPoint, MaxPoint):
        """ GetBoundingBox(self: AcadPolyfaceMeshClass) -> (object, object) """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: AcadPolyfaceMeshClass) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: AcadPolyfaceMeshClass, AppName: str) -> (object, object) """
        pass

    def Highlight(self, HighlightFlag):
        """ Highlight(self: AcadPolyfaceMeshClass, HighlightFlag: bool) """
        pass

    def IntersectWith(self, IntersectObject, option):
        """ IntersectWith(self: AcadPolyfaceMeshClass, IntersectObject: object, option: AcExtendOption) -> object """
        pass

    def Mirror(self, Point1, Point2):
        """ Mirror(self: AcadPolyfaceMeshClass, Point1: object, Point2: object) -> object """
        pass

    def Mirror3D(self, Point1, Point2, point3):
        """ Mirror3D(self: AcadPolyfaceMeshClass, Point1: object, Point2: object, point3: object) -> object """
        pass

    def Move(self, FromPoint, ToPoint):
        """ Move(self: AcadPolyfaceMeshClass, FromPoint: object, ToPoint: object) """
        pass

    def remove_Modified(self, A_1):
        """ remove_Modified(self: AcadPolyfaceMeshClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def Rotate(self, BasePoint, RotationAngle):
        """ Rotate(self: AcadPolyfaceMeshClass, BasePoint: object, RotationAngle: float) """
        pass

    def Rotate3D(self, Point1, Point2, RotationAngle):
        """ Rotate3D(self: AcadPolyfaceMeshClass, Point1: object, Point2: object, RotationAngle: float) """
        pass

    def ScaleEntity(self, BasePoint, ScaleFactor):
        """ ScaleEntity(self: AcadPolyfaceMeshClass, BasePoint: object, ScaleFactor: float) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: AcadPolyfaceMeshClass, XDataType: object, XDataValue: object) """
        pass

    def TransformBy(self, TransformationMatrix):
        """ TransformBy(self: AcadPolyfaceMeshClass, TransformationMatrix: object) """
        pass

    def Update(self):
        """ Update(self: AcadPolyfaceMeshClass) """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: AcadPolyfaceMeshClass) -> object

"""

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: AcadPolyfaceMeshClass) -> ACAD_COLOR

Set: color(self: AcadPolyfaceMeshClass) = value
"""

    Coordinates = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Coordinates(self: AcadPolyfaceMeshClass) -> object

Set: Coordinates(self: AcadPolyfaceMeshClass) = value
"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: AcadPolyfaceMeshClass) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: AcadPolyfaceMeshClass) -> object

"""

    EntityName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityName(self: AcadPolyfaceMeshClass) -> str

"""

    EntityTransparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityTransparency(self: AcadPolyfaceMeshClass) -> str

Set: EntityTransparency(self: AcadPolyfaceMeshClass) = value
"""

    EntityType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityType(self: AcadPolyfaceMeshClass) -> int

"""

    Faces = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Set: Faces(self: AcadPolyfaceMeshClass) = value
"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: AcadPolyfaceMeshClass) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: AcadPolyfaceMeshClass) -> bool

"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: AcadPolyfaceMeshClass) -> AcadHyperlinks

"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layer(self: AcadPolyfaceMeshClass) -> str

Set: Layer(self: AcadPolyfaceMeshClass) = value
"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: AcadPolyfaceMeshClass) -> str

Set: Linetype(self: AcadPolyfaceMeshClass) = value
"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeScale(self: AcadPolyfaceMeshClass) -> float

Set: LinetypeScale(self: AcadPolyfaceMeshClass) = value
"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: AcadPolyfaceMeshClass) -> ACAD_LWEIGHT

Set: Lineweight(self: AcadPolyfaceMeshClass) = value
"""

    Material = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Material(self: AcadPolyfaceMeshClass) -> str

Set: Material(self: AcadPolyfaceMeshClass) = value
"""

    NumberOfFaces = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: NumberOfFaces(self: AcadPolyfaceMeshClass) -> int

"""

    NumberOfVertices = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: NumberOfVertices(self: AcadPolyfaceMeshClass) -> int

"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: AcadPolyfaceMeshClass) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: AcadPolyfaceMeshClass) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: AcadPolyfaceMeshClass) -> Int64

"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: AcadPolyfaceMeshClass) -> str

Set: PlotStyleName(self: AcadPolyfaceMeshClass) = value
"""

    TrueColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TrueColor(self: AcadPolyfaceMeshClass) -> AcadAcCmColor

Set: TrueColor(self: AcadPolyfaceMeshClass) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: AcadPolyfaceMeshClass) -> bool

Set: Visible(self: AcadPolyfaceMeshClass) = value
"""


    Modified = None


class IAcadPolygonMesh(IAcadEntity, IAcadObject):
    # no doc
    def AppendVertex(self, vertex):
        """ AppendVertex(self: IAcadPolygonMesh, vertex: object) """
        pass

    def ArrayPolar(self, NumberOfObjects, AngleToFill, CenterPoint):
        """ ArrayPolar(self: IAcadPolygonMesh, NumberOfObjects: int, AngleToFill: float, CenterPoint: object) -> object """
        pass

    def ArrayRectangular(self, NumberOfRows, NumberOfColumns, NumberOfLevels, DistBetweenRows, DistBetweenCols, DistBetweenLevels):
        """ ArrayRectangular(self: IAcadPolygonMesh, NumberOfRows: int, NumberOfColumns: int, NumberOfLevels: int, DistBetweenRows: float, DistBetweenCols: float, DistBetweenLevels: float) -> object """
        pass

    def Copy(self):
        """ Copy(self: IAcadPolygonMesh) -> object """
        pass

    def Delete(self):
        """ Delete(self: IAcadPolygonMesh) """
        pass

    def Erase(self):
        """ Erase(self: IAcadPolygonMesh) """
        pass

    def Explode(self):
        """ Explode(self: IAcadPolygonMesh) -> object """
        pass

    def GetBoundingBox(self, MinPoint, MaxPoint):
        """ GetBoundingBox(self: IAcadPolygonMesh) -> (object, object) """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: IAcadPolygonMesh) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: IAcadPolygonMesh, AppName: str) -> (object, object) """
        pass

    def Highlight(self, HighlightFlag):
        """ Highlight(self: IAcadPolygonMesh, HighlightFlag: bool) """
        pass

    def IntersectWith(self, IntersectObject, option):
        """ IntersectWith(self: IAcadPolygonMesh, IntersectObject: object, option: AcExtendOption) -> object """
        pass

    def Mirror(self, Point1, Point2):
        """ Mirror(self: IAcadPolygonMesh, Point1: object, Point2: object) -> object """
        pass

    def Mirror3D(self, Point1, Point2, point3):
        """ Mirror3D(self: IAcadPolygonMesh, Point1: object, Point2: object, point3: object) -> object """
        pass

    def Move(self, FromPoint, ToPoint):
        """ Move(self: IAcadPolygonMesh, FromPoint: object, ToPoint: object) """
        pass

    def Rotate(self, BasePoint, RotationAngle):
        """ Rotate(self: IAcadPolygonMesh, BasePoint: object, RotationAngle: float) """
        pass

    def Rotate3D(self, Point1, Point2, RotationAngle):
        """ Rotate3D(self: IAcadPolygonMesh, Point1: object, Point2: object, RotationAngle: float) """
        pass

    def ScaleEntity(self, BasePoint, ScaleFactor):
        """ ScaleEntity(self: IAcadPolygonMesh, BasePoint: object, ScaleFactor: float) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: IAcadPolygonMesh, XDataType: object, XDataValue: object) """
        pass

    def TransformBy(self, TransformationMatrix):
        """ TransformBy(self: IAcadPolygonMesh, TransformationMatrix: object) """
        pass

    def Update(self):
        """ Update(self: IAcadPolygonMesh) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IAcadPolygonMesh) -> object

"""

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: IAcadPolygonMesh) -> ACAD_COLOR

Set: color(self: IAcadPolygonMesh) = value
"""

    Coordinates = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Coordinates(self: IAcadPolygonMesh) -> object

Set: Coordinates(self: IAcadPolygonMesh) = value
"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: IAcadPolygonMesh) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: IAcadPolygonMesh) -> object

"""

    EntityName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityName(self: IAcadPolygonMesh) -> str

"""

    EntityTransparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityTransparency(self: IAcadPolygonMesh) -> str

Set: EntityTransparency(self: IAcadPolygonMesh) = value
"""

    EntityType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityType(self: IAcadPolygonMesh) -> int

"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: IAcadPolygonMesh) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: IAcadPolygonMesh) -> bool

"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: IAcadPolygonMesh) -> AcadHyperlinks

"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layer(self: IAcadPolygonMesh) -> str

Set: Layer(self: IAcadPolygonMesh) = value
"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: IAcadPolygonMesh) -> str

Set: Linetype(self: IAcadPolygonMesh) = value
"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeScale(self: IAcadPolygonMesh) -> float

Set: LinetypeScale(self: IAcadPolygonMesh) = value
"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: IAcadPolygonMesh) -> ACAD_LWEIGHT

Set: Lineweight(self: IAcadPolygonMesh) = value
"""

    Material = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Material(self: IAcadPolygonMesh) -> str

Set: Material(self: IAcadPolygonMesh) = value
"""

    MClose = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MClose(self: IAcadPolygonMesh) -> bool

Set: MClose(self: IAcadPolygonMesh) = value
"""

    MDensity = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MDensity(self: IAcadPolygonMesh) -> int

Set: MDensity(self: IAcadPolygonMesh) = value
"""

    MVertexCount = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MVertexCount(self: IAcadPolygonMesh) -> int

"""

    NClose = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: NClose(self: IAcadPolygonMesh) -> bool

Set: NClose(self: IAcadPolygonMesh) = value
"""

    NDensity = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: NDensity(self: IAcadPolygonMesh) -> int

Set: NDensity(self: IAcadPolygonMesh) = value
"""

    NVertexCount = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: NVertexCount(self: IAcadPolygonMesh) -> int

"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: IAcadPolygonMesh) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: IAcadPolygonMesh) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: IAcadPolygonMesh) -> Int64

"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: IAcadPolygonMesh) -> str

Set: PlotStyleName(self: IAcadPolygonMesh) = value
"""

    TrueColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TrueColor(self: IAcadPolygonMesh) -> AcadAcCmColor

Set: TrueColor(self: IAcadPolygonMesh) = value
"""

    Type = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Type(self: IAcadPolygonMesh) -> AcPolymeshType

Set: Type(self: IAcadPolygonMesh) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: IAcadPolygonMesh) -> bool

Set: Visible(self: IAcadPolygonMesh) = value
"""



class AcadPolygonMesh(IAcadPolygonMesh, IAcadEntity, IAcadObject, IAcadObjectEvents_Event):
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class AcadPolygonMeshClass(__ComObject):
    # no doc
    def add_Modified(self, A_1):
        """ add_Modified(self: AcadPolygonMeshClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def AppendVertex(self, vertex):
        """ AppendVertex(self: AcadPolygonMeshClass, vertex: object) """
        pass

    def ArrayPolar(self, NumberOfObjects, AngleToFill, CenterPoint):
        """ ArrayPolar(self: AcadPolygonMeshClass, NumberOfObjects: int, AngleToFill: float, CenterPoint: object) -> object """
        pass

    def ArrayRectangular(self, NumberOfRows, NumberOfColumns, NumberOfLevels, DistBetweenRows, DistBetweenCols, DistBetweenLevels):
        """ ArrayRectangular(self: AcadPolygonMeshClass, NumberOfRows: int, NumberOfColumns: int, NumberOfLevels: int, DistBetweenRows: float, DistBetweenCols: float, DistBetweenLevels: float) -> object """
        pass

    def Copy(self):
        """ Copy(self: AcadPolygonMeshClass) -> object """
        pass

    def Delete(self):
        """ Delete(self: AcadPolygonMeshClass) """
        pass

    def Erase(self):
        """ Erase(self: AcadPolygonMeshClass) """
        pass

    def Explode(self):
        """ Explode(self: AcadPolygonMeshClass) -> object """
        pass

    def GetBoundingBox(self, MinPoint, MaxPoint):
        """ GetBoundingBox(self: AcadPolygonMeshClass) -> (object, object) """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: AcadPolygonMeshClass) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: AcadPolygonMeshClass, AppName: str) -> (object, object) """
        pass

    def Highlight(self, HighlightFlag):
        """ Highlight(self: AcadPolygonMeshClass, HighlightFlag: bool) """
        pass

    def IntersectWith(self, IntersectObject, option):
        """ IntersectWith(self: AcadPolygonMeshClass, IntersectObject: object, option: AcExtendOption) -> object """
        pass

    def Mirror(self, Point1, Point2):
        """ Mirror(self: AcadPolygonMeshClass, Point1: object, Point2: object) -> object """
        pass

    def Mirror3D(self, Point1, Point2, point3):
        """ Mirror3D(self: AcadPolygonMeshClass, Point1: object, Point2: object, point3: object) -> object """
        pass

    def Move(self, FromPoint, ToPoint):
        """ Move(self: AcadPolygonMeshClass, FromPoint: object, ToPoint: object) """
        pass

    def remove_Modified(self, A_1):
        """ remove_Modified(self: AcadPolygonMeshClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def Rotate(self, BasePoint, RotationAngle):
        """ Rotate(self: AcadPolygonMeshClass, BasePoint: object, RotationAngle: float) """
        pass

    def Rotate3D(self, Point1, Point2, RotationAngle):
        """ Rotate3D(self: AcadPolygonMeshClass, Point1: object, Point2: object, RotationAngle: float) """
        pass

    def ScaleEntity(self, BasePoint, ScaleFactor):
        """ ScaleEntity(self: AcadPolygonMeshClass, BasePoint: object, ScaleFactor: float) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: AcadPolygonMeshClass, XDataType: object, XDataValue: object) """
        pass

    def TransformBy(self, TransformationMatrix):
        """ TransformBy(self: AcadPolygonMeshClass, TransformationMatrix: object) """
        pass

    def Update(self):
        """ Update(self: AcadPolygonMeshClass) """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: AcadPolygonMeshClass) -> object

"""

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: AcadPolygonMeshClass) -> ACAD_COLOR

Set: color(self: AcadPolygonMeshClass) = value
"""

    Coordinates = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Coordinates(self: AcadPolygonMeshClass) -> object

Set: Coordinates(self: AcadPolygonMeshClass) = value
"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: AcadPolygonMeshClass) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: AcadPolygonMeshClass) -> object

"""

    EntityName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityName(self: AcadPolygonMeshClass) -> str

"""

    EntityTransparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityTransparency(self: AcadPolygonMeshClass) -> str

Set: EntityTransparency(self: AcadPolygonMeshClass) = value
"""

    EntityType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityType(self: AcadPolygonMeshClass) -> int

"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: AcadPolygonMeshClass) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: AcadPolygonMeshClass) -> bool

"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: AcadPolygonMeshClass) -> AcadHyperlinks

"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layer(self: AcadPolygonMeshClass) -> str

Set: Layer(self: AcadPolygonMeshClass) = value
"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: AcadPolygonMeshClass) -> str

Set: Linetype(self: AcadPolygonMeshClass) = value
"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeScale(self: AcadPolygonMeshClass) -> float

Set: LinetypeScale(self: AcadPolygonMeshClass) = value
"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: AcadPolygonMeshClass) -> ACAD_LWEIGHT

Set: Lineweight(self: AcadPolygonMeshClass) = value
"""

    Material = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Material(self: AcadPolygonMeshClass) -> str

Set: Material(self: AcadPolygonMeshClass) = value
"""

    MClose = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MClose(self: AcadPolygonMeshClass) -> bool

Set: MClose(self: AcadPolygonMeshClass) = value
"""

    MDensity = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MDensity(self: AcadPolygonMeshClass) -> int

Set: MDensity(self: AcadPolygonMeshClass) = value
"""

    MVertexCount = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MVertexCount(self: AcadPolygonMeshClass) -> int

"""

    NClose = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: NClose(self: AcadPolygonMeshClass) -> bool

Set: NClose(self: AcadPolygonMeshClass) = value
"""

    NDensity = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: NDensity(self: AcadPolygonMeshClass) -> int

Set: NDensity(self: AcadPolygonMeshClass) = value
"""

    NVertexCount = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: NVertexCount(self: AcadPolygonMeshClass) -> int

"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: AcadPolygonMeshClass) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: AcadPolygonMeshClass) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: AcadPolygonMeshClass) -> Int64

"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: AcadPolygonMeshClass) -> str

Set: PlotStyleName(self: AcadPolygonMeshClass) = value
"""

    TrueColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TrueColor(self: AcadPolygonMeshClass) -> AcadAcCmColor

Set: TrueColor(self: AcadPolygonMeshClass) = value
"""

    Type = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Type(self: AcadPolygonMeshClass) -> AcPolymeshType

Set: Type(self: AcadPolygonMeshClass) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: AcadPolygonMeshClass) -> bool

Set: Visible(self: AcadPolygonMeshClass) = value
"""


    Modified = None


class IAcadPolyline(IAcadEntity, IAcadObject):
    # no doc
    def AppendVertex(self, vertex):
        """ AppendVertex(self: IAcadPolyline, vertex: object) """
        pass

    def ArrayPolar(self, NumberOfObjects, AngleToFill, CenterPoint):
        """ ArrayPolar(self: IAcadPolyline, NumberOfObjects: int, AngleToFill: float, CenterPoint: object) -> object """
        pass

    def ArrayRectangular(self, NumberOfRows, NumberOfColumns, NumberOfLevels, DistBetweenRows, DistBetweenCols, DistBetweenLevels):
        """ ArrayRectangular(self: IAcadPolyline, NumberOfRows: int, NumberOfColumns: int, NumberOfLevels: int, DistBetweenRows: float, DistBetweenCols: float, DistBetweenLevels: float) -> object """
        pass

    def Copy(self):
        """ Copy(self: IAcadPolyline) -> object """
        pass

    def Delete(self):
        """ Delete(self: IAcadPolyline) """
        pass

    def Erase(self):
        """ Erase(self: IAcadPolyline) """
        pass

    def Explode(self):
        """ Explode(self: IAcadPolyline) -> object """
        pass

    def GetBoundingBox(self, MinPoint, MaxPoint):
        """ GetBoundingBox(self: IAcadPolyline) -> (object, object) """
        pass

    def GetBulge(self, Index):
        """ GetBulge(self: IAcadPolyline, Index: int) -> float """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: IAcadPolyline) -> AcadDictionary """
        pass

    def GetWidth(self, Index, StartWidth, EndWidth):
        """ GetWidth(self: IAcadPolyline, Index: int, EndWidth: float) -> (float, float) """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: IAcadPolyline, AppName: str) -> (object, object) """
        pass

    def Highlight(self, HighlightFlag):
        """ Highlight(self: IAcadPolyline, HighlightFlag: bool) """
        pass

    def IntersectWith(self, IntersectObject, option):
        """ IntersectWith(self: IAcadPolyline, IntersectObject: object, option: AcExtendOption) -> object """
        pass

    def Mirror(self, Point1, Point2):
        """ Mirror(self: IAcadPolyline, Point1: object, Point2: object) -> object """
        pass

    def Mirror3D(self, Point1, Point2, point3):
        """ Mirror3D(self: IAcadPolyline, Point1: object, Point2: object, point3: object) -> object """
        pass

    def Move(self, FromPoint, ToPoint):
        """ Move(self: IAcadPolyline, FromPoint: object, ToPoint: object) """
        pass

    def Offset(self, Distance):
        """ Offset(self: IAcadPolyline, Distance: float) -> object """
        pass

    def Rotate(self, BasePoint, RotationAngle):
        """ Rotate(self: IAcadPolyline, BasePoint: object, RotationAngle: float) """
        pass

    def Rotate3D(self, Point1, Point2, RotationAngle):
        """ Rotate3D(self: IAcadPolyline, Point1: object, Point2: object, RotationAngle: float) """
        pass

    def ScaleEntity(self, BasePoint, ScaleFactor):
        """ ScaleEntity(self: IAcadPolyline, BasePoint: object, ScaleFactor: float) """
        pass

    def SetBulge(self, Index, bulge):
        """ SetBulge(self: IAcadPolyline, Index: int, bulge: float) """
        pass

    def SetWidth(self, Index, StartWidth, EndWidth):
        """ SetWidth(self: IAcadPolyline, Index: int, StartWidth: float, EndWidth: float) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: IAcadPolyline, XDataType: object, XDataValue: object) """
        pass

    def TransformBy(self, TransformationMatrix):
        """ TransformBy(self: IAcadPolyline, TransformationMatrix: object) """
        pass

    def Update(self):
        """ Update(self: IAcadPolyline) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IAcadPolyline) -> object

"""

    Area = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Area(self: IAcadPolyline) -> float

"""

    Closed = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Closed(self: IAcadPolyline) -> bool

Set: Closed(self: IAcadPolyline) = value
"""

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: IAcadPolyline) -> ACAD_COLOR

Set: color(self: IAcadPolyline) = value
"""

    ConstantWidth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ConstantWidth(self: IAcadPolyline) -> float

Set: ConstantWidth(self: IAcadPolyline) = value
"""

    Coordinates = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Coordinates(self: IAcadPolyline) -> object

Set: Coordinates(self: IAcadPolyline) = value
"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: IAcadPolyline) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: IAcadPolyline) -> object

"""

    Elevation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Elevation(self: IAcadPolyline) -> float

Set: Elevation(self: IAcadPolyline) = value
"""

    EntityName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityName(self: IAcadPolyline) -> str

"""

    EntityTransparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityTransparency(self: IAcadPolyline) -> str

Set: EntityTransparency(self: IAcadPolyline) = value
"""

    EntityType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityType(self: IAcadPolyline) -> int

"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: IAcadPolyline) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: IAcadPolyline) -> bool

"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: IAcadPolyline) -> AcadHyperlinks

"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layer(self: IAcadPolyline) -> str

Set: Layer(self: IAcadPolyline) = value
"""

    Length = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Length(self: IAcadPolyline) -> float

"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: IAcadPolyline) -> str

Set: Linetype(self: IAcadPolyline) = value
"""

    LinetypeGeneration = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeGeneration(self: IAcadPolyline) -> bool

Set: LinetypeGeneration(self: IAcadPolyline) = value
"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeScale(self: IAcadPolyline) -> float

Set: LinetypeScale(self: IAcadPolyline) = value
"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: IAcadPolyline) -> ACAD_LWEIGHT

Set: Lineweight(self: IAcadPolyline) = value
"""

    Material = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Material(self: IAcadPolyline) -> str

Set: Material(self: IAcadPolyline) = value
"""

    Normal = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Normal(self: IAcadPolyline) -> object

Set: Normal(self: IAcadPolyline) = value
"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: IAcadPolyline) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: IAcadPolyline) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: IAcadPolyline) -> Int64

"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: IAcadPolyline) -> str

Set: PlotStyleName(self: IAcadPolyline) = value
"""

    Thickness = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Thickness(self: IAcadPolyline) -> float

Set: Thickness(self: IAcadPolyline) = value
"""

    TrueColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TrueColor(self: IAcadPolyline) -> AcadAcCmColor

Set: TrueColor(self: IAcadPolyline) = value
"""

    Type = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Type(self: IAcadPolyline) -> AcPolylineType

Set: Type(self: IAcadPolyline) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: IAcadPolyline) -> bool

Set: Visible(self: IAcadPolyline) = value
"""



class AcadPolyline(IAcadPolyline, IAcadEntity, IAcadObject, IAcadObjectEvents_Event):
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class AcadPolylineClass(__ComObject):
    # no doc
    def add_Modified(self, A_1):
        """ add_Modified(self: AcadPolylineClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def AppendVertex(self, vertex):
        """ AppendVertex(self: AcadPolylineClass, vertex: object) """
        pass

    def ArrayPolar(self, NumberOfObjects, AngleToFill, CenterPoint):
        """ ArrayPolar(self: AcadPolylineClass, NumberOfObjects: int, AngleToFill: float, CenterPoint: object) -> object """
        pass

    def ArrayRectangular(self, NumberOfRows, NumberOfColumns, NumberOfLevels, DistBetweenRows, DistBetweenCols, DistBetweenLevels):
        """ ArrayRectangular(self: AcadPolylineClass, NumberOfRows: int, NumberOfColumns: int, NumberOfLevels: int, DistBetweenRows: float, DistBetweenCols: float, DistBetweenLevels: float) -> object """
        pass

    def Copy(self):
        """ Copy(self: AcadPolylineClass) -> object """
        pass

    def Delete(self):
        """ Delete(self: AcadPolylineClass) """
        pass

    def Erase(self):
        """ Erase(self: AcadPolylineClass) """
        pass

    def Explode(self):
        """ Explode(self: AcadPolylineClass) -> object """
        pass

    def GetBoundingBox(self, MinPoint, MaxPoint):
        """ GetBoundingBox(self: AcadPolylineClass) -> (object, object) """
        pass

    def GetBulge(self, Index):
        """ GetBulge(self: AcadPolylineClass, Index: int) -> float """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: AcadPolylineClass) -> AcadDictionary """
        pass

    def GetWidth(self, Index, StartWidth, EndWidth):
        """ GetWidth(self: AcadPolylineClass, Index: int, EndWidth: float) -> (float, float) """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: AcadPolylineClass, AppName: str) -> (object, object) """
        pass

    def Highlight(self, HighlightFlag):
        """ Highlight(self: AcadPolylineClass, HighlightFlag: bool) """
        pass

    def IntersectWith(self, IntersectObject, option):
        """ IntersectWith(self: AcadPolylineClass, IntersectObject: object, option: AcExtendOption) -> object """
        pass

    def Mirror(self, Point1, Point2):
        """ Mirror(self: AcadPolylineClass, Point1: object, Point2: object) -> object """
        pass

    def Mirror3D(self, Point1, Point2, point3):
        """ Mirror3D(self: AcadPolylineClass, Point1: object, Point2: object, point3: object) -> object """
        pass

    def Move(self, FromPoint, ToPoint):
        """ Move(self: AcadPolylineClass, FromPoint: object, ToPoint: object) """
        pass

    def Offset(self, Distance):
        """ Offset(self: AcadPolylineClass, Distance: float) -> object """
        pass

    def remove_Modified(self, A_1):
        """ remove_Modified(self: AcadPolylineClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def Rotate(self, BasePoint, RotationAngle):
        """ Rotate(self: AcadPolylineClass, BasePoint: object, RotationAngle: float) """
        pass

    def Rotate3D(self, Point1, Point2, RotationAngle):
        """ Rotate3D(self: AcadPolylineClass, Point1: object, Point2: object, RotationAngle: float) """
        pass

    def ScaleEntity(self, BasePoint, ScaleFactor):
        """ ScaleEntity(self: AcadPolylineClass, BasePoint: object, ScaleFactor: float) """
        pass

    def SetBulge(self, Index, bulge):
        """ SetBulge(self: AcadPolylineClass, Index: int, bulge: float) """
        pass

    def SetWidth(self, Index, StartWidth, EndWidth):
        """ SetWidth(self: AcadPolylineClass, Index: int, StartWidth: float, EndWidth: float) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: AcadPolylineClass, XDataType: object, XDataValue: object) """
        pass

    def TransformBy(self, TransformationMatrix):
        """ TransformBy(self: AcadPolylineClass, TransformationMatrix: object) """
        pass

    def Update(self):
        """ Update(self: AcadPolylineClass) """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: AcadPolylineClass) -> object

"""

    Area = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Area(self: AcadPolylineClass) -> float

"""

    Closed = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Closed(self: AcadPolylineClass) -> bool

Set: Closed(self: AcadPolylineClass) = value
"""

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: AcadPolylineClass) -> ACAD_COLOR

Set: color(self: AcadPolylineClass) = value
"""

    ConstantWidth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ConstantWidth(self: AcadPolylineClass) -> float

Set: ConstantWidth(self: AcadPolylineClass) = value
"""

    Coordinates = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Coordinates(self: AcadPolylineClass) -> object

Set: Coordinates(self: AcadPolylineClass) = value
"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: AcadPolylineClass) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: AcadPolylineClass) -> object

"""

    Elevation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Elevation(self: AcadPolylineClass) -> float

Set: Elevation(self: AcadPolylineClass) = value
"""

    EntityName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityName(self: AcadPolylineClass) -> str

"""

    EntityTransparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityTransparency(self: AcadPolylineClass) -> str

Set: EntityTransparency(self: AcadPolylineClass) = value
"""

    EntityType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityType(self: AcadPolylineClass) -> int

"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: AcadPolylineClass) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: AcadPolylineClass) -> bool

"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: AcadPolylineClass) -> AcadHyperlinks

"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layer(self: AcadPolylineClass) -> str

Set: Layer(self: AcadPolylineClass) = value
"""

    Length = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Length(self: AcadPolylineClass) -> float

"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: AcadPolylineClass) -> str

Set: Linetype(self: AcadPolylineClass) = value
"""

    LinetypeGeneration = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeGeneration(self: AcadPolylineClass) -> bool

Set: LinetypeGeneration(self: AcadPolylineClass) = value
"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeScale(self: AcadPolylineClass) -> float

Set: LinetypeScale(self: AcadPolylineClass) = value
"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: AcadPolylineClass) -> ACAD_LWEIGHT

Set: Lineweight(self: AcadPolylineClass) = value
"""

    Material = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Material(self: AcadPolylineClass) -> str

Set: Material(self: AcadPolylineClass) = value
"""

    Normal = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Normal(self: AcadPolylineClass) -> object

Set: Normal(self: AcadPolylineClass) = value
"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: AcadPolylineClass) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: AcadPolylineClass) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: AcadPolylineClass) -> Int64

"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: AcadPolylineClass) -> str

Set: PlotStyleName(self: AcadPolylineClass) = value
"""

    Thickness = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Thickness(self: AcadPolylineClass) -> float

Set: Thickness(self: AcadPolylineClass) = value
"""

    TrueColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TrueColor(self: AcadPolylineClass) -> AcadAcCmColor

Set: TrueColor(self: AcadPolylineClass) = value
"""

    Type = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Type(self: AcadPolylineClass) -> AcPolylineType

Set: Type(self: AcadPolylineClass) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: AcadPolylineClass) -> bool

Set: Visible(self: AcadPolylineClass) = value
"""


    Modified = None


class IAcadPViewport(IAcadEntity, IAcadObject):
    # no doc
    def ArrayPolar(self, NumberOfObjects, AngleToFill, CenterPoint):
        """ ArrayPolar(self: IAcadPViewport, NumberOfObjects: int, AngleToFill: float, CenterPoint: object) -> object """
        pass

    def ArrayRectangular(self, NumberOfRows, NumberOfColumns, NumberOfLevels, DistBetweenRows, DistBetweenCols, DistBetweenLevels):
        """ ArrayRectangular(self: IAcadPViewport, NumberOfRows: int, NumberOfColumns: int, NumberOfLevels: int, DistBetweenRows: float, DistBetweenCols: float, DistBetweenLevels: float) -> object """
        pass

    def Copy(self):
        """ Copy(self: IAcadPViewport) -> object """
        pass

    def Delete(self):
        """ Delete(self: IAcadPViewport) """
        pass

    def Display(self, bStatus):
        """ Display(self: IAcadPViewport, bStatus: bool) """
        pass

    def Erase(self):
        """ Erase(self: IAcadPViewport) """
        pass

    def GetBoundingBox(self, MinPoint, MaxPoint):
        """ GetBoundingBox(self: IAcadPViewport) -> (object, object) """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: IAcadPViewport) -> AcadDictionary """
        pass

    def GetGridSpacing(self, XSpacing, YSpacing):
        """ GetGridSpacing(self: IAcadPViewport) -> (float, float) """
        pass

    def GetSnapSpacing(self, XSpacing, YSpacing):
        """ GetSnapSpacing(self: IAcadPViewport) -> (float, float) """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: IAcadPViewport, AppName: str) -> (object, object) """
        pass

    def Highlight(self, HighlightFlag):
        """ Highlight(self: IAcadPViewport, HighlightFlag: bool) """
        pass

    def IntersectWith(self, IntersectObject, option):
        """ IntersectWith(self: IAcadPViewport, IntersectObject: object, option: AcExtendOption) -> object """
        pass

    def Mirror(self, Point1, Point2):
        """ Mirror(self: IAcadPViewport, Point1: object, Point2: object) -> object """
        pass

    def Mirror3D(self, Point1, Point2, point3):
        """ Mirror3D(self: IAcadPViewport, Point1: object, Point2: object, point3: object) -> object """
        pass

    def Move(self, FromPoint, ToPoint):
        """ Move(self: IAcadPViewport, FromPoint: object, ToPoint: object) """
        pass

    def Rotate(self, BasePoint, RotationAngle):
        """ Rotate(self: IAcadPViewport, BasePoint: object, RotationAngle: float) """
        pass

    def Rotate3D(self, Point1, Point2, RotationAngle):
        """ Rotate3D(self: IAcadPViewport, Point1: object, Point2: object, RotationAngle: float) """
        pass

    def ScaleEntity(self, BasePoint, ScaleFactor):
        """ ScaleEntity(self: IAcadPViewport, BasePoint: object, ScaleFactor: float) """
        pass

    def SetGridSpacing(self, XSpacing, YSpacing):
        """ SetGridSpacing(self: IAcadPViewport, XSpacing: float, YSpacing: float) """
        pass

    def SetSnapSpacing(self, XSpacing, YSpacing):
        """ SetSnapSpacing(self: IAcadPViewport, XSpacing: float, YSpacing: float) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: IAcadPViewport, XDataType: object, XDataValue: object) """
        pass

    def SyncModelView(self):
        """ SyncModelView(self: IAcadPViewport) """
        pass

    def TransformBy(self, TransformationMatrix):
        """ TransformBy(self: IAcadPViewport, TransformationMatrix: object) """
        pass

    def Update(self):
        """ Update(self: IAcadPViewport) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IAcadPViewport) -> object

"""

    ArcSmoothness = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ArcSmoothness(self: IAcadPViewport) -> int

Set: ArcSmoothness(self: IAcadPViewport) = value
"""

    Center = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Center(self: IAcadPViewport) -> object

Set: Center(self: IAcadPViewport) = value
"""

    Clipped = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Clipped(self: IAcadPViewport) -> bool

"""

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: IAcadPViewport) -> ACAD_COLOR

Set: color(self: IAcadPViewport) = value
"""

    CustomScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CustomScale(self: IAcadPViewport) -> float

Set: CustomScale(self: IAcadPViewport) = value
"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: IAcadPViewport) -> AcadDatabase

"""

    Direction = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Direction(self: IAcadPViewport) -> object

Set: Direction(self: IAcadPViewport) = value
"""

    DisplayLocked = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DisplayLocked(self: IAcadPViewport) -> bool

Set: DisplayLocked(self: IAcadPViewport) = value
"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: IAcadPViewport) -> object

"""

    EntityName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityName(self: IAcadPViewport) -> str

"""

    EntityTransparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityTransparency(self: IAcadPViewport) -> str

Set: EntityTransparency(self: IAcadPViewport) = value
"""

    EntityType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityType(self: IAcadPViewport) -> int

"""

    GridOn = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: GridOn(self: IAcadPViewport) -> bool

Set: GridOn(self: IAcadPViewport) = value
"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: IAcadPViewport) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: IAcadPViewport) -> bool

"""

    HasSheetView = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasSheetView(self: IAcadPViewport) -> bool

"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: IAcadPViewport) -> float

Set: Height(self: IAcadPViewport) = value
"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: IAcadPViewport) -> AcadHyperlinks

"""

    LabelBlockId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LabelBlockId(self: IAcadPViewport) -> Int64

Set: LabelBlockId(self: IAcadPViewport) = value
"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layer(self: IAcadPViewport) -> str

Set: Layer(self: IAcadPViewport) = value
"""

    LayerPropertyOverrides = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LayerPropertyOverrides(self: IAcadPViewport) -> bool

"""

    LensLength = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LensLength(self: IAcadPViewport) -> float

Set: LensLength(self: IAcadPViewport) = value
"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: IAcadPViewport) -> str

Set: Linetype(self: IAcadPViewport) = value
"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeScale(self: IAcadPViewport) -> float

Set: LinetypeScale(self: IAcadPViewport) = value
"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: IAcadPViewport) -> ACAD_LWEIGHT

Set: Lineweight(self: IAcadPViewport) = value
"""

    Material = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Material(self: IAcadPViewport) -> str

Set: Material(self: IAcadPViewport) = value
"""

    ModelView = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ModelView(self: IAcadPViewport) -> AcadView

Set: ModelView(self: IAcadPViewport) = value
"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: IAcadPViewport) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: IAcadPViewport) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: IAcadPViewport) -> Int64

"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: IAcadPViewport) -> str

Set: PlotStyleName(self: IAcadPViewport) = value
"""

    RemoveHiddenLines = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RemoveHiddenLines(self: IAcadPViewport) -> bool

Set: RemoveHiddenLines(self: IAcadPViewport) = value
"""

    ShadePlot = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShadePlot(self: IAcadPViewport) -> int

Set: ShadePlot(self: IAcadPViewport) = value
"""

    SheetView = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SheetView(self: IAcadPViewport) -> AcadView

Set: SheetView(self: IAcadPViewport) = value
"""

    SnapBasePoint = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SnapBasePoint(self: IAcadPViewport) -> object

Set: SnapBasePoint(self: IAcadPViewport) = value
"""

    SnapOn = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SnapOn(self: IAcadPViewport) -> bool

Set: SnapOn(self: IAcadPViewport) = value
"""

    SnapRotationAngle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SnapRotationAngle(self: IAcadPViewport) -> float

Set: SnapRotationAngle(self: IAcadPViewport) = value
"""

    StandardScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: StandardScale(self: IAcadPViewport) -> AcViewportScale

Set: StandardScale(self: IAcadPViewport) = value
"""

    StandardScale2 = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: StandardScale2(self: IAcadPViewport) -> int

Set: StandardScale2(self: IAcadPViewport) = value
"""

    StyleSheet = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: StyleSheet(self: IAcadPViewport) -> str

Set: StyleSheet(self: IAcadPViewport) = value
"""

    Target = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Target(self: IAcadPViewport) -> object

Set: Target(self: IAcadPViewport) = value
"""

    TrueColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TrueColor(self: IAcadPViewport) -> AcadAcCmColor

Set: TrueColor(self: IAcadPViewport) = value
"""

    TwistAngle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TwistAngle(self: IAcadPViewport) -> float

Set: TwistAngle(self: IAcadPViewport) = value
"""

    UCSIconAtOrigin = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: UCSIconAtOrigin(self: IAcadPViewport) -> bool

Set: UCSIconAtOrigin(self: IAcadPViewport) = value
"""

    UCSIconOn = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: UCSIconOn(self: IAcadPViewport) -> bool

Set: UCSIconOn(self: IAcadPViewport) = value
"""

    UCSPerViewport = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: UCSPerViewport(self: IAcadPViewport) -> bool

Set: UCSPerViewport(self: IAcadPViewport) = value
"""

    ViewportOn = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ViewportOn(self: IAcadPViewport) -> bool

Set: ViewportOn(self: IAcadPViewport) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: IAcadPViewport) -> bool

Set: Visible(self: IAcadPViewport) = value
"""

    VisualStyle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VisualStyle(self: IAcadPViewport) -> int

Set: VisualStyle(self: IAcadPViewport) = value
"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: IAcadPViewport) -> float

Set: Width(self: IAcadPViewport) = value
"""



class AcadPViewport(IAcadPViewport, IAcadEntity, IAcadObject, IAcadObjectEvents_Event):
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class AcadPViewportClass(__ComObject):
    # no doc
    def add_Modified(self, A_1):
        """ add_Modified(self: AcadPViewportClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def ArrayPolar(self, NumberOfObjects, AngleToFill, CenterPoint):
        """ ArrayPolar(self: AcadPViewportClass, NumberOfObjects: int, AngleToFill: float, CenterPoint: object) -> object """
        pass

    def ArrayRectangular(self, NumberOfRows, NumberOfColumns, NumberOfLevels, DistBetweenRows, DistBetweenCols, DistBetweenLevels):
        """ ArrayRectangular(self: AcadPViewportClass, NumberOfRows: int, NumberOfColumns: int, NumberOfLevels: int, DistBetweenRows: float, DistBetweenCols: float, DistBetweenLevels: float) -> object """
        pass

    def Copy(self):
        """ Copy(self: AcadPViewportClass) -> object """
        pass

    def Delete(self):
        """ Delete(self: AcadPViewportClass) """
        pass

    def Display(self, bStatus):
        """ Display(self: AcadPViewportClass, bStatus: bool) """
        pass

    def Erase(self):
        """ Erase(self: AcadPViewportClass) """
        pass

    def GetBoundingBox(self, MinPoint, MaxPoint):
        """ GetBoundingBox(self: AcadPViewportClass) -> (object, object) """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: AcadPViewportClass) -> AcadDictionary """
        pass

    def GetGridSpacing(self, XSpacing, YSpacing):
        """ GetGridSpacing(self: AcadPViewportClass) -> (float, float) """
        pass

    def GetSnapSpacing(self, XSpacing, YSpacing):
        """ GetSnapSpacing(self: AcadPViewportClass) -> (float, float) """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: AcadPViewportClass, AppName: str) -> (object, object) """
        pass

    def Highlight(self, HighlightFlag):
        """ Highlight(self: AcadPViewportClass, HighlightFlag: bool) """
        pass

    def IntersectWith(self, IntersectObject, option):
        """ IntersectWith(self: AcadPViewportClass, IntersectObject: object, option: AcExtendOption) -> object """
        pass

    def Mirror(self, Point1, Point2):
        """ Mirror(self: AcadPViewportClass, Point1: object, Point2: object) -> object """
        pass

    def Mirror3D(self, Point1, Point2, point3):
        """ Mirror3D(self: AcadPViewportClass, Point1: object, Point2: object, point3: object) -> object """
        pass

    def Move(self, FromPoint, ToPoint):
        """ Move(self: AcadPViewportClass, FromPoint: object, ToPoint: object) """
        pass

    def remove_Modified(self, A_1):
        """ remove_Modified(self: AcadPViewportClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def Rotate(self, BasePoint, RotationAngle):
        """ Rotate(self: AcadPViewportClass, BasePoint: object, RotationAngle: float) """
        pass

    def Rotate3D(self, Point1, Point2, RotationAngle):
        """ Rotate3D(self: AcadPViewportClass, Point1: object, Point2: object, RotationAngle: float) """
        pass

    def ScaleEntity(self, BasePoint, ScaleFactor):
        """ ScaleEntity(self: AcadPViewportClass, BasePoint: object, ScaleFactor: float) """
        pass

    def SetGridSpacing(self, XSpacing, YSpacing):
        """ SetGridSpacing(self: AcadPViewportClass, XSpacing: float, YSpacing: float) """
        pass

    def SetSnapSpacing(self, XSpacing, YSpacing):
        """ SetSnapSpacing(self: AcadPViewportClass, XSpacing: float, YSpacing: float) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: AcadPViewportClass, XDataType: object, XDataValue: object) """
        pass

    def SyncModelView(self):
        """ SyncModelView(self: AcadPViewportClass) """
        pass

    def TransformBy(self, TransformationMatrix):
        """ TransformBy(self: AcadPViewportClass, TransformationMatrix: object) """
        pass

    def Update(self):
        """ Update(self: AcadPViewportClass) """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: AcadPViewportClass) -> object

"""

    ArcSmoothness = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ArcSmoothness(self: AcadPViewportClass) -> int

Set: ArcSmoothness(self: AcadPViewportClass) = value
"""

    Center = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Center(self: AcadPViewportClass) -> object

Set: Center(self: AcadPViewportClass) = value
"""

    Clipped = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Clipped(self: AcadPViewportClass) -> bool

"""

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: AcadPViewportClass) -> ACAD_COLOR

Set: color(self: AcadPViewportClass) = value
"""

    CustomScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CustomScale(self: AcadPViewportClass) -> float

Set: CustomScale(self: AcadPViewportClass) = value
"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: AcadPViewportClass) -> AcadDatabase

"""

    Direction = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Direction(self: AcadPViewportClass) -> object

Set: Direction(self: AcadPViewportClass) = value
"""

    DisplayLocked = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DisplayLocked(self: AcadPViewportClass) -> bool

Set: DisplayLocked(self: AcadPViewportClass) = value
"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: AcadPViewportClass) -> object

"""

    EntityName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityName(self: AcadPViewportClass) -> str

"""

    EntityTransparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityTransparency(self: AcadPViewportClass) -> str

Set: EntityTransparency(self: AcadPViewportClass) = value
"""

    EntityType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityType(self: AcadPViewportClass) -> int

"""

    GridOn = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: GridOn(self: AcadPViewportClass) -> bool

Set: GridOn(self: AcadPViewportClass) = value
"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: AcadPViewportClass) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: AcadPViewportClass) -> bool

"""

    HasSheetView = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasSheetView(self: AcadPViewportClass) -> bool

"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: AcadPViewportClass) -> float

Set: Height(self: AcadPViewportClass) = value
"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: AcadPViewportClass) -> AcadHyperlinks

"""

    LabelBlockId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LabelBlockId(self: AcadPViewportClass) -> Int64

Set: LabelBlockId(self: AcadPViewportClass) = value
"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layer(self: AcadPViewportClass) -> str

Set: Layer(self: AcadPViewportClass) = value
"""

    LayerPropertyOverrides = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LayerPropertyOverrides(self: AcadPViewportClass) -> bool

"""

    LensLength = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LensLength(self: AcadPViewportClass) -> float

Set: LensLength(self: AcadPViewportClass) = value
"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: AcadPViewportClass) -> str

Set: Linetype(self: AcadPViewportClass) = value
"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeScale(self: AcadPViewportClass) -> float

Set: LinetypeScale(self: AcadPViewportClass) = value
"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: AcadPViewportClass) -> ACAD_LWEIGHT

Set: Lineweight(self: AcadPViewportClass) = value
"""

    Material = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Material(self: AcadPViewportClass) -> str

Set: Material(self: AcadPViewportClass) = value
"""

    ModelView = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ModelView(self: AcadPViewportClass) -> AcadView

Set: ModelView(self: AcadPViewportClass) = value
"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: AcadPViewportClass) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: AcadPViewportClass) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: AcadPViewportClass) -> Int64

"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: AcadPViewportClass) -> str

Set: PlotStyleName(self: AcadPViewportClass) = value
"""

    RemoveHiddenLines = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RemoveHiddenLines(self: AcadPViewportClass) -> bool

Set: RemoveHiddenLines(self: AcadPViewportClass) = value
"""

    ShadePlot = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShadePlot(self: AcadPViewportClass) -> int

Set: ShadePlot(self: AcadPViewportClass) = value
"""

    SheetView = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SheetView(self: AcadPViewportClass) -> AcadView

Set: SheetView(self: AcadPViewportClass) = value
"""

    SnapBasePoint = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SnapBasePoint(self: AcadPViewportClass) -> object

Set: SnapBasePoint(self: AcadPViewportClass) = value
"""

    SnapOn = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SnapOn(self: AcadPViewportClass) -> bool

Set: SnapOn(self: AcadPViewportClass) = value
"""

    SnapRotationAngle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SnapRotationAngle(self: AcadPViewportClass) -> float

Set: SnapRotationAngle(self: AcadPViewportClass) = value
"""

    StandardScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: StandardScale(self: AcadPViewportClass) -> AcViewportScale

Set: StandardScale(self: AcadPViewportClass) = value
"""

    StandardScale2 = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: StandardScale2(self: AcadPViewportClass) -> int

Set: StandardScale2(self: AcadPViewportClass) = value
"""

    StyleSheet = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: StyleSheet(self: AcadPViewportClass) -> str

Set: StyleSheet(self: AcadPViewportClass) = value
"""

    Target = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Target(self: AcadPViewportClass) -> object

Set: Target(self: AcadPViewportClass) = value
"""

    TrueColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TrueColor(self: AcadPViewportClass) -> AcadAcCmColor

Set: TrueColor(self: AcadPViewportClass) = value
"""

    TwistAngle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TwistAngle(self: AcadPViewportClass) -> float

Set: TwistAngle(self: AcadPViewportClass) = value
"""

    UCSIconAtOrigin = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: UCSIconAtOrigin(self: AcadPViewportClass) -> bool

Set: UCSIconAtOrigin(self: AcadPViewportClass) = value
"""

    UCSIconOn = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: UCSIconOn(self: AcadPViewportClass) -> bool

Set: UCSIconOn(self: AcadPViewportClass) = value
"""

    UCSPerViewport = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: UCSPerViewport(self: AcadPViewportClass) -> bool

Set: UCSPerViewport(self: AcadPViewportClass) = value
"""

    ViewportOn = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ViewportOn(self: AcadPViewportClass) -> bool

Set: ViewportOn(self: AcadPViewportClass) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: AcadPViewportClass) -> bool

Set: Visible(self: AcadPViewportClass) = value
"""

    VisualStyle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VisualStyle(self: AcadPViewportClass) -> int

Set: VisualStyle(self: AcadPViewportClass) = value
"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: AcadPViewportClass) -> float

Set: Width(self: AcadPViewportClass) = value
"""


    Modified = None


class AcadRasterImage(IAcadRasterImage, IAcadEntity, IAcadObject, IAcadObjectEvents_Event):
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class AcadRasterImageClass(__ComObject):
    # no doc
    def add_Modified(self, A_1):
        """ add_Modified(self: AcadRasterImageClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def ArrayPolar(self, NumberOfObjects, AngleToFill, CenterPoint):
        """ ArrayPolar(self: AcadRasterImageClass, NumberOfObjects: int, AngleToFill: float, CenterPoint: object) -> object """
        pass

    def ArrayRectangular(self, NumberOfRows, NumberOfColumns, NumberOfLevels, DistBetweenRows, DistBetweenCols, DistBetweenLevels):
        """ ArrayRectangular(self: AcadRasterImageClass, NumberOfRows: int, NumberOfColumns: int, NumberOfLevels: int, DistBetweenRows: float, DistBetweenCols: float, DistBetweenLevels: float) -> object """
        pass

    def ClipBoundary(self, boundry):
        """ ClipBoundary(self: AcadRasterImageClass, boundry: object) """
        pass

    def Copy(self):
        """ Copy(self: AcadRasterImageClass) -> object """
        pass

    def Delete(self):
        """ Delete(self: AcadRasterImageClass) """
        pass

    def Erase(self):
        """ Erase(self: AcadRasterImageClass) """
        pass

    def GetBoundingBox(self, MinPoint, MaxPoint):
        """ GetBoundingBox(self: AcadRasterImageClass) -> (object, object) """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: AcadRasterImageClass) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: AcadRasterImageClass, AppName: str) -> (object, object) """
        pass

    def Highlight(self, HighlightFlag):
        """ Highlight(self: AcadRasterImageClass, HighlightFlag: bool) """
        pass

    def IntersectWith(self, IntersectObject, option):
        """ IntersectWith(self: AcadRasterImageClass, IntersectObject: object, option: AcExtendOption) -> object """
        pass

    def Mirror(self, Point1, Point2):
        """ Mirror(self: AcadRasterImageClass, Point1: object, Point2: object) -> object """
        pass

    def Mirror3D(self, Point1, Point2, point3):
        """ Mirror3D(self: AcadRasterImageClass, Point1: object, Point2: object, point3: object) -> object """
        pass

    def Move(self, FromPoint, ToPoint):
        """ Move(self: AcadRasterImageClass, FromPoint: object, ToPoint: object) """
        pass

    def remove_Modified(self, A_1):
        """ remove_Modified(self: AcadRasterImageClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def Rotate(self, BasePoint, RotationAngle):
        """ Rotate(self: AcadRasterImageClass, BasePoint: object, RotationAngle: float) """
        pass

    def Rotate3D(self, Point1, Point2, RotationAngle):
        """ Rotate3D(self: AcadRasterImageClass, Point1: object, Point2: object, RotationAngle: float) """
        pass

    def ScaleEntity(self, BasePoint, ScaleFactor):
        """ ScaleEntity(self: AcadRasterImageClass, BasePoint: object, ScaleFactor: float) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: AcadRasterImageClass, XDataType: object, XDataValue: object) """
        pass

    def TransformBy(self, TransformationMatrix):
        """ TransformBy(self: AcadRasterImageClass, TransformationMatrix: object) """
        pass

    def Update(self):
        """ Update(self: AcadRasterImageClass) """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: AcadRasterImageClass) -> object

"""

    Brightness = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Brightness(self: AcadRasterImageClass) -> int

Set: Brightness(self: AcadRasterImageClass) = value
"""

    ClippingEnabled = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ClippingEnabled(self: AcadRasterImageClass) -> bool

Set: ClippingEnabled(self: AcadRasterImageClass) = value
"""

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: AcadRasterImageClass) -> ACAD_COLOR

Set: color(self: AcadRasterImageClass) = value
"""

    Contrast = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Contrast(self: AcadRasterImageClass) -> int

Set: Contrast(self: AcadRasterImageClass) = value
"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: AcadRasterImageClass) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: AcadRasterImageClass) -> object

"""

    EntityName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityName(self: AcadRasterImageClass) -> str

"""

    EntityTransparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityTransparency(self: AcadRasterImageClass) -> str

Set: EntityTransparency(self: AcadRasterImageClass) = value
"""

    EntityType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityType(self: AcadRasterImageClass) -> int

"""

    Fade = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Fade(self: AcadRasterImageClass) -> int

Set: Fade(self: AcadRasterImageClass) = value
"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: AcadRasterImageClass) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: AcadRasterImageClass) -> bool

"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: AcadRasterImageClass) -> float

"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: AcadRasterImageClass) -> AcadHyperlinks

"""

    ImageFile = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ImageFile(self: AcadRasterImageClass) -> str

Set: ImageFile(self: AcadRasterImageClass) = value
"""

    ImageHeight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ImageHeight(self: AcadRasterImageClass) -> float

Set: ImageHeight(self: AcadRasterImageClass) = value
"""

    ImageVisibility = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ImageVisibility(self: AcadRasterImageClass) -> bool

Set: ImageVisibility(self: AcadRasterImageClass) = value
"""

    ImageWidth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ImageWidth(self: AcadRasterImageClass) -> float

Set: ImageWidth(self: AcadRasterImageClass) = value
"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layer(self: AcadRasterImageClass) -> str

Set: Layer(self: AcadRasterImageClass) = value
"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: AcadRasterImageClass) -> str

Set: Linetype(self: AcadRasterImageClass) = value
"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeScale(self: AcadRasterImageClass) -> float

Set: LinetypeScale(self: AcadRasterImageClass) = value
"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: AcadRasterImageClass) -> ACAD_LWEIGHT

Set: Lineweight(self: AcadRasterImageClass) = value
"""

    Material = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Material(self: AcadRasterImageClass) -> str

Set: Material(self: AcadRasterImageClass) = value
"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: AcadRasterImageClass) -> str

Set: Name(self: AcadRasterImageClass) = value
"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: AcadRasterImageClass) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: AcadRasterImageClass) -> str

"""

    Origin = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Origin(self: AcadRasterImageClass) -> object

Set: Origin(self: AcadRasterImageClass) = value
"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: AcadRasterImageClass) -> Int64

"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: AcadRasterImageClass) -> str

Set: PlotStyleName(self: AcadRasterImageClass) = value
"""

    Rotation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Rotation(self: AcadRasterImageClass) -> float

Set: Rotation(self: AcadRasterImageClass) = value
"""

    ScaleFactor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ScaleFactor(self: AcadRasterImageClass) -> float

Set: ScaleFactor(self: AcadRasterImageClass) = value
"""

    ShowRotation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowRotation(self: AcadRasterImageClass) -> bool

Set: ShowRotation(self: AcadRasterImageClass) = value
"""

    transparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: transparency(self: AcadRasterImageClass) -> bool

Set: transparency(self: AcadRasterImageClass) = value
"""

    TrueColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TrueColor(self: AcadRasterImageClass) -> AcadAcCmColor

Set: TrueColor(self: AcadRasterImageClass) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: AcadRasterImageClass) -> bool

Set: Visible(self: AcadRasterImageClass) = value
"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: AcadRasterImageClass) -> float

"""


    Modified = None


class IAcadRay(IAcadEntity, IAcadObject):
    # no doc
    def ArrayPolar(self, NumberOfObjects, AngleToFill, CenterPoint):
        """ ArrayPolar(self: IAcadRay, NumberOfObjects: int, AngleToFill: float, CenterPoint: object) -> object """
        pass

    def ArrayRectangular(self, NumberOfRows, NumberOfColumns, NumberOfLevels, DistBetweenRows, DistBetweenCols, DistBetweenLevels):
        """ ArrayRectangular(self: IAcadRay, NumberOfRows: int, NumberOfColumns: int, NumberOfLevels: int, DistBetweenRows: float, DistBetweenCols: float, DistBetweenLevels: float) -> object """
        pass

    def Copy(self):
        """ Copy(self: IAcadRay) -> object """
        pass

    def Delete(self):
        """ Delete(self: IAcadRay) """
        pass

    def Erase(self):
        """ Erase(self: IAcadRay) """
        pass

    def GetBoundingBox(self, MinPoint, MaxPoint):
        """ GetBoundingBox(self: IAcadRay) -> (object, object) """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: IAcadRay) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: IAcadRay, AppName: str) -> (object, object) """
        pass

    def Highlight(self, HighlightFlag):
        """ Highlight(self: IAcadRay, HighlightFlag: bool) """
        pass

    def IntersectWith(self, IntersectObject, option):
        """ IntersectWith(self: IAcadRay, IntersectObject: object, option: AcExtendOption) -> object """
        pass

    def Mirror(self, Point1, Point2):
        """ Mirror(self: IAcadRay, Point1: object, Point2: object) -> object """
        pass

    def Mirror3D(self, Point1, Point2, point3):
        """ Mirror3D(self: IAcadRay, Point1: object, Point2: object, point3: object) -> object """
        pass

    def Move(self, FromPoint, ToPoint):
        """ Move(self: IAcadRay, FromPoint: object, ToPoint: object) """
        pass

    def Rotate(self, BasePoint, RotationAngle):
        """ Rotate(self: IAcadRay, BasePoint: object, RotationAngle: float) """
        pass

    def Rotate3D(self, Point1, Point2, RotationAngle):
        """ Rotate3D(self: IAcadRay, Point1: object, Point2: object, RotationAngle: float) """
        pass

    def ScaleEntity(self, BasePoint, ScaleFactor):
        """ ScaleEntity(self: IAcadRay, BasePoint: object, ScaleFactor: float) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: IAcadRay, XDataType: object, XDataValue: object) """
        pass

    def TransformBy(self, TransformationMatrix):
        """ TransformBy(self: IAcadRay, TransformationMatrix: object) """
        pass

    def Update(self):
        """ Update(self: IAcadRay) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IAcadRay) -> object

"""

    BasePoint = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BasePoint(self: IAcadRay) -> object

Set: BasePoint(self: IAcadRay) = value
"""

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: IAcadRay) -> ACAD_COLOR

Set: color(self: IAcadRay) = value
"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: IAcadRay) -> AcadDatabase

"""

    DirectionVector = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DirectionVector(self: IAcadRay) -> object

Set: DirectionVector(self: IAcadRay) = value
"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: IAcadRay) -> object

"""

    EntityName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityName(self: IAcadRay) -> str

"""

    EntityTransparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityTransparency(self: IAcadRay) -> str

Set: EntityTransparency(self: IAcadRay) = value
"""

    EntityType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityType(self: IAcadRay) -> int

"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: IAcadRay) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: IAcadRay) -> bool

"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: IAcadRay) -> AcadHyperlinks

"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layer(self: IAcadRay) -> str

Set: Layer(self: IAcadRay) = value
"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: IAcadRay) -> str

Set: Linetype(self: IAcadRay) = value
"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeScale(self: IAcadRay) -> float

Set: LinetypeScale(self: IAcadRay) = value
"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: IAcadRay) -> ACAD_LWEIGHT

Set: Lineweight(self: IAcadRay) = value
"""

    Material = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Material(self: IAcadRay) -> str

Set: Material(self: IAcadRay) = value
"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: IAcadRay) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: IAcadRay) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: IAcadRay) -> Int64

"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: IAcadRay) -> str

Set: PlotStyleName(self: IAcadRay) = value
"""

    SecondPoint = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SecondPoint(self: IAcadRay) -> object

Set: SecondPoint(self: IAcadRay) = value
"""

    TrueColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TrueColor(self: IAcadRay) -> AcadAcCmColor

Set: TrueColor(self: IAcadRay) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: IAcadRay) -> bool

Set: Visible(self: IAcadRay) = value
"""



class AcadRay(IAcadRay, IAcadEntity, IAcadObject, IAcadObjectEvents_Event):
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class AcadRayClass(__ComObject):
    # no doc
    def add_Modified(self, A_1):
        """ add_Modified(self: AcadRayClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def ArrayPolar(self, NumberOfObjects, AngleToFill, CenterPoint):
        """ ArrayPolar(self: AcadRayClass, NumberOfObjects: int, AngleToFill: float, CenterPoint: object) -> object """
        pass

    def ArrayRectangular(self, NumberOfRows, NumberOfColumns, NumberOfLevels, DistBetweenRows, DistBetweenCols, DistBetweenLevels):
        """ ArrayRectangular(self: AcadRayClass, NumberOfRows: int, NumberOfColumns: int, NumberOfLevels: int, DistBetweenRows: float, DistBetweenCols: float, DistBetweenLevels: float) -> object """
        pass

    def Copy(self):
        """ Copy(self: AcadRayClass) -> object """
        pass

    def Delete(self):
        """ Delete(self: AcadRayClass) """
        pass

    def Erase(self):
        """ Erase(self: AcadRayClass) """
        pass

    def GetBoundingBox(self, MinPoint, MaxPoint):
        """ GetBoundingBox(self: AcadRayClass) -> (object, object) """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: AcadRayClass) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: AcadRayClass, AppName: str) -> (object, object) """
        pass

    def Highlight(self, HighlightFlag):
        """ Highlight(self: AcadRayClass, HighlightFlag: bool) """
        pass

    def IntersectWith(self, IntersectObject, option):
        """ IntersectWith(self: AcadRayClass, IntersectObject: object, option: AcExtendOption) -> object """
        pass

    def Mirror(self, Point1, Point2):
        """ Mirror(self: AcadRayClass, Point1: object, Point2: object) -> object """
        pass

    def Mirror3D(self, Point1, Point2, point3):
        """ Mirror3D(self: AcadRayClass, Point1: object, Point2: object, point3: object) -> object """
        pass

    def Move(self, FromPoint, ToPoint):
        """ Move(self: AcadRayClass, FromPoint: object, ToPoint: object) """
        pass

    def remove_Modified(self, A_1):
        """ remove_Modified(self: AcadRayClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def Rotate(self, BasePoint, RotationAngle):
        """ Rotate(self: AcadRayClass, BasePoint: object, RotationAngle: float) """
        pass

    def Rotate3D(self, Point1, Point2, RotationAngle):
        """ Rotate3D(self: AcadRayClass, Point1: object, Point2: object, RotationAngle: float) """
        pass

    def ScaleEntity(self, BasePoint, ScaleFactor):
        """ ScaleEntity(self: AcadRayClass, BasePoint: object, ScaleFactor: float) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: AcadRayClass, XDataType: object, XDataValue: object) """
        pass

    def TransformBy(self, TransformationMatrix):
        """ TransformBy(self: AcadRayClass, TransformationMatrix: object) """
        pass

    def Update(self):
        """ Update(self: AcadRayClass) """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: AcadRayClass) -> object

"""

    BasePoint = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BasePoint(self: AcadRayClass) -> object

Set: BasePoint(self: AcadRayClass) = value
"""

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: AcadRayClass) -> ACAD_COLOR

Set: color(self: AcadRayClass) = value
"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: AcadRayClass) -> AcadDatabase

"""

    DirectionVector = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DirectionVector(self: AcadRayClass) -> object

Set: DirectionVector(self: AcadRayClass) = value
"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: AcadRayClass) -> object

"""

    EntityName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityName(self: AcadRayClass) -> str

"""

    EntityTransparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityTransparency(self: AcadRayClass) -> str

Set: EntityTransparency(self: AcadRayClass) = value
"""

    EntityType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityType(self: AcadRayClass) -> int

"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: AcadRayClass) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: AcadRayClass) -> bool

"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: AcadRayClass) -> AcadHyperlinks

"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layer(self: AcadRayClass) -> str

Set: Layer(self: AcadRayClass) = value
"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: AcadRayClass) -> str

Set: Linetype(self: AcadRayClass) = value
"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeScale(self: AcadRayClass) -> float

Set: LinetypeScale(self: AcadRayClass) = value
"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: AcadRayClass) -> ACAD_LWEIGHT

Set: Lineweight(self: AcadRayClass) = value
"""

    Material = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Material(self: AcadRayClass) -> str

Set: Material(self: AcadRayClass) = value
"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: AcadRayClass) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: AcadRayClass) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: AcadRayClass) -> Int64

"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: AcadRayClass) -> str

Set: PlotStyleName(self: AcadRayClass) = value
"""

    SecondPoint = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SecondPoint(self: AcadRayClass) -> object

Set: SecondPoint(self: AcadRayClass) = value
"""

    TrueColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TrueColor(self: AcadRayClass) -> AcadAcCmColor

Set: TrueColor(self: AcadRayClass) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: AcadRayClass) -> bool

Set: Visible(self: AcadRayClass) = value
"""


    Modified = None


class IAcadRegion(IAcadEntity, IAcadObject):
    # no doc
    def ArrayPolar(self, NumberOfObjects, AngleToFill, CenterPoint):
        """ ArrayPolar(self: IAcadRegion, NumberOfObjects: int, AngleToFill: float, CenterPoint: object) -> object """
        pass

    def ArrayRectangular(self, NumberOfRows, NumberOfColumns, NumberOfLevels, DistBetweenRows, DistBetweenCols, DistBetweenLevels):
        """ ArrayRectangular(self: IAcadRegion, NumberOfRows: int, NumberOfColumns: int, NumberOfLevels: int, DistBetweenRows: float, DistBetweenCols: float, DistBetweenLevels: float) -> object """
        pass

    def Boolean(self, Operation, Object):
        """ Boolean(self: IAcadRegion, Operation: AcBooleanType, Object: AcadRegion) """
        pass

    def Copy(self):
        """ Copy(self: IAcadRegion) -> object """
        pass

    def Delete(self):
        """ Delete(self: IAcadRegion) """
        pass

    def Erase(self):
        """ Erase(self: IAcadRegion) """
        pass

    def Explode(self):
        """ Explode(self: IAcadRegion) -> object """
        pass

    def GetBoundingBox(self, MinPoint, MaxPoint):
        """ GetBoundingBox(self: IAcadRegion) -> (object, object) """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: IAcadRegion) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: IAcadRegion, AppName: str) -> (object, object) """
        pass

    def Highlight(self, HighlightFlag):
        """ Highlight(self: IAcadRegion, HighlightFlag: bool) """
        pass

    def IntersectWith(self, IntersectObject, option):
        """ IntersectWith(self: IAcadRegion, IntersectObject: object, option: AcExtendOption) -> object """
        pass

    def Mirror(self, Point1, Point2):
        """ Mirror(self: IAcadRegion, Point1: object, Point2: object) -> object """
        pass

    def Mirror3D(self, Point1, Point2, point3):
        """ Mirror3D(self: IAcadRegion, Point1: object, Point2: object, point3: object) -> object """
        pass

    def Move(self, FromPoint, ToPoint):
        """ Move(self: IAcadRegion, FromPoint: object, ToPoint: object) """
        pass

    def Rotate(self, BasePoint, RotationAngle):
        """ Rotate(self: IAcadRegion, BasePoint: object, RotationAngle: float) """
        pass

    def Rotate3D(self, Point1, Point2, RotationAngle):
        """ Rotate3D(self: IAcadRegion, Point1: object, Point2: object, RotationAngle: float) """
        pass

    def ScaleEntity(self, BasePoint, ScaleFactor):
        """ ScaleEntity(self: IAcadRegion, BasePoint: object, ScaleFactor: float) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: IAcadRegion, XDataType: object, XDataValue: object) """
        pass

    def TransformBy(self, TransformationMatrix):
        """ TransformBy(self: IAcadRegion, TransformationMatrix: object) """
        pass

    def Update(self):
        """ Update(self: IAcadRegion) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IAcadRegion) -> object

"""

    Area = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Area(self: IAcadRegion) -> float

"""

    Centroid = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Centroid(self: IAcadRegion) -> object

"""

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: IAcadRegion) -> ACAD_COLOR

Set: color(self: IAcadRegion) = value
"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: IAcadRegion) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: IAcadRegion) -> object

"""

    EntityName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityName(self: IAcadRegion) -> str

"""

    EntityTransparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityTransparency(self: IAcadRegion) -> str

Set: EntityTransparency(self: IAcadRegion) = value
"""

    EntityType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityType(self: IAcadRegion) -> int

"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: IAcadRegion) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: IAcadRegion) -> bool

"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: IAcadRegion) -> AcadHyperlinks

"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layer(self: IAcadRegion) -> str

Set: Layer(self: IAcadRegion) = value
"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: IAcadRegion) -> str

Set: Linetype(self: IAcadRegion) = value
"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeScale(self: IAcadRegion) -> float

Set: LinetypeScale(self: IAcadRegion) = value
"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: IAcadRegion) -> ACAD_LWEIGHT

Set: Lineweight(self: IAcadRegion) = value
"""

    Material = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Material(self: IAcadRegion) -> str

Set: Material(self: IAcadRegion) = value
"""

    MomentOfInertia = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MomentOfInertia(self: IAcadRegion) -> object

"""

    Normal = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Normal(self: IAcadRegion) -> object

"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: IAcadRegion) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: IAcadRegion) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: IAcadRegion) -> Int64

"""

    Perimeter = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Perimeter(self: IAcadRegion) -> float

"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: IAcadRegion) -> str

Set: PlotStyleName(self: IAcadRegion) = value
"""

    PrincipalDirections = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PrincipalDirections(self: IAcadRegion) -> object

"""

    PrincipalMoments = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PrincipalMoments(self: IAcadRegion) -> object

"""

    ProductOfInertia = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ProductOfInertia(self: IAcadRegion) -> float

"""

    RadiiOfGyration = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RadiiOfGyration(self: IAcadRegion) -> object

"""

    TrueColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TrueColor(self: IAcadRegion) -> AcadAcCmColor

Set: TrueColor(self: IAcadRegion) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: IAcadRegion) -> bool

Set: Visible(self: IAcadRegion) = value
"""



class AcadRegion(IAcadRegion, IAcadEntity, IAcadObject, IAcadObjectEvents_Event):
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class AcadRegionClass(__ComObject):
    # no doc
    def add_Modified(self, A_1):
        """ add_Modified(self: AcadRegionClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def ArrayPolar(self, NumberOfObjects, AngleToFill, CenterPoint):
        """ ArrayPolar(self: AcadRegionClass, NumberOfObjects: int, AngleToFill: float, CenterPoint: object) -> object """
        pass

    def ArrayRectangular(self, NumberOfRows, NumberOfColumns, NumberOfLevels, DistBetweenRows, DistBetweenCols, DistBetweenLevels):
        """ ArrayRectangular(self: AcadRegionClass, NumberOfRows: int, NumberOfColumns: int, NumberOfLevels: int, DistBetweenRows: float, DistBetweenCols: float, DistBetweenLevels: float) -> object """
        pass

    def Boolean(self, Operation, Object):
        """ Boolean(self: AcadRegionClass, Operation: AcBooleanType, Object: AcadRegion) """
        pass

    def Copy(self):
        """ Copy(self: AcadRegionClass) -> object """
        pass

    def Delete(self):
        """ Delete(self: AcadRegionClass) """
        pass

    def Erase(self):
        """ Erase(self: AcadRegionClass) """
        pass

    def Explode(self):
        """ Explode(self: AcadRegionClass) -> object """
        pass

    def GetBoundingBox(self, MinPoint, MaxPoint):
        """ GetBoundingBox(self: AcadRegionClass) -> (object, object) """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: AcadRegionClass) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: AcadRegionClass, AppName: str) -> (object, object) """
        pass

    def Highlight(self, HighlightFlag):
        """ Highlight(self: AcadRegionClass, HighlightFlag: bool) """
        pass

    def IntersectWith(self, IntersectObject, option):
        """ IntersectWith(self: AcadRegionClass, IntersectObject: object, option: AcExtendOption) -> object """
        pass

    def Mirror(self, Point1, Point2):
        """ Mirror(self: AcadRegionClass, Point1: object, Point2: object) -> object """
        pass

    def Mirror3D(self, Point1, Point2, point3):
        """ Mirror3D(self: AcadRegionClass, Point1: object, Point2: object, point3: object) -> object """
        pass

    def Move(self, FromPoint, ToPoint):
        """ Move(self: AcadRegionClass, FromPoint: object, ToPoint: object) """
        pass

    def remove_Modified(self, A_1):
        """ remove_Modified(self: AcadRegionClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def Rotate(self, BasePoint, RotationAngle):
        """ Rotate(self: AcadRegionClass, BasePoint: object, RotationAngle: float) """
        pass

    def Rotate3D(self, Point1, Point2, RotationAngle):
        """ Rotate3D(self: AcadRegionClass, Point1: object, Point2: object, RotationAngle: float) """
        pass

    def ScaleEntity(self, BasePoint, ScaleFactor):
        """ ScaleEntity(self: AcadRegionClass, BasePoint: object, ScaleFactor: float) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: AcadRegionClass, XDataType: object, XDataValue: object) """
        pass

    def TransformBy(self, TransformationMatrix):
        """ TransformBy(self: AcadRegionClass, TransformationMatrix: object) """
        pass

    def Update(self):
        """ Update(self: AcadRegionClass) """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: AcadRegionClass) -> object

"""

    Area = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Area(self: AcadRegionClass) -> float

"""

    Centroid = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Centroid(self: AcadRegionClass) -> object

"""

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: AcadRegionClass) -> ACAD_COLOR

Set: color(self: AcadRegionClass) = value
"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: AcadRegionClass) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: AcadRegionClass) -> object

"""

    EntityName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityName(self: AcadRegionClass) -> str

"""

    EntityTransparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityTransparency(self: AcadRegionClass) -> str

Set: EntityTransparency(self: AcadRegionClass) = value
"""

    EntityType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityType(self: AcadRegionClass) -> int

"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: AcadRegionClass) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: AcadRegionClass) -> bool

"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: AcadRegionClass) -> AcadHyperlinks

"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layer(self: AcadRegionClass) -> str

Set: Layer(self: AcadRegionClass) = value
"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: AcadRegionClass) -> str

Set: Linetype(self: AcadRegionClass) = value
"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeScale(self: AcadRegionClass) -> float

Set: LinetypeScale(self: AcadRegionClass) = value
"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: AcadRegionClass) -> ACAD_LWEIGHT

Set: Lineweight(self: AcadRegionClass) = value
"""

    Material = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Material(self: AcadRegionClass) -> str

Set: Material(self: AcadRegionClass) = value
"""

    MomentOfInertia = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MomentOfInertia(self: AcadRegionClass) -> object

"""

    Normal = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Normal(self: AcadRegionClass) -> object

"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: AcadRegionClass) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: AcadRegionClass) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: AcadRegionClass) -> Int64

"""

    Perimeter = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Perimeter(self: AcadRegionClass) -> float

"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: AcadRegionClass) -> str

Set: PlotStyleName(self: AcadRegionClass) = value
"""

    PrincipalDirections = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PrincipalDirections(self: AcadRegionClass) -> object

"""

    PrincipalMoments = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PrincipalMoments(self: AcadRegionClass) -> object

"""

    ProductOfInertia = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ProductOfInertia(self: AcadRegionClass) -> float

"""

    RadiiOfGyration = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RadiiOfGyration(self: AcadRegionClass) -> object

"""

    TrueColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TrueColor(self: AcadRegionClass) -> AcadAcCmColor

Set: TrueColor(self: AcadRegionClass) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: AcadRegionClass) -> bool

Set: Visible(self: AcadRegionClass) = value
"""


    Modified = None


class IAcadRegisteredApplication(IAcadObject):
    # no doc
    def Delete(self):
        """ Delete(self: IAcadRegisteredApplication) """
        pass

    def Erase(self):
        """ Erase(self: IAcadRegisteredApplication) """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: IAcadRegisteredApplication) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: IAcadRegisteredApplication, AppName: str) -> (object, object) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: IAcadRegisteredApplication, XDataType: object, XDataValue: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IAcadRegisteredApplication) -> object

"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: IAcadRegisteredApplication) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: IAcadRegisteredApplication) -> object

"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: IAcadRegisteredApplication) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: IAcadRegisteredApplication) -> bool

"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: IAcadRegisteredApplication) -> str

Set: Name(self: IAcadRegisteredApplication) = value
"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: IAcadRegisteredApplication) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: IAcadRegisteredApplication) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: IAcadRegisteredApplication) -> Int64

"""



class AcadRegisteredApplication(IAcadRegisteredApplication, IAcadObject, IAcadObjectEvents_Event):
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class AcadRegisteredApplicationClass(__ComObject):
    # no doc
    def add_Modified(self, A_1):
        """ add_Modified(self: AcadRegisteredApplicationClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def Delete(self):
        """ Delete(self: AcadRegisteredApplicationClass) """
        pass

    def Erase(self):
        """ Erase(self: AcadRegisteredApplicationClass) """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: AcadRegisteredApplicationClass) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: AcadRegisteredApplicationClass, AppName: str) -> (object, object) """
        pass

    def remove_Modified(self, A_1):
        """ remove_Modified(self: AcadRegisteredApplicationClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: AcadRegisteredApplicationClass, XDataType: object, XDataValue: object) """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: AcadRegisteredApplicationClass) -> object

"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: AcadRegisteredApplicationClass) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: AcadRegisteredApplicationClass) -> object

"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: AcadRegisteredApplicationClass) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: AcadRegisteredApplicationClass) -> bool

"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: AcadRegisteredApplicationClass) -> str

Set: Name(self: AcadRegisteredApplicationClass) = value
"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: AcadRegisteredApplicationClass) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: AcadRegisteredApplicationClass) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: AcadRegisteredApplicationClass) -> Int64

"""


    Modified = None


class IAcadRegisteredApplications(IAcadObject, IEnumerable):
    # no doc
    def Add(self, Name):
        """ Add(self: IAcadRegisteredApplications, Name: str) -> AcadRegisteredApplication """
        pass

    def Delete(self):
        """ Delete(self: IAcadRegisteredApplications) """
        pass

    def Erase(self):
        """ Erase(self: IAcadRegisteredApplications) """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: IAcadRegisteredApplications) -> IEnumerator """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: IAcadRegisteredApplications) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: IAcadRegisteredApplications, AppName: str) -> (object, object) """
        pass

    def Item(self, Index):
        """ Item(self: IAcadRegisteredApplications, Index: object) -> AcadRegisteredApplication """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: IAcadRegisteredApplications, XDataType: object, XDataValue: object) """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerable) -> object """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IAcadRegisteredApplications) -> object

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: IAcadRegisteredApplications) -> int

"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: IAcadRegisteredApplications) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: IAcadRegisteredApplications) -> object

"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: IAcadRegisteredApplications) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: IAcadRegisteredApplications) -> bool

"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: IAcadRegisteredApplications) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: IAcadRegisteredApplications) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: IAcadRegisteredApplications) -> Int64

"""



class AcadRegisteredApplications(IAcadRegisteredApplications, IAcadObject, IEnumerable, IAcadObjectEvents_Event):
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerable) -> object """
        pass


class AcadRegisteredApplicationsClass(__ComObject):
    # no doc
    def Add(self, Name):
        """ Add(self: AcadRegisteredApplicationsClass, Name: str) -> AcadRegisteredApplication """
        pass

    def add_Modified(self, A_1):
        """ add_Modified(self: AcadRegisteredApplicationsClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def Delete(self):
        """ Delete(self: AcadRegisteredApplicationsClass) """
        pass

    def Erase(self):
        """ Erase(self: AcadRegisteredApplicationsClass) """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: AcadRegisteredApplicationsClass) -> IEnumerator """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: AcadRegisteredApplicationsClass) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: AcadRegisteredApplicationsClass, AppName: str) -> (object, object) """
        pass

    def Item(self, Index):
        """ Item(self: AcadRegisteredApplicationsClass, Index: object) -> AcadRegisteredApplication """
        pass

    def remove_Modified(self, A_1):
        """ remove_Modified(self: AcadRegisteredApplicationsClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: AcadRegisteredApplicationsClass, XDataType: object, XDataValue: object) """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerable) -> object """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: AcadRegisteredApplicationsClass) -> object

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: AcadRegisteredApplicationsClass) -> int

"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: AcadRegisteredApplicationsClass) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: AcadRegisteredApplicationsClass) -> object

"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: AcadRegisteredApplicationsClass) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: AcadRegisteredApplicationsClass) -> bool

"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: AcadRegisteredApplicationsClass) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: AcadRegisteredApplicationsClass) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: AcadRegisteredApplicationsClass) -> Int64

"""


    Modified = None


class IAcadRevolvedSurface(IAcadSurface, IAcadEntity, IAcadObject):
    # no doc
    def ArrayPolar(self, NumberOfObjects, AngleToFill, CenterPoint):
        """ ArrayPolar(self: IAcadRevolvedSurface, NumberOfObjects: int, AngleToFill: float, CenterPoint: object) -> object """
        pass

    def ArrayRectangular(self, NumberOfRows, NumberOfColumns, NumberOfLevels, DistBetweenRows, DistBetweenCols, DistBetweenLevels):
        """ ArrayRectangular(self: IAcadRevolvedSurface, NumberOfRows: int, NumberOfColumns: int, NumberOfLevels: int, DistBetweenRows: float, DistBetweenCols: float, DistBetweenLevels: float) -> object """
        pass

    def Copy(self):
        """ Copy(self: IAcadRevolvedSurface) -> object """
        pass

    def Delete(self):
        """ Delete(self: IAcadRevolvedSurface) """
        pass

    def Erase(self):
        """ Erase(self: IAcadRevolvedSurface) """
        pass

    def GetBoundingBox(self, MinPoint, MaxPoint):
        """ GetBoundingBox(self: IAcadRevolvedSurface) -> (object, object) """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: IAcadRevolvedSurface) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: IAcadRevolvedSurface, AppName: str) -> (object, object) """
        pass

    def Highlight(self, HighlightFlag):
        """ Highlight(self: IAcadRevolvedSurface, HighlightFlag: bool) """
        pass

    def IntersectWith(self, IntersectObject, option):
        """ IntersectWith(self: IAcadRevolvedSurface, IntersectObject: object, option: AcExtendOption) -> object """
        pass

    def Mirror(self, Point1, Point2):
        """ Mirror(self: IAcadRevolvedSurface, Point1: object, Point2: object) -> object """
        pass

    def Mirror3D(self, Point1, Point2, point3):
        """ Mirror3D(self: IAcadRevolvedSurface, Point1: object, Point2: object, point3: object) -> object """
        pass

    def Move(self, FromPoint, ToPoint):
        """ Move(self: IAcadRevolvedSurface, FromPoint: object, ToPoint: object) """
        pass

    def Rotate(self, BasePoint, RotationAngle):
        """ Rotate(self: IAcadRevolvedSurface, BasePoint: object, RotationAngle: float) """
        pass

    def Rotate3D(self, Point1, Point2, RotationAngle):
        """ Rotate3D(self: IAcadRevolvedSurface, Point1: object, Point2: object, RotationAngle: float) """
        pass

    def ScaleEntity(self, BasePoint, ScaleFactor):
        """ ScaleEntity(self: IAcadRevolvedSurface, BasePoint: object, ScaleFactor: float) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: IAcadRevolvedSurface, XDataType: object, XDataValue: object) """
        pass

    def TransformBy(self, TransformationMatrix):
        """ TransformBy(self: IAcadRevolvedSurface, TransformationMatrix: object) """
        pass

    def Update(self):
        """ Update(self: IAcadRevolvedSurface) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IAcadRevolvedSurface) -> object

"""

    AxisDirection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AxisDirection(self: IAcadRevolvedSurface) -> object

"""

    AxisPosition = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AxisPosition(self: IAcadRevolvedSurface) -> object

Set: AxisPosition(self: IAcadRevolvedSurface) = value
"""

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: IAcadRevolvedSurface) -> ACAD_COLOR

Set: color(self: IAcadRevolvedSurface) = value
"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: IAcadRevolvedSurface) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: IAcadRevolvedSurface) -> object

"""

    EdgeExtensionDistances = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EdgeExtensionDistances(self: IAcadRevolvedSurface) -> object

Set: EdgeExtensionDistances(self: IAcadRevolvedSurface) = value
"""

    EntityName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityName(self: IAcadRevolvedSurface) -> str

"""

    EntityTransparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityTransparency(self: IAcadRevolvedSurface) -> str

Set: EntityTransparency(self: IAcadRevolvedSurface) = value
"""

    EntityType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityType(self: IAcadRevolvedSurface) -> int

"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: IAcadRevolvedSurface) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: IAcadRevolvedSurface) -> bool

"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: IAcadRevolvedSurface) -> AcadHyperlinks

"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layer(self: IAcadRevolvedSurface) -> str

Set: Layer(self: IAcadRevolvedSurface) = value
"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: IAcadRevolvedSurface) -> str

Set: Linetype(self: IAcadRevolvedSurface) = value
"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeScale(self: IAcadRevolvedSurface) -> float

Set: LinetypeScale(self: IAcadRevolvedSurface) = value
"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: IAcadRevolvedSurface) -> ACAD_LWEIGHT

Set: Lineweight(self: IAcadRevolvedSurface) = value
"""

    MaintainAssociativity = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MaintainAssociativity(self: IAcadRevolvedSurface) -> int

Set: MaintainAssociativity(self: IAcadRevolvedSurface) = value
"""

    Material = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Material(self: IAcadRevolvedSurface) -> str

Set: Material(self: IAcadRevolvedSurface) = value
"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: IAcadRevolvedSurface) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: IAcadRevolvedSurface) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: IAcadRevolvedSurface) -> Int64

"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: IAcadRevolvedSurface) -> str

Set: PlotStyleName(self: IAcadRevolvedSurface) = value
"""

    RevolutionAngle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RevolutionAngle(self: IAcadRevolvedSurface) -> float

Set: RevolutionAngle(self: IAcadRevolvedSurface) = value
"""

    ShowAssociativity = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowAssociativity(self: IAcadRevolvedSurface) -> bool

Set: ShowAssociativity(self: IAcadRevolvedSurface) = value
"""

    SurfaceType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SurfaceType(self: IAcadRevolvedSurface) -> str

"""

    SurfTrimAssociativity = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SurfTrimAssociativity(self: IAcadRevolvedSurface) -> object

Set: SurfTrimAssociativity(self: IAcadRevolvedSurface) = value
"""

    TrueColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TrueColor(self: IAcadRevolvedSurface) -> AcadAcCmColor

Set: TrueColor(self: IAcadRevolvedSurface) = value
"""

    UIsolineDensity = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: UIsolineDensity(self: IAcadRevolvedSurface) -> int

Set: UIsolineDensity(self: IAcadRevolvedSurface) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: IAcadRevolvedSurface) -> bool

Set: Visible(self: IAcadRevolvedSurface) = value
"""

    VIsolineDensity = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VIsolineDensity(self: IAcadRevolvedSurface) -> int

Set: VIsolineDensity(self: IAcadRevolvedSurface) = value
"""

    WireframeType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: WireframeType(self: IAcadRevolvedSurface) -> AcWireframeType

Set: WireframeType(self: IAcadRevolvedSurface) = value
"""



class AcadRevolvedSurface(IAcadRevolvedSurface, IAcadSurface, IAcadEntity, IAcadObject, IAcadObjectEvents_Event):
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class AcadRevolvedSurfaceClass(__ComObject):
    # no doc
    def add_Modified(self, A_1):
        """ add_Modified(self: AcadRevolvedSurfaceClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def ArrayPolar(self, NumberOfObjects, AngleToFill, CenterPoint):
        """ ArrayPolar(self: AcadRevolvedSurfaceClass, NumberOfObjects: int, AngleToFill: float, CenterPoint: object) -> object """
        pass

    def ArrayRectangular(self, NumberOfRows, NumberOfColumns, NumberOfLevels, DistBetweenRows, DistBetweenCols, DistBetweenLevels):
        """ ArrayRectangular(self: AcadRevolvedSurfaceClass, NumberOfRows: int, NumberOfColumns: int, NumberOfLevels: int, DistBetweenRows: float, DistBetweenCols: float, DistBetweenLevels: float) -> object """
        pass

    def Copy(self):
        """ Copy(self: AcadRevolvedSurfaceClass) -> object """
        pass

    def Delete(self):
        """ Delete(self: AcadRevolvedSurfaceClass) """
        pass

    def Erase(self):
        """ Erase(self: AcadRevolvedSurfaceClass) """
        pass

    def GetBoundingBox(self, MinPoint, MaxPoint):
        """ GetBoundingBox(self: AcadRevolvedSurfaceClass) -> (object, object) """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: AcadRevolvedSurfaceClass) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: AcadRevolvedSurfaceClass, AppName: str) -> (object, object) """
        pass

    def Highlight(self, HighlightFlag):
        """ Highlight(self: AcadRevolvedSurfaceClass, HighlightFlag: bool) """
        pass

    def IntersectWith(self, IntersectObject, option):
        """ IntersectWith(self: AcadRevolvedSurfaceClass, IntersectObject: object, option: AcExtendOption) -> object """
        pass

    def Mirror(self, Point1, Point2):
        """ Mirror(self: AcadRevolvedSurfaceClass, Point1: object, Point2: object) -> object """
        pass

    def Mirror3D(self, Point1, Point2, point3):
        """ Mirror3D(self: AcadRevolvedSurfaceClass, Point1: object, Point2: object, point3: object) -> object """
        pass

    def Move(self, FromPoint, ToPoint):
        """ Move(self: AcadRevolvedSurfaceClass, FromPoint: object, ToPoint: object) """
        pass

    def remove_Modified(self, A_1):
        """ remove_Modified(self: AcadRevolvedSurfaceClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def Rotate(self, BasePoint, RotationAngle):
        """ Rotate(self: AcadRevolvedSurfaceClass, BasePoint: object, RotationAngle: float) """
        pass

    def Rotate3D(self, Point1, Point2, RotationAngle):
        """ Rotate3D(self: AcadRevolvedSurfaceClass, Point1: object, Point2: object, RotationAngle: float) """
        pass

    def ScaleEntity(self, BasePoint, ScaleFactor):
        """ ScaleEntity(self: AcadRevolvedSurfaceClass, BasePoint: object, ScaleFactor: float) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: AcadRevolvedSurfaceClass, XDataType: object, XDataValue: object) """
        pass

    def TransformBy(self, TransformationMatrix):
        """ TransformBy(self: AcadRevolvedSurfaceClass, TransformationMatrix: object) """
        pass

    def Update(self):
        """ Update(self: AcadRevolvedSurfaceClass) """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: AcadRevolvedSurfaceClass) -> object

"""

    AxisDirection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AxisDirection(self: AcadRevolvedSurfaceClass) -> object

"""

    AxisPosition = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AxisPosition(self: AcadRevolvedSurfaceClass) -> object

Set: AxisPosition(self: AcadRevolvedSurfaceClass) = value
"""

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: AcadRevolvedSurfaceClass) -> ACAD_COLOR

Set: color(self: AcadRevolvedSurfaceClass) = value
"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: AcadRevolvedSurfaceClass) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: AcadRevolvedSurfaceClass) -> object

"""

    EdgeExtensionDistances = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EdgeExtensionDistances(self: AcadRevolvedSurfaceClass) -> object

Set: EdgeExtensionDistances(self: AcadRevolvedSurfaceClass) = value
"""

    EntityName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityName(self: AcadRevolvedSurfaceClass) -> str

"""

    EntityTransparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityTransparency(self: AcadRevolvedSurfaceClass) -> str

Set: EntityTransparency(self: AcadRevolvedSurfaceClass) = value
"""

    EntityType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityType(self: AcadRevolvedSurfaceClass) -> int

"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: AcadRevolvedSurfaceClass) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: AcadRevolvedSurfaceClass) -> bool

"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: AcadRevolvedSurfaceClass) -> AcadHyperlinks

"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layer(self: AcadRevolvedSurfaceClass) -> str

Set: Layer(self: AcadRevolvedSurfaceClass) = value
"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: AcadRevolvedSurfaceClass) -> str

Set: Linetype(self: AcadRevolvedSurfaceClass) = value
"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeScale(self: AcadRevolvedSurfaceClass) -> float

Set: LinetypeScale(self: AcadRevolvedSurfaceClass) = value
"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: AcadRevolvedSurfaceClass) -> ACAD_LWEIGHT

Set: Lineweight(self: AcadRevolvedSurfaceClass) = value
"""

    MaintainAssociativity = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MaintainAssociativity(self: AcadRevolvedSurfaceClass) -> int

Set: MaintainAssociativity(self: AcadRevolvedSurfaceClass) = value
"""

    Material = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Material(self: AcadRevolvedSurfaceClass) -> str

Set: Material(self: AcadRevolvedSurfaceClass) = value
"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: AcadRevolvedSurfaceClass) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: AcadRevolvedSurfaceClass) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: AcadRevolvedSurfaceClass) -> Int64

"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: AcadRevolvedSurfaceClass) -> str

Set: PlotStyleName(self: AcadRevolvedSurfaceClass) = value
"""

    RevolutionAngle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RevolutionAngle(self: AcadRevolvedSurfaceClass) -> float

Set: RevolutionAngle(self: AcadRevolvedSurfaceClass) = value
"""

    ShowAssociativity = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowAssociativity(self: AcadRevolvedSurfaceClass) -> bool

Set: ShowAssociativity(self: AcadRevolvedSurfaceClass) = value
"""

    SurfaceType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SurfaceType(self: AcadRevolvedSurfaceClass) -> str

"""

    SurfTrimAssociativity = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SurfTrimAssociativity(self: AcadRevolvedSurfaceClass) -> object

Set: SurfTrimAssociativity(self: AcadRevolvedSurfaceClass) = value
"""

    TrueColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TrueColor(self: AcadRevolvedSurfaceClass) -> AcadAcCmColor

Set: TrueColor(self: AcadRevolvedSurfaceClass) = value
"""

    UIsolineDensity = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: UIsolineDensity(self: AcadRevolvedSurfaceClass) -> int

Set: UIsolineDensity(self: AcadRevolvedSurfaceClass) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: AcadRevolvedSurfaceClass) -> bool

Set: Visible(self: AcadRevolvedSurfaceClass) = value
"""

    VIsolineDensity = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VIsolineDensity(self: AcadRevolvedSurfaceClass) -> int

Set: VIsolineDensity(self: AcadRevolvedSurfaceClass) = value
"""

    WireframeType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: WireframeType(self: AcadRevolvedSurfaceClass) -> AcWireframeType

Set: WireframeType(self: AcadRevolvedSurfaceClass) = value
"""


    Modified = None


class IAcadSection(IAcadEntity, IAcadObject):
    # no doc
    def AddVertex(self, nIndex, val):
        """ AddVertex(self: IAcadSection, nIndex: int, val: object) """
        pass

    def ArrayPolar(self, NumberOfObjects, AngleToFill, CenterPoint):
        """ ArrayPolar(self: IAcadSection, NumberOfObjects: int, AngleToFill: float, CenterPoint: object) -> object """
        pass

    def ArrayRectangular(self, NumberOfRows, NumberOfColumns, NumberOfLevels, DistBetweenRows, DistBetweenCols, DistBetweenLevels):
        """ ArrayRectangular(self: IAcadSection, NumberOfRows: int, NumberOfColumns: int, NumberOfLevels: int, DistBetweenRows: float, DistBetweenCols: float, DistBetweenLevels: float) -> object """
        pass

    def Copy(self):
        """ Copy(self: IAcadSection) -> object """
        pass

    def CreateJog(self, varPt):
        """ CreateJog(self: IAcadSection, varPt: object) """
        pass

    def Delete(self):
        """ Delete(self: IAcadSection) """
        pass

    def Erase(self):
        """ Erase(self: IAcadSection) """
        pass

    def GenerateSectionGeometry(self, pEntity, pIntersectionBoundaryObjs, pIntersectionFillObjs, pBackgroudnObjs, pForegroudObjs, pCurveTangencyObjs):
        """ GenerateSectionGeometry(self: IAcadSection, pEntity: AcadEntity) -> (object, object, object, object, object) """
        pass

    def GetBoundingBox(self, MinPoint, MaxPoint):
        """ GetBoundingBox(self: IAcadSection) -> (object, object) """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: IAcadSection) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: IAcadSection, AppName: str) -> (object, object) """
        pass

    def Highlight(self, HighlightFlag):
        """ Highlight(self: IAcadSection, HighlightFlag: bool) """
        pass

    def HitTest(self, varPtHit, pHit, pSegmentIndex, pPtOnSegment, pSubItem):
        """ HitTest(self: IAcadSection, varPtHit: object) -> (bool, int, object, AcSectionSubItem) """
        pass

    def IntersectWith(self, IntersectObject, option):
        """ IntersectWith(self: IAcadSection, IntersectObject: object, option: AcExtendOption) -> object """
        pass

    def Mirror(self, Point1, Point2):
        """ Mirror(self: IAcadSection, Point1: object, Point2: object) -> object """
        pass

    def Mirror3D(self, Point1, Point2, point3):
        """ Mirror3D(self: IAcadSection, Point1: object, Point2: object, point3: object) -> object """
        pass

    def Move(self, FromPoint, ToPoint):
        """ Move(self: IAcadSection, FromPoint: object, ToPoint: object) """
        pass

    def RemoveVertex(self, nIndex):
        """ RemoveVertex(self: IAcadSection, nIndex: int) """
        pass

    def Rotate(self, BasePoint, RotationAngle):
        """ Rotate(self: IAcadSection, BasePoint: object, RotationAngle: float) """
        pass

    def Rotate3D(self, Point1, Point2, RotationAngle):
        """ Rotate3D(self: IAcadSection, Point1: object, Point2: object, RotationAngle: float) """
        pass

    def ScaleEntity(self, BasePoint, ScaleFactor):
        """ ScaleEntity(self: IAcadSection, BasePoint: object, ScaleFactor: float) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: IAcadSection, XDataType: object, XDataValue: object) """
        pass

    def TransformBy(self, TransformationMatrix):
        """ TransformBy(self: IAcadSection, TransformationMatrix: object) """
        pass

    def Update(self):
        """ Update(self: IAcadSection) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IAcadSection) -> object

"""

    BottomHeight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BottomHeight(self: IAcadSection) -> float

Set: BottomHeight(self: IAcadSection) = value
"""

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: IAcadSection) -> ACAD_COLOR

Set: color(self: IAcadSection) = value
"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: IAcadSection) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: IAcadSection) -> object

"""

    Elevation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Elevation(self: IAcadSection) -> float

Set: Elevation(self: IAcadSection) = value
"""

    EntityName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityName(self: IAcadSection) -> str

"""

    EntityTransparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityTransparency(self: IAcadSection) -> str

Set: EntityTransparency(self: IAcadSection) = value
"""

    EntityType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityType(self: IAcadSection) -> int

"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: IAcadSection) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: IAcadSection) -> bool

"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: IAcadSection) -> AcadHyperlinks

"""

    IndicatorFillColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IndicatorFillColor(self: IAcadSection) -> AcadAcCmColor

Set: IndicatorFillColor(self: IAcadSection) = value
"""

    IndicatorTransparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IndicatorTransparency(self: IAcadSection) -> int

Set: IndicatorTransparency(self: IAcadSection) = value
"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layer(self: IAcadSection) -> str

Set: Layer(self: IAcadSection) = value
"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: IAcadSection) -> str

Set: Linetype(self: IAcadSection) = value
"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeScale(self: IAcadSection) -> float

Set: LinetypeScale(self: IAcadSection) = value
"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: IAcadSection) -> ACAD_LWEIGHT

Set: Lineweight(self: IAcadSection) = value
"""

    LiveSectionEnabled = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LiveSectionEnabled(self: IAcadSection) -> bool

Set: LiveSectionEnabled(self: IAcadSection) = value
"""

    Material = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Material(self: IAcadSection) -> str

Set: Material(self: IAcadSection) = value
"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: IAcadSection) -> str

Set: Name(self: IAcadSection) = value
"""

    Normal = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Normal(self: IAcadSection) -> object

"""

    NumVertices = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: NumVertices(self: IAcadSection) -> int

"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: IAcadSection) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: IAcadSection) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: IAcadSection) -> Int64

"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: IAcadSection) -> str

Set: PlotStyleName(self: IAcadSection) = value
"""

    Settings = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Settings(self: IAcadSection) -> AcadSectionSettings

"""

    State = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: State(self: IAcadSection) -> AcSectionState

Set: State(self: IAcadSection) = value
"""

    TopHeight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TopHeight(self: IAcadSection) -> float

Set: TopHeight(self: IAcadSection) = value
"""

    TrueColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TrueColor(self: IAcadSection) -> AcadAcCmColor

Set: TrueColor(self: IAcadSection) = value
"""

    VerticalDirection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VerticalDirection(self: IAcadSection) -> object

Set: VerticalDirection(self: IAcadSection) = value
"""

    Vertices = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Vertices(self: IAcadSection) -> object

Set: Vertices(self: IAcadSection) = value
"""

    ViewingDirection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ViewingDirection(self: IAcadSection) -> object

Set: ViewingDirection(self: IAcadSection) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: IAcadSection) -> bool

Set: Visible(self: IAcadSection) = value
"""



class IAcadSection2(IAcadSection, IAcadEntity, IAcadObject):
    # no doc
    def AddVertex(self, nIndex, val):
        """ AddVertex(self: IAcadSection2, nIndex: int, val: object) """
        pass

    def ArrayPolar(self, NumberOfObjects, AngleToFill, CenterPoint):
        """ ArrayPolar(self: IAcadSection2, NumberOfObjects: int, AngleToFill: float, CenterPoint: object) -> object """
        pass

    def ArrayRectangular(self, NumberOfRows, NumberOfColumns, NumberOfLevels, DistBetweenRows, DistBetweenCols, DistBetweenLevels):
        """ ArrayRectangular(self: IAcadSection2, NumberOfRows: int, NumberOfColumns: int, NumberOfLevels: int, DistBetweenRows: float, DistBetweenCols: float, DistBetweenLevels: float) -> object """
        pass

    def Copy(self):
        """ Copy(self: IAcadSection2) -> object """
        pass

    def CreateJog(self, varPt):
        """ CreateJog(self: IAcadSection2, varPt: object) """
        pass

    def Delete(self):
        """ Delete(self: IAcadSection2) """
        pass

    def Erase(self):
        """ Erase(self: IAcadSection2) """
        pass

    def GenerateSectionGeometry(self, pEntity, pIntersectionBoundaryObjs, pIntersectionFillObjs, pBackgroudnObjs, pForegroudObjs, pCurveTangencyObjs):
        """ GenerateSectionGeometry(self: IAcadSection2, pEntity: AcadEntity) -> (object, object, object, object, object) """
        pass

    def GetBoundingBox(self, MinPoint, MaxPoint):
        """ GetBoundingBox(self: IAcadSection2) -> (object, object) """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: IAcadSection2) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: IAcadSection2, AppName: str) -> (object, object) """
        pass

    def Highlight(self, HighlightFlag):
        """ Highlight(self: IAcadSection2, HighlightFlag: bool) """
        pass

    def HitTest(self, varPtHit, pHit, pSegmentIndex, pPtOnSegment, pSubItem):
        """ HitTest(self: IAcadSection2, varPtHit: object) -> (bool, int, object, AcSectionSubItem) """
        pass

    def IntersectWith(self, IntersectObject, option):
        """ IntersectWith(self: IAcadSection2, IntersectObject: object, option: AcExtendOption) -> object """
        pass

    def Mirror(self, Point1, Point2):
        """ Mirror(self: IAcadSection2, Point1: object, Point2: object) -> object """
        pass

    def Mirror3D(self, Point1, Point2, point3):
        """ Mirror3D(self: IAcadSection2, Point1: object, Point2: object, point3: object) -> object """
        pass

    def Move(self, FromPoint, ToPoint):
        """ Move(self: IAcadSection2, FromPoint: object, ToPoint: object) """
        pass

    def RemoveVertex(self, nIndex):
        """ RemoveVertex(self: IAcadSection2, nIndex: int) """
        pass

    def Rotate(self, BasePoint, RotationAngle):
        """ Rotate(self: IAcadSection2, BasePoint: object, RotationAngle: float) """
        pass

    def Rotate3D(self, Point1, Point2, RotationAngle):
        """ Rotate3D(self: IAcadSection2, Point1: object, Point2: object, RotationAngle: float) """
        pass

    def ScaleEntity(self, BasePoint, ScaleFactor):
        """ ScaleEntity(self: IAcadSection2, BasePoint: object, ScaleFactor: float) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: IAcadSection2, XDataType: object, XDataValue: object) """
        pass

    def TransformBy(self, TransformationMatrix):
        """ TransformBy(self: IAcadSection2, TransformationMatrix: object) """
        pass

    def Update(self):
        """ Update(self: IAcadSection2) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IAcadSection2) -> object

"""

    BottomHeight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BottomHeight(self: IAcadSection2) -> float

Set: BottomHeight(self: IAcadSection2) = value
"""

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: IAcadSection2) -> ACAD_COLOR

Set: color(self: IAcadSection2) = value
"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: IAcadSection2) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: IAcadSection2) -> object

"""

    Elevation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Elevation(self: IAcadSection2) -> float

Set: Elevation(self: IAcadSection2) = value
"""

    EntityName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityName(self: IAcadSection2) -> str

"""

    EntityTransparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityTransparency(self: IAcadSection2) -> str

Set: EntityTransparency(self: IAcadSection2) = value
"""

    EntityType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityType(self: IAcadSection2) -> int

"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: IAcadSection2) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: IAcadSection2) -> bool

"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: IAcadSection2) -> AcadHyperlinks

"""

    IndicatorFillColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IndicatorFillColor(self: IAcadSection2) -> AcadAcCmColor

Set: IndicatorFillColor(self: IAcadSection2) = value
"""

    IndicatorTransparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IndicatorTransparency(self: IAcadSection2) -> int

Set: IndicatorTransparency(self: IAcadSection2) = value
"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layer(self: IAcadSection2) -> str

Set: Layer(self: IAcadSection2) = value
"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: IAcadSection2) -> str

Set: Linetype(self: IAcadSection2) = value
"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeScale(self: IAcadSection2) -> float

Set: LinetypeScale(self: IAcadSection2) = value
"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: IAcadSection2) -> ACAD_LWEIGHT

Set: Lineweight(self: IAcadSection2) = value
"""

    LiveSectionEnabled = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LiveSectionEnabled(self: IAcadSection2) -> bool

Set: LiveSectionEnabled(self: IAcadSection2) = value
"""

    Material = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Material(self: IAcadSection2) -> str

Set: Material(self: IAcadSection2) = value
"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: IAcadSection2) -> str

Set: Name(self: IAcadSection2) = value
"""

    Normal = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Normal(self: IAcadSection2) -> object

"""

    NumVertices = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: NumVertices(self: IAcadSection2) -> int

"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: IAcadSection2) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: IAcadSection2) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: IAcadSection2) -> Int64

"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: IAcadSection2) -> str

Set: PlotStyleName(self: IAcadSection2) = value
"""

    SectionPlaneOffset = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SectionPlaneOffset(self: IAcadSection2) -> float

Set: SectionPlaneOffset(self: IAcadSection2) = value
"""

    Settings = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Settings(self: IAcadSection2) -> AcadSectionSettings

"""

    SliceDepth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SliceDepth(self: IAcadSection2) -> float

Set: SliceDepth(self: IAcadSection2) = value
"""

    State = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: State(self: IAcadSection2) -> AcSectionState

Set: State(self: IAcadSection2) = value
"""

    State2 = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: State2(self: IAcadSection2) -> AcSectionState2

Set: State2(self: IAcadSection2) = value
"""

    TopHeight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TopHeight(self: IAcadSection2) -> float

Set: TopHeight(self: IAcadSection2) = value
"""

    TrueColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TrueColor(self: IAcadSection2) -> AcadAcCmColor

Set: TrueColor(self: IAcadSection2) = value
"""

    VerticalDirection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VerticalDirection(self: IAcadSection2) -> object

Set: VerticalDirection(self: IAcadSection2) = value
"""

    Vertices = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Vertices(self: IAcadSection2) -> object

Set: Vertices(self: IAcadSection2) = value
"""

    ViewingDirection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ViewingDirection(self: IAcadSection2) -> object

Set: ViewingDirection(self: IAcadSection2) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: IAcadSection2) -> bool

Set: Visible(self: IAcadSection2) = value
"""



class AcadSection(IAcadSection2, IAcadSection, IAcadEntity, IAcadObject, IAcadObjectEvents_Event):
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class AcadSectionClass(__ComObject):
    # no doc
    def AddVertex(self, nIndex, val):
        """ AddVertex(self: AcadSectionClass, nIndex: int, val: object) """
        pass

    def add_Modified(self, A_1):
        """ add_Modified(self: AcadSectionClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def ArrayPolar(self, NumberOfObjects, AngleToFill, CenterPoint):
        """ ArrayPolar(self: AcadSectionClass, NumberOfObjects: int, AngleToFill: float, CenterPoint: object) -> object """
        pass

    def ArrayRectangular(self, NumberOfRows, NumberOfColumns, NumberOfLevels, DistBetweenRows, DistBetweenCols, DistBetweenLevels):
        """ ArrayRectangular(self: AcadSectionClass, NumberOfRows: int, NumberOfColumns: int, NumberOfLevels: int, DistBetweenRows: float, DistBetweenCols: float, DistBetweenLevels: float) -> object """
        pass

    def Copy(self):
        """ Copy(self: AcadSectionClass) -> object """
        pass

    def CreateJog(self, varPt):
        """ CreateJog(self: AcadSectionClass, varPt: object) """
        pass

    def Delete(self):
        """ Delete(self: AcadSectionClass) """
        pass

    def Erase(self):
        """ Erase(self: AcadSectionClass) """
        pass

    def GenerateSectionGeometry(self, pEntity, pIntersectionBoundaryObjs, pIntersectionFillObjs, pBackgroudnObjs, pForegroudObjs, pCurveTangencyObjs):
        """ GenerateSectionGeometry(self: AcadSectionClass, pEntity: AcadEntity) -> (object, object, object, object, object) """
        pass

    def GetBoundingBox(self, MinPoint, MaxPoint):
        """ GetBoundingBox(self: AcadSectionClass) -> (object, object) """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: AcadSectionClass) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: AcadSectionClass, AppName: str) -> (object, object) """
        pass

    def Highlight(self, HighlightFlag):
        """ Highlight(self: AcadSectionClass, HighlightFlag: bool) """
        pass

    def HitTest(self, varPtHit, pHit, pSegmentIndex, pPtOnSegment, pSubItem):
        """ HitTest(self: AcadSectionClass, varPtHit: object) -> (bool, int, object, AcSectionSubItem) """
        pass

    def IntersectWith(self, IntersectObject, option):
        """ IntersectWith(self: AcadSectionClass, IntersectObject: object, option: AcExtendOption) -> object """
        pass

    def Mirror(self, Point1, Point2):
        """ Mirror(self: AcadSectionClass, Point1: object, Point2: object) -> object """
        pass

    def Mirror3D(self, Point1, Point2, point3):
        """ Mirror3D(self: AcadSectionClass, Point1: object, Point2: object, point3: object) -> object """
        pass

    def Move(self, FromPoint, ToPoint):
        """ Move(self: AcadSectionClass, FromPoint: object, ToPoint: object) """
        pass

    def RemoveVertex(self, nIndex):
        """ RemoveVertex(self: AcadSectionClass, nIndex: int) """
        pass

    def remove_Modified(self, A_1):
        """ remove_Modified(self: AcadSectionClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def Rotate(self, BasePoint, RotationAngle):
        """ Rotate(self: AcadSectionClass, BasePoint: object, RotationAngle: float) """
        pass

    def Rotate3D(self, Point1, Point2, RotationAngle):
        """ Rotate3D(self: AcadSectionClass, Point1: object, Point2: object, RotationAngle: float) """
        pass

    def ScaleEntity(self, BasePoint, ScaleFactor):
        """ ScaleEntity(self: AcadSectionClass, BasePoint: object, ScaleFactor: float) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: AcadSectionClass, XDataType: object, XDataValue: object) """
        pass

    def TransformBy(self, TransformationMatrix):
        """ TransformBy(self: AcadSectionClass, TransformationMatrix: object) """
        pass

    def Update(self):
        """ Update(self: AcadSectionClass) """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: AcadSectionClass) -> object

"""

    BottomHeight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BottomHeight(self: AcadSectionClass) -> float

Set: BottomHeight(self: AcadSectionClass) = value
"""

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: AcadSectionClass) -> ACAD_COLOR

Set: color(self: AcadSectionClass) = value
"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: AcadSectionClass) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: AcadSectionClass) -> object

"""

    Elevation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Elevation(self: AcadSectionClass) -> float

Set: Elevation(self: AcadSectionClass) = value
"""

    EntityName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityName(self: AcadSectionClass) -> str

"""

    EntityTransparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityTransparency(self: AcadSectionClass) -> str

Set: EntityTransparency(self: AcadSectionClass) = value
"""

    EntityType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityType(self: AcadSectionClass) -> int

"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: AcadSectionClass) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: AcadSectionClass) -> bool

"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: AcadSectionClass) -> AcadHyperlinks

"""

    IndicatorFillColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IndicatorFillColor(self: AcadSectionClass) -> AcadAcCmColor

Set: IndicatorFillColor(self: AcadSectionClass) = value
"""

    IndicatorTransparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IndicatorTransparency(self: AcadSectionClass) -> int

Set: IndicatorTransparency(self: AcadSectionClass) = value
"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layer(self: AcadSectionClass) -> str

Set: Layer(self: AcadSectionClass) = value
"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: AcadSectionClass) -> str

Set: Linetype(self: AcadSectionClass) = value
"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeScale(self: AcadSectionClass) -> float

Set: LinetypeScale(self: AcadSectionClass) = value
"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: AcadSectionClass) -> ACAD_LWEIGHT

Set: Lineweight(self: AcadSectionClass) = value
"""

    LiveSectionEnabled = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LiveSectionEnabled(self: AcadSectionClass) -> bool

Set: LiveSectionEnabled(self: AcadSectionClass) = value
"""

    Material = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Material(self: AcadSectionClass) -> str

Set: Material(self: AcadSectionClass) = value
"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: AcadSectionClass) -> str

Set: Name(self: AcadSectionClass) = value
"""

    Normal = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Normal(self: AcadSectionClass) -> object

"""

    NumVertices = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: NumVertices(self: AcadSectionClass) -> int

"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: AcadSectionClass) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: AcadSectionClass) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: AcadSectionClass) -> Int64

"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: AcadSectionClass) -> str

Set: PlotStyleName(self: AcadSectionClass) = value
"""

    SectionPlaneOffset = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SectionPlaneOffset(self: AcadSectionClass) -> float

Set: SectionPlaneOffset(self: AcadSectionClass) = value
"""

    Settings = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Settings(self: AcadSectionClass) -> AcadSectionSettings

"""

    SliceDepth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SliceDepth(self: AcadSectionClass) -> float

Set: SliceDepth(self: AcadSectionClass) = value
"""

    State = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: State(self: AcadSectionClass) -> AcSectionState

Set: State(self: AcadSectionClass) = value
"""

    State2 = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: State2(self: AcadSectionClass) -> AcSectionState2

Set: State2(self: AcadSectionClass) = value
"""

    TopHeight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TopHeight(self: AcadSectionClass) -> float

Set: TopHeight(self: AcadSectionClass) = value
"""

    TrueColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TrueColor(self: AcadSectionClass) -> AcadAcCmColor

Set: TrueColor(self: AcadSectionClass) = value
"""

    VerticalDirection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VerticalDirection(self: AcadSectionClass) -> object

Set: VerticalDirection(self: AcadSectionClass) = value
"""

    Vertices = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Vertices(self: AcadSectionClass) -> object

Set: Vertices(self: AcadSectionClass) = value
"""

    ViewingDirection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ViewingDirection(self: AcadSectionClass) -> object

Set: ViewingDirection(self: AcadSectionClass) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: AcadSectionClass) -> bool

Set: Visible(self: AcadSectionClass) = value
"""


    Modified = None


class IAcadSectionManager(IAcadObject, IEnumerable):
    # no doc
    def Delete(self):
        """ Delete(self: IAcadSectionManager) """
        pass

    def Erase(self):
        """ Erase(self: IAcadSectionManager) """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: IAcadSectionManager) -> IEnumerator """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: IAcadSectionManager) -> AcadDictionary """
        pass

    def GetLiveSection(self):
        """ GetLiveSection(self: IAcadSectionManager) -> IAcadSection """
        pass

    def GetUniqueSectionName(self, pBaseName):
        """ GetUniqueSectionName(self: IAcadSectionManager, pBaseName: str) -> str """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: IAcadSectionManager, AppName: str) -> (object, object) """
        pass

    def Item(self, Index):
        """ Item(self: IAcadSectionManager, Index: object) -> IAcadSection """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: IAcadSectionManager, XDataType: object, XDataValue: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerable) -> object """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IAcadSectionManager) -> object

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: IAcadSectionManager) -> int

"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: IAcadSectionManager) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: IAcadSectionManager) -> object

"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: IAcadSectionManager) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: IAcadSectionManager) -> bool

"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: IAcadSectionManager) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: IAcadSectionManager) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: IAcadSectionManager) -> Int64

"""



class AcadSectionManager(IAcadSectionManager, IAcadObject, IEnumerable, IAcadObjectEvents_Event):
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerable) -> object """
        pass


class AcadSectionManagerClass(__ComObject):
    # no doc
    def add_Modified(self, A_1):
        """ add_Modified(self: AcadSectionManagerClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def Delete(self):
        """ Delete(self: AcadSectionManagerClass) """
        pass

    def Erase(self):
        """ Erase(self: AcadSectionManagerClass) """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: AcadSectionManagerClass) -> IEnumerator """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: AcadSectionManagerClass) -> AcadDictionary """
        pass

    def GetLiveSection(self):
        """ GetLiveSection(self: AcadSectionManagerClass) -> IAcadSection """
        pass

    def GetUniqueSectionName(self, pBaseName):
        """ GetUniqueSectionName(self: AcadSectionManagerClass, pBaseName: str) -> str """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: AcadSectionManagerClass, AppName: str) -> (object, object) """
        pass

    def Item(self, Index):
        """ Item(self: AcadSectionManagerClass, Index: object) -> IAcadSection """
        pass

    def remove_Modified(self, A_1):
        """ remove_Modified(self: AcadSectionManagerClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: AcadSectionManagerClass, XDataType: object, XDataValue: object) """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerable) -> object """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: AcadSectionManagerClass) -> object

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: AcadSectionManagerClass) -> int

"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: AcadSectionManagerClass) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: AcadSectionManagerClass) -> object

"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: AcadSectionManagerClass) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: AcadSectionManagerClass) -> bool

"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: AcadSectionManagerClass) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: AcadSectionManagerClass) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: AcadSectionManagerClass) -> Int64

"""


    Modified = None


class IAcadSectionSettings(IAcadObject):
    # no doc
    def Delete(self):
        """ Delete(self: IAcadSectionSettings) """
        pass

    def Erase(self):
        """ Erase(self: IAcadSectionSettings) """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: IAcadSectionSettings) -> AcadDictionary """
        pass

    def GetSectionTypeSettings(self, secType):
        """ GetSectionTypeSettings(self: IAcadSectionSettings, secType: AcSectionType) -> IAcadSectionTypeSettings """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: IAcadSectionSettings, AppName: str) -> (object, object) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: IAcadSectionSettings, XDataType: object, XDataValue: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IAcadSectionSettings) -> object

"""

    CurrentSectionType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CurrentSectionType(self: IAcadSectionSettings) -> AcSectionType

Set: CurrentSectionType(self: IAcadSectionSettings) = value
"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: IAcadSectionSettings) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: IAcadSectionSettings) -> object

"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: IAcadSectionSettings) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: IAcadSectionSettings) -> bool

"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: IAcadSectionSettings) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: IAcadSectionSettings) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: IAcadSectionSettings) -> Int64

"""



class AcadSectionSettings(IAcadSectionSettings, IAcadObject, IAcadObjectEvents_Event):
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class AcadSectionSettingsClass(__ComObject):
    # no doc
    def add_Modified(self, A_1):
        """ add_Modified(self: AcadSectionSettingsClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def Delete(self):
        """ Delete(self: AcadSectionSettingsClass) """
        pass

    def Erase(self):
        """ Erase(self: AcadSectionSettingsClass) """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: AcadSectionSettingsClass) -> AcadDictionary """
        pass

    def GetSectionTypeSettings(self, secType):
        """ GetSectionTypeSettings(self: AcadSectionSettingsClass, secType: AcSectionType) -> IAcadSectionTypeSettings """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: AcadSectionSettingsClass, AppName: str) -> (object, object) """
        pass

    def remove_Modified(self, A_1):
        """ remove_Modified(self: AcadSectionSettingsClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: AcadSectionSettingsClass, XDataType: object, XDataValue: object) """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: AcadSectionSettingsClass) -> object

"""

    CurrentSectionType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CurrentSectionType(self: AcadSectionSettingsClass) -> AcSectionType

Set: CurrentSectionType(self: AcadSectionSettingsClass) = value
"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: AcadSectionSettingsClass) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: AcadSectionSettingsClass) -> object

"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: AcadSectionSettingsClass) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: AcadSectionSettingsClass) -> bool

"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: AcadSectionSettingsClass) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: AcadSectionSettingsClass) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: AcadSectionSettingsClass) -> Int64

"""


    Modified = None


class IAcadSectionTypeSettings:
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    BackgroundLinesColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BackgroundLinesColor(self: IAcadSectionTypeSettings) -> AcadAcCmColor

Set: BackgroundLinesColor(self: IAcadSectionTypeSettings) = value
"""

    BackgroundLinesHiddenLine = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BackgroundLinesHiddenLine(self: IAcadSectionTypeSettings) -> bool

Set: BackgroundLinesHiddenLine(self: IAcadSectionTypeSettings) = value
"""

    BackgroundLinesLayer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BackgroundLinesLayer(self: IAcadSectionTypeSettings) -> str

Set: BackgroundLinesLayer(self: IAcadSectionTypeSettings) = value
"""

    BackgroundLinesLinetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BackgroundLinesLinetype(self: IAcadSectionTypeSettings) -> str

Set: BackgroundLinesLinetype(self: IAcadSectionTypeSettings) = value
"""

    BackgroundLinesLinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BackgroundLinesLinetypeScale(self: IAcadSectionTypeSettings) -> float

Set: BackgroundLinesLinetypeScale(self: IAcadSectionTypeSettings) = value
"""

    BackgroundLinesLineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BackgroundLinesLineweight(self: IAcadSectionTypeSettings) -> ACAD_LWEIGHT

Set: BackgroundLinesLineweight(self: IAcadSectionTypeSettings) = value
"""

    BackgroundLinesPlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BackgroundLinesPlotStyleName(self: IAcadSectionTypeSettings) -> str

Set: BackgroundLinesPlotStyleName(self: IAcadSectionTypeSettings) = value
"""

    BackgroundLinesVisible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BackgroundLinesVisible(self: IAcadSectionTypeSettings) -> bool

Set: BackgroundLinesVisible(self: IAcadSectionTypeSettings) = value
"""

    CurveTangencyLinesColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CurveTangencyLinesColor(self: IAcadSectionTypeSettings) -> AcadAcCmColor

Set: CurveTangencyLinesColor(self: IAcadSectionTypeSettings) = value
"""

    CurveTangencyLinesLayer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CurveTangencyLinesLayer(self: IAcadSectionTypeSettings) -> str

Set: CurveTangencyLinesLayer(self: IAcadSectionTypeSettings) = value
"""

    CurveTangencyLinesLinetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CurveTangencyLinesLinetype(self: IAcadSectionTypeSettings) -> str

Set: CurveTangencyLinesLinetype(self: IAcadSectionTypeSettings) = value
"""

    CurveTangencyLinesLinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CurveTangencyLinesLinetypeScale(self: IAcadSectionTypeSettings) -> float

Set: CurveTangencyLinesLinetypeScale(self: IAcadSectionTypeSettings) = value
"""

    CurveTangencyLinesLineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CurveTangencyLinesLineweight(self: IAcadSectionTypeSettings) -> ACAD_LWEIGHT

Set: CurveTangencyLinesLineweight(self: IAcadSectionTypeSettings) = value
"""

    CurveTangencyLinesPlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CurveTangencyLinesPlotStyleName(self: IAcadSectionTypeSettings) -> str

Set: CurveTangencyLinesPlotStyleName(self: IAcadSectionTypeSettings) = value
"""

    CurveTangencyLinesVisible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CurveTangencyLinesVisible(self: IAcadSectionTypeSettings) -> bool

Set: CurveTangencyLinesVisible(self: IAcadSectionTypeSettings) = value
"""

    DestinationBlock = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DestinationBlock(self: IAcadSectionTypeSettings) -> object

Set: DestinationBlock(self: IAcadSectionTypeSettings) = value
"""

    DestinationFile = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DestinationFile(self: IAcadSectionTypeSettings) -> str

Set: DestinationFile(self: IAcadSectionTypeSettings) = value
"""

    ForegroundLinesColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ForegroundLinesColor(self: IAcadSectionTypeSettings) -> AcadAcCmColor

Set: ForegroundLinesColor(self: IAcadSectionTypeSettings) = value
"""

    ForegroundLinesEdgeTransparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ForegroundLinesEdgeTransparency(self: IAcadSectionTypeSettings) -> int

Set: ForegroundLinesEdgeTransparency(self: IAcadSectionTypeSettings) = value
"""

    ForegroundLinesFaceTransparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ForegroundLinesFaceTransparency(self: IAcadSectionTypeSettings) -> int

Set: ForegroundLinesFaceTransparency(self: IAcadSectionTypeSettings) = value
"""

    ForegroundLinesHiddenLine = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ForegroundLinesHiddenLine(self: IAcadSectionTypeSettings) -> bool

Set: ForegroundLinesHiddenLine(self: IAcadSectionTypeSettings) = value
"""

    ForegroundLinesLayer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ForegroundLinesLayer(self: IAcadSectionTypeSettings) -> str

Set: ForegroundLinesLayer(self: IAcadSectionTypeSettings) = value
"""

    ForegroundLinesLinetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ForegroundLinesLinetype(self: IAcadSectionTypeSettings) -> str

Set: ForegroundLinesLinetype(self: IAcadSectionTypeSettings) = value
"""

    ForegroundLinesLinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ForegroundLinesLinetypeScale(self: IAcadSectionTypeSettings) -> float

Set: ForegroundLinesLinetypeScale(self: IAcadSectionTypeSettings) = value
"""

    ForegroundLinesLineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ForegroundLinesLineweight(self: IAcadSectionTypeSettings) -> ACAD_LWEIGHT

Set: ForegroundLinesLineweight(self: IAcadSectionTypeSettings) = value
"""

    ForegroundLinesPlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ForegroundLinesPlotStyleName(self: IAcadSectionTypeSettings) -> str

Set: ForegroundLinesPlotStyleName(self: IAcadSectionTypeSettings) = value
"""

    ForegroundLinesVisible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ForegroundLinesVisible(self: IAcadSectionTypeSettings) -> bool

Set: ForegroundLinesVisible(self: IAcadSectionTypeSettings) = value
"""

    GenerationOptions = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: GenerationOptions(self: IAcadSectionTypeSettings) -> AcSectionGeneration

Set: GenerationOptions(self: IAcadSectionTypeSettings) = value
"""

    IntersectionBoundaryColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IntersectionBoundaryColor(self: IAcadSectionTypeSettings) -> AcadAcCmColor

Set: IntersectionBoundaryColor(self: IAcadSectionTypeSettings) = value
"""

    IntersectionBoundaryDivisionLines = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IntersectionBoundaryDivisionLines(self: IAcadSectionTypeSettings) -> bool

Set: IntersectionBoundaryDivisionLines(self: IAcadSectionTypeSettings) = value
"""

    IntersectionBoundaryLayer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IntersectionBoundaryLayer(self: IAcadSectionTypeSettings) -> str

Set: IntersectionBoundaryLayer(self: IAcadSectionTypeSettings) = value
"""

    IntersectionBoundaryLinetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IntersectionBoundaryLinetype(self: IAcadSectionTypeSettings) -> str

Set: IntersectionBoundaryLinetype(self: IAcadSectionTypeSettings) = value
"""

    IntersectionBoundaryLinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IntersectionBoundaryLinetypeScale(self: IAcadSectionTypeSettings) -> float

Set: IntersectionBoundaryLinetypeScale(self: IAcadSectionTypeSettings) = value
"""

    IntersectionBoundaryLineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IntersectionBoundaryLineweight(self: IAcadSectionTypeSettings) -> ACAD_LWEIGHT

Set: IntersectionBoundaryLineweight(self: IAcadSectionTypeSettings) = value
"""

    IntersectionBoundaryPlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IntersectionBoundaryPlotStyleName(self: IAcadSectionTypeSettings) -> str

Set: IntersectionBoundaryPlotStyleName(self: IAcadSectionTypeSettings) = value
"""

    IntersectionFillColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IntersectionFillColor(self: IAcadSectionTypeSettings) -> AcadAcCmColor

Set: IntersectionFillColor(self: IAcadSectionTypeSettings) = value
"""

    IntersectionFillFaceTransparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IntersectionFillFaceTransparency(self: IAcadSectionTypeSettings) -> int

Set: IntersectionFillFaceTransparency(self: IAcadSectionTypeSettings) = value
"""

    IntersectionFillHatchAngle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IntersectionFillHatchAngle(self: IAcadSectionTypeSettings) -> float

Set: IntersectionFillHatchAngle(self: IAcadSectionTypeSettings) = value
"""

    IntersectionFillHatchPatternName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IntersectionFillHatchPatternName(self: IAcadSectionTypeSettings) -> str

Set: IntersectionFillHatchPatternName(self: IAcadSectionTypeSettings) = value
"""

    IntersectionFillHatchPatternType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IntersectionFillHatchPatternType(self: IAcadSectionTypeSettings) -> AcPatternType

Set: IntersectionFillHatchPatternType(self: IAcadSectionTypeSettings) = value
"""

    IntersectionFillHatchScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IntersectionFillHatchScale(self: IAcadSectionTypeSettings) -> float

Set: IntersectionFillHatchScale(self: IAcadSectionTypeSettings) = value
"""

    IntersectionFillHatchSpacing = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IntersectionFillHatchSpacing(self: IAcadSectionTypeSettings) -> float

Set: IntersectionFillHatchSpacing(self: IAcadSectionTypeSettings) = value
"""

    IntersectionFillLayer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IntersectionFillLayer(self: IAcadSectionTypeSettings) -> str

Set: IntersectionFillLayer(self: IAcadSectionTypeSettings) = value
"""

    IntersectionFillLinetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IntersectionFillLinetype(self: IAcadSectionTypeSettings) -> str

Set: IntersectionFillLinetype(self: IAcadSectionTypeSettings) = value
"""

    IntersectionFillLinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IntersectionFillLinetypeScale(self: IAcadSectionTypeSettings) -> float

Set: IntersectionFillLinetypeScale(self: IAcadSectionTypeSettings) = value
"""

    IntersectionFillLineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IntersectionFillLineweight(self: IAcadSectionTypeSettings) -> ACAD_LWEIGHT

Set: IntersectionFillLineweight(self: IAcadSectionTypeSettings) = value
"""

    IntersectionFillPlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IntersectionFillPlotStyleName(self: IAcadSectionTypeSettings) -> str

Set: IntersectionFillPlotStyleName(self: IAcadSectionTypeSettings) = value
"""

    IntersectionFillVisible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IntersectionFillVisible(self: IAcadSectionTypeSettings) -> bool

Set: IntersectionFillVisible(self: IAcadSectionTypeSettings) = value
"""

    SourceObjects = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SourceObjects(self: IAcadSectionTypeSettings) -> object

Set: SourceObjects(self: IAcadSectionTypeSettings) = value
"""



class IAcadSectionTypeSettings2(IAcadSectionTypeSettings):
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    BackgroundLinesColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BackgroundLinesColor(self: IAcadSectionTypeSettings2) -> AcadAcCmColor

Set: BackgroundLinesColor(self: IAcadSectionTypeSettings2) = value
"""

    BackgroundLinesHiddenLine = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BackgroundLinesHiddenLine(self: IAcadSectionTypeSettings2) -> bool

Set: BackgroundLinesHiddenLine(self: IAcadSectionTypeSettings2) = value
"""

    BackgroundLinesLayer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BackgroundLinesLayer(self: IAcadSectionTypeSettings2) -> str

Set: BackgroundLinesLayer(self: IAcadSectionTypeSettings2) = value
"""

    BackgroundLinesLinetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BackgroundLinesLinetype(self: IAcadSectionTypeSettings2) -> str

Set: BackgroundLinesLinetype(self: IAcadSectionTypeSettings2) = value
"""

    BackgroundLinesLinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BackgroundLinesLinetypeScale(self: IAcadSectionTypeSettings2) -> float

Set: BackgroundLinesLinetypeScale(self: IAcadSectionTypeSettings2) = value
"""

    BackgroundLinesLineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BackgroundLinesLineweight(self: IAcadSectionTypeSettings2) -> ACAD_LWEIGHT

Set: BackgroundLinesLineweight(self: IAcadSectionTypeSettings2) = value
"""

    BackgroundLinesPlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BackgroundLinesPlotStyleName(self: IAcadSectionTypeSettings2) -> str

Set: BackgroundLinesPlotStyleName(self: IAcadSectionTypeSettings2) = value
"""

    BackgroundLinesVisible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BackgroundLinesVisible(self: IAcadSectionTypeSettings2) -> bool

Set: BackgroundLinesVisible(self: IAcadSectionTypeSettings2) = value
"""

    CurveTangencyLinesColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CurveTangencyLinesColor(self: IAcadSectionTypeSettings2) -> AcadAcCmColor

Set: CurveTangencyLinesColor(self: IAcadSectionTypeSettings2) = value
"""

    CurveTangencyLinesLayer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CurveTangencyLinesLayer(self: IAcadSectionTypeSettings2) -> str

Set: CurveTangencyLinesLayer(self: IAcadSectionTypeSettings2) = value
"""

    CurveTangencyLinesLinetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CurveTangencyLinesLinetype(self: IAcadSectionTypeSettings2) -> str

Set: CurveTangencyLinesLinetype(self: IAcadSectionTypeSettings2) = value
"""

    CurveTangencyLinesLinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CurveTangencyLinesLinetypeScale(self: IAcadSectionTypeSettings2) -> float

Set: CurveTangencyLinesLinetypeScale(self: IAcadSectionTypeSettings2) = value
"""

    CurveTangencyLinesLineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CurveTangencyLinesLineweight(self: IAcadSectionTypeSettings2) -> ACAD_LWEIGHT

Set: CurveTangencyLinesLineweight(self: IAcadSectionTypeSettings2) = value
"""

    CurveTangencyLinesPlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CurveTangencyLinesPlotStyleName(self: IAcadSectionTypeSettings2) -> str

Set: CurveTangencyLinesPlotStyleName(self: IAcadSectionTypeSettings2) = value
"""

    CurveTangencyLinesVisible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CurveTangencyLinesVisible(self: IAcadSectionTypeSettings2) -> bool

Set: CurveTangencyLinesVisible(self: IAcadSectionTypeSettings2) = value
"""

    DestinationBlock = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DestinationBlock(self: IAcadSectionTypeSettings2) -> object

Set: DestinationBlock(self: IAcadSectionTypeSettings2) = value
"""

    DestinationFile = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DestinationFile(self: IAcadSectionTypeSettings2) -> str

Set: DestinationFile(self: IAcadSectionTypeSettings2) = value
"""

    ForegroundLinesColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ForegroundLinesColor(self: IAcadSectionTypeSettings2) -> AcadAcCmColor

Set: ForegroundLinesColor(self: IAcadSectionTypeSettings2) = value
"""

    ForegroundLinesEdgeTransparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ForegroundLinesEdgeTransparency(self: IAcadSectionTypeSettings2) -> int

Set: ForegroundLinesEdgeTransparency(self: IAcadSectionTypeSettings2) = value
"""

    ForegroundLinesFaceTransparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ForegroundLinesFaceTransparency(self: IAcadSectionTypeSettings2) -> int

Set: ForegroundLinesFaceTransparency(self: IAcadSectionTypeSettings2) = value
"""

    ForegroundLinesHiddenLine = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ForegroundLinesHiddenLine(self: IAcadSectionTypeSettings2) -> bool

Set: ForegroundLinesHiddenLine(self: IAcadSectionTypeSettings2) = value
"""

    ForegroundLinesLayer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ForegroundLinesLayer(self: IAcadSectionTypeSettings2) -> str

Set: ForegroundLinesLayer(self: IAcadSectionTypeSettings2) = value
"""

    ForegroundLinesLinetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ForegroundLinesLinetype(self: IAcadSectionTypeSettings2) -> str

Set: ForegroundLinesLinetype(self: IAcadSectionTypeSettings2) = value
"""

    ForegroundLinesLinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ForegroundLinesLinetypeScale(self: IAcadSectionTypeSettings2) -> float

Set: ForegroundLinesLinetypeScale(self: IAcadSectionTypeSettings2) = value
"""

    ForegroundLinesLineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ForegroundLinesLineweight(self: IAcadSectionTypeSettings2) -> ACAD_LWEIGHT

Set: ForegroundLinesLineweight(self: IAcadSectionTypeSettings2) = value
"""

    ForegroundLinesPlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ForegroundLinesPlotStyleName(self: IAcadSectionTypeSettings2) -> str

Set: ForegroundLinesPlotStyleName(self: IAcadSectionTypeSettings2) = value
"""

    ForegroundLinesVisible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ForegroundLinesVisible(self: IAcadSectionTypeSettings2) -> bool

Set: ForegroundLinesVisible(self: IAcadSectionTypeSettings2) = value
"""

    GenerationOptions = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: GenerationOptions(self: IAcadSectionTypeSettings2) -> AcSectionGeneration

Set: GenerationOptions(self: IAcadSectionTypeSettings2) = value
"""

    IntersectionBoundaryColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IntersectionBoundaryColor(self: IAcadSectionTypeSettings2) -> AcadAcCmColor

Set: IntersectionBoundaryColor(self: IAcadSectionTypeSettings2) = value
"""

    IntersectionBoundaryDivisionLines = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IntersectionBoundaryDivisionLines(self: IAcadSectionTypeSettings2) -> bool

Set: IntersectionBoundaryDivisionLines(self: IAcadSectionTypeSettings2) = value
"""

    IntersectionBoundaryLayer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IntersectionBoundaryLayer(self: IAcadSectionTypeSettings2) -> str

Set: IntersectionBoundaryLayer(self: IAcadSectionTypeSettings2) = value
"""

    IntersectionBoundaryLinetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IntersectionBoundaryLinetype(self: IAcadSectionTypeSettings2) -> str

Set: IntersectionBoundaryLinetype(self: IAcadSectionTypeSettings2) = value
"""

    IntersectionBoundaryLinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IntersectionBoundaryLinetypeScale(self: IAcadSectionTypeSettings2) -> float

Set: IntersectionBoundaryLinetypeScale(self: IAcadSectionTypeSettings2) = value
"""

    IntersectionBoundaryLineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IntersectionBoundaryLineweight(self: IAcadSectionTypeSettings2) -> ACAD_LWEIGHT

Set: IntersectionBoundaryLineweight(self: IAcadSectionTypeSettings2) = value
"""

    IntersectionBoundaryPlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IntersectionBoundaryPlotStyleName(self: IAcadSectionTypeSettings2) -> str

Set: IntersectionBoundaryPlotStyleName(self: IAcadSectionTypeSettings2) = value
"""

    IntersectionBoundaryVisible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IntersectionBoundaryVisible(self: IAcadSectionTypeSettings2) -> bool

Set: IntersectionBoundaryVisible(self: IAcadSectionTypeSettings2) = value
"""

    IntersectionFillColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IntersectionFillColor(self: IAcadSectionTypeSettings2) -> AcadAcCmColor

Set: IntersectionFillColor(self: IAcadSectionTypeSettings2) = value
"""

    IntersectionFillFaceTransparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IntersectionFillFaceTransparency(self: IAcadSectionTypeSettings2) -> int

Set: IntersectionFillFaceTransparency(self: IAcadSectionTypeSettings2) = value
"""

    IntersectionFillHatchAngle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IntersectionFillHatchAngle(self: IAcadSectionTypeSettings2) -> float

Set: IntersectionFillHatchAngle(self: IAcadSectionTypeSettings2) = value
"""

    IntersectionFillHatchPatternName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IntersectionFillHatchPatternName(self: IAcadSectionTypeSettings2) -> str

Set: IntersectionFillHatchPatternName(self: IAcadSectionTypeSettings2) = value
"""

    IntersectionFillHatchPatternType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IntersectionFillHatchPatternType(self: IAcadSectionTypeSettings2) -> AcPatternType

Set: IntersectionFillHatchPatternType(self: IAcadSectionTypeSettings2) = value
"""

    IntersectionFillHatchScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IntersectionFillHatchScale(self: IAcadSectionTypeSettings2) -> float

Set: IntersectionFillHatchScale(self: IAcadSectionTypeSettings2) = value
"""

    IntersectionFillHatchSpacing = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IntersectionFillHatchSpacing(self: IAcadSectionTypeSettings2) -> float

Set: IntersectionFillHatchSpacing(self: IAcadSectionTypeSettings2) = value
"""

    IntersectionFillLayer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IntersectionFillLayer(self: IAcadSectionTypeSettings2) -> str

Set: IntersectionFillLayer(self: IAcadSectionTypeSettings2) = value
"""

    IntersectionFillLinetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IntersectionFillLinetype(self: IAcadSectionTypeSettings2) -> str

Set: IntersectionFillLinetype(self: IAcadSectionTypeSettings2) = value
"""

    IntersectionFillLinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IntersectionFillLinetypeScale(self: IAcadSectionTypeSettings2) -> float

Set: IntersectionFillLinetypeScale(self: IAcadSectionTypeSettings2) = value
"""

    IntersectionFillLineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IntersectionFillLineweight(self: IAcadSectionTypeSettings2) -> ACAD_LWEIGHT

Set: IntersectionFillLineweight(self: IAcadSectionTypeSettings2) = value
"""

    IntersectionFillPlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IntersectionFillPlotStyleName(self: IAcadSectionTypeSettings2) -> str

Set: IntersectionFillPlotStyleName(self: IAcadSectionTypeSettings2) = value
"""

    IntersectionFillVisible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IntersectionFillVisible(self: IAcadSectionTypeSettings2) -> bool

Set: IntersectionFillVisible(self: IAcadSectionTypeSettings2) = value
"""

    SourceObjects = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SourceObjects(self: IAcadSectionTypeSettings2) -> object

Set: SourceObjects(self: IAcadSectionTypeSettings2) = value
"""



class AcadSectionTypeSettings(IAcadSectionTypeSettings2, IAcadSectionTypeSettings, IAcadObjectEvents_Event):
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class AcadSectionTypeSettingsClass(__ComObject):
    # no doc
    def add_Modified(self, A_1):
        """ add_Modified(self: AcadSectionTypeSettingsClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def remove_Modified(self, A_1):
        """ remove_Modified(self: AcadSectionTypeSettingsClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    BackgroundLinesColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BackgroundLinesColor(self: AcadSectionTypeSettingsClass) -> AcadAcCmColor

Set: BackgroundLinesColor(self: AcadSectionTypeSettingsClass) = value
"""

    BackgroundLinesHiddenLine = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BackgroundLinesHiddenLine(self: AcadSectionTypeSettingsClass) -> bool

Set: BackgroundLinesHiddenLine(self: AcadSectionTypeSettingsClass) = value
"""

    BackgroundLinesLayer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BackgroundLinesLayer(self: AcadSectionTypeSettingsClass) -> str

Set: BackgroundLinesLayer(self: AcadSectionTypeSettingsClass) = value
"""

    BackgroundLinesLinetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BackgroundLinesLinetype(self: AcadSectionTypeSettingsClass) -> str

Set: BackgroundLinesLinetype(self: AcadSectionTypeSettingsClass) = value
"""

    BackgroundLinesLinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BackgroundLinesLinetypeScale(self: AcadSectionTypeSettingsClass) -> float

Set: BackgroundLinesLinetypeScale(self: AcadSectionTypeSettingsClass) = value
"""

    BackgroundLinesLineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BackgroundLinesLineweight(self: AcadSectionTypeSettingsClass) -> ACAD_LWEIGHT

Set: BackgroundLinesLineweight(self: AcadSectionTypeSettingsClass) = value
"""

    BackgroundLinesPlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BackgroundLinesPlotStyleName(self: AcadSectionTypeSettingsClass) -> str

Set: BackgroundLinesPlotStyleName(self: AcadSectionTypeSettingsClass) = value
"""

    BackgroundLinesVisible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BackgroundLinesVisible(self: AcadSectionTypeSettingsClass) -> bool

Set: BackgroundLinesVisible(self: AcadSectionTypeSettingsClass) = value
"""

    CurveTangencyLinesColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CurveTangencyLinesColor(self: AcadSectionTypeSettingsClass) -> AcadAcCmColor

Set: CurveTangencyLinesColor(self: AcadSectionTypeSettingsClass) = value
"""

    CurveTangencyLinesLayer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CurveTangencyLinesLayer(self: AcadSectionTypeSettingsClass) -> str

Set: CurveTangencyLinesLayer(self: AcadSectionTypeSettingsClass) = value
"""

    CurveTangencyLinesLinetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CurveTangencyLinesLinetype(self: AcadSectionTypeSettingsClass) -> str

Set: CurveTangencyLinesLinetype(self: AcadSectionTypeSettingsClass) = value
"""

    CurveTangencyLinesLinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CurveTangencyLinesLinetypeScale(self: AcadSectionTypeSettingsClass) -> float

Set: CurveTangencyLinesLinetypeScale(self: AcadSectionTypeSettingsClass) = value
"""

    CurveTangencyLinesLineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CurveTangencyLinesLineweight(self: AcadSectionTypeSettingsClass) -> ACAD_LWEIGHT

Set: CurveTangencyLinesLineweight(self: AcadSectionTypeSettingsClass) = value
"""

    CurveTangencyLinesPlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CurveTangencyLinesPlotStyleName(self: AcadSectionTypeSettingsClass) -> str

Set: CurveTangencyLinesPlotStyleName(self: AcadSectionTypeSettingsClass) = value
"""

    CurveTangencyLinesVisible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CurveTangencyLinesVisible(self: AcadSectionTypeSettingsClass) -> bool

Set: CurveTangencyLinesVisible(self: AcadSectionTypeSettingsClass) = value
"""

    DestinationBlock = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DestinationBlock(self: AcadSectionTypeSettingsClass) -> object

Set: DestinationBlock(self: AcadSectionTypeSettingsClass) = value
"""

    DestinationFile = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DestinationFile(self: AcadSectionTypeSettingsClass) -> str

Set: DestinationFile(self: AcadSectionTypeSettingsClass) = value
"""

    ForegroundLinesColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ForegroundLinesColor(self: AcadSectionTypeSettingsClass) -> AcadAcCmColor

Set: ForegroundLinesColor(self: AcadSectionTypeSettingsClass) = value
"""

    ForegroundLinesEdgeTransparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ForegroundLinesEdgeTransparency(self: AcadSectionTypeSettingsClass) -> int

Set: ForegroundLinesEdgeTransparency(self: AcadSectionTypeSettingsClass) = value
"""

    ForegroundLinesFaceTransparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ForegroundLinesFaceTransparency(self: AcadSectionTypeSettingsClass) -> int

Set: ForegroundLinesFaceTransparency(self: AcadSectionTypeSettingsClass) = value
"""

    ForegroundLinesHiddenLine = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ForegroundLinesHiddenLine(self: AcadSectionTypeSettingsClass) -> bool

Set: ForegroundLinesHiddenLine(self: AcadSectionTypeSettingsClass) = value
"""

    ForegroundLinesLayer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ForegroundLinesLayer(self: AcadSectionTypeSettingsClass) -> str

Set: ForegroundLinesLayer(self: AcadSectionTypeSettingsClass) = value
"""

    ForegroundLinesLinetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ForegroundLinesLinetype(self: AcadSectionTypeSettingsClass) -> str

Set: ForegroundLinesLinetype(self: AcadSectionTypeSettingsClass) = value
"""

    ForegroundLinesLinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ForegroundLinesLinetypeScale(self: AcadSectionTypeSettingsClass) -> float

Set: ForegroundLinesLinetypeScale(self: AcadSectionTypeSettingsClass) = value
"""

    ForegroundLinesLineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ForegroundLinesLineweight(self: AcadSectionTypeSettingsClass) -> ACAD_LWEIGHT

Set: ForegroundLinesLineweight(self: AcadSectionTypeSettingsClass) = value
"""

    ForegroundLinesPlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ForegroundLinesPlotStyleName(self: AcadSectionTypeSettingsClass) -> str

Set: ForegroundLinesPlotStyleName(self: AcadSectionTypeSettingsClass) = value
"""

    ForegroundLinesVisible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ForegroundLinesVisible(self: AcadSectionTypeSettingsClass) -> bool

Set: ForegroundLinesVisible(self: AcadSectionTypeSettingsClass) = value
"""

    GenerationOptions = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: GenerationOptions(self: AcadSectionTypeSettingsClass) -> AcSectionGeneration

Set: GenerationOptions(self: AcadSectionTypeSettingsClass) = value
"""

    IAcadSectionTypeSettings_BackgroundLinesColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IAcadSectionTypeSettings_BackgroundLinesColor(self: AcadSectionTypeSettingsClass) -> AcadAcCmColor

Set: IAcadSectionTypeSettings_BackgroundLinesColor(self: AcadSectionTypeSettingsClass) = value
"""

    IAcadSectionTypeSettings_BackgroundLinesHiddenLine = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IAcadSectionTypeSettings_BackgroundLinesHiddenLine(self: AcadSectionTypeSettingsClass) -> bool

Set: IAcadSectionTypeSettings_BackgroundLinesHiddenLine(self: AcadSectionTypeSettingsClass) = value
"""

    IAcadSectionTypeSettings_BackgroundLinesLayer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IAcadSectionTypeSettings_BackgroundLinesLayer(self: AcadSectionTypeSettingsClass) -> str

Set: IAcadSectionTypeSettings_BackgroundLinesLayer(self: AcadSectionTypeSettingsClass) = value
"""

    IAcadSectionTypeSettings_BackgroundLinesLinetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IAcadSectionTypeSettings_BackgroundLinesLinetype(self: AcadSectionTypeSettingsClass) -> str

Set: IAcadSectionTypeSettings_BackgroundLinesLinetype(self: AcadSectionTypeSettingsClass) = value
"""

    IAcadSectionTypeSettings_BackgroundLinesLinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IAcadSectionTypeSettings_BackgroundLinesLinetypeScale(self: AcadSectionTypeSettingsClass) -> float

Set: IAcadSectionTypeSettings_BackgroundLinesLinetypeScale(self: AcadSectionTypeSettingsClass) = value
"""

    IAcadSectionTypeSettings_BackgroundLinesLineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IAcadSectionTypeSettings_BackgroundLinesLineweight(self: AcadSectionTypeSettingsClass) -> ACAD_LWEIGHT

Set: IAcadSectionTypeSettings_BackgroundLinesLineweight(self: AcadSectionTypeSettingsClass) = value
"""

    IAcadSectionTypeSettings_BackgroundLinesPlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IAcadSectionTypeSettings_BackgroundLinesPlotStyleName(self: AcadSectionTypeSettingsClass) -> str

Set: IAcadSectionTypeSettings_BackgroundLinesPlotStyleName(self: AcadSectionTypeSettingsClass) = value
"""

    IAcadSectionTypeSettings_BackgroundLinesVisible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IAcadSectionTypeSettings_BackgroundLinesVisible(self: AcadSectionTypeSettingsClass) -> bool

Set: IAcadSectionTypeSettings_BackgroundLinesVisible(self: AcadSectionTypeSettingsClass) = value
"""

    IAcadSectionTypeSettings_CurveTangencyLinesColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IAcadSectionTypeSettings_CurveTangencyLinesColor(self: AcadSectionTypeSettingsClass) -> AcadAcCmColor

Set: IAcadSectionTypeSettings_CurveTangencyLinesColor(self: AcadSectionTypeSettingsClass) = value
"""

    IAcadSectionTypeSettings_CurveTangencyLinesLayer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IAcadSectionTypeSettings_CurveTangencyLinesLayer(self: AcadSectionTypeSettingsClass) -> str

Set: IAcadSectionTypeSettings_CurveTangencyLinesLayer(self: AcadSectionTypeSettingsClass) = value
"""

    IAcadSectionTypeSettings_CurveTangencyLinesLinetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IAcadSectionTypeSettings_CurveTangencyLinesLinetype(self: AcadSectionTypeSettingsClass) -> str

Set: IAcadSectionTypeSettings_CurveTangencyLinesLinetype(self: AcadSectionTypeSettingsClass) = value
"""

    IAcadSectionTypeSettings_CurveTangencyLinesLinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IAcadSectionTypeSettings_CurveTangencyLinesLinetypeScale(self: AcadSectionTypeSettingsClass) -> float

Set: IAcadSectionTypeSettings_CurveTangencyLinesLinetypeScale(self: AcadSectionTypeSettingsClass) = value
"""

    IAcadSectionTypeSettings_CurveTangencyLinesLineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IAcadSectionTypeSettings_CurveTangencyLinesLineweight(self: AcadSectionTypeSettingsClass) -> ACAD_LWEIGHT

Set: IAcadSectionTypeSettings_CurveTangencyLinesLineweight(self: AcadSectionTypeSettingsClass) = value
"""

    IAcadSectionTypeSettings_CurveTangencyLinesPlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IAcadSectionTypeSettings_CurveTangencyLinesPlotStyleName(self: AcadSectionTypeSettingsClass) -> str

Set: IAcadSectionTypeSettings_CurveTangencyLinesPlotStyleName(self: AcadSectionTypeSettingsClass) = value
"""

    IAcadSectionTypeSettings_CurveTangencyLinesVisible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IAcadSectionTypeSettings_CurveTangencyLinesVisible(self: AcadSectionTypeSettingsClass) -> bool

Set: IAcadSectionTypeSettings_CurveTangencyLinesVisible(self: AcadSectionTypeSettingsClass) = value
"""

    IAcadSectionTypeSettings_DestinationBlock = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IAcadSectionTypeSettings_DestinationBlock(self: AcadSectionTypeSettingsClass) -> object

Set: IAcadSectionTypeSettings_DestinationBlock(self: AcadSectionTypeSettingsClass) = value
"""

    IAcadSectionTypeSettings_DestinationFile = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IAcadSectionTypeSettings_DestinationFile(self: AcadSectionTypeSettingsClass) -> str

Set: IAcadSectionTypeSettings_DestinationFile(self: AcadSectionTypeSettingsClass) = value
"""

    IAcadSectionTypeSettings_ForegroundLinesColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IAcadSectionTypeSettings_ForegroundLinesColor(self: AcadSectionTypeSettingsClass) -> AcadAcCmColor

Set: IAcadSectionTypeSettings_ForegroundLinesColor(self: AcadSectionTypeSettingsClass) = value
"""

    IAcadSectionTypeSettings_ForegroundLinesEdgeTransparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IAcadSectionTypeSettings_ForegroundLinesEdgeTransparency(self: AcadSectionTypeSettingsClass) -> int

Set: IAcadSectionTypeSettings_ForegroundLinesEdgeTransparency(self: AcadSectionTypeSettingsClass) = value
"""

    IAcadSectionTypeSettings_ForegroundLinesFaceTransparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IAcadSectionTypeSettings_ForegroundLinesFaceTransparency(self: AcadSectionTypeSettingsClass) -> int

Set: IAcadSectionTypeSettings_ForegroundLinesFaceTransparency(self: AcadSectionTypeSettingsClass) = value
"""

    IAcadSectionTypeSettings_ForegroundLinesHiddenLine = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IAcadSectionTypeSettings_ForegroundLinesHiddenLine(self: AcadSectionTypeSettingsClass) -> bool

Set: IAcadSectionTypeSettings_ForegroundLinesHiddenLine(self: AcadSectionTypeSettingsClass) = value
"""

    IAcadSectionTypeSettings_ForegroundLinesLayer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IAcadSectionTypeSettings_ForegroundLinesLayer(self: AcadSectionTypeSettingsClass) -> str

Set: IAcadSectionTypeSettings_ForegroundLinesLayer(self: AcadSectionTypeSettingsClass) = value
"""

    IAcadSectionTypeSettings_ForegroundLinesLinetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IAcadSectionTypeSettings_ForegroundLinesLinetype(self: AcadSectionTypeSettingsClass) -> str

Set: IAcadSectionTypeSettings_ForegroundLinesLinetype(self: AcadSectionTypeSettingsClass) = value
"""

    IAcadSectionTypeSettings_ForegroundLinesLinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IAcadSectionTypeSettings_ForegroundLinesLinetypeScale(self: AcadSectionTypeSettingsClass) -> float

Set: IAcadSectionTypeSettings_ForegroundLinesLinetypeScale(self: AcadSectionTypeSettingsClass) = value
"""

    IAcadSectionTypeSettings_ForegroundLinesLineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IAcadSectionTypeSettings_ForegroundLinesLineweight(self: AcadSectionTypeSettingsClass) -> ACAD_LWEIGHT

Set: IAcadSectionTypeSettings_ForegroundLinesLineweight(self: AcadSectionTypeSettingsClass) = value
"""

    IAcadSectionTypeSettings_ForegroundLinesPlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IAcadSectionTypeSettings_ForegroundLinesPlotStyleName(self: AcadSectionTypeSettingsClass) -> str

Set: IAcadSectionTypeSettings_ForegroundLinesPlotStyleName(self: AcadSectionTypeSettingsClass) = value
"""

    IAcadSectionTypeSettings_ForegroundLinesVisible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IAcadSectionTypeSettings_ForegroundLinesVisible(self: AcadSectionTypeSettingsClass) -> bool

Set: IAcadSectionTypeSettings_ForegroundLinesVisible(self: AcadSectionTypeSettingsClass) = value
"""

    IAcadSectionTypeSettings_GenerationOptions = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IAcadSectionTypeSettings_GenerationOptions(self: AcadSectionTypeSettingsClass) -> AcSectionGeneration

Set: IAcadSectionTypeSettings_GenerationOptions(self: AcadSectionTypeSettingsClass) = value
"""

    IAcadSectionTypeSettings_IntersectionBoundaryColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IAcadSectionTypeSettings_IntersectionBoundaryColor(self: AcadSectionTypeSettingsClass) -> AcadAcCmColor

Set: IAcadSectionTypeSettings_IntersectionBoundaryColor(self: AcadSectionTypeSettingsClass) = value
"""

    IAcadSectionTypeSettings_IntersectionBoundaryDivisionLines = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IAcadSectionTypeSettings_IntersectionBoundaryDivisionLines(self: AcadSectionTypeSettingsClass) -> bool

Set: IAcadSectionTypeSettings_IntersectionBoundaryDivisionLines(self: AcadSectionTypeSettingsClass) = value
"""

    IAcadSectionTypeSettings_IntersectionBoundaryLayer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IAcadSectionTypeSettings_IntersectionBoundaryLayer(self: AcadSectionTypeSettingsClass) -> str

Set: IAcadSectionTypeSettings_IntersectionBoundaryLayer(self: AcadSectionTypeSettingsClass) = value
"""

    IAcadSectionTypeSettings_IntersectionBoundaryLinetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IAcadSectionTypeSettings_IntersectionBoundaryLinetype(self: AcadSectionTypeSettingsClass) -> str

Set: IAcadSectionTypeSettings_IntersectionBoundaryLinetype(self: AcadSectionTypeSettingsClass) = value
"""

    IAcadSectionTypeSettings_IntersectionBoundaryLinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IAcadSectionTypeSettings_IntersectionBoundaryLinetypeScale(self: AcadSectionTypeSettingsClass) -> float

Set: IAcadSectionTypeSettings_IntersectionBoundaryLinetypeScale(self: AcadSectionTypeSettingsClass) = value
"""

    IAcadSectionTypeSettings_IntersectionBoundaryLineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IAcadSectionTypeSettings_IntersectionBoundaryLineweight(self: AcadSectionTypeSettingsClass) -> ACAD_LWEIGHT

Set: IAcadSectionTypeSettings_IntersectionBoundaryLineweight(self: AcadSectionTypeSettingsClass) = value
"""

    IAcadSectionTypeSettings_IntersectionBoundaryPlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IAcadSectionTypeSettings_IntersectionBoundaryPlotStyleName(self: AcadSectionTypeSettingsClass) -> str

Set: IAcadSectionTypeSettings_IntersectionBoundaryPlotStyleName(self: AcadSectionTypeSettingsClass) = value
"""

    IAcadSectionTypeSettings_IntersectionFillColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IAcadSectionTypeSettings_IntersectionFillColor(self: AcadSectionTypeSettingsClass) -> AcadAcCmColor

Set: IAcadSectionTypeSettings_IntersectionFillColor(self: AcadSectionTypeSettingsClass) = value
"""

    IAcadSectionTypeSettings_IntersectionFillFaceTransparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IAcadSectionTypeSettings_IntersectionFillFaceTransparency(self: AcadSectionTypeSettingsClass) -> int

Set: IAcadSectionTypeSettings_IntersectionFillFaceTransparency(self: AcadSectionTypeSettingsClass) = value
"""

    IAcadSectionTypeSettings_IntersectionFillHatchAngle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IAcadSectionTypeSettings_IntersectionFillHatchAngle(self: AcadSectionTypeSettingsClass) -> float

Set: IAcadSectionTypeSettings_IntersectionFillHatchAngle(self: AcadSectionTypeSettingsClass) = value
"""

    IAcadSectionTypeSettings_IntersectionFillHatchPatternName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IAcadSectionTypeSettings_IntersectionFillHatchPatternName(self: AcadSectionTypeSettingsClass) -> str

Set: IAcadSectionTypeSettings_IntersectionFillHatchPatternName(self: AcadSectionTypeSettingsClass) = value
"""

    IAcadSectionTypeSettings_IntersectionFillHatchPatternType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IAcadSectionTypeSettings_IntersectionFillHatchPatternType(self: AcadSectionTypeSettingsClass) -> AcPatternType

Set: IAcadSectionTypeSettings_IntersectionFillHatchPatternType(self: AcadSectionTypeSettingsClass) = value
"""

    IAcadSectionTypeSettings_IntersectionFillHatchScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IAcadSectionTypeSettings_IntersectionFillHatchScale(self: AcadSectionTypeSettingsClass) -> float

Set: IAcadSectionTypeSettings_IntersectionFillHatchScale(self: AcadSectionTypeSettingsClass) = value
"""

    IAcadSectionTypeSettings_IntersectionFillHatchSpacing = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IAcadSectionTypeSettings_IntersectionFillHatchSpacing(self: AcadSectionTypeSettingsClass) -> float

Set: IAcadSectionTypeSettings_IntersectionFillHatchSpacing(self: AcadSectionTypeSettingsClass) = value
"""

    IAcadSectionTypeSettings_IntersectionFillLayer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IAcadSectionTypeSettings_IntersectionFillLayer(self: AcadSectionTypeSettingsClass) -> str

Set: IAcadSectionTypeSettings_IntersectionFillLayer(self: AcadSectionTypeSettingsClass) = value
"""

    IAcadSectionTypeSettings_IntersectionFillLinetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IAcadSectionTypeSettings_IntersectionFillLinetype(self: AcadSectionTypeSettingsClass) -> str

Set: IAcadSectionTypeSettings_IntersectionFillLinetype(self: AcadSectionTypeSettingsClass) = value
"""

    IAcadSectionTypeSettings_IntersectionFillLinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IAcadSectionTypeSettings_IntersectionFillLinetypeScale(self: AcadSectionTypeSettingsClass) -> float

Set: IAcadSectionTypeSettings_IntersectionFillLinetypeScale(self: AcadSectionTypeSettingsClass) = value
"""

    IAcadSectionTypeSettings_IntersectionFillLineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IAcadSectionTypeSettings_IntersectionFillLineweight(self: AcadSectionTypeSettingsClass) -> ACAD_LWEIGHT

Set: IAcadSectionTypeSettings_IntersectionFillLineweight(self: AcadSectionTypeSettingsClass) = value
"""

    IAcadSectionTypeSettings_IntersectionFillPlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IAcadSectionTypeSettings_IntersectionFillPlotStyleName(self: AcadSectionTypeSettingsClass) -> str

Set: IAcadSectionTypeSettings_IntersectionFillPlotStyleName(self: AcadSectionTypeSettingsClass) = value
"""

    IAcadSectionTypeSettings_IntersectionFillVisible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IAcadSectionTypeSettings_IntersectionFillVisible(self: AcadSectionTypeSettingsClass) -> bool

Set: IAcadSectionTypeSettings_IntersectionFillVisible(self: AcadSectionTypeSettingsClass) = value
"""

    IAcadSectionTypeSettings_SourceObjects = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IAcadSectionTypeSettings_SourceObjects(self: AcadSectionTypeSettingsClass) -> object

Set: IAcadSectionTypeSettings_SourceObjects(self: AcadSectionTypeSettingsClass) = value
"""

    IntersectionBoundaryColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IntersectionBoundaryColor(self: AcadSectionTypeSettingsClass) -> AcadAcCmColor

Set: IntersectionBoundaryColor(self: AcadSectionTypeSettingsClass) = value
"""

    IntersectionBoundaryDivisionLines = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IntersectionBoundaryDivisionLines(self: AcadSectionTypeSettingsClass) -> bool

Set: IntersectionBoundaryDivisionLines(self: AcadSectionTypeSettingsClass) = value
"""

    IntersectionBoundaryLayer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IntersectionBoundaryLayer(self: AcadSectionTypeSettingsClass) -> str

Set: IntersectionBoundaryLayer(self: AcadSectionTypeSettingsClass) = value
"""

    IntersectionBoundaryLinetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IntersectionBoundaryLinetype(self: AcadSectionTypeSettingsClass) -> str

Set: IntersectionBoundaryLinetype(self: AcadSectionTypeSettingsClass) = value
"""

    IntersectionBoundaryLinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IntersectionBoundaryLinetypeScale(self: AcadSectionTypeSettingsClass) -> float

Set: IntersectionBoundaryLinetypeScale(self: AcadSectionTypeSettingsClass) = value
"""

    IntersectionBoundaryLineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IntersectionBoundaryLineweight(self: AcadSectionTypeSettingsClass) -> ACAD_LWEIGHT

Set: IntersectionBoundaryLineweight(self: AcadSectionTypeSettingsClass) = value
"""

    IntersectionBoundaryPlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IntersectionBoundaryPlotStyleName(self: AcadSectionTypeSettingsClass) -> str

Set: IntersectionBoundaryPlotStyleName(self: AcadSectionTypeSettingsClass) = value
"""

    IntersectionBoundaryVisible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IntersectionBoundaryVisible(self: AcadSectionTypeSettingsClass) -> bool

Set: IntersectionBoundaryVisible(self: AcadSectionTypeSettingsClass) = value
"""

    IntersectionFillColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IntersectionFillColor(self: AcadSectionTypeSettingsClass) -> AcadAcCmColor

Set: IntersectionFillColor(self: AcadSectionTypeSettingsClass) = value
"""

    IntersectionFillFaceTransparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IntersectionFillFaceTransparency(self: AcadSectionTypeSettingsClass) -> int

Set: IntersectionFillFaceTransparency(self: AcadSectionTypeSettingsClass) = value
"""

    IntersectionFillHatchAngle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IntersectionFillHatchAngle(self: AcadSectionTypeSettingsClass) -> float

Set: IntersectionFillHatchAngle(self: AcadSectionTypeSettingsClass) = value
"""

    IntersectionFillHatchPatternName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IntersectionFillHatchPatternName(self: AcadSectionTypeSettingsClass) -> str

Set: IntersectionFillHatchPatternName(self: AcadSectionTypeSettingsClass) = value
"""

    IntersectionFillHatchPatternType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IntersectionFillHatchPatternType(self: AcadSectionTypeSettingsClass) -> AcPatternType

Set: IntersectionFillHatchPatternType(self: AcadSectionTypeSettingsClass) = value
"""

    IntersectionFillHatchScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IntersectionFillHatchScale(self: AcadSectionTypeSettingsClass) -> float

Set: IntersectionFillHatchScale(self: AcadSectionTypeSettingsClass) = value
"""

    IntersectionFillHatchSpacing = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IntersectionFillHatchSpacing(self: AcadSectionTypeSettingsClass) -> float

Set: IntersectionFillHatchSpacing(self: AcadSectionTypeSettingsClass) = value
"""

    IntersectionFillLayer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IntersectionFillLayer(self: AcadSectionTypeSettingsClass) -> str

Set: IntersectionFillLayer(self: AcadSectionTypeSettingsClass) = value
"""

    IntersectionFillLinetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IntersectionFillLinetype(self: AcadSectionTypeSettingsClass) -> str

Set: IntersectionFillLinetype(self: AcadSectionTypeSettingsClass) = value
"""

    IntersectionFillLinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IntersectionFillLinetypeScale(self: AcadSectionTypeSettingsClass) -> float

Set: IntersectionFillLinetypeScale(self: AcadSectionTypeSettingsClass) = value
"""

    IntersectionFillLineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IntersectionFillLineweight(self: AcadSectionTypeSettingsClass) -> ACAD_LWEIGHT

Set: IntersectionFillLineweight(self: AcadSectionTypeSettingsClass) = value
"""

    IntersectionFillPlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IntersectionFillPlotStyleName(self: AcadSectionTypeSettingsClass) -> str

Set: IntersectionFillPlotStyleName(self: AcadSectionTypeSettingsClass) = value
"""

    IntersectionFillVisible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IntersectionFillVisible(self: AcadSectionTypeSettingsClass) -> bool

Set: IntersectionFillVisible(self: AcadSectionTypeSettingsClass) = value
"""

    SourceObjects = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SourceObjects(self: AcadSectionTypeSettingsClass) -> object

Set: SourceObjects(self: AcadSectionTypeSettingsClass) = value
"""


    Modified = None


class IAcadSecurityParams:
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Action = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Action(self: IAcadSecurityParams) -> int

Set: Action(self: IAcadSecurityParams) = value
"""

    Algorithm = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Algorithm(self: IAcadSecurityParams) -> int

Set: Algorithm(self: IAcadSecurityParams) = value
"""

    Comment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Comment(self: IAcadSecurityParams) -> str

Set: Comment(self: IAcadSecurityParams) = value
"""

    Issuer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Issuer(self: IAcadSecurityParams) -> str

Set: Issuer(self: IAcadSecurityParams) = value
"""

    KeyLength = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: KeyLength(self: IAcadSecurityParams) -> int

Set: KeyLength(self: IAcadSecurityParams) = value
"""

    Password = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Password(self: IAcadSecurityParams) -> str

Set: Password(self: IAcadSecurityParams) = value
"""

    ProviderName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ProviderName(self: IAcadSecurityParams) -> str

Set: ProviderName(self: IAcadSecurityParams) = value
"""

    ProviderType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ProviderType(self: IAcadSecurityParams) -> int

Set: ProviderType(self: IAcadSecurityParams) = value
"""

    SerialNumber = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SerialNumber(self: IAcadSecurityParams) -> str

Set: SerialNumber(self: IAcadSecurityParams) = value
"""

    Subject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Subject(self: IAcadSecurityParams) -> str

Set: Subject(self: IAcadSecurityParams) = value
"""

    TimeServer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TimeServer(self: IAcadSecurityParams) -> str

Set: TimeServer(self: IAcadSecurityParams) = value
"""



class AcadSecurityParams(IAcadSecurityParams):
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class AcadSecurityParamsClass(__ComObject):
    """ AcadSecurityParamsClass() """
    Action = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Action(self: AcadSecurityParamsClass) -> int

Set: Action(self: AcadSecurityParamsClass) = value
"""

    Algorithm = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Algorithm(self: AcadSecurityParamsClass) -> int

Set: Algorithm(self: AcadSecurityParamsClass) = value
"""

    Comment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Comment(self: AcadSecurityParamsClass) -> str

Set: Comment(self: AcadSecurityParamsClass) = value
"""

    Issuer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Issuer(self: AcadSecurityParamsClass) -> str

Set: Issuer(self: AcadSecurityParamsClass) = value
"""

    KeyLength = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: KeyLength(self: AcadSecurityParamsClass) -> int

Set: KeyLength(self: AcadSecurityParamsClass) = value
"""

    Password = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Password(self: AcadSecurityParamsClass) -> str

Set: Password(self: AcadSecurityParamsClass) = value
"""

    ProviderName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ProviderName(self: AcadSecurityParamsClass) -> str

Set: ProviderName(self: AcadSecurityParamsClass) = value
"""

    ProviderType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ProviderType(self: AcadSecurityParamsClass) -> int

Set: ProviderType(self: AcadSecurityParamsClass) = value
"""

    SerialNumber = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SerialNumber(self: AcadSecurityParamsClass) -> str

Set: SerialNumber(self: AcadSecurityParamsClass) = value
"""

    Subject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Subject(self: AcadSecurityParamsClass) -> str

Set: Subject(self: AcadSecurityParamsClass) = value
"""

    TimeServer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TimeServer(self: AcadSecurityParamsClass) -> str

Set: TimeServer(self: AcadSecurityParamsClass) = value
"""



class AcadSecurityParamsConstants(Enum):
    """ enum AcadSecurityParamsConstants, values: ACADSECURITYPARAMS_ALGID_RC4 (26625) """
    ACADSECURITYPARAMS_ALGID_RC4 = None
    value__ = None


class AcadSecurityParamsType(Enum):
    """ enum AcadSecurityParamsType, values: ACADSECURITYPARAMS_ADD_TIMESTAMP (32), ACADSECURITYPARAMS_ENCRYPT_DATA (1), ACADSECURITYPARAMS_ENCRYPT_PROPS (2), ACADSECURITYPARAMS_SIGN_DATA (16) """
    ACADSECURITYPARAMS_ADD_TIMESTAMP = None
    ACADSECURITYPARAMS_ENCRYPT_DATA = None
    ACADSECURITYPARAMS_ENCRYPT_PROPS = None
    ACADSECURITYPARAMS_SIGN_DATA = None
    value__ = None


class IAcadShape(IAcadEntity, IAcadObject):
    # no doc
    def ArrayPolar(self, NumberOfObjects, AngleToFill, CenterPoint):
        """ ArrayPolar(self: IAcadShape, NumberOfObjects: int, AngleToFill: float, CenterPoint: object) -> object """
        pass

    def ArrayRectangular(self, NumberOfRows, NumberOfColumns, NumberOfLevels, DistBetweenRows, DistBetweenCols, DistBetweenLevels):
        """ ArrayRectangular(self: IAcadShape, NumberOfRows: int, NumberOfColumns: int, NumberOfLevels: int, DistBetweenRows: float, DistBetweenCols: float, DistBetweenLevels: float) -> object """
        pass

    def Copy(self):
        """ Copy(self: IAcadShape) -> object """
        pass

    def Delete(self):
        """ Delete(self: IAcadShape) """
        pass

    def Erase(self):
        """ Erase(self: IAcadShape) """
        pass

    def GetBoundingBox(self, MinPoint, MaxPoint):
        """ GetBoundingBox(self: IAcadShape) -> (object, object) """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: IAcadShape) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: IAcadShape, AppName: str) -> (object, object) """
        pass

    def Highlight(self, HighlightFlag):
        """ Highlight(self: IAcadShape, HighlightFlag: bool) """
        pass

    def IntersectWith(self, IntersectObject, option):
        """ IntersectWith(self: IAcadShape, IntersectObject: object, option: AcExtendOption) -> object """
        pass

    def Mirror(self, Point1, Point2):
        """ Mirror(self: IAcadShape, Point1: object, Point2: object) -> object """
        pass

    def Mirror3D(self, Point1, Point2, point3):
        """ Mirror3D(self: IAcadShape, Point1: object, Point2: object, point3: object) -> object """
        pass

    def Move(self, FromPoint, ToPoint):
        """ Move(self: IAcadShape, FromPoint: object, ToPoint: object) """
        pass

    def Rotate(self, BasePoint, RotationAngle):
        """ Rotate(self: IAcadShape, BasePoint: object, RotationAngle: float) """
        pass

    def Rotate3D(self, Point1, Point2, RotationAngle):
        """ Rotate3D(self: IAcadShape, Point1: object, Point2: object, RotationAngle: float) """
        pass

    def ScaleEntity(self, BasePoint, ScaleFactor):
        """ ScaleEntity(self: IAcadShape, BasePoint: object, ScaleFactor: float) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: IAcadShape, XDataType: object, XDataValue: object) """
        pass

    def TransformBy(self, TransformationMatrix):
        """ TransformBy(self: IAcadShape, TransformationMatrix: object) """
        pass

    def Update(self):
        """ Update(self: IAcadShape) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IAcadShape) -> object

"""

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: IAcadShape) -> ACAD_COLOR

Set: color(self: IAcadShape) = value
"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: IAcadShape) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: IAcadShape) -> object

"""

    EntityName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityName(self: IAcadShape) -> str

"""

    EntityTransparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityTransparency(self: IAcadShape) -> str

Set: EntityTransparency(self: IAcadShape) = value
"""

    EntityType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityType(self: IAcadShape) -> int

"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: IAcadShape) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: IAcadShape) -> bool

"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: IAcadShape) -> float

Set: Height(self: IAcadShape) = value
"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: IAcadShape) -> AcadHyperlinks

"""

    InsertionPoint = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: InsertionPoint(self: IAcadShape) -> object

Set: InsertionPoint(self: IAcadShape) = value
"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layer(self: IAcadShape) -> str

Set: Layer(self: IAcadShape) = value
"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: IAcadShape) -> str

Set: Linetype(self: IAcadShape) = value
"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeScale(self: IAcadShape) -> float

Set: LinetypeScale(self: IAcadShape) = value
"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: IAcadShape) -> ACAD_LWEIGHT

Set: Lineweight(self: IAcadShape) = value
"""

    Material = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Material(self: IAcadShape) -> str

Set: Material(self: IAcadShape) = value
"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: IAcadShape) -> str

Set: Name(self: IAcadShape) = value
"""

    Normal = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Normal(self: IAcadShape) -> object

Set: Normal(self: IAcadShape) = value
"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: IAcadShape) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: IAcadShape) -> str

"""

    ObliqueAngle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObliqueAngle(self: IAcadShape) -> float

Set: ObliqueAngle(self: IAcadShape) = value
"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: IAcadShape) -> Int64

"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: IAcadShape) -> str

Set: PlotStyleName(self: IAcadShape) = value
"""

    Rotation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Rotation(self: IAcadShape) -> float

Set: Rotation(self: IAcadShape) = value
"""

    ScaleFactor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ScaleFactor(self: IAcadShape) -> float

Set: ScaleFactor(self: IAcadShape) = value
"""

    Thickness = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Thickness(self: IAcadShape) -> float

Set: Thickness(self: IAcadShape) = value
"""

    TrueColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TrueColor(self: IAcadShape) -> AcadAcCmColor

Set: TrueColor(self: IAcadShape) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: IAcadShape) -> bool

Set: Visible(self: IAcadShape) = value
"""



class AcadShape(IAcadShape, IAcadEntity, IAcadObject, IAcadObjectEvents_Event):
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class AcadShapeClass(__ComObject):
    # no doc
    def add_Modified(self, A_1):
        """ add_Modified(self: AcadShapeClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def ArrayPolar(self, NumberOfObjects, AngleToFill, CenterPoint):
        """ ArrayPolar(self: AcadShapeClass, NumberOfObjects: int, AngleToFill: float, CenterPoint: object) -> object """
        pass

    def ArrayRectangular(self, NumberOfRows, NumberOfColumns, NumberOfLevels, DistBetweenRows, DistBetweenCols, DistBetweenLevels):
        """ ArrayRectangular(self: AcadShapeClass, NumberOfRows: int, NumberOfColumns: int, NumberOfLevels: int, DistBetweenRows: float, DistBetweenCols: float, DistBetweenLevels: float) -> object """
        pass

    def Copy(self):
        """ Copy(self: AcadShapeClass) -> object """
        pass

    def Delete(self):
        """ Delete(self: AcadShapeClass) """
        pass

    def Erase(self):
        """ Erase(self: AcadShapeClass) """
        pass

    def GetBoundingBox(self, MinPoint, MaxPoint):
        """ GetBoundingBox(self: AcadShapeClass) -> (object, object) """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: AcadShapeClass) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: AcadShapeClass, AppName: str) -> (object, object) """
        pass

    def Highlight(self, HighlightFlag):
        """ Highlight(self: AcadShapeClass, HighlightFlag: bool) """
        pass

    def IntersectWith(self, IntersectObject, option):
        """ IntersectWith(self: AcadShapeClass, IntersectObject: object, option: AcExtendOption) -> object """
        pass

    def Mirror(self, Point1, Point2):
        """ Mirror(self: AcadShapeClass, Point1: object, Point2: object) -> object """
        pass

    def Mirror3D(self, Point1, Point2, point3):
        """ Mirror3D(self: AcadShapeClass, Point1: object, Point2: object, point3: object) -> object """
        pass

    def Move(self, FromPoint, ToPoint):
        """ Move(self: AcadShapeClass, FromPoint: object, ToPoint: object) """
        pass

    def remove_Modified(self, A_1):
        """ remove_Modified(self: AcadShapeClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def Rotate(self, BasePoint, RotationAngle):
        """ Rotate(self: AcadShapeClass, BasePoint: object, RotationAngle: float) """
        pass

    def Rotate3D(self, Point1, Point2, RotationAngle):
        """ Rotate3D(self: AcadShapeClass, Point1: object, Point2: object, RotationAngle: float) """
        pass

    def ScaleEntity(self, BasePoint, ScaleFactor):
        """ ScaleEntity(self: AcadShapeClass, BasePoint: object, ScaleFactor: float) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: AcadShapeClass, XDataType: object, XDataValue: object) """
        pass

    def TransformBy(self, TransformationMatrix):
        """ TransformBy(self: AcadShapeClass, TransformationMatrix: object) """
        pass

    def Update(self):
        """ Update(self: AcadShapeClass) """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: AcadShapeClass) -> object

"""

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: AcadShapeClass) -> ACAD_COLOR

Set: color(self: AcadShapeClass) = value
"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: AcadShapeClass) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: AcadShapeClass) -> object

"""

    EntityName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityName(self: AcadShapeClass) -> str

"""

    EntityTransparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityTransparency(self: AcadShapeClass) -> str

Set: EntityTransparency(self: AcadShapeClass) = value
"""

    EntityType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityType(self: AcadShapeClass) -> int

"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: AcadShapeClass) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: AcadShapeClass) -> bool

"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: AcadShapeClass) -> float

Set: Height(self: AcadShapeClass) = value
"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: AcadShapeClass) -> AcadHyperlinks

"""

    InsertionPoint = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: InsertionPoint(self: AcadShapeClass) -> object

Set: InsertionPoint(self: AcadShapeClass) = value
"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layer(self: AcadShapeClass) -> str

Set: Layer(self: AcadShapeClass) = value
"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: AcadShapeClass) -> str

Set: Linetype(self: AcadShapeClass) = value
"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeScale(self: AcadShapeClass) -> float

Set: LinetypeScale(self: AcadShapeClass) = value
"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: AcadShapeClass) -> ACAD_LWEIGHT

Set: Lineweight(self: AcadShapeClass) = value
"""

    Material = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Material(self: AcadShapeClass) -> str

Set: Material(self: AcadShapeClass) = value
"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: AcadShapeClass) -> str

Set: Name(self: AcadShapeClass) = value
"""

    Normal = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Normal(self: AcadShapeClass) -> object

Set: Normal(self: AcadShapeClass) = value
"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: AcadShapeClass) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: AcadShapeClass) -> str

"""

    ObliqueAngle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObliqueAngle(self: AcadShapeClass) -> float

Set: ObliqueAngle(self: AcadShapeClass) = value
"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: AcadShapeClass) -> Int64

"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: AcadShapeClass) -> str

Set: PlotStyleName(self: AcadShapeClass) = value
"""

    Rotation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Rotation(self: AcadShapeClass) -> float

Set: Rotation(self: AcadShapeClass) = value
"""

    ScaleFactor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ScaleFactor(self: AcadShapeClass) -> float

Set: ScaleFactor(self: AcadShapeClass) = value
"""

    Thickness = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Thickness(self: AcadShapeClass) -> float

Set: Thickness(self: AcadShapeClass) = value
"""

    TrueColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TrueColor(self: AcadShapeClass) -> AcadAcCmColor

Set: TrueColor(self: AcadShapeClass) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: AcadShapeClass) -> bool

Set: Visible(self: AcadShapeClass) = value
"""


    Modified = None


class IAcadSolid(IAcadEntity, IAcadObject):
    # no doc
    def ArrayPolar(self, NumberOfObjects, AngleToFill, CenterPoint):
        """ ArrayPolar(self: IAcadSolid, NumberOfObjects: int, AngleToFill: float, CenterPoint: object) -> object """
        pass

    def ArrayRectangular(self, NumberOfRows, NumberOfColumns, NumberOfLevels, DistBetweenRows, DistBetweenCols, DistBetweenLevels):
        """ ArrayRectangular(self: IAcadSolid, NumberOfRows: int, NumberOfColumns: int, NumberOfLevels: int, DistBetweenRows: float, DistBetweenCols: float, DistBetweenLevels: float) -> object """
        pass

    def Copy(self):
        """ Copy(self: IAcadSolid) -> object """
        pass

    def Delete(self):
        """ Delete(self: IAcadSolid) """
        pass

    def Erase(self):
        """ Erase(self: IAcadSolid) """
        pass

    def GetBoundingBox(self, MinPoint, MaxPoint):
        """ GetBoundingBox(self: IAcadSolid) -> (object, object) """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: IAcadSolid) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: IAcadSolid, AppName: str) -> (object, object) """
        pass

    def Highlight(self, HighlightFlag):
        """ Highlight(self: IAcadSolid, HighlightFlag: bool) """
        pass

    def IntersectWith(self, IntersectObject, option):
        """ IntersectWith(self: IAcadSolid, IntersectObject: object, option: AcExtendOption) -> object """
        pass

    def Mirror(self, Point1, Point2):
        """ Mirror(self: IAcadSolid, Point1: object, Point2: object) -> object """
        pass

    def Mirror3D(self, Point1, Point2, point3):
        """ Mirror3D(self: IAcadSolid, Point1: object, Point2: object, point3: object) -> object """
        pass

    def Move(self, FromPoint, ToPoint):
        """ Move(self: IAcadSolid, FromPoint: object, ToPoint: object) """
        pass

    def Rotate(self, BasePoint, RotationAngle):
        """ Rotate(self: IAcadSolid, BasePoint: object, RotationAngle: float) """
        pass

    def Rotate3D(self, Point1, Point2, RotationAngle):
        """ Rotate3D(self: IAcadSolid, Point1: object, Point2: object, RotationAngle: float) """
        pass

    def ScaleEntity(self, BasePoint, ScaleFactor):
        """ ScaleEntity(self: IAcadSolid, BasePoint: object, ScaleFactor: float) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: IAcadSolid, XDataType: object, XDataValue: object) """
        pass

    def TransformBy(self, TransformationMatrix):
        """ TransformBy(self: IAcadSolid, TransformationMatrix: object) """
        pass

    def Update(self):
        """ Update(self: IAcadSolid) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IAcadSolid) -> object

"""

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: IAcadSolid) -> ACAD_COLOR

Set: color(self: IAcadSolid) = value
"""

    Coordinates = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Coordinates(self: IAcadSolid) -> object

Set: Coordinates(self: IAcadSolid) = value
"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: IAcadSolid) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: IAcadSolid) -> object

"""

    EntityName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityName(self: IAcadSolid) -> str

"""

    EntityTransparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityTransparency(self: IAcadSolid) -> str

Set: EntityTransparency(self: IAcadSolid) = value
"""

    EntityType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityType(self: IAcadSolid) -> int

"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: IAcadSolid) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: IAcadSolid) -> bool

"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: IAcadSolid) -> AcadHyperlinks

"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layer(self: IAcadSolid) -> str

Set: Layer(self: IAcadSolid) = value
"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: IAcadSolid) -> str

Set: Linetype(self: IAcadSolid) = value
"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeScale(self: IAcadSolid) -> float

Set: LinetypeScale(self: IAcadSolid) = value
"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: IAcadSolid) -> ACAD_LWEIGHT

Set: Lineweight(self: IAcadSolid) = value
"""

    Material = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Material(self: IAcadSolid) -> str

Set: Material(self: IAcadSolid) = value
"""

    Normal = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Normal(self: IAcadSolid) -> object

Set: Normal(self: IAcadSolid) = value
"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: IAcadSolid) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: IAcadSolid) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: IAcadSolid) -> Int64

"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: IAcadSolid) -> str

Set: PlotStyleName(self: IAcadSolid) = value
"""

    Thickness = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Thickness(self: IAcadSolid) -> float

Set: Thickness(self: IAcadSolid) = value
"""

    TrueColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TrueColor(self: IAcadSolid) -> AcadAcCmColor

Set: TrueColor(self: IAcadSolid) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: IAcadSolid) -> bool

Set: Visible(self: IAcadSolid) = value
"""



class AcadSolid(IAcadSolid, IAcadEntity, IAcadObject, IAcadObjectEvents_Event):
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class AcadSolidClass(__ComObject):
    # no doc
    def add_Modified(self, A_1):
        """ add_Modified(self: AcadSolidClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def ArrayPolar(self, NumberOfObjects, AngleToFill, CenterPoint):
        """ ArrayPolar(self: AcadSolidClass, NumberOfObjects: int, AngleToFill: float, CenterPoint: object) -> object """
        pass

    def ArrayRectangular(self, NumberOfRows, NumberOfColumns, NumberOfLevels, DistBetweenRows, DistBetweenCols, DistBetweenLevels):
        """ ArrayRectangular(self: AcadSolidClass, NumberOfRows: int, NumberOfColumns: int, NumberOfLevels: int, DistBetweenRows: float, DistBetweenCols: float, DistBetweenLevels: float) -> object """
        pass

    def Copy(self):
        """ Copy(self: AcadSolidClass) -> object """
        pass

    def Delete(self):
        """ Delete(self: AcadSolidClass) """
        pass

    def Erase(self):
        """ Erase(self: AcadSolidClass) """
        pass

    def GetBoundingBox(self, MinPoint, MaxPoint):
        """ GetBoundingBox(self: AcadSolidClass) -> (object, object) """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: AcadSolidClass) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: AcadSolidClass, AppName: str) -> (object, object) """
        pass

    def Highlight(self, HighlightFlag):
        """ Highlight(self: AcadSolidClass, HighlightFlag: bool) """
        pass

    def IntersectWith(self, IntersectObject, option):
        """ IntersectWith(self: AcadSolidClass, IntersectObject: object, option: AcExtendOption) -> object """
        pass

    def Mirror(self, Point1, Point2):
        """ Mirror(self: AcadSolidClass, Point1: object, Point2: object) -> object """
        pass

    def Mirror3D(self, Point1, Point2, point3):
        """ Mirror3D(self: AcadSolidClass, Point1: object, Point2: object, point3: object) -> object """
        pass

    def Move(self, FromPoint, ToPoint):
        """ Move(self: AcadSolidClass, FromPoint: object, ToPoint: object) """
        pass

    def remove_Modified(self, A_1):
        """ remove_Modified(self: AcadSolidClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def Rotate(self, BasePoint, RotationAngle):
        """ Rotate(self: AcadSolidClass, BasePoint: object, RotationAngle: float) """
        pass

    def Rotate3D(self, Point1, Point2, RotationAngle):
        """ Rotate3D(self: AcadSolidClass, Point1: object, Point2: object, RotationAngle: float) """
        pass

    def ScaleEntity(self, BasePoint, ScaleFactor):
        """ ScaleEntity(self: AcadSolidClass, BasePoint: object, ScaleFactor: float) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: AcadSolidClass, XDataType: object, XDataValue: object) """
        pass

    def TransformBy(self, TransformationMatrix):
        """ TransformBy(self: AcadSolidClass, TransformationMatrix: object) """
        pass

    def Update(self):
        """ Update(self: AcadSolidClass) """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: AcadSolidClass) -> object

"""

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: AcadSolidClass) -> ACAD_COLOR

Set: color(self: AcadSolidClass) = value
"""

    Coordinates = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Coordinates(self: AcadSolidClass) -> object

Set: Coordinates(self: AcadSolidClass) = value
"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: AcadSolidClass) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: AcadSolidClass) -> object

"""

    EntityName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityName(self: AcadSolidClass) -> str

"""

    EntityTransparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityTransparency(self: AcadSolidClass) -> str

Set: EntityTransparency(self: AcadSolidClass) = value
"""

    EntityType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityType(self: AcadSolidClass) -> int

"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: AcadSolidClass) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: AcadSolidClass) -> bool

"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: AcadSolidClass) -> AcadHyperlinks

"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layer(self: AcadSolidClass) -> str

Set: Layer(self: AcadSolidClass) = value
"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: AcadSolidClass) -> str

Set: Linetype(self: AcadSolidClass) = value
"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeScale(self: AcadSolidClass) -> float

Set: LinetypeScale(self: AcadSolidClass) = value
"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: AcadSolidClass) -> ACAD_LWEIGHT

Set: Lineweight(self: AcadSolidClass) = value
"""

    Material = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Material(self: AcadSolidClass) -> str

Set: Material(self: AcadSolidClass) = value
"""

    Normal = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Normal(self: AcadSolidClass) -> object

Set: Normal(self: AcadSolidClass) = value
"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: AcadSolidClass) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: AcadSolidClass) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: AcadSolidClass) -> Int64

"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: AcadSolidClass) -> str

Set: PlotStyleName(self: AcadSolidClass) = value
"""

    Thickness = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Thickness(self: AcadSolidClass) -> float

Set: Thickness(self: AcadSolidClass) = value
"""

    TrueColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TrueColor(self: AcadSolidClass) -> AcadAcCmColor

Set: TrueColor(self: AcadSolidClass) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: AcadSolidClass) -> bool

Set: Visible(self: AcadSolidClass) = value
"""


    Modified = None


class IAcadSortentsTable(IAcadObject):
    # no doc
    def Block(self):
        """ Block(self: IAcadSortentsTable) -> AcadBlock """
        pass

    def Delete(self):
        """ Delete(self: IAcadSortentsTable) """
        pass

    def Erase(self):
        """ Erase(self: IAcadSortentsTable) """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: IAcadSortentsTable) -> AcadDictionary """
        pass

    def GetFullDrawOrder(self, Objects, honorSortentsSysvar):
        """ GetFullDrawOrder(self: IAcadSortentsTable, honorSortentsSysvar: bool) -> object """
        pass

    def GetRelativeDrawOrder(self, Objects, honorSortentsSysvar):
        """ GetRelativeDrawOrder(self: IAcadSortentsTable, honorSortentsSysvar: bool) -> object """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: IAcadSortentsTable, AppName: str) -> (object, object) """
        pass

    def MoveAbove(self, Objects, Target):
        """ MoveAbove(self: IAcadSortentsTable, Objects: object, Target: AcadEntity) """
        pass

    def MoveBelow(self, Objects, Target):
        """ MoveBelow(self: IAcadSortentsTable, Objects: object, Target: AcadEntity) """
        pass

    def MoveToBottom(self, Objects):
        """ MoveToBottom(self: IAcadSortentsTable, Objects: object) """
        pass

    def MoveToTop(self, Objects):
        """ MoveToTop(self: IAcadSortentsTable, Objects: object) """
        pass

    def SetRelativeDrawOrder(self, Objects):
        """ SetRelativeDrawOrder(self: IAcadSortentsTable, Objects: object) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: IAcadSortentsTable, XDataType: object, XDataValue: object) """
        pass

    def SwapOrder(self, Object1, Object2):
        """ SwapOrder(self: IAcadSortentsTable, Object1: AcadEntity, Object2: AcadEntity) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IAcadSortentsTable) -> object

"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: IAcadSortentsTable) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: IAcadSortentsTable) -> object

"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: IAcadSortentsTable) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: IAcadSortentsTable) -> bool

"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: IAcadSortentsTable) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: IAcadSortentsTable) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: IAcadSortentsTable) -> Int64

"""



class AcadSortentsTable(IAcadSortentsTable, IAcadObject, IAcadObjectEvents_Event):
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class AcadSortentsTableClass(__ComObject):
    """ AcadSortentsTableClass() """
    def add_Modified(self, A_1):
        """ add_Modified(self: AcadSortentsTableClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def Block(self):
        """ Block(self: AcadSortentsTableClass) -> AcadBlock """
        pass

    def Delete(self):
        """ Delete(self: AcadSortentsTableClass) """
        pass

    def Erase(self):
        """ Erase(self: AcadSortentsTableClass) """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: AcadSortentsTableClass) -> AcadDictionary """
        pass

    def GetFullDrawOrder(self, Objects, honorSortentsSysvar):
        """ GetFullDrawOrder(self: AcadSortentsTableClass, honorSortentsSysvar: bool) -> object """
        pass

    def GetRelativeDrawOrder(self, Objects, honorSortentsSysvar):
        """ GetRelativeDrawOrder(self: AcadSortentsTableClass, honorSortentsSysvar: bool) -> object """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: AcadSortentsTableClass, AppName: str) -> (object, object) """
        pass

    def MoveAbove(self, Objects, Target):
        """ MoveAbove(self: AcadSortentsTableClass, Objects: object, Target: AcadEntity) """
        pass

    def MoveBelow(self, Objects, Target):
        """ MoveBelow(self: AcadSortentsTableClass, Objects: object, Target: AcadEntity) """
        pass

    def MoveToBottom(self, Objects):
        """ MoveToBottom(self: AcadSortentsTableClass, Objects: object) """
        pass

    def MoveToTop(self, Objects):
        """ MoveToTop(self: AcadSortentsTableClass, Objects: object) """
        pass

    def remove_Modified(self, A_1):
        """ remove_Modified(self: AcadSortentsTableClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def SetRelativeDrawOrder(self, Objects):
        """ SetRelativeDrawOrder(self: AcadSortentsTableClass, Objects: object) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: AcadSortentsTableClass, XDataType: object, XDataValue: object) """
        pass

    def SwapOrder(self, Object1, Object2):
        """ SwapOrder(self: AcadSortentsTableClass, Object1: AcadEntity, Object2: AcadEntity) """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: AcadSortentsTableClass) -> object

"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: AcadSortentsTableClass) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: AcadSortentsTableClass) -> object

"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: AcadSortentsTableClass) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: AcadSortentsTableClass) -> bool

"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: AcadSortentsTableClass) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: AcadSortentsTableClass) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: AcadSortentsTableClass) -> Int64

"""


    Modified = None


class IAcadSpline(IAcadEntity, IAcadObject):
    # no doc
    def AddFitPoint(self, Index, fitPoint):
        """ AddFitPoint(self: IAcadSpline, Index: int, fitPoint: object) """
        pass

    def ArrayPolar(self, NumberOfObjects, AngleToFill, CenterPoint):
        """ ArrayPolar(self: IAcadSpline, NumberOfObjects: int, AngleToFill: float, CenterPoint: object) -> object """
        pass

    def ArrayRectangular(self, NumberOfRows, NumberOfColumns, NumberOfLevels, DistBetweenRows, DistBetweenCols, DistBetweenLevels):
        """ ArrayRectangular(self: IAcadSpline, NumberOfRows: int, NumberOfColumns: int, NumberOfLevels: int, DistBetweenRows: float, DistBetweenCols: float, DistBetweenLevels: float) -> object """
        pass

    def Copy(self):
        """ Copy(self: IAcadSpline) -> object """
        pass

    def Delete(self):
        """ Delete(self: IAcadSpline) """
        pass

    def DeleteFitPoint(self, Index):
        """ DeleteFitPoint(self: IAcadSpline, Index: int) """
        pass

    def ElevateOrder(self, Order):
        """ ElevateOrder(self: IAcadSpline, Order: int) """
        pass

    def Erase(self):
        """ Erase(self: IAcadSpline) """
        pass

    def GetBoundingBox(self, MinPoint, MaxPoint):
        """ GetBoundingBox(self: IAcadSpline) -> (object, object) """
        pass

    def GetControlPoint(self, Index):
        """ GetControlPoint(self: IAcadSpline, Index: int) -> object """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: IAcadSpline) -> AcadDictionary """
        pass

    def GetFitPoint(self, Index):
        """ GetFitPoint(self: IAcadSpline, Index: int) -> object """
        pass

    def GetWeight(self, Index):
        """ GetWeight(self: IAcadSpline, Index: int) -> float """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: IAcadSpline, AppName: str) -> (object, object) """
        pass

    def Highlight(self, HighlightFlag):
        """ Highlight(self: IAcadSpline, HighlightFlag: bool) """
        pass

    def IntersectWith(self, IntersectObject, option):
        """ IntersectWith(self: IAcadSpline, IntersectObject: object, option: AcExtendOption) -> object """
        pass

    def Mirror(self, Point1, Point2):
        """ Mirror(self: IAcadSpline, Point1: object, Point2: object) -> object """
        pass

    def Mirror3D(self, Point1, Point2, point3):
        """ Mirror3D(self: IAcadSpline, Point1: object, Point2: object, point3: object) -> object """
        pass

    def Move(self, FromPoint, ToPoint):
        """ Move(self: IAcadSpline, FromPoint: object, ToPoint: object) """
        pass

    def Offset(self, Distance):
        """ Offset(self: IAcadSpline, Distance: float) -> object """
        pass

    def PurgeFitData(self):
        """ PurgeFitData(self: IAcadSpline) """
        pass

    def Reverse(self):
        """ Reverse(self: IAcadSpline) """
        pass

    def Rotate(self, BasePoint, RotationAngle):
        """ Rotate(self: IAcadSpline, BasePoint: object, RotationAngle: float) """
        pass

    def Rotate3D(self, Point1, Point2, RotationAngle):
        """ Rotate3D(self: IAcadSpline, Point1: object, Point2: object, RotationAngle: float) """
        pass

    def ScaleEntity(self, BasePoint, ScaleFactor):
        """ ScaleEntity(self: IAcadSpline, BasePoint: object, ScaleFactor: float) """
        pass

    def SetControlPoint(self, Index, controlPoint):
        """ SetControlPoint(self: IAcadSpline, Index: int, controlPoint: object) """
        pass

    def SetFitPoint(self, Index, fitPoint):
        """ SetFitPoint(self: IAcadSpline, Index: int, fitPoint: object) """
        pass

    def SetWeight(self, Index, weight):
        """ SetWeight(self: IAcadSpline, Index: int, weight: float) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: IAcadSpline, XDataType: object, XDataValue: object) """
        pass

    def TransformBy(self, TransformationMatrix):
        """ TransformBy(self: IAcadSpline, TransformationMatrix: object) """
        pass

    def Update(self):
        """ Update(self: IAcadSpline) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IAcadSpline) -> object

"""

    Area = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Area(self: IAcadSpline) -> float

"""

    Closed = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Closed(self: IAcadSpline) -> bool

"""

    Closed2 = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Closed2(self: IAcadSpline) -> bool

Set: Closed2(self: IAcadSpline) = value
"""

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: IAcadSpline) -> ACAD_COLOR

Set: color(self: IAcadSpline) = value
"""

    ControlPoints = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ControlPoints(self: IAcadSpline) -> object

Set: ControlPoints(self: IAcadSpline) = value
"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: IAcadSpline) -> AcadDatabase

"""

    Degree = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Degree(self: IAcadSpline) -> int

"""

    Degree2 = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Degree2(self: IAcadSpline) -> int

Set: Degree2(self: IAcadSpline) = value
"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: IAcadSpline) -> object

"""

    EndTangent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EndTangent(self: IAcadSpline) -> object

Set: EndTangent(self: IAcadSpline) = value
"""

    EntityName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityName(self: IAcadSpline) -> str

"""

    EntityTransparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityTransparency(self: IAcadSpline) -> str

Set: EntityTransparency(self: IAcadSpline) = value
"""

    EntityType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityType(self: IAcadSpline) -> int

"""

    FitPoints = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FitPoints(self: IAcadSpline) -> object

Set: FitPoints(self: IAcadSpline) = value
"""

    FitTolerance = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FitTolerance(self: IAcadSpline) -> float

Set: FitTolerance(self: IAcadSpline) = value
"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: IAcadSpline) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: IAcadSpline) -> bool

"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: IAcadSpline) -> AcadHyperlinks

"""

    IsPeriodic = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IsPeriodic(self: IAcadSpline) -> bool

"""

    IsPlanar = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IsPlanar(self: IAcadSpline) -> bool

"""

    IsRational = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IsRational(self: IAcadSpline) -> bool

"""

    KnotParameterization = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: KnotParameterization(self: IAcadSpline) -> AcSplineKnotParameterizationType

Set: KnotParameterization(self: IAcadSpline) = value
"""

    Knots = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Knots(self: IAcadSpline) -> object

Set: Knots(self: IAcadSpline) = value
"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layer(self: IAcadSpline) -> str

Set: Layer(self: IAcadSpline) = value
"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: IAcadSpline) -> str

Set: Linetype(self: IAcadSpline) = value
"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeScale(self: IAcadSpline) -> float

Set: LinetypeScale(self: IAcadSpline) = value
"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: IAcadSpline) -> ACAD_LWEIGHT

Set: Lineweight(self: IAcadSpline) = value
"""

    Material = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Material(self: IAcadSpline) -> str

Set: Material(self: IAcadSpline) = value
"""

    NumberOfControlPoints = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: NumberOfControlPoints(self: IAcadSpline) -> int

"""

    NumberOfFitPoints = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: NumberOfFitPoints(self: IAcadSpline) -> int

"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: IAcadSpline) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: IAcadSpline) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: IAcadSpline) -> Int64

"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: IAcadSpline) -> str

Set: PlotStyleName(self: IAcadSpline) = value
"""

    SplineFrame = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SplineFrame(self: IAcadSpline) -> AcSplineFrameType

Set: SplineFrame(self: IAcadSpline) = value
"""

    SplineMethod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SplineMethod(self: IAcadSpline) -> AcSplineMethodType

Set: SplineMethod(self: IAcadSpline) = value
"""

    StartTangent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: StartTangent(self: IAcadSpline) -> object

Set: StartTangent(self: IAcadSpline) = value
"""

    TrueColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TrueColor(self: IAcadSpline) -> AcadAcCmColor

Set: TrueColor(self: IAcadSpline) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: IAcadSpline) -> bool

Set: Visible(self: IAcadSpline) = value
"""

    Weights = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Weights(self: IAcadSpline) -> object

Set: Weights(self: IAcadSpline) = value
"""



class AcadSpline(IAcadSpline, IAcadEntity, IAcadObject, IAcadObjectEvents_Event):
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class AcadSplineClass(__ComObject):
    # no doc
    def AddFitPoint(self, Index, fitPoint):
        """ AddFitPoint(self: AcadSplineClass, Index: int, fitPoint: object) """
        pass

    def add_Modified(self, A_1):
        """ add_Modified(self: AcadSplineClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def ArrayPolar(self, NumberOfObjects, AngleToFill, CenterPoint):
        """ ArrayPolar(self: AcadSplineClass, NumberOfObjects: int, AngleToFill: float, CenterPoint: object) -> object """
        pass

    def ArrayRectangular(self, NumberOfRows, NumberOfColumns, NumberOfLevels, DistBetweenRows, DistBetweenCols, DistBetweenLevels):
        """ ArrayRectangular(self: AcadSplineClass, NumberOfRows: int, NumberOfColumns: int, NumberOfLevels: int, DistBetweenRows: float, DistBetweenCols: float, DistBetweenLevels: float) -> object """
        pass

    def Copy(self):
        """ Copy(self: AcadSplineClass) -> object """
        pass

    def Delete(self):
        """ Delete(self: AcadSplineClass) """
        pass

    def DeleteFitPoint(self, Index):
        """ DeleteFitPoint(self: AcadSplineClass, Index: int) """
        pass

    def ElevateOrder(self, Order):
        """ ElevateOrder(self: AcadSplineClass, Order: int) """
        pass

    def Erase(self):
        """ Erase(self: AcadSplineClass) """
        pass

    def GetBoundingBox(self, MinPoint, MaxPoint):
        """ GetBoundingBox(self: AcadSplineClass) -> (object, object) """
        pass

    def GetControlPoint(self, Index):
        """ GetControlPoint(self: AcadSplineClass, Index: int) -> object """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: AcadSplineClass) -> AcadDictionary """
        pass

    def GetFitPoint(self, Index):
        """ GetFitPoint(self: AcadSplineClass, Index: int) -> object """
        pass

    def GetWeight(self, Index):
        """ GetWeight(self: AcadSplineClass, Index: int) -> float """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: AcadSplineClass, AppName: str) -> (object, object) """
        pass

    def Highlight(self, HighlightFlag):
        """ Highlight(self: AcadSplineClass, HighlightFlag: bool) """
        pass

    def IntersectWith(self, IntersectObject, option):
        """ IntersectWith(self: AcadSplineClass, IntersectObject: object, option: AcExtendOption) -> object """
        pass

    def Mirror(self, Point1, Point2):
        """ Mirror(self: AcadSplineClass, Point1: object, Point2: object) -> object """
        pass

    def Mirror3D(self, Point1, Point2, point3):
        """ Mirror3D(self: AcadSplineClass, Point1: object, Point2: object, point3: object) -> object """
        pass

    def Move(self, FromPoint, ToPoint):
        """ Move(self: AcadSplineClass, FromPoint: object, ToPoint: object) """
        pass

    def Offset(self, Distance):
        """ Offset(self: AcadSplineClass, Distance: float) -> object """
        pass

    def PurgeFitData(self):
        """ PurgeFitData(self: AcadSplineClass) """
        pass

    def remove_Modified(self, A_1):
        """ remove_Modified(self: AcadSplineClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def Reverse(self):
        """ Reverse(self: AcadSplineClass) """
        pass

    def Rotate(self, BasePoint, RotationAngle):
        """ Rotate(self: AcadSplineClass, BasePoint: object, RotationAngle: float) """
        pass

    def Rotate3D(self, Point1, Point2, RotationAngle):
        """ Rotate3D(self: AcadSplineClass, Point1: object, Point2: object, RotationAngle: float) """
        pass

    def ScaleEntity(self, BasePoint, ScaleFactor):
        """ ScaleEntity(self: AcadSplineClass, BasePoint: object, ScaleFactor: float) """
        pass

    def SetControlPoint(self, Index, controlPoint):
        """ SetControlPoint(self: AcadSplineClass, Index: int, controlPoint: object) """
        pass

    def SetFitPoint(self, Index, fitPoint):
        """ SetFitPoint(self: AcadSplineClass, Index: int, fitPoint: object) """
        pass

    def SetWeight(self, Index, weight):
        """ SetWeight(self: AcadSplineClass, Index: int, weight: float) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: AcadSplineClass, XDataType: object, XDataValue: object) """
        pass

    def TransformBy(self, TransformationMatrix):
        """ TransformBy(self: AcadSplineClass, TransformationMatrix: object) """
        pass

    def Update(self):
        """ Update(self: AcadSplineClass) """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: AcadSplineClass) -> object

"""

    Area = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Area(self: AcadSplineClass) -> float

"""

    Closed = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Closed(self: AcadSplineClass) -> bool

"""

    Closed2 = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Closed2(self: AcadSplineClass) -> bool

Set: Closed2(self: AcadSplineClass) = value
"""

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: AcadSplineClass) -> ACAD_COLOR

Set: color(self: AcadSplineClass) = value
"""

    ControlPoints = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ControlPoints(self: AcadSplineClass) -> object

Set: ControlPoints(self: AcadSplineClass) = value
"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: AcadSplineClass) -> AcadDatabase

"""

    Degree = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Degree(self: AcadSplineClass) -> int

"""

    Degree2 = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Degree2(self: AcadSplineClass) -> int

Set: Degree2(self: AcadSplineClass) = value
"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: AcadSplineClass) -> object

"""

    EndTangent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EndTangent(self: AcadSplineClass) -> object

Set: EndTangent(self: AcadSplineClass) = value
"""

    EntityName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityName(self: AcadSplineClass) -> str

"""

    EntityTransparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityTransparency(self: AcadSplineClass) -> str

Set: EntityTransparency(self: AcadSplineClass) = value
"""

    EntityType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityType(self: AcadSplineClass) -> int

"""

    FitPoints = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FitPoints(self: AcadSplineClass) -> object

Set: FitPoints(self: AcadSplineClass) = value
"""

    FitTolerance = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FitTolerance(self: AcadSplineClass) -> float

Set: FitTolerance(self: AcadSplineClass) = value
"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: AcadSplineClass) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: AcadSplineClass) -> bool

"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: AcadSplineClass) -> AcadHyperlinks

"""

    IsPeriodic = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IsPeriodic(self: AcadSplineClass) -> bool

"""

    IsPlanar = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IsPlanar(self: AcadSplineClass) -> bool

"""

    IsRational = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IsRational(self: AcadSplineClass) -> bool

"""

    KnotParameterization = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: KnotParameterization(self: AcadSplineClass) -> AcSplineKnotParameterizationType

Set: KnotParameterization(self: AcadSplineClass) = value
"""

    Knots = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Knots(self: AcadSplineClass) -> object

Set: Knots(self: AcadSplineClass) = value
"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layer(self: AcadSplineClass) -> str

Set: Layer(self: AcadSplineClass) = value
"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: AcadSplineClass) -> str

Set: Linetype(self: AcadSplineClass) = value
"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeScale(self: AcadSplineClass) -> float

Set: LinetypeScale(self: AcadSplineClass) = value
"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: AcadSplineClass) -> ACAD_LWEIGHT

Set: Lineweight(self: AcadSplineClass) = value
"""

    Material = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Material(self: AcadSplineClass) -> str

Set: Material(self: AcadSplineClass) = value
"""

    NumberOfControlPoints = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: NumberOfControlPoints(self: AcadSplineClass) -> int

"""

    NumberOfFitPoints = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: NumberOfFitPoints(self: AcadSplineClass) -> int

"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: AcadSplineClass) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: AcadSplineClass) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: AcadSplineClass) -> Int64

"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: AcadSplineClass) -> str

Set: PlotStyleName(self: AcadSplineClass) = value
"""

    SplineFrame = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SplineFrame(self: AcadSplineClass) -> AcSplineFrameType

Set: SplineFrame(self: AcadSplineClass) = value
"""

    SplineMethod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SplineMethod(self: AcadSplineClass) -> AcSplineMethodType

Set: SplineMethod(self: AcadSplineClass) = value
"""

    StartTangent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: StartTangent(self: AcadSplineClass) -> object

Set: StartTangent(self: AcadSplineClass) = value
"""

    TrueColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TrueColor(self: AcadSplineClass) -> AcadAcCmColor

Set: TrueColor(self: AcadSplineClass) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: AcadSplineClass) -> bool

Set: Visible(self: AcadSplineClass) = value
"""

    Weights = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Weights(self: AcadSplineClass) -> object

Set: Weights(self: AcadSplineClass) = value
"""


    Modified = None


class IAcadSubDMesh(IAcadEntity, IAcadObject):
    # no doc
    def ArrayPolar(self, NumberOfObjects, AngleToFill, CenterPoint):
        """ ArrayPolar(self: IAcadSubDMesh, NumberOfObjects: int, AngleToFill: float, CenterPoint: object) -> object """
        pass

    def ArrayRectangular(self, NumberOfRows, NumberOfColumns, NumberOfLevels, DistBetweenRows, DistBetweenCols, DistBetweenLevels):
        """ ArrayRectangular(self: IAcadSubDMesh, NumberOfRows: int, NumberOfColumns: int, NumberOfLevels: int, DistBetweenRows: float, DistBetweenCols: float, DistBetweenLevels: float) -> object """
        pass

    def Copy(self):
        """ Copy(self: IAcadSubDMesh) -> object """
        pass

    def Delete(self):
        """ Delete(self: IAcadSubDMesh) """
        pass

    def Erase(self):
        """ Erase(self: IAcadSubDMesh) """
        pass

    def GetBoundingBox(self, MinPoint, MaxPoint):
        """ GetBoundingBox(self: IAcadSubDMesh) -> (object, object) """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: IAcadSubDMesh) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: IAcadSubDMesh, AppName: str) -> (object, object) """
        pass

    def Highlight(self, HighlightFlag):
        """ Highlight(self: IAcadSubDMesh, HighlightFlag: bool) """
        pass

    def IntersectWith(self, IntersectObject, option):
        """ IntersectWith(self: IAcadSubDMesh, IntersectObject: object, option: AcExtendOption) -> object """
        pass

    def Mirror(self, Point1, Point2):
        """ Mirror(self: IAcadSubDMesh, Point1: object, Point2: object) -> object """
        pass

    def Mirror3D(self, Point1, Point2, point3):
        """ Mirror3D(self: IAcadSubDMesh, Point1: object, Point2: object, point3: object) -> object """
        pass

    def Move(self, FromPoint, ToPoint):
        """ Move(self: IAcadSubDMesh, FromPoint: object, ToPoint: object) """
        pass

    def Rotate(self, BasePoint, RotationAngle):
        """ Rotate(self: IAcadSubDMesh, BasePoint: object, RotationAngle: float) """
        pass

    def Rotate3D(self, Point1, Point2, RotationAngle):
        """ Rotate3D(self: IAcadSubDMesh, Point1: object, Point2: object, RotationAngle: float) """
        pass

    def ScaleEntity(self, BasePoint, ScaleFactor):
        """ ScaleEntity(self: IAcadSubDMesh, BasePoint: object, ScaleFactor: float) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: IAcadSubDMesh, XDataType: object, XDataValue: object) """
        pass

    def TransformBy(self, TransformationMatrix):
        """ TransformBy(self: IAcadSubDMesh, TransformationMatrix: object) """
        pass

    def Update(self):
        """ Update(self: IAcadSubDMesh) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IAcadSubDMesh) -> object

"""

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: IAcadSubDMesh) -> ACAD_COLOR

Set: color(self: IAcadSubDMesh) = value
"""

    Coordinates = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Coordinates(self: IAcadSubDMesh) -> object

Set: Coordinates(self: IAcadSubDMesh) = value
"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: IAcadSubDMesh) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: IAcadSubDMesh) -> object

"""

    EntityName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityName(self: IAcadSubDMesh) -> str

"""

    EntityTransparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityTransparency(self: IAcadSubDMesh) -> str

Set: EntityTransparency(self: IAcadSubDMesh) = value
"""

    EntityType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityType(self: IAcadSubDMesh) -> int

"""

    FaceCount = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FaceCount(self: IAcadSubDMesh) -> int

"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: IAcadSubDMesh) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: IAcadSubDMesh) -> bool

"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: IAcadSubDMesh) -> AcadHyperlinks

"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layer(self: IAcadSubDMesh) -> str

Set: Layer(self: IAcadSubDMesh) = value
"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: IAcadSubDMesh) -> str

Set: Linetype(self: IAcadSubDMesh) = value
"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeScale(self: IAcadSubDMesh) -> float

Set: LinetypeScale(self: IAcadSubDMesh) = value
"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: IAcadSubDMesh) -> ACAD_LWEIGHT

Set: Lineweight(self: IAcadSubDMesh) = value
"""

    Material = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Material(self: IAcadSubDMesh) -> str

Set: Material(self: IAcadSubDMesh) = value
"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: IAcadSubDMesh) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: IAcadSubDMesh) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: IAcadSubDMesh) -> Int64

"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: IAcadSubDMesh) -> str

Set: PlotStyleName(self: IAcadSubDMesh) = value
"""

    Smoothness = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Smoothness(self: IAcadSubDMesh) -> int

Set: Smoothness(self: IAcadSubDMesh) = value
"""

    TrueColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TrueColor(self: IAcadSubDMesh) -> AcadAcCmColor

Set: TrueColor(self: IAcadSubDMesh) = value
"""

    VertexCount = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VertexCount(self: IAcadSubDMesh) -> int

"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: IAcadSubDMesh) -> bool

Set: Visible(self: IAcadSubDMesh) = value
"""



class AcadSubDMesh(IAcadSubDMesh, IAcadEntity, IAcadObject, IAcadObjectEvents_Event):
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class AcadSubDMeshClass(__ComObject):
    # no doc
    def add_Modified(self, A_1):
        """ add_Modified(self: AcadSubDMeshClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def ArrayPolar(self, NumberOfObjects, AngleToFill, CenterPoint):
        """ ArrayPolar(self: AcadSubDMeshClass, NumberOfObjects: int, AngleToFill: float, CenterPoint: object) -> object """
        pass

    def ArrayRectangular(self, NumberOfRows, NumberOfColumns, NumberOfLevels, DistBetweenRows, DistBetweenCols, DistBetweenLevels):
        """ ArrayRectangular(self: AcadSubDMeshClass, NumberOfRows: int, NumberOfColumns: int, NumberOfLevels: int, DistBetweenRows: float, DistBetweenCols: float, DistBetweenLevels: float) -> object """
        pass

    def Copy(self):
        """ Copy(self: AcadSubDMeshClass) -> object """
        pass

    def Delete(self):
        """ Delete(self: AcadSubDMeshClass) """
        pass

    def Erase(self):
        """ Erase(self: AcadSubDMeshClass) """
        pass

    def GetBoundingBox(self, MinPoint, MaxPoint):
        """ GetBoundingBox(self: AcadSubDMeshClass) -> (object, object) """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: AcadSubDMeshClass) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: AcadSubDMeshClass, AppName: str) -> (object, object) """
        pass

    def Highlight(self, HighlightFlag):
        """ Highlight(self: AcadSubDMeshClass, HighlightFlag: bool) """
        pass

    def IntersectWith(self, IntersectObject, option):
        """ IntersectWith(self: AcadSubDMeshClass, IntersectObject: object, option: AcExtendOption) -> object """
        pass

    def Mirror(self, Point1, Point2):
        """ Mirror(self: AcadSubDMeshClass, Point1: object, Point2: object) -> object """
        pass

    def Mirror3D(self, Point1, Point2, point3):
        """ Mirror3D(self: AcadSubDMeshClass, Point1: object, Point2: object, point3: object) -> object """
        pass

    def Move(self, FromPoint, ToPoint):
        """ Move(self: AcadSubDMeshClass, FromPoint: object, ToPoint: object) """
        pass

    def remove_Modified(self, A_1):
        """ remove_Modified(self: AcadSubDMeshClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def Rotate(self, BasePoint, RotationAngle):
        """ Rotate(self: AcadSubDMeshClass, BasePoint: object, RotationAngle: float) """
        pass

    def Rotate3D(self, Point1, Point2, RotationAngle):
        """ Rotate3D(self: AcadSubDMeshClass, Point1: object, Point2: object, RotationAngle: float) """
        pass

    def ScaleEntity(self, BasePoint, ScaleFactor):
        """ ScaleEntity(self: AcadSubDMeshClass, BasePoint: object, ScaleFactor: float) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: AcadSubDMeshClass, XDataType: object, XDataValue: object) """
        pass

    def TransformBy(self, TransformationMatrix):
        """ TransformBy(self: AcadSubDMeshClass, TransformationMatrix: object) """
        pass

    def Update(self):
        """ Update(self: AcadSubDMeshClass) """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: AcadSubDMeshClass) -> object

"""

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: AcadSubDMeshClass) -> ACAD_COLOR

Set: color(self: AcadSubDMeshClass) = value
"""

    Coordinates = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Coordinates(self: AcadSubDMeshClass) -> object

Set: Coordinates(self: AcadSubDMeshClass) = value
"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: AcadSubDMeshClass) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: AcadSubDMeshClass) -> object

"""

    EntityName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityName(self: AcadSubDMeshClass) -> str

"""

    EntityTransparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityTransparency(self: AcadSubDMeshClass) -> str

Set: EntityTransparency(self: AcadSubDMeshClass) = value
"""

    EntityType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityType(self: AcadSubDMeshClass) -> int

"""

    FaceCount = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FaceCount(self: AcadSubDMeshClass) -> int

"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: AcadSubDMeshClass) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: AcadSubDMeshClass) -> bool

"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: AcadSubDMeshClass) -> AcadHyperlinks

"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layer(self: AcadSubDMeshClass) -> str

Set: Layer(self: AcadSubDMeshClass) = value
"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: AcadSubDMeshClass) -> str

Set: Linetype(self: AcadSubDMeshClass) = value
"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeScale(self: AcadSubDMeshClass) -> float

Set: LinetypeScale(self: AcadSubDMeshClass) = value
"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: AcadSubDMeshClass) -> ACAD_LWEIGHT

Set: Lineweight(self: AcadSubDMeshClass) = value
"""

    Material = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Material(self: AcadSubDMeshClass) -> str

Set: Material(self: AcadSubDMeshClass) = value
"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: AcadSubDMeshClass) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: AcadSubDMeshClass) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: AcadSubDMeshClass) -> Int64

"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: AcadSubDMeshClass) -> str

Set: PlotStyleName(self: AcadSubDMeshClass) = value
"""

    Smoothness = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Smoothness(self: AcadSubDMeshClass) -> int

Set: Smoothness(self: AcadSubDMeshClass) = value
"""

    TrueColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TrueColor(self: AcadSubDMeshClass) -> AcadAcCmColor

Set: TrueColor(self: AcadSubDMeshClass) = value
"""

    VertexCount = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VertexCount(self: AcadSubDMeshClass) -> int

"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: AcadSubDMeshClass) -> bool

Set: Visible(self: AcadSubDMeshClass) = value
"""


    Modified = None


class IAcadSubDMeshEdge(IAcadSubEntity):
    # no doc
    def OnModified(self):
        """ OnModified(self: IAcadSubDMeshEdge) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: IAcadSubDMeshEdge) -> AcadAcCmColor

Set: color(self: IAcadSubDMeshEdge) = value
"""

    CreaseLevel = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CreaseLevel(self: IAcadSubDMeshEdge) -> float

Set: CreaseLevel(self: IAcadSubDMeshEdge) = value
"""

    CreaseType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CreaseType(self: IAcadSubDMeshEdge) -> AcMeshCreaseType

Set: CreaseType(self: IAcadSubDMeshEdge) = value
"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: IAcadSubDMeshEdge) -> AcadHyperlinks

"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layer(self: IAcadSubDMeshEdge) -> str

"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: IAcadSubDMeshEdge) -> str

"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeScale(self: IAcadSubDMeshEdge) -> float

"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: IAcadSubDMeshEdge) -> ACAD_LWEIGHT

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: IAcadSubDMeshEdge) -> str

"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: IAcadSubDMeshEdge) -> str

"""



class AcadSubDMeshEdge(IAcadSubDMeshEdge, IAcadSubEntity, IAcadObjectEvents_Event):
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class AcadSubDMeshEdgeClass(__ComObject):
    # no doc
    def add_Modified(self, A_1):
        """ add_Modified(self: AcadSubDMeshEdgeClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def OnModified(self):
        """ OnModified(self: AcadSubDMeshEdgeClass) """
        pass

    def remove_Modified(self, A_1):
        """ remove_Modified(self: AcadSubDMeshEdgeClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: AcadSubDMeshEdgeClass) -> AcadAcCmColor

Set: color(self: AcadSubDMeshEdgeClass) = value
"""

    CreaseLevel = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CreaseLevel(self: AcadSubDMeshEdgeClass) -> float

Set: CreaseLevel(self: AcadSubDMeshEdgeClass) = value
"""

    CreaseType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CreaseType(self: AcadSubDMeshEdgeClass) -> AcMeshCreaseType

Set: CreaseType(self: AcadSubDMeshEdgeClass) = value
"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: AcadSubDMeshEdgeClass) -> AcadHyperlinks

"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layer(self: AcadSubDMeshEdgeClass) -> str

"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: AcadSubDMeshEdgeClass) -> str

"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeScale(self: AcadSubDMeshEdgeClass) -> float

"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: AcadSubDMeshEdgeClass) -> ACAD_LWEIGHT

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: AcadSubDMeshEdgeClass) -> str

"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: AcadSubDMeshEdgeClass) -> str

"""


    Modified = None


class IAcadSubDMeshFace(IAcadSubEntity):
    # no doc
    def OnModified(self):
        """ OnModified(self: IAcadSubDMeshFace) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: IAcadSubDMeshFace) -> AcadAcCmColor

Set: color(self: IAcadSubDMeshFace) = value
"""

    CreaseLevel = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CreaseLevel(self: IAcadSubDMeshFace) -> float

Set: CreaseLevel(self: IAcadSubDMeshFace) = value
"""

    CreaseType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CreaseType(self: IAcadSubDMeshFace) -> AcMeshCreaseType

Set: CreaseType(self: IAcadSubDMeshFace) = value
"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: IAcadSubDMeshFace) -> AcadHyperlinks

"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layer(self: IAcadSubDMeshFace) -> str

"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: IAcadSubDMeshFace) -> str

"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeScale(self: IAcadSubDMeshFace) -> float

"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: IAcadSubDMeshFace) -> ACAD_LWEIGHT

"""

    Material = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Material(self: IAcadSubDMeshFace) -> str

Set: Material(self: IAcadSubDMeshFace) = value
"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: IAcadSubDMeshFace) -> str

"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: IAcadSubDMeshFace) -> str

"""



class AcadSubDMeshFace(IAcadSubDMeshFace, IAcadSubEntity, IAcadObjectEvents_Event):
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class AcadSubDMeshFaceClass(__ComObject):
    # no doc
    def add_Modified(self, A_1):
        """ add_Modified(self: AcadSubDMeshFaceClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def OnModified(self):
        """ OnModified(self: AcadSubDMeshFaceClass) """
        pass

    def remove_Modified(self, A_1):
        """ remove_Modified(self: AcadSubDMeshFaceClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: AcadSubDMeshFaceClass) -> AcadAcCmColor

Set: color(self: AcadSubDMeshFaceClass) = value
"""

    CreaseLevel = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CreaseLevel(self: AcadSubDMeshFaceClass) -> float

Set: CreaseLevel(self: AcadSubDMeshFaceClass) = value
"""

    CreaseType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CreaseType(self: AcadSubDMeshFaceClass) -> AcMeshCreaseType

Set: CreaseType(self: AcadSubDMeshFaceClass) = value
"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: AcadSubDMeshFaceClass) -> AcadHyperlinks

"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layer(self: AcadSubDMeshFaceClass) -> str

"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: AcadSubDMeshFaceClass) -> str

"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeScale(self: AcadSubDMeshFaceClass) -> float

"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: AcadSubDMeshFaceClass) -> ACAD_LWEIGHT

"""

    Material = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Material(self: AcadSubDMeshFaceClass) -> str

Set: Material(self: AcadSubDMeshFaceClass) = value
"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: AcadSubDMeshFaceClass) -> str

"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: AcadSubDMeshFaceClass) -> str

"""


    Modified = None


class IAcadSubDMeshVertex(IAcadSubEntity):
    # no doc
    def OnModified(self):
        """ OnModified(self: IAcadSubDMeshVertex) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: IAcadSubDMeshVertex) -> AcadAcCmColor

Set: color(self: IAcadSubDMeshVertex) = value
"""

    Coordinates = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Coordinates(self: IAcadSubDMeshVertex) -> object

Set: Coordinates(self: IAcadSubDMeshVertex) = value
"""

    CreaseLevel = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CreaseLevel(self: IAcadSubDMeshVertex) -> float

Set: CreaseLevel(self: IAcadSubDMeshVertex) = value
"""

    CreaseType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CreaseType(self: IAcadSubDMeshVertex) -> AcMeshCreaseType

Set: CreaseType(self: IAcadSubDMeshVertex) = value
"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: IAcadSubDMeshVertex) -> AcadHyperlinks

"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layer(self: IAcadSubDMeshVertex) -> str

"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: IAcadSubDMeshVertex) -> str

"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeScale(self: IAcadSubDMeshVertex) -> float

"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: IAcadSubDMeshVertex) -> ACAD_LWEIGHT

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: IAcadSubDMeshVertex) -> str

"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: IAcadSubDMeshVertex) -> str

"""



class AcadSubDMeshVertex(IAcadSubDMeshVertex, IAcadSubEntity, IAcadObjectEvents_Event):
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class AcadSubDMeshVertexClass(__ComObject):
    # no doc
    def add_Modified(self, A_1):
        """ add_Modified(self: AcadSubDMeshVertexClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def OnModified(self):
        """ OnModified(self: AcadSubDMeshVertexClass) """
        pass

    def remove_Modified(self, A_1):
        """ remove_Modified(self: AcadSubDMeshVertexClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: AcadSubDMeshVertexClass) -> AcadAcCmColor

Set: color(self: AcadSubDMeshVertexClass) = value
"""

    Coordinates = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Coordinates(self: AcadSubDMeshVertexClass) -> object

Set: Coordinates(self: AcadSubDMeshVertexClass) = value
"""

    CreaseLevel = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CreaseLevel(self: AcadSubDMeshVertexClass) -> float

Set: CreaseLevel(self: AcadSubDMeshVertexClass) = value
"""

    CreaseType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CreaseType(self: AcadSubDMeshVertexClass) -> AcMeshCreaseType

Set: CreaseType(self: AcadSubDMeshVertexClass) = value
"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: AcadSubDMeshVertexClass) -> AcadHyperlinks

"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layer(self: AcadSubDMeshVertexClass) -> str

"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: AcadSubDMeshVertexClass) -> str

"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeScale(self: AcadSubDMeshVertexClass) -> float

"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: AcadSubDMeshVertexClass) -> ACAD_LWEIGHT

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: AcadSubDMeshVertexClass) -> str

"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: AcadSubDMeshVertexClass) -> str

"""


    Modified = None


class AcadSubEntity(IAcadSubEntity):
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class AcadSubEntityClass(__ComObject):
    # no doc
    def OnModified(self):
        """ OnModified(self: AcadSubEntityClass) """
        pass

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: AcadSubEntityClass) -> AcadAcCmColor

Set: color(self: AcadSubEntityClass) = value
"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: AcadSubEntityClass) -> AcadHyperlinks

"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layer(self: AcadSubEntityClass) -> str

"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: AcadSubEntityClass) -> str

"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeScale(self: AcadSubEntityClass) -> float

"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: AcadSubEntityClass) -> ACAD_LWEIGHT

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: AcadSubEntityClass) -> str

"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: AcadSubEntityClass) -> str

"""



class IAcadSubEntSolidEdge(IAcadSubEntity):
    # no doc
    def OnModified(self):
        """ OnModified(self: IAcadSubEntSolidEdge) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: IAcadSubEntSolidEdge) -> AcadAcCmColor

Set: color(self: IAcadSubEntSolidEdge) = value
"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: IAcadSubEntSolidEdge) -> AcadHyperlinks

"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layer(self: IAcadSubEntSolidEdge) -> str

"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: IAcadSubEntSolidEdge) -> str

"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeScale(self: IAcadSubEntSolidEdge) -> float

"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: IAcadSubEntSolidEdge) -> ACAD_LWEIGHT

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: IAcadSubEntSolidEdge) -> str

"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: IAcadSubEntSolidEdge) -> str

"""



class AcadSubEntSolidEdge(IAcadSubEntSolidEdge, IAcadSubEntity):
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class AcadSubEntSolidEdgeClass(__ComObject):
    # no doc
    def OnModified(self):
        """ OnModified(self: AcadSubEntSolidEdgeClass) """
        pass

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: AcadSubEntSolidEdgeClass) -> AcadAcCmColor

Set: color(self: AcadSubEntSolidEdgeClass) = value
"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: AcadSubEntSolidEdgeClass) -> AcadHyperlinks

"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layer(self: AcadSubEntSolidEdgeClass) -> str

"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: AcadSubEntSolidEdgeClass) -> str

"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeScale(self: AcadSubEntSolidEdgeClass) -> float

"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: AcadSubEntSolidEdgeClass) -> ACAD_LWEIGHT

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: AcadSubEntSolidEdgeClass) -> str

"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: AcadSubEntSolidEdgeClass) -> str

"""



class IAcadSubEntSolidFace(IAcadSubEntity):
    # no doc
    def OnModified(self):
        """ OnModified(self: IAcadSubEntSolidFace) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: IAcadSubEntSolidFace) -> AcadAcCmColor

Set: color(self: IAcadSubEntSolidFace) = value
"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: IAcadSubEntSolidFace) -> AcadHyperlinks

"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layer(self: IAcadSubEntSolidFace) -> str

"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: IAcadSubEntSolidFace) -> str

"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeScale(self: IAcadSubEntSolidFace) -> float

"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: IAcadSubEntSolidFace) -> ACAD_LWEIGHT

"""

    Material = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Material(self: IAcadSubEntSolidFace) -> str

Set: Material(self: IAcadSubEntSolidFace) = value
"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: IAcadSubEntSolidFace) -> str

"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: IAcadSubEntSolidFace) -> str

"""



class AcadSubEntSolidFace(IAcadSubEntSolidFace, IAcadSubEntity):
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class AcadSubEntSolidFaceClass(__ComObject):
    # no doc
    def OnModified(self):
        """ OnModified(self: AcadSubEntSolidFaceClass) """
        pass

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: AcadSubEntSolidFaceClass) -> AcadAcCmColor

Set: color(self: AcadSubEntSolidFaceClass) = value
"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: AcadSubEntSolidFaceClass) -> AcadHyperlinks

"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layer(self: AcadSubEntSolidFaceClass) -> str

"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: AcadSubEntSolidFaceClass) -> str

"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeScale(self: AcadSubEntSolidFaceClass) -> float

"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: AcadSubEntSolidFaceClass) -> ACAD_LWEIGHT

"""

    Material = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Material(self: AcadSubEntSolidFaceClass) -> str

Set: Material(self: AcadSubEntSolidFaceClass) = value
"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: AcadSubEntSolidFaceClass) -> str

"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: AcadSubEntSolidFaceClass) -> str

"""



class IAcadSubEntSolidNode(IAcadSubEntity):
    # no doc
    def OnModified(self):
        """ OnModified(self: IAcadSubEntSolidNode) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: IAcadSubEntSolidNode) -> AcadAcCmColor

Set: color(self: IAcadSubEntSolidNode) = value
"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: IAcadSubEntSolidNode) -> AcadHyperlinks

"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layer(self: IAcadSubEntSolidNode) -> str

"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: IAcadSubEntSolidNode) -> str

"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeScale(self: IAcadSubEntSolidNode) -> float

"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: IAcadSubEntSolidNode) -> ACAD_LWEIGHT

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: IAcadSubEntSolidNode) -> str

"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: IAcadSubEntSolidNode) -> str

"""



class AcadSubEntSolidNode(IAcadSubEntSolidNode, IAcadSubEntity):
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class AcadSubEntSolidNodeClass(__ComObject):
    # no doc
    def OnModified(self):
        """ OnModified(self: AcadSubEntSolidNodeClass) """
        pass

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: AcadSubEntSolidNodeClass) -> AcadAcCmColor

Set: color(self: AcadSubEntSolidNodeClass) = value
"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: AcadSubEntSolidNodeClass) -> AcadHyperlinks

"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layer(self: AcadSubEntSolidNodeClass) -> str

"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: AcadSubEntSolidNodeClass) -> str

"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeScale(self: AcadSubEntSolidNodeClass) -> float

"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: AcadSubEntSolidNodeClass) -> ACAD_LWEIGHT

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: AcadSubEntSolidNodeClass) -> str

"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: AcadSubEntSolidNodeClass) -> str

"""



class IAcadSubEntSolidVertex(IAcadSubEntity):
    # no doc
    def OnModified(self):
        """ OnModified(self: IAcadSubEntSolidVertex) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: IAcadSubEntSolidVertex) -> AcadAcCmColor

Set: color(self: IAcadSubEntSolidVertex) = value
"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: IAcadSubEntSolidVertex) -> AcadHyperlinks

"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layer(self: IAcadSubEntSolidVertex) -> str

"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: IAcadSubEntSolidVertex) -> str

"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeScale(self: IAcadSubEntSolidVertex) -> float

"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: IAcadSubEntSolidVertex) -> ACAD_LWEIGHT

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: IAcadSubEntSolidVertex) -> str

"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: IAcadSubEntSolidVertex) -> str

"""



class AcadSubEntSolidVertex(IAcadSubEntSolidVertex, IAcadSubEntity):
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class AcadSubEntSolidVertexClass(__ComObject):
    # no doc
    def OnModified(self):
        """ OnModified(self: AcadSubEntSolidVertexClass) """
        pass

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: AcadSubEntSolidVertexClass) -> AcadAcCmColor

Set: color(self: AcadSubEntSolidVertexClass) = value
"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: AcadSubEntSolidVertexClass) -> AcadHyperlinks

"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layer(self: AcadSubEntSolidVertexClass) -> str

"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: AcadSubEntSolidVertexClass) -> str

"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeScale(self: AcadSubEntSolidVertexClass) -> float

"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: AcadSubEntSolidVertexClass) -> ACAD_LWEIGHT

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: AcadSubEntSolidVertexClass) -> str

"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: AcadSubEntSolidVertexClass) -> str

"""



class IAcadSummaryInfo:
    # no doc
    def AddCustomInfo(self, key, Value):
        """ AddCustomInfo(self: IAcadSummaryInfo, key: str, Value: str) """
        pass

    def GetCustomByIndex(self, Index, pKey, pValue):
        """ GetCustomByIndex(self: IAcadSummaryInfo, Index: int) -> (str, str) """
        pass

    def GetCustomByKey(self, key, pValue):
        """ GetCustomByKey(self: IAcadSummaryInfo, key: str) -> str """
        pass

    def NumCustomInfo(self):
        """ NumCustomInfo(self: IAcadSummaryInfo) -> int """
        pass

    def RemoveCustomByIndex(self, Index):
        """ RemoveCustomByIndex(self: IAcadSummaryInfo, Index: int) """
        pass

    def RemoveCustomByKey(self, key):
        """ RemoveCustomByKey(self: IAcadSummaryInfo, key: str) """
        pass

    def SetCustomByIndex(self, Index, key, Value):
        """ SetCustomByIndex(self: IAcadSummaryInfo, Index: int, key: str, Value: str) """
        pass

    def SetCustomByKey(self, key, Value):
        """ SetCustomByKey(self: IAcadSummaryInfo, key: str, Value: str) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Author = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Author(self: IAcadSummaryInfo) -> str

Set: Author(self: IAcadSummaryInfo) = value
"""

    Comments = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Comments(self: IAcadSummaryInfo) -> str

Set: Comments(self: IAcadSummaryInfo) = value
"""

    HyperlinkBase = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HyperlinkBase(self: IAcadSummaryInfo) -> str

Set: HyperlinkBase(self: IAcadSummaryInfo) = value
"""

    Keywords = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Keywords(self: IAcadSummaryInfo) -> str

Set: Keywords(self: IAcadSummaryInfo) = value
"""

    LastSavedBy = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LastSavedBy(self: IAcadSummaryInfo) -> str

Set: LastSavedBy(self: IAcadSummaryInfo) = value
"""

    RevisionNumber = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RevisionNumber(self: IAcadSummaryInfo) -> str

Set: RevisionNumber(self: IAcadSummaryInfo) = value
"""

    Subject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Subject(self: IAcadSummaryInfo) -> str

Set: Subject(self: IAcadSummaryInfo) = value
"""

    Title = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Title(self: IAcadSummaryInfo) -> str

Set: Title(self: IAcadSummaryInfo) = value
"""



class AcadSummaryInfo(IAcadSummaryInfo):
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class AcadSummaryInfoClass(__ComObject):
    # no doc
    def AddCustomInfo(self, key, Value):
        """ AddCustomInfo(self: AcadSummaryInfoClass, key: str, Value: str) """
        pass

    def GetCustomByIndex(self, Index, pKey, pValue):
        """ GetCustomByIndex(self: AcadSummaryInfoClass, Index: int) -> (str, str) """
        pass

    def GetCustomByKey(self, key, pValue):
        """ GetCustomByKey(self: AcadSummaryInfoClass, key: str) -> str """
        pass

    def NumCustomInfo(self):
        """ NumCustomInfo(self: AcadSummaryInfoClass) -> int """
        pass

    def RemoveCustomByIndex(self, Index):
        """ RemoveCustomByIndex(self: AcadSummaryInfoClass, Index: int) """
        pass

    def RemoveCustomByKey(self, key):
        """ RemoveCustomByKey(self: AcadSummaryInfoClass, key: str) """
        pass

    def SetCustomByIndex(self, Index, key, Value):
        """ SetCustomByIndex(self: AcadSummaryInfoClass, Index: int, key: str, Value: str) """
        pass

    def SetCustomByKey(self, key, Value):
        """ SetCustomByKey(self: AcadSummaryInfoClass, key: str, Value: str) """
        pass

    Author = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Author(self: AcadSummaryInfoClass) -> str

Set: Author(self: AcadSummaryInfoClass) = value
"""

    Comments = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Comments(self: AcadSummaryInfoClass) -> str

Set: Comments(self: AcadSummaryInfoClass) = value
"""

    HyperlinkBase = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HyperlinkBase(self: AcadSummaryInfoClass) -> str

Set: HyperlinkBase(self: AcadSummaryInfoClass) = value
"""

    Keywords = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Keywords(self: AcadSummaryInfoClass) -> str

Set: Keywords(self: AcadSummaryInfoClass) = value
"""

    LastSavedBy = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LastSavedBy(self: AcadSummaryInfoClass) -> str

Set: LastSavedBy(self: AcadSummaryInfoClass) = value
"""

    RevisionNumber = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RevisionNumber(self: AcadSummaryInfoClass) -> str

Set: RevisionNumber(self: AcadSummaryInfoClass) = value
"""

    Subject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Subject(self: AcadSummaryInfoClass) -> str

Set: Subject(self: AcadSummaryInfoClass) = value
"""

    Title = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Title(self: AcadSummaryInfoClass) -> str

Set: Title(self: AcadSummaryInfoClass) = value
"""



class AcadSurface(IAcadSurface, IAcadEntity, IAcadObject, IAcadObjectEvents_Event):
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class AcadSurfaceClass(__ComObject):
    # no doc
    def add_Modified(self, A_1):
        """ add_Modified(self: AcadSurfaceClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def ArrayPolar(self, NumberOfObjects, AngleToFill, CenterPoint):
        """ ArrayPolar(self: AcadSurfaceClass, NumberOfObjects: int, AngleToFill: float, CenterPoint: object) -> object """
        pass

    def ArrayRectangular(self, NumberOfRows, NumberOfColumns, NumberOfLevels, DistBetweenRows, DistBetweenCols, DistBetweenLevels):
        """ ArrayRectangular(self: AcadSurfaceClass, NumberOfRows: int, NumberOfColumns: int, NumberOfLevels: int, DistBetweenRows: float, DistBetweenCols: float, DistBetweenLevels: float) -> object """
        pass

    def Copy(self):
        """ Copy(self: AcadSurfaceClass) -> object """
        pass

    def Delete(self):
        """ Delete(self: AcadSurfaceClass) """
        pass

    def Erase(self):
        """ Erase(self: AcadSurfaceClass) """
        pass

    def GetBoundingBox(self, MinPoint, MaxPoint):
        """ GetBoundingBox(self: AcadSurfaceClass) -> (object, object) """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: AcadSurfaceClass) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: AcadSurfaceClass, AppName: str) -> (object, object) """
        pass

    def Highlight(self, HighlightFlag):
        """ Highlight(self: AcadSurfaceClass, HighlightFlag: bool) """
        pass

    def IntersectWith(self, IntersectObject, option):
        """ IntersectWith(self: AcadSurfaceClass, IntersectObject: object, option: AcExtendOption) -> object """
        pass

    def Mirror(self, Point1, Point2):
        """ Mirror(self: AcadSurfaceClass, Point1: object, Point2: object) -> object """
        pass

    def Mirror3D(self, Point1, Point2, point3):
        """ Mirror3D(self: AcadSurfaceClass, Point1: object, Point2: object, point3: object) -> object """
        pass

    def Move(self, FromPoint, ToPoint):
        """ Move(self: AcadSurfaceClass, FromPoint: object, ToPoint: object) """
        pass

    def remove_Modified(self, A_1):
        """ remove_Modified(self: AcadSurfaceClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def Rotate(self, BasePoint, RotationAngle):
        """ Rotate(self: AcadSurfaceClass, BasePoint: object, RotationAngle: float) """
        pass

    def Rotate3D(self, Point1, Point2, RotationAngle):
        """ Rotate3D(self: AcadSurfaceClass, Point1: object, Point2: object, RotationAngle: float) """
        pass

    def ScaleEntity(self, BasePoint, ScaleFactor):
        """ ScaleEntity(self: AcadSurfaceClass, BasePoint: object, ScaleFactor: float) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: AcadSurfaceClass, XDataType: object, XDataValue: object) """
        pass

    def TransformBy(self, TransformationMatrix):
        """ TransformBy(self: AcadSurfaceClass, TransformationMatrix: object) """
        pass

    def Update(self):
        """ Update(self: AcadSurfaceClass) """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: AcadSurfaceClass) -> object

"""

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: AcadSurfaceClass) -> ACAD_COLOR

Set: color(self: AcadSurfaceClass) = value
"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: AcadSurfaceClass) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: AcadSurfaceClass) -> object

"""

    EdgeExtensionDistances = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EdgeExtensionDistances(self: AcadSurfaceClass) -> object

Set: EdgeExtensionDistances(self: AcadSurfaceClass) = value
"""

    EntityName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityName(self: AcadSurfaceClass) -> str

"""

    EntityTransparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityTransparency(self: AcadSurfaceClass) -> str

Set: EntityTransparency(self: AcadSurfaceClass) = value
"""

    EntityType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityType(self: AcadSurfaceClass) -> int

"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: AcadSurfaceClass) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: AcadSurfaceClass) -> bool

"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: AcadSurfaceClass) -> AcadHyperlinks

"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layer(self: AcadSurfaceClass) -> str

Set: Layer(self: AcadSurfaceClass) = value
"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: AcadSurfaceClass) -> str

Set: Linetype(self: AcadSurfaceClass) = value
"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeScale(self: AcadSurfaceClass) -> float

Set: LinetypeScale(self: AcadSurfaceClass) = value
"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: AcadSurfaceClass) -> ACAD_LWEIGHT

Set: Lineweight(self: AcadSurfaceClass) = value
"""

    MaintainAssociativity = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MaintainAssociativity(self: AcadSurfaceClass) -> int

Set: MaintainAssociativity(self: AcadSurfaceClass) = value
"""

    Material = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Material(self: AcadSurfaceClass) -> str

Set: Material(self: AcadSurfaceClass) = value
"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: AcadSurfaceClass) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: AcadSurfaceClass) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: AcadSurfaceClass) -> Int64

"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: AcadSurfaceClass) -> str

Set: PlotStyleName(self: AcadSurfaceClass) = value
"""

    ShowAssociativity = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowAssociativity(self: AcadSurfaceClass) -> bool

Set: ShowAssociativity(self: AcadSurfaceClass) = value
"""

    SurfaceType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SurfaceType(self: AcadSurfaceClass) -> str

"""

    SurfTrimAssociativity = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SurfTrimAssociativity(self: AcadSurfaceClass) -> object

Set: SurfTrimAssociativity(self: AcadSurfaceClass) = value
"""

    TrueColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TrueColor(self: AcadSurfaceClass) -> AcadAcCmColor

Set: TrueColor(self: AcadSurfaceClass) = value
"""

    UIsolineDensity = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: UIsolineDensity(self: AcadSurfaceClass) -> int

Set: UIsolineDensity(self: AcadSurfaceClass) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: AcadSurfaceClass) -> bool

Set: Visible(self: AcadSurfaceClass) = value
"""

    VIsolineDensity = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VIsolineDensity(self: AcadSurfaceClass) -> int

Set: VIsolineDensity(self: AcadSurfaceClass) = value
"""

    WireframeType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: WireframeType(self: AcadSurfaceClass) -> AcWireframeType

Set: WireframeType(self: AcadSurfaceClass) = value
"""


    Modified = None


class IAcadSweptSurface(IAcadSurface, IAcadEntity, IAcadObject):
    # no doc
    def ArrayPolar(self, NumberOfObjects, AngleToFill, CenterPoint):
        """ ArrayPolar(self: IAcadSweptSurface, NumberOfObjects: int, AngleToFill: float, CenterPoint: object) -> object """
        pass

    def ArrayRectangular(self, NumberOfRows, NumberOfColumns, NumberOfLevels, DistBetweenRows, DistBetweenCols, DistBetweenLevels):
        """ ArrayRectangular(self: IAcadSweptSurface, NumberOfRows: int, NumberOfColumns: int, NumberOfLevels: int, DistBetweenRows: float, DistBetweenCols: float, DistBetweenLevels: float) -> object """
        pass

    def Copy(self):
        """ Copy(self: IAcadSweptSurface) -> object """
        pass

    def Delete(self):
        """ Delete(self: IAcadSweptSurface) """
        pass

    def Erase(self):
        """ Erase(self: IAcadSweptSurface) """
        pass

    def GetBoundingBox(self, MinPoint, MaxPoint):
        """ GetBoundingBox(self: IAcadSweptSurface) -> (object, object) """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: IAcadSweptSurface) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: IAcadSweptSurface, AppName: str) -> (object, object) """
        pass

    def Highlight(self, HighlightFlag):
        """ Highlight(self: IAcadSweptSurface, HighlightFlag: bool) """
        pass

    def IntersectWith(self, IntersectObject, option):
        """ IntersectWith(self: IAcadSweptSurface, IntersectObject: object, option: AcExtendOption) -> object """
        pass

    def Mirror(self, Point1, Point2):
        """ Mirror(self: IAcadSweptSurface, Point1: object, Point2: object) -> object """
        pass

    def Mirror3D(self, Point1, Point2, point3):
        """ Mirror3D(self: IAcadSweptSurface, Point1: object, Point2: object, point3: object) -> object """
        pass

    def Move(self, FromPoint, ToPoint):
        """ Move(self: IAcadSweptSurface, FromPoint: object, ToPoint: object) """
        pass

    def Rotate(self, BasePoint, RotationAngle):
        """ Rotate(self: IAcadSweptSurface, BasePoint: object, RotationAngle: float) """
        pass

    def Rotate3D(self, Point1, Point2, RotationAngle):
        """ Rotate3D(self: IAcadSweptSurface, Point1: object, Point2: object, RotationAngle: float) """
        pass

    def ScaleEntity(self, BasePoint, ScaleFactor):
        """ ScaleEntity(self: IAcadSweptSurface, BasePoint: object, ScaleFactor: float) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: IAcadSweptSurface, XDataType: object, XDataValue: object) """
        pass

    def TransformBy(self, TransformationMatrix):
        """ TransformBy(self: IAcadSweptSurface, TransformationMatrix: object) """
        pass

    def Update(self):
        """ Update(self: IAcadSweptSurface) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IAcadSweptSurface) -> object

"""

    Bank = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Bank(self: IAcadSweptSurface) -> bool

Set: Bank(self: IAcadSweptSurface) = value
"""

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: IAcadSweptSurface) -> ACAD_COLOR

Set: color(self: IAcadSweptSurface) = value
"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: IAcadSweptSurface) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: IAcadSweptSurface) -> object

"""

    EdgeExtensionDistances = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EdgeExtensionDistances(self: IAcadSweptSurface) -> object

Set: EdgeExtensionDistances(self: IAcadSweptSurface) = value
"""

    EntityName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityName(self: IAcadSweptSurface) -> str

"""

    EntityTransparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityTransparency(self: IAcadSweptSurface) -> str

Set: EntityTransparency(self: IAcadSweptSurface) = value
"""

    EntityType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityType(self: IAcadSweptSurface) -> int

"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: IAcadSweptSurface) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: IAcadSweptSurface) -> bool

"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: IAcadSweptSurface) -> AcadHyperlinks

"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layer(self: IAcadSweptSurface) -> str

Set: Layer(self: IAcadSweptSurface) = value
"""

    Length = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Length(self: IAcadSweptSurface) -> float

"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: IAcadSweptSurface) -> str

Set: Linetype(self: IAcadSweptSurface) = value
"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeScale(self: IAcadSweptSurface) -> float

Set: LinetypeScale(self: IAcadSweptSurface) = value
"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: IAcadSweptSurface) -> ACAD_LWEIGHT

Set: Lineweight(self: IAcadSweptSurface) = value
"""

    MaintainAssociativity = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MaintainAssociativity(self: IAcadSweptSurface) -> int

Set: MaintainAssociativity(self: IAcadSweptSurface) = value
"""

    Material = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Material(self: IAcadSweptSurface) -> str

Set: Material(self: IAcadSweptSurface) = value
"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: IAcadSweptSurface) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: IAcadSweptSurface) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: IAcadSweptSurface) -> Int64

"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: IAcadSweptSurface) -> str

Set: PlotStyleName(self: IAcadSweptSurface) = value
"""

    ProfileRotation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ProfileRotation(self: IAcadSweptSurface) -> float

Set: ProfileRotation(self: IAcadSweptSurface) = value
"""

    scale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: scale(self: IAcadSweptSurface) -> float

Set: scale(self: IAcadSweptSurface) = value
"""

    ShowAssociativity = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowAssociativity(self: IAcadSweptSurface) -> bool

Set: ShowAssociativity(self: IAcadSweptSurface) = value
"""

    SurfaceType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SurfaceType(self: IAcadSweptSurface) -> str

"""

    SurfTrimAssociativity = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SurfTrimAssociativity(self: IAcadSweptSurface) -> object

Set: SurfTrimAssociativity(self: IAcadSweptSurface) = value
"""

    TrueColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TrueColor(self: IAcadSweptSurface) -> AcadAcCmColor

Set: TrueColor(self: IAcadSweptSurface) = value
"""

    Twist = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Twist(self: IAcadSweptSurface) -> float

Set: Twist(self: IAcadSweptSurface) = value
"""

    UIsolineDensity = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: UIsolineDensity(self: IAcadSweptSurface) -> int

Set: UIsolineDensity(self: IAcadSweptSurface) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: IAcadSweptSurface) -> bool

Set: Visible(self: IAcadSweptSurface) = value
"""

    VIsolineDensity = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VIsolineDensity(self: IAcadSweptSurface) -> int

Set: VIsolineDensity(self: IAcadSweptSurface) = value
"""

    WireframeType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: WireframeType(self: IAcadSweptSurface) -> AcWireframeType

Set: WireframeType(self: IAcadSweptSurface) = value
"""



class AcadSweptSurface(IAcadSweptSurface, IAcadSurface, IAcadEntity, IAcadObject, IAcadObjectEvents_Event):
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class AcadSweptSurfaceClass(__ComObject):
    # no doc
    def add_Modified(self, A_1):
        """ add_Modified(self: AcadSweptSurfaceClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def ArrayPolar(self, NumberOfObjects, AngleToFill, CenterPoint):
        """ ArrayPolar(self: AcadSweptSurfaceClass, NumberOfObjects: int, AngleToFill: float, CenterPoint: object) -> object """
        pass

    def ArrayRectangular(self, NumberOfRows, NumberOfColumns, NumberOfLevels, DistBetweenRows, DistBetweenCols, DistBetweenLevels):
        """ ArrayRectangular(self: AcadSweptSurfaceClass, NumberOfRows: int, NumberOfColumns: int, NumberOfLevels: int, DistBetweenRows: float, DistBetweenCols: float, DistBetweenLevels: float) -> object """
        pass

    def Copy(self):
        """ Copy(self: AcadSweptSurfaceClass) -> object """
        pass

    def Delete(self):
        """ Delete(self: AcadSweptSurfaceClass) """
        pass

    def Erase(self):
        """ Erase(self: AcadSweptSurfaceClass) """
        pass

    def GetBoundingBox(self, MinPoint, MaxPoint):
        """ GetBoundingBox(self: AcadSweptSurfaceClass) -> (object, object) """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: AcadSweptSurfaceClass) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: AcadSweptSurfaceClass, AppName: str) -> (object, object) """
        pass

    def Highlight(self, HighlightFlag):
        """ Highlight(self: AcadSweptSurfaceClass, HighlightFlag: bool) """
        pass

    def IntersectWith(self, IntersectObject, option):
        """ IntersectWith(self: AcadSweptSurfaceClass, IntersectObject: object, option: AcExtendOption) -> object """
        pass

    def Mirror(self, Point1, Point2):
        """ Mirror(self: AcadSweptSurfaceClass, Point1: object, Point2: object) -> object """
        pass

    def Mirror3D(self, Point1, Point2, point3):
        """ Mirror3D(self: AcadSweptSurfaceClass, Point1: object, Point2: object, point3: object) -> object """
        pass

    def Move(self, FromPoint, ToPoint):
        """ Move(self: AcadSweptSurfaceClass, FromPoint: object, ToPoint: object) """
        pass

    def remove_Modified(self, A_1):
        """ remove_Modified(self: AcadSweptSurfaceClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def Rotate(self, BasePoint, RotationAngle):
        """ Rotate(self: AcadSweptSurfaceClass, BasePoint: object, RotationAngle: float) """
        pass

    def Rotate3D(self, Point1, Point2, RotationAngle):
        """ Rotate3D(self: AcadSweptSurfaceClass, Point1: object, Point2: object, RotationAngle: float) """
        pass

    def ScaleEntity(self, BasePoint, ScaleFactor):
        """ ScaleEntity(self: AcadSweptSurfaceClass, BasePoint: object, ScaleFactor: float) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: AcadSweptSurfaceClass, XDataType: object, XDataValue: object) """
        pass

    def TransformBy(self, TransformationMatrix):
        """ TransformBy(self: AcadSweptSurfaceClass, TransformationMatrix: object) """
        pass

    def Update(self):
        """ Update(self: AcadSweptSurfaceClass) """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: AcadSweptSurfaceClass) -> object

"""

    Bank = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Bank(self: AcadSweptSurfaceClass) -> bool

Set: Bank(self: AcadSweptSurfaceClass) = value
"""

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: AcadSweptSurfaceClass) -> ACAD_COLOR

Set: color(self: AcadSweptSurfaceClass) = value
"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: AcadSweptSurfaceClass) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: AcadSweptSurfaceClass) -> object

"""

    EdgeExtensionDistances = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EdgeExtensionDistances(self: AcadSweptSurfaceClass) -> object

Set: EdgeExtensionDistances(self: AcadSweptSurfaceClass) = value
"""

    EntityName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityName(self: AcadSweptSurfaceClass) -> str

"""

    EntityTransparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityTransparency(self: AcadSweptSurfaceClass) -> str

Set: EntityTransparency(self: AcadSweptSurfaceClass) = value
"""

    EntityType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityType(self: AcadSweptSurfaceClass) -> int

"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: AcadSweptSurfaceClass) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: AcadSweptSurfaceClass) -> bool

"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: AcadSweptSurfaceClass) -> AcadHyperlinks

"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layer(self: AcadSweptSurfaceClass) -> str

Set: Layer(self: AcadSweptSurfaceClass) = value
"""

    Length = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Length(self: AcadSweptSurfaceClass) -> float

"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: AcadSweptSurfaceClass) -> str

Set: Linetype(self: AcadSweptSurfaceClass) = value
"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeScale(self: AcadSweptSurfaceClass) -> float

Set: LinetypeScale(self: AcadSweptSurfaceClass) = value
"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: AcadSweptSurfaceClass) -> ACAD_LWEIGHT

Set: Lineweight(self: AcadSweptSurfaceClass) = value
"""

    MaintainAssociativity = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MaintainAssociativity(self: AcadSweptSurfaceClass) -> int

Set: MaintainAssociativity(self: AcadSweptSurfaceClass) = value
"""

    Material = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Material(self: AcadSweptSurfaceClass) -> str

Set: Material(self: AcadSweptSurfaceClass) = value
"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: AcadSweptSurfaceClass) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: AcadSweptSurfaceClass) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: AcadSweptSurfaceClass) -> Int64

"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: AcadSweptSurfaceClass) -> str

Set: PlotStyleName(self: AcadSweptSurfaceClass) = value
"""

    ProfileRotation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ProfileRotation(self: AcadSweptSurfaceClass) -> float

Set: ProfileRotation(self: AcadSweptSurfaceClass) = value
"""

    scale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: scale(self: AcadSweptSurfaceClass) -> float

Set: scale(self: AcadSweptSurfaceClass) = value
"""

    ShowAssociativity = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowAssociativity(self: AcadSweptSurfaceClass) -> bool

Set: ShowAssociativity(self: AcadSweptSurfaceClass) = value
"""

    SurfaceType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SurfaceType(self: AcadSweptSurfaceClass) -> str

"""

    SurfTrimAssociativity = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SurfTrimAssociativity(self: AcadSweptSurfaceClass) -> object

Set: SurfTrimAssociativity(self: AcadSweptSurfaceClass) = value
"""

    TrueColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TrueColor(self: AcadSweptSurfaceClass) -> AcadAcCmColor

Set: TrueColor(self: AcadSweptSurfaceClass) = value
"""

    Twist = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Twist(self: AcadSweptSurfaceClass) -> float

Set: Twist(self: AcadSweptSurfaceClass) = value
"""

    UIsolineDensity = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: UIsolineDensity(self: AcadSweptSurfaceClass) -> int

Set: UIsolineDensity(self: AcadSweptSurfaceClass) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: AcadSweptSurfaceClass) -> bool

Set: Visible(self: AcadSweptSurfaceClass) = value
"""

    VIsolineDensity = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VIsolineDensity(self: AcadSweptSurfaceClass) -> int

Set: VIsolineDensity(self: AcadSweptSurfaceClass) = value
"""

    WireframeType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: WireframeType(self: AcadSweptSurfaceClass) -> AcWireframeType

Set: WireframeType(self: AcadSweptSurfaceClass) = value
"""


    Modified = None


class IAcadTable(IAcadEntity, IAcadObject):
    # no doc
    def ArrayPolar(self, NumberOfObjects, AngleToFill, CenterPoint):
        """ ArrayPolar(self: IAcadTable, NumberOfObjects: int, AngleToFill: float, CenterPoint: object) -> object """
        pass

    def ArrayRectangular(self, NumberOfRows, NumberOfColumns, NumberOfLevels, DistBetweenRows, DistBetweenCols, DistBetweenLevels):
        """ ArrayRectangular(self: IAcadTable, NumberOfRows: int, NumberOfColumns: int, NumberOfLevels: int, DistBetweenRows: float, DistBetweenCols: float, DistBetweenLevels: float) -> object """
        pass

    def ClearSubSelection(self):
        """ ClearSubSelection(self: IAcadTable) """
        pass

    def ClearTableStyleOverrides(self, flag):
        """ ClearTableStyleOverrides(self: IAcadTable, flag: int) """
        pass

    def Copy(self):
        """ Copy(self: IAcadTable) -> object """
        pass

    def CreateContent(self, nRow, nCol, nIndex):
        """ CreateContent(self: IAcadTable, nRow: int, nCol: int, nIndex: int) -> int """
        pass

    def Delete(self):
        """ Delete(self: IAcadTable) """
        pass

    def DeleteCellContent(self, row, col):
        """ DeleteCellContent(self: IAcadTable, row: int, col: int) """
        pass

    def DeleteColumns(self, col, cols):
        """ DeleteColumns(self: IAcadTable, col: int, cols: int) """
        pass

    def DeleteContent(self, nRow, nCol):
        """ DeleteContent(self: IAcadTable, nRow: int, nCol: int) """
        pass

    def DeleteRows(self, row, Rows):
        """ DeleteRows(self: IAcadTable, row: int, Rows: int) """
        pass

    def EnableMergeAll(self, nRow, nCol, bEnable):
        """ EnableMergeAll(self: IAcadTable, nRow: int, nCol: int, bEnable: bool) """
        pass

    def Erase(self):
        """ Erase(self: IAcadTable) """
        pass

    def FormatValue(self, row, col, nOption, pVal):
        """ FormatValue(self: IAcadTable, row: int, col: int, nOption: AcFormatOption, pVal: str) -> str """
        pass

    def GenerateLayout(self):
        """ GenerateLayout(self: IAcadTable) """
        pass

    def GetAlignment(self, rowType):
        """ GetAlignment(self: IAcadTable, rowType: AcRowType) -> AcCellAlignment """
        pass

    def GetAttachmentPoint(self, row, col):
        """ GetAttachmentPoint(self: IAcadTable, row: int, col: int) -> object """
        pass

    def GetAutoScale(self, row, col):
        """ GetAutoScale(self: IAcadTable, row: int, col: int) -> bool """
        pass

    def GetAutoScale2(self, nRow, nCol, nContent):
        """ GetAutoScale2(self: IAcadTable, nRow: int, nCol: int, nContent: int) -> bool """
        pass

    def GetBackgroundColor(self, rowType):
        """ GetBackgroundColor(self: IAcadTable, rowType: AcRowType) -> AcadAcCmColor """
        pass

    def GetBackgroundColorNone(self, rowType):
        """ GetBackgroundColorNone(self: IAcadTable, rowType: AcRowType) -> bool """
        pass

    def GetBlockAttributeValue(self, row, col, attdefId):
        """ GetBlockAttributeValue(self: IAcadTable, row: int, col: int, attdefId: Int64) -> str """
        pass

    def GetBlockAttributeValue2(self, nRow, nCol, nContent, blkId):
        """ GetBlockAttributeValue2(self: IAcadTable, nRow: int, nCol: int, nContent: int, blkId: Int64) -> str """
        pass

    def GetBlockRotation(self, row, col):
        """ GetBlockRotation(self: IAcadTable, row: int, col: int) -> float """
        pass

    def GetBlockScale(self, row, col):
        """ GetBlockScale(self: IAcadTable, row: int, col: int) -> float """
        pass

    def GetBlockTableRecordId(self, row, col):
        """ GetBlockTableRecordId(self: IAcadTable, row: int, col: int) -> Int64 """
        pass

    def GetBlockTableRecordId2(self, nRow, nCol, nContent):
        """ GetBlockTableRecordId2(self: IAcadTable, nRow: int, nCol: int, nContent: int) -> Int64 """
        pass

    def GetBoundingBox(self, MinPoint, MaxPoint):
        """ GetBoundingBox(self: IAcadTable) -> (object, object) """
        pass

    def GetBreakHeight(self, nIndex):
        """ GetBreakHeight(self: IAcadTable, nIndex: int) -> float """
        pass

    def GetCellAlignment(self, row, col):
        """ GetCellAlignment(self: IAcadTable, row: int, col: int) -> AcCellAlignment """
        pass

    def GetCellBackgroundColor(self, row, col):
        """ GetCellBackgroundColor(self: IAcadTable, row: int, col: int) -> AcadAcCmColor """
        pass

    def GetCellBackgroundColorNone(self, row, col):
        """ GetCellBackgroundColorNone(self: IAcadTable, row: int, col: int) -> bool """
        pass

    def GetCellContentColor(self, row, col):
        """ GetCellContentColor(self: IAcadTable, row: int, col: int) -> AcadAcCmColor """
        pass

    def GetCellDataType(self, row, col, pDataType, pUnitType):
        """ GetCellDataType(self: IAcadTable, row: int, col: int) -> (AcValueDataType, AcValueUnitType) """
        pass

    def GetCellExtents(self, row, col, bOuterCell):
        """ GetCellExtents(self: IAcadTable, row: int, col: int, bOuterCell: bool) -> object """
        pass

    def GetCellFormat(self, row, col):
        """ GetCellFormat(self: IAcadTable, row: int, col: int) -> str """
        pass

    def GetCellGridColor(self, row, col, edge):
        """ GetCellGridColor(self: IAcadTable, row: int, col: int, edge: AcCellEdgeMask) -> AcadAcCmColor """
        pass

    def GetCellGridLineWeight(self, row, col, edge):
        """ GetCellGridLineWeight(self: IAcadTable, row: int, col: int, edge: AcCellEdgeMask) -> ACAD_LWEIGHT """
        pass

    def GetCellGridVisibility(self, row, col, edge):
        """ GetCellGridVisibility(self: IAcadTable, row: int, col: int, edge: AcCellEdgeMask) -> bool """
        pass

    def GetCellState(self, nRow, nCol):
        """ GetCellState(self: IAcadTable, nRow: int, nCol: int) -> AcCellState """
        pass

    def GetCellStyle(self, nRow, nCol):
        """ GetCellStyle(self: IAcadTable, nRow: int, nCol: int) -> str """
        pass

    def GetCellStyleOverrides(self, row, col):
        """ GetCellStyleOverrides(self: IAcadTable, row: int, col: int) -> object """
        pass

    def GetCellTextHeight(self, row, col):
        """ GetCellTextHeight(self: IAcadTable, row: int, col: int) -> float """
        pass

    def GetCellTextStyle(self, row, col):
        """ GetCellTextStyle(self: IAcadTable, row: int, col: int) -> str """
        pass

    def GetCellType(self, row, col):
        """ GetCellType(self: IAcadTable, row: int, col: int) -> AcCellType """
        pass

    def GetCellValue(self, row, col):
        """ GetCellValue(self: IAcadTable, row: int, col: int) -> object """
        pass

    def GetColumnName(self, nIndex):
        """ GetColumnName(self: IAcadTable, nIndex: int) -> str """
        pass

    def GetColumnWidth(self, col):
        """ GetColumnWidth(self: IAcadTable, col: int) -> float """
        pass

    def GetContentColor(self, rowType):
        """ GetContentColor(self: IAcadTable, rowType: AcRowType) -> AcadAcCmColor """
        pass

    def GetContentColor2(self, nRow, nCol, nContent):
        """ GetContentColor2(self: IAcadTable, nRow: int, nCol: int, nContent: int) -> AcadAcCmColor """
        pass

    def GetContentLayout(self, row, col):
        """ GetContentLayout(self: IAcadTable, row: int, col: int) -> AcCellContentLayout """
        pass

    def GetContentType(self, nRow, nCol):
        """ GetContentType(self: IAcadTable, nRow: int, nCol: int) -> AcCellContentType """
        pass

    def GetCustomData(self, nRow, nCol, szKey, pData):
        """ GetCustomData(self: IAcadTable, nRow: int, nCol: int, szKey: str) -> object """
        pass

    def GetDataFormat(self, nRow, nCol, nContent):
        """ GetDataFormat(self: IAcadTable, nRow: int, nCol: int, nContent: int) -> str """
        pass

    def GetDataType(self, rowType, pDataType, pUnitType):
        """ GetDataType(self: IAcadTable, rowType: AcRowType) -> (AcValueDataType, AcValueUnitType) """
        pass

    def GetDataType2(self, nRow, nCol, nContent, pDataType, pUnitType):
        """ GetDataType2(self: IAcadTable, nRow: int, nCol: int, nContent: int) -> (AcValueDataType, AcValueUnitType) """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: IAcadTable) -> AcadDictionary """
        pass

    def GetFieldId(self, row, col):
        """ GetFieldId(self: IAcadTable, row: int, col: int) -> Int64 """
        pass

    def GetFieldId2(self, nRow, nCol, nContent):
        """ GetFieldId2(self: IAcadTable, nRow: int, nCol: int, nContent: int) -> Int64 """
        pass

    def GetFormat(self, rowType):
        """ GetFormat(self: IAcadTable, rowType: AcRowType) -> str """
        pass

    def GetFormula(self, nRow, nCol, nContent):
        """ GetFormula(self: IAcadTable, nRow: int, nCol: int, nContent: int) -> str """
        pass

    def GetGridColor(self, gridLineType, rowType):
        """ GetGridColor(self: IAcadTable, gridLineType: AcGridLineType, rowType: AcRowType) -> AcadAcCmColor """
        pass

    def GetGridColor2(self, nRow, nCol, nGridLineType):
        """ GetGridColor2(self: IAcadTable, nRow: int, nCol: int, nGridLineType: AcGridLineType) -> AcadAcCmColor """
        pass

    def GetGridDoubleLineSpacing(self, nRow, nCol, nGridLineType):
        """ GetGridDoubleLineSpacing(self: IAcadTable, nRow: int, nCol: int, nGridLineType: AcGridLineType) -> float """
        pass

    def GetGridLineStyle(self, nRow, nCol, nGridLineType):
        """ GetGridLineStyle(self: IAcadTable, nRow: int, nCol: int, nGridLineType: AcGridLineType) -> AcGridLineStyle """
        pass

    def GetGridLinetype(self, nRow, nCol, nGridLineType):
        """ GetGridLinetype(self: IAcadTable, nRow: int, nCol: int, nGridLineType: AcGridLineType) -> Int64 """
        pass

    def GetGridLineWeight(self, gridLineType, rowType):
        """ GetGridLineWeight(self: IAcadTable, gridLineType: AcGridLineType, rowType: AcRowType) -> ACAD_LWEIGHT """
        pass

    def GetGridLineWeight2(self, nRow, nCol, nGridLineType):
        """ GetGridLineWeight2(self: IAcadTable, nRow: int, nCol: int, nGridLineType: AcGridLineType) -> ACAD_LWEIGHT """
        pass

    def GetGridVisibility(self, gridLineType, rowType):
        """ GetGridVisibility(self: IAcadTable, gridLineType: AcGridLineType, rowType: AcRowType) -> bool """
        pass

    def GetGridVisibility2(self, nRow, nCol, nGridLineType):
        """ GetGridVisibility2(self: IAcadTable, nRow: int, nCol: int, nGridLineType: AcGridLineType) -> bool """
        pass

    def GetHasFormula(self, nRow, nCol, nContent):
        """ GetHasFormula(self: IAcadTable, nRow: int, nCol: int, nContent: int) -> bool """
        pass

    def GetMargin(self, nRow, nCol, nMargin):
        """ GetMargin(self: IAcadTable, nRow: int, nCol: int, nMargin: AcCellMargin) -> float """
        pass

    def GetMinimumColumnWidth(self, col):
        """ GetMinimumColumnWidth(self: IAcadTable, col: int) -> float """
        pass

    def GetMinimumRowHeight(self, row):
        """ GetMinimumRowHeight(self: IAcadTable, row: int) -> float """
        pass

    def GetOverride(self, nRow, nCol, nContent):
        """ GetOverride(self: IAcadTable, nRow: int, nCol: int, nContent: int) -> AcCellProperty """
        pass

    def GetRotation(self, nRow, nCol, nContent):
        """ GetRotation(self: IAcadTable, nRow: int, nCol: int, nContent: int) -> float """
        pass

    def GetRowHeight(self, row):
        """ GetRowHeight(self: IAcadTable, row: int) -> float """
        pass

    def GetRowType(self, row):
        """ GetRowType(self: IAcadTable, row: int) -> AcRowType """
        pass

    def GetScale(self, nRow, nCol, nContent):
        """ GetScale(self: IAcadTable, nRow: int, nCol: int, nContent: int) -> float """
        pass

    def GetSubSelection(self, rowMin, rowMax, colMin, colMax):
        """ GetSubSelection(self: IAcadTable) -> (int, int, int, int) """
        pass

    def GetText(self, row, col):
        """ GetText(self: IAcadTable, row: int, col: int) -> str """
        pass

    def GetTextHeight(self, rowType):
        """ GetTextHeight(self: IAcadTable, rowType: AcRowType) -> float """
        pass

    def GetTextHeight2(self, nRow, nCol, nContent):
        """ GetTextHeight2(self: IAcadTable, nRow: int, nCol: int, nContent: int) -> float """
        pass

    def GetTextRotation(self, row, col):
        """ GetTextRotation(self: IAcadTable, row: int, col: int) -> AcRotationAngle """
        pass

    def GetTextString(self, nRow, nCol, nContent):
        """ GetTextString(self: IAcadTable, nRow: int, nCol: int, nContent: int) -> str """
        pass

    def GetTextStyle(self, rowType):
        """ GetTextStyle(self: IAcadTable, rowType: AcRowType) -> str """
        pass

    def GetTextStyle2(self, nRow, nCol, nContent):
        """ GetTextStyle2(self: IAcadTable, nRow: int, nCol: int, nContent: int) -> str """
        pass

    def GetValue(self, nRow, nCol, nContent):
        """ GetValue(self: IAcadTable, nRow: int, nCol: int, nContent: int) -> object """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: IAcadTable, AppName: str) -> (object, object) """
        pass

    def Highlight(self, HighlightFlag):
        """ Highlight(self: IAcadTable, HighlightFlag: bool) """
        pass

    def HitTest(self, wpt, wviewVec, resultRowIndex, resultColumnIndex):
        """ HitTest(self: IAcadTable, wpt: object, wviewVec: object) -> (bool, int, int) """
        pass

    def InsertColumns(self, col, Width, cols):
        """ InsertColumns(self: IAcadTable, col: int, Width: float, cols: int) """
        pass

    def InsertColumnsAndInherit(self, col, nInheritFrom, nNumCols):
        """ InsertColumnsAndInherit(self: IAcadTable, col: int, nInheritFrom: int, nNumCols: int) """
        pass

    def InsertRows(self, row, Height, Rows):
        """ InsertRows(self: IAcadTable, row: int, Height: float, Rows: int) """
        pass

    def InsertRowsAndInherit(self, nIndex, nInheritFrom, nNumRows):
        """ InsertRowsAndInherit(self: IAcadTable, nIndex: int, nInheritFrom: int, nNumRows: int) """
        pass

    def IntersectWith(self, IntersectObject, option):
        """ IntersectWith(self: IAcadTable, IntersectObject: object, option: AcExtendOption) -> object """
        pass

    def IsContentEditable(self, nRow, nCol):
        """ IsContentEditable(self: IAcadTable, nRow: int, nCol: int) -> bool """
        pass

    def IsEmpty(self, nRow, nCol):
        """ IsEmpty(self: IAcadTable, nRow: int, nCol: int) -> bool """
        pass

    def IsFormatEditable(self, nRow, nCol):
        """ IsFormatEditable(self: IAcadTable, nRow: int, nCol: int) -> bool """
        pass

    def IsMergeAllEnabled(self, nRow, nCol):
        """ IsMergeAllEnabled(self: IAcadTable, nRow: int, nCol: int) -> bool """
        pass

    def IsMergedCell(self, row, col, minRow, maxRow, minCol, maxCol):
        """ IsMergedCell(self: IAcadTable, row: int, col: int) -> (bool, int, int, int, int) """
        pass

    def MergeCells(self, minRow, maxRow, minCol, maxCol):
        """ MergeCells(self: IAcadTable, minRow: int, maxRow: int, minCol: int, maxCol: int) """
        pass

    def Mirror(self, Point1, Point2):
        """ Mirror(self: IAcadTable, Point1: object, Point2: object) -> object """
        pass

    def Mirror3D(self, Point1, Point2, point3):
        """ Mirror3D(self: IAcadTable, Point1: object, Point2: object, point3: object) -> object """
        pass

    def Move(self, FromPoint, ToPoint):
        """ Move(self: IAcadTable, FromPoint: object, ToPoint: object) """
        pass

    def MoveContent(self, nRow, nCol, nFromIndex, nToIndex):
        """ MoveContent(self: IAcadTable, nRow: int, nCol: int, nFromIndex: int, nToIndex: int) """
        pass

    def RecomputeTableBlock(self, bForceUpdate):
        """ RecomputeTableBlock(self: IAcadTable, bForceUpdate: bool) """
        pass

    def RemoveAllOverrides(self, nRow, nCol):
        """ RemoveAllOverrides(self: IAcadTable, nRow: int, nCol: int) """
        pass

    def ReselectSubRegion(self):
        """ ReselectSubRegion(self: IAcadTable) """
        pass

    def ResetCellValue(self, row, col):
        """ ResetCellValue(self: IAcadTable, row: int, col: int) """
        pass

    def Rotate(self, BasePoint, RotationAngle):
        """ Rotate(self: IAcadTable, BasePoint: object, RotationAngle: float) """
        pass

    def Rotate3D(self, Point1, Point2, RotationAngle):
        """ Rotate3D(self: IAcadTable, Point1: object, Point2: object, RotationAngle: float) """
        pass

    def ScaleEntity(self, BasePoint, ScaleFactor):
        """ ScaleEntity(self: IAcadTable, BasePoint: object, ScaleFactor: float) """
        pass

    def Select(self, wpt, wvwVec, wvwxVec, wxaper, wyaper, allowOutside, resultRowIndex, resultColumnIndex):
        """ Select(self: IAcadTable, wpt: object, wvwVec: object, wvwxVec: object, wxaper: float, wyaper: float, allowOutside: bool) -> (int, int) """
        pass

    def SelectSubRegion(self, wpt1, wpt2, wvwVec, wvwxVec, seltype, bIncludeCurrentSelection, rowMin, rowMax, colMin, colMax):
        """ SelectSubRegion(self: IAcadTable, wpt1: object, wpt2: object, wvwVec: object, wvwxVec: object, seltype: AcSelectType, bIncludeCurrentSelection: bool) -> (int, int, int, int) """
        pass

    def SetAlignment(self, rowTypes, cellAlignment):
        """ SetAlignment(self: IAcadTable, rowTypes: int, cellAlignment: AcCellAlignment) """
        pass

    def SetAutoScale(self, row, col, bValue):
        """ SetAutoScale(self: IAcadTable, row: int, col: int, bValue: bool) -> bool """
        pass

    def SetAutoScale2(self, nRow, nCol, nContent, bAutoFit):
        """ SetAutoScale2(self: IAcadTable, nRow: int, nCol: int, nContent: int, bAutoFit: bool) """
        pass

    def SetBackgroundColor(self, rowTypes, pColor):
        """ SetBackgroundColor(self: IAcadTable, rowTypes: int, pColor: AcadAcCmColor) """
        pass

    def SetBackgroundColorNone(self, rowTypes, bValue):
        """ SetBackgroundColorNone(self: IAcadTable, rowTypes: int, bValue: bool) -> bool """
        pass

    def SetBlockAttributeValue(self, row, col, attdefId, bstrValue):
        """ SetBlockAttributeValue(self: IAcadTable, row: int, col: int, attdefId: Int64, bstrValue: str) """
        pass

    def SetBlockAttributeValue2(self, nRow, nCol, nContent, blkId, Value):
        """ SetBlockAttributeValue2(self: IAcadTable, nRow: int, nCol: int, nContent: int, blkId: Int64, Value: str) """
        pass

    def SetBlockRotation(self, row, col, blkRotation):
        """ SetBlockRotation(self: IAcadTable, row: int, col: int, blkRotation: float) """
        pass

    def SetBlockScale(self, row, col, blkScale):
        """ SetBlockScale(self: IAcadTable, row: int, col: int, blkScale: float) """
        pass

    def SetBlockTableRecordId(self, row, col, blkId, bAutoFit):
        """ SetBlockTableRecordId(self: IAcadTable, row: int, col: int, blkId: Int64, bAutoFit: bool) """
        pass

    def SetBlockTableRecordId2(self, nRow, nCol, nContent, blkId, autoFit):
        """ SetBlockTableRecordId2(self: IAcadTable, nRow: int, nCol: int, nContent: int, blkId: Int64, autoFit: bool) """
        pass

    def SetBreakHeight(self, nIndex, Height):
        """ SetBreakHeight(self: IAcadTable, nIndex: int, Height: float) """
        pass

    def SetCellAlignment(self, row, col, cellAlignment):
        """ SetCellAlignment(self: IAcadTable, row: int, col: int, cellAlignment: AcCellAlignment) """
        pass

    def SetCellBackgroundColor(self, row, col, pColor):
        """ SetCellBackgroundColor(self: IAcadTable, row: int, col: int, pColor: AcadAcCmColor) """
        pass

    def SetCellBackgroundColorNone(self, row, col, bValue):
        """ SetCellBackgroundColorNone(self: IAcadTable, row: int, col: int, bValue: bool) -> bool """
        pass

    def SetCellContentColor(self, row, col, pColor):
        """ SetCellContentColor(self: IAcadTable, row: int, col: int, pColor: AcadAcCmColor) """
        pass

    def SetCellDataType(self, row, col, dataType, unitType):
        """ SetCellDataType(self: IAcadTable, row: int, col: int, dataType: AcValueDataType, unitType: AcValueUnitType) """
        pass

    def SetCellFormat(self, row, col, pFormat):
        """ SetCellFormat(self: IAcadTable, row: int, col: int, pFormat: str) """
        pass

    def SetCellGridColor(self, row, col, edges, pColor):
        """ SetCellGridColor(self: IAcadTable, row: int, col: int, edges: int, pColor: AcadAcCmColor) """
        pass

    def SetCellGridLineWeight(self, row, col, edges, Lineweight):
        """ SetCellGridLineWeight(self: IAcadTable, row: int, col: int, edges: int, Lineweight: ACAD_LWEIGHT) """
        pass

    def SetCellGridVisibility(self, row, col, edges, bValue):
        """ SetCellGridVisibility(self: IAcadTable, row: int, col: int, edges: int, bValue: bool) """
        pass

    def SetCellState(self, nRow, nCol, nLock):
        """ SetCellState(self: IAcadTable, nRow: int, nCol: int, nLock: AcCellState) """
        pass

    def SetCellStyle(self, nRow, nCol, szCellStyle):
        """ SetCellStyle(self: IAcadTable, nRow: int, nCol: int, szCellStyle: str) """
        pass

    def SetCellTextHeight(self, row, col, TextHeight):
        """ SetCellTextHeight(self: IAcadTable, row: int, col: int, TextHeight: float) """
        pass

    def SetCellTextStyle(self, row, col, bstrName):
        """ SetCellTextStyle(self: IAcadTable, row: int, col: int, bstrName: str) """
        pass

    def SetCellType(self, row, col, CellType):
        """ SetCellType(self: IAcadTable, row: int, col: int, CellType: AcCellType) """
        pass

    def SetCellValue(self, row, col, val):
        """ SetCellValue(self: IAcadTable, row: int, col: int, val: object) """
        pass

    def SetCellValueFromText(self, row, col, val, nOption):
        """ SetCellValueFromText(self: IAcadTable, row: int, col: int, val: str, nOption: AcParseOption) """
        pass

    def SetColumnName(self, nIndex, Name):
        """ SetColumnName(self: IAcadTable, nIndex: int, Name: str) """
        pass

    def SetColumnWidth(self, col, Width):
        """ SetColumnWidth(self: IAcadTable, col: int, Width: float) """
        pass

    def SetContentColor(self, rowTypes, pColor):
        """ SetContentColor(self: IAcadTable, rowTypes: int, pColor: AcadAcCmColor) """
        pass

    def SetContentColor2(self, nRow, nCol, nContent, pColor):
        """ SetContentColor2(self: IAcadTable, nRow: int, nCol: int, nContent: int, pColor: AcadAcCmColor) """
        pass

    def SetContentLayout(self, row, col, nLayout):
        """ SetContentLayout(self: IAcadTable, row: int, col: int, nLayout: AcCellContentLayout) """
        pass

    def SetCustomData(self, nRow, nCol, szKey, data):
        """ SetCustomData(self: IAcadTable, nRow: int, nCol: int, szKey: str, data: object) """
        pass

    def SetDataFormat(self, nRow, nCol, nContent, szFormat):
        """ SetDataFormat(self: IAcadTable, nRow: int, nCol: int, nContent: int, szFormat: str) """
        pass

    def SetDataType(self, rowTypes, dataType, unitType):
        """ SetDataType(self: IAcadTable, rowTypes: int, dataType: AcValueDataType, unitType: AcValueUnitType) """
        pass

    def SetDataType2(self, nRow, nCol, nContent, dataType, unitType):
        """ SetDataType2(self: IAcadTable, nRow: int, nCol: int, nContent: int, dataType: AcValueDataType, unitType: AcValueUnitType) """
        pass

    def SetFieldId(self, row, col, fieldId):
        """ SetFieldId(self: IAcadTable, row: int, col: int, fieldId: Int64) """
        pass

    def SetFieldId2(self, nRow, nCol, nContent, acDbObjectId, nflag):
        """ SetFieldId2(self: IAcadTable, nRow: int, nCol: int, nContent: int, acDbObjectId: Int64, nflag: AcCellOption) """
        pass

    def SetFormat(self, rowTypes, pFormat):
        """ SetFormat(self: IAcadTable, rowTypes: int, pFormat: str) """
        pass

    def SetFormula(self, nRow, nCol, nContent, pszFormula):
        """ SetFormula(self: IAcadTable, nRow: int, nCol: int, nContent: int, pszFormula: str) """
        pass

    def SetGridColor(self, gridLineTypes, rowTypes, pColor):
        """ SetGridColor(self: IAcadTable, gridLineTypes: int, rowTypes: int, pColor: AcadAcCmColor) """
        pass

    def SetGridColor2(self, nRow, nCol, nGridLineType, pColor):
        """ SetGridColor2(self: IAcadTable, nRow: int, nCol: int, nGridLineType: AcGridLineType, pColor: AcadAcCmColor) """
        pass

    def SetGridDoubleLineSpacing(self, nRow, nCol, nGridLineType, fSpacing):
        """ SetGridDoubleLineSpacing(self: IAcadTable, nRow: int, nCol: int, nGridLineType: AcGridLineType, fSpacing: float) """
        pass

    def SetGridLineStyle(self, nRow, nCol, nGridLineTypes, nLineStyle):
        """ SetGridLineStyle(self: IAcadTable, nRow: int, nCol: int, nGridLineTypes: AcGridLineType, nLineStyle: AcGridLineStyle) """
        pass

    def SetGridLinetype(self, nRow, nCol, nGridLineType, idLinetype):
        """ SetGridLinetype(self: IAcadTable, nRow: int, nCol: int, nGridLineType: AcGridLineType, idLinetype: Int64) """
        pass

    def SetGridLineWeight(self, gridLineTypes, rowTypes, Lineweight):
        """ SetGridLineWeight(self: IAcadTable, gridLineTypes: int, rowTypes: int, Lineweight: ACAD_LWEIGHT) """
        pass

    def SetGridLineWeight2(self, nRow, nCol, nGridLineType, Lineweight):
        """ SetGridLineWeight2(self: IAcadTable, nRow: int, nCol: int, nGridLineType: AcGridLineType, Lineweight: ACAD_LWEIGHT) """
        pass

    def SetGridVisibility(self, gridLineTypes, rowTypes, bValue):
        """ SetGridVisibility(self: IAcadTable, gridLineTypes: int, rowTypes: int, bValue: bool) """
        pass

    def SetGridVisibility2(self, nRow, nCol, nGridLineType, bVisible):
        """ SetGridVisibility2(self: IAcadTable, nRow: int, nCol: int, nGridLineType: AcGridLineType, bVisible: bool) """
        pass

    def SetMargin(self, nRow, nCol, nMargins, fMargin):
        """ SetMargin(self: IAcadTable, nRow: int, nCol: int, nMargins: AcCellMargin, fMargin: float) """
        pass

    def SetOverride(self, nRow, nCol, nContent, nProp):
        """ SetOverride(self: IAcadTable, nRow: int, nCol: int, nContent: int, nProp: AcCellProperty) """
        pass

    def SetRotation(self, nRow, nCol, nContent, Value):
        """ SetRotation(self: IAcadTable, nRow: int, nCol: int, nContent: int, Value: float) """
        pass

    def SetRowHeight(self, row, Height):
        """ SetRowHeight(self: IAcadTable, row: int, Height: float) """
        pass

    def SetScale(self, nRow, nCol, nContent, scale):
        """ SetScale(self: IAcadTable, nRow: int, nCol: int, nContent: int, scale: float) """
        pass

    def SetSubSelection(self, rowMin, rowMax, colMin, colMax):
        """ SetSubSelection(self: IAcadTable, rowMin: int, rowMax: int, colMin: int, colMax: int) """
        pass

    def SetText(self, row, col, pStr):
        """ SetText(self: IAcadTable, row: int, col: int, pStr: str) """
        pass

    def SetTextHeight(self, rowTypes, TextHeight):
        """ SetTextHeight(self: IAcadTable, rowTypes: int, TextHeight: float) """
        pass

    def SetTextHeight2(self, nRow, nCol, nContent, Height):
        """ SetTextHeight2(self: IAcadTable, nRow: int, nCol: int, nContent: int, Height: float) """
        pass

    def SetTextRotation(self, row, col, TextRotation):
        """ SetTextRotation(self: IAcadTable, row: int, col: int, TextRotation: AcRotationAngle) """
        pass

    def SetTextString(self, nRow, nCol, nContent, Text):
        """ SetTextString(self: IAcadTable, nRow: int, nCol: int, nContent: int, Text: str) """
        pass

    def SetTextStyle(self, rowTypes, bstrName):
        """ SetTextStyle(self: IAcadTable, rowTypes: int, bstrName: str) """
        pass

    def SetTextStyle2(self, nRow, nCol, nContent, bstrStyleName):
        """ SetTextStyle2(self: IAcadTable, nRow: int, nCol: int, nContent: int, bstrStyleName: str) """
        pass

    def SetToolTip(self, nRow, nCol, tip):
        """ SetToolTip(self: IAcadTable, nRow: int, nCol: int, tip: str) """
        pass

    def SetValue(self, nRow, nCol, nContent, acValue):
        """ SetValue(self: IAcadTable, nRow: int, nCol: int, nContent: int, acValue: object) """
        pass

    def SetValueFromText(self, nRow, nCol, nContent, szText, nOption):
        """ SetValueFromText(self: IAcadTable, nRow: int, nCol: int, nContent: int, szText: str, nOption: AcParseOption) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: IAcadTable, XDataType: object, XDataValue: object) """
        pass

    def TransformBy(self, TransformationMatrix):
        """ TransformBy(self: IAcadTable, TransformationMatrix: object) """
        pass

    def UnmergeCells(self, minRow, maxRow, minCol, maxCol):
        """ UnmergeCells(self: IAcadTable, minRow: int, maxRow: int, minCol: int, maxCol: int) """
        pass

    def Update(self):
        """ Update(self: IAcadTable) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    AllowManualHeights = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AllowManualHeights(self: IAcadTable) -> bool

Set: AllowManualHeights(self: IAcadTable) = value
"""

    AllowManualPositions = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AllowManualPositions(self: IAcadTable) -> bool

Set: AllowManualPositions(self: IAcadTable) = value
"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IAcadTable) -> object

"""

    BreaksEnabled = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BreaksEnabled(self: IAcadTable) -> bool

Set: BreaksEnabled(self: IAcadTable) = value
"""

    BreakSpacing = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BreakSpacing(self: IAcadTable) -> float

Set: BreakSpacing(self: IAcadTable) = value
"""

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: IAcadTable) -> ACAD_COLOR

Set: color(self: IAcadTable) = value
"""

    Columns = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Columns(self: IAcadTable) -> int

Set: Columns(self: IAcadTable) = value
"""

    ColumnWidth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Set: ColumnWidth(self: IAcadTable) = value
"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: IAcadTable) -> AcadDatabase

"""

    Direction = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Direction(self: IAcadTable) -> object

Set: Direction(self: IAcadTable) = value
"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: IAcadTable) -> object

"""

    EnableBreak = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Set: EnableBreak(self: IAcadTable) = value
"""

    EntityName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityName(self: IAcadTable) -> str

"""

    EntityTransparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityTransparency(self: IAcadTable) -> str

Set: EntityTransparency(self: IAcadTable) = value
"""

    EntityType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityType(self: IAcadTable) -> int

"""

    FlowDirection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FlowDirection(self: IAcadTable) -> AcTableDirection

Set: FlowDirection(self: IAcadTable) = value
"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: IAcadTable) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: IAcadTable) -> bool

"""

    HasSubSelection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasSubSelection(self: IAcadTable) -> bool

"""

    HeaderSuppressed = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HeaderSuppressed(self: IAcadTable) -> bool

Set: HeaderSuppressed(self: IAcadTable) = value
"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: IAcadTable) -> float

Set: Height(self: IAcadTable) = value
"""

    HorzCellMargin = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HorzCellMargin(self: IAcadTable) -> float

Set: HorzCellMargin(self: IAcadTable) = value
"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: IAcadTable) -> AcadHyperlinks

"""

    InsertionPoint = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: InsertionPoint(self: IAcadTable) -> object

Set: InsertionPoint(self: IAcadTable) = value
"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layer(self: IAcadTable) -> str

Set: Layer(self: IAcadTable) = value
"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: IAcadTable) -> str

Set: Linetype(self: IAcadTable) = value
"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeScale(self: IAcadTable) -> float

Set: LinetypeScale(self: IAcadTable) = value
"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: IAcadTable) -> ACAD_LWEIGHT

Set: Lineweight(self: IAcadTable) = value
"""

    Material = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Material(self: IAcadTable) -> str

Set: Material(self: IAcadTable) = value
"""

    MinimumTableHeight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MinimumTableHeight(self: IAcadTable) -> float

"""

    MinimumTableWidth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MinimumTableWidth(self: IAcadTable) -> float

"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: IAcadTable) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: IAcadTable) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: IAcadTable) -> Int64

"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: IAcadTable) -> str

Set: PlotStyleName(self: IAcadTable) = value
"""

    RegenerateTableSuppressed = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RegenerateTableSuppressed(self: IAcadTable) -> bool

Set: RegenerateTableSuppressed(self: IAcadTable) = value
"""

    RepeatBottomLabels = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RepeatBottomLabels(self: IAcadTable) -> bool

Set: RepeatBottomLabels(self: IAcadTable) = value
"""

    RepeatTopLabels = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RepeatTopLabels(self: IAcadTable) -> bool

Set: RepeatTopLabels(self: IAcadTable) = value
"""

    RowHeight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Set: RowHeight(self: IAcadTable) = value
"""

    Rows = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Rows(self: IAcadTable) -> int

Set: Rows(self: IAcadTable) = value
"""

    StyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: StyleName(self: IAcadTable) -> str

Set: StyleName(self: IAcadTable) = value
"""

    TableBreakFlowDirection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TableBreakFlowDirection(self: IAcadTable) -> AcTableFlowDirection

Set: TableBreakFlowDirection(self: IAcadTable) = value
"""

    TableBreakHeight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TableBreakHeight(self: IAcadTable) -> float

Set: TableBreakHeight(self: IAcadTable) = value
"""

    TableStyleOverrides = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TableStyleOverrides(self: IAcadTable) -> object

"""

    TitleSuppressed = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TitleSuppressed(self: IAcadTable) -> bool

Set: TitleSuppressed(self: IAcadTable) = value
"""

    TrueColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TrueColor(self: IAcadTable) -> AcadAcCmColor

Set: TrueColor(self: IAcadTable) = value
"""

    VertCellMargin = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VertCellMargin(self: IAcadTable) -> float

Set: VertCellMargin(self: IAcadTable) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: IAcadTable) -> bool

Set: Visible(self: IAcadTable) = value
"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: IAcadTable) -> float

Set: Width(self: IAcadTable) = value
"""



class AcadTable(IAcadTable, IAcadEntity, IAcadObject, IAcadObjectEvents_Event):
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class AcadTableClass(__ComObject):
    # no doc
    def add_Modified(self, A_1):
        """ add_Modified(self: AcadTableClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def ArrayPolar(self, NumberOfObjects, AngleToFill, CenterPoint):
        """ ArrayPolar(self: AcadTableClass, NumberOfObjects: int, AngleToFill: float, CenterPoint: object) -> object """
        pass

    def ArrayRectangular(self, NumberOfRows, NumberOfColumns, NumberOfLevels, DistBetweenRows, DistBetweenCols, DistBetweenLevels):
        """ ArrayRectangular(self: AcadTableClass, NumberOfRows: int, NumberOfColumns: int, NumberOfLevels: int, DistBetweenRows: float, DistBetweenCols: float, DistBetweenLevels: float) -> object """
        pass

    def ClearSubSelection(self):
        """ ClearSubSelection(self: AcadTableClass) """
        pass

    def ClearTableStyleOverrides(self, flag):
        """ ClearTableStyleOverrides(self: AcadTableClass, flag: int) """
        pass

    def Copy(self):
        """ Copy(self: AcadTableClass) -> object """
        pass

    def CreateContent(self, nRow, nCol, nIndex):
        """ CreateContent(self: AcadTableClass, nRow: int, nCol: int, nIndex: int) -> int """
        pass

    def Delete(self):
        """ Delete(self: AcadTableClass) """
        pass

    def DeleteCellContent(self, row, col):
        """ DeleteCellContent(self: AcadTableClass, row: int, col: int) """
        pass

    def DeleteColumns(self, col, cols):
        """ DeleteColumns(self: AcadTableClass, col: int, cols: int) """
        pass

    def DeleteContent(self, nRow, nCol):
        """ DeleteContent(self: AcadTableClass, nRow: int, nCol: int) """
        pass

    def DeleteRows(self, row, Rows):
        """ DeleteRows(self: AcadTableClass, row: int, Rows: int) """
        pass

    def EnableMergeAll(self, nRow, nCol, bEnable):
        """ EnableMergeAll(self: AcadTableClass, nRow: int, nCol: int, bEnable: bool) """
        pass

    def Erase(self):
        """ Erase(self: AcadTableClass) """
        pass

    def FormatValue(self, row, col, nOption, pVal):
        """ FormatValue(self: AcadTableClass, row: int, col: int, nOption: AcFormatOption, pVal: str) -> str """
        pass

    def GenerateLayout(self):
        """ GenerateLayout(self: AcadTableClass) """
        pass

    def GetAlignment(self, rowType):
        """ GetAlignment(self: AcadTableClass, rowType: AcRowType) -> AcCellAlignment """
        pass

    def GetAttachmentPoint(self, row, col):
        """ GetAttachmentPoint(self: AcadTableClass, row: int, col: int) -> object """
        pass

    def GetAutoScale(self, row, col):
        """ GetAutoScale(self: AcadTableClass, row: int, col: int) -> bool """
        pass

    def GetAutoScale2(self, nRow, nCol, nContent):
        """ GetAutoScale2(self: AcadTableClass, nRow: int, nCol: int, nContent: int) -> bool """
        pass

    def GetBackgroundColor(self, rowType):
        """ GetBackgroundColor(self: AcadTableClass, rowType: AcRowType) -> AcadAcCmColor """
        pass

    def GetBackgroundColorNone(self, rowType):
        """ GetBackgroundColorNone(self: AcadTableClass, rowType: AcRowType) -> bool """
        pass

    def GetBlockAttributeValue(self, row, col, attdefId):
        """ GetBlockAttributeValue(self: AcadTableClass, row: int, col: int, attdefId: Int64) -> str """
        pass

    def GetBlockAttributeValue2(self, nRow, nCol, nContent, blkId):
        """ GetBlockAttributeValue2(self: AcadTableClass, nRow: int, nCol: int, nContent: int, blkId: Int64) -> str """
        pass

    def GetBlockRotation(self, row, col):
        """ GetBlockRotation(self: AcadTableClass, row: int, col: int) -> float """
        pass

    def GetBlockScale(self, row, col):
        """ GetBlockScale(self: AcadTableClass, row: int, col: int) -> float """
        pass

    def GetBlockTableRecordId(self, row, col):
        """ GetBlockTableRecordId(self: AcadTableClass, row: int, col: int) -> Int64 """
        pass

    def GetBlockTableRecordId2(self, nRow, nCol, nContent):
        """ GetBlockTableRecordId2(self: AcadTableClass, nRow: int, nCol: int, nContent: int) -> Int64 """
        pass

    def GetBoundingBox(self, MinPoint, MaxPoint):
        """ GetBoundingBox(self: AcadTableClass) -> (object, object) """
        pass

    def GetBreakHeight(self, nIndex):
        """ GetBreakHeight(self: AcadTableClass, nIndex: int) -> float """
        pass

    def GetCellAlignment(self, row, col):
        """ GetCellAlignment(self: AcadTableClass, row: int, col: int) -> AcCellAlignment """
        pass

    def GetCellBackgroundColor(self, row, col):
        """ GetCellBackgroundColor(self: AcadTableClass, row: int, col: int) -> AcadAcCmColor """
        pass

    def GetCellBackgroundColorNone(self, row, col):
        """ GetCellBackgroundColorNone(self: AcadTableClass, row: int, col: int) -> bool """
        pass

    def GetCellContentColor(self, row, col):
        """ GetCellContentColor(self: AcadTableClass, row: int, col: int) -> AcadAcCmColor """
        pass

    def GetCellDataType(self, row, col, pDataType, pUnitType):
        """ GetCellDataType(self: AcadTableClass, row: int, col: int) -> (AcValueDataType, AcValueUnitType) """
        pass

    def GetCellExtents(self, row, col, bOuterCell):
        """ GetCellExtents(self: AcadTableClass, row: int, col: int, bOuterCell: bool) -> object """
        pass

    def GetCellFormat(self, row, col):
        """ GetCellFormat(self: AcadTableClass, row: int, col: int) -> str """
        pass

    def GetCellGridColor(self, row, col, edge):
        """ GetCellGridColor(self: AcadTableClass, row: int, col: int, edge: AcCellEdgeMask) -> AcadAcCmColor """
        pass

    def GetCellGridLineWeight(self, row, col, edge):
        """ GetCellGridLineWeight(self: AcadTableClass, row: int, col: int, edge: AcCellEdgeMask) -> ACAD_LWEIGHT """
        pass

    def GetCellGridVisibility(self, row, col, edge):
        """ GetCellGridVisibility(self: AcadTableClass, row: int, col: int, edge: AcCellEdgeMask) -> bool """
        pass

    def GetCellState(self, nRow, nCol):
        """ GetCellState(self: AcadTableClass, nRow: int, nCol: int) -> AcCellState """
        pass

    def GetCellStyle(self, nRow, nCol):
        """ GetCellStyle(self: AcadTableClass, nRow: int, nCol: int) -> str """
        pass

    def GetCellStyleOverrides(self, row, col):
        """ GetCellStyleOverrides(self: AcadTableClass, row: int, col: int) -> object """
        pass

    def GetCellTextHeight(self, row, col):
        """ GetCellTextHeight(self: AcadTableClass, row: int, col: int) -> float """
        pass

    def GetCellTextStyle(self, row, col):
        """ GetCellTextStyle(self: AcadTableClass, row: int, col: int) -> str """
        pass

    def GetCellType(self, row, col):
        """ GetCellType(self: AcadTableClass, row: int, col: int) -> AcCellType """
        pass

    def GetCellValue(self, row, col):
        """ GetCellValue(self: AcadTableClass, row: int, col: int) -> object """
        pass

    def GetColumnName(self, nIndex):
        """ GetColumnName(self: AcadTableClass, nIndex: int) -> str """
        pass

    def GetColumnWidth(self, col):
        """ GetColumnWidth(self: AcadTableClass, col: int) -> float """
        pass

    def GetContentColor(self, rowType):
        """ GetContentColor(self: AcadTableClass, rowType: AcRowType) -> AcadAcCmColor """
        pass

    def GetContentColor2(self, nRow, nCol, nContent):
        """ GetContentColor2(self: AcadTableClass, nRow: int, nCol: int, nContent: int) -> AcadAcCmColor """
        pass

    def GetContentLayout(self, row, col):
        """ GetContentLayout(self: AcadTableClass, row: int, col: int) -> AcCellContentLayout """
        pass

    def GetContentType(self, nRow, nCol):
        """ GetContentType(self: AcadTableClass, nRow: int, nCol: int) -> AcCellContentType """
        pass

    def GetCustomData(self, nRow, nCol, szKey, pData):
        """ GetCustomData(self: AcadTableClass, nRow: int, nCol: int, szKey: str) -> object """
        pass

    def GetDataFormat(self, nRow, nCol, nContent):
        """ GetDataFormat(self: AcadTableClass, nRow: int, nCol: int, nContent: int) -> str """
        pass

    def GetDataType(self, rowType, pDataType, pUnitType):
        """ GetDataType(self: AcadTableClass, rowType: AcRowType) -> (AcValueDataType, AcValueUnitType) """
        pass

    def GetDataType2(self, nRow, nCol, nContent, pDataType, pUnitType):
        """ GetDataType2(self: AcadTableClass, nRow: int, nCol: int, nContent: int) -> (AcValueDataType, AcValueUnitType) """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: AcadTableClass) -> AcadDictionary """
        pass

    def GetFieldId(self, row, col):
        """ GetFieldId(self: AcadTableClass, row: int, col: int) -> Int64 """
        pass

    def GetFieldId2(self, nRow, nCol, nContent):
        """ GetFieldId2(self: AcadTableClass, nRow: int, nCol: int, nContent: int) -> Int64 """
        pass

    def GetFormat(self, rowType):
        """ GetFormat(self: AcadTableClass, rowType: AcRowType) -> str """
        pass

    def GetFormula(self, nRow, nCol, nContent):
        """ GetFormula(self: AcadTableClass, nRow: int, nCol: int, nContent: int) -> str """
        pass

    def GetGridColor(self, gridLineType, rowType):
        """ GetGridColor(self: AcadTableClass, gridLineType: AcGridLineType, rowType: AcRowType) -> AcadAcCmColor """
        pass

    def GetGridColor2(self, nRow, nCol, nGridLineType):
        """ GetGridColor2(self: AcadTableClass, nRow: int, nCol: int, nGridLineType: AcGridLineType) -> AcadAcCmColor """
        pass

    def GetGridDoubleLineSpacing(self, nRow, nCol, nGridLineType):
        """ GetGridDoubleLineSpacing(self: AcadTableClass, nRow: int, nCol: int, nGridLineType: AcGridLineType) -> float """
        pass

    def GetGridLineStyle(self, nRow, nCol, nGridLineType):
        """ GetGridLineStyle(self: AcadTableClass, nRow: int, nCol: int, nGridLineType: AcGridLineType) -> AcGridLineStyle """
        pass

    def GetGridLinetype(self, nRow, nCol, nGridLineType):
        """ GetGridLinetype(self: AcadTableClass, nRow: int, nCol: int, nGridLineType: AcGridLineType) -> Int64 """
        pass

    def GetGridLineWeight(self, gridLineType, rowType):
        """ GetGridLineWeight(self: AcadTableClass, gridLineType: AcGridLineType, rowType: AcRowType) -> ACAD_LWEIGHT """
        pass

    def GetGridLineWeight2(self, nRow, nCol, nGridLineType):
        """ GetGridLineWeight2(self: AcadTableClass, nRow: int, nCol: int, nGridLineType: AcGridLineType) -> ACAD_LWEIGHT """
        pass

    def GetGridVisibility(self, gridLineType, rowType):
        """ GetGridVisibility(self: AcadTableClass, gridLineType: AcGridLineType, rowType: AcRowType) -> bool """
        pass

    def GetGridVisibility2(self, nRow, nCol, nGridLineType):
        """ GetGridVisibility2(self: AcadTableClass, nRow: int, nCol: int, nGridLineType: AcGridLineType) -> bool """
        pass

    def GetHasFormula(self, nRow, nCol, nContent):
        """ GetHasFormula(self: AcadTableClass, nRow: int, nCol: int, nContent: int) -> bool """
        pass

    def GetMargin(self, nRow, nCol, nMargin):
        """ GetMargin(self: AcadTableClass, nRow: int, nCol: int, nMargin: AcCellMargin) -> float """
        pass

    def GetMinimumColumnWidth(self, col):
        """ GetMinimumColumnWidth(self: AcadTableClass, col: int) -> float """
        pass

    def GetMinimumRowHeight(self, row):
        """ GetMinimumRowHeight(self: AcadTableClass, row: int) -> float """
        pass

    def GetOverride(self, nRow, nCol, nContent):
        """ GetOverride(self: AcadTableClass, nRow: int, nCol: int, nContent: int) -> AcCellProperty """
        pass

    def GetRotation(self, nRow, nCol, nContent):
        """ GetRotation(self: AcadTableClass, nRow: int, nCol: int, nContent: int) -> float """
        pass

    def GetRowHeight(self, row):
        """ GetRowHeight(self: AcadTableClass, row: int) -> float """
        pass

    def GetRowType(self, row):
        """ GetRowType(self: AcadTableClass, row: int) -> AcRowType """
        pass

    def GetScale(self, nRow, nCol, nContent):
        """ GetScale(self: AcadTableClass, nRow: int, nCol: int, nContent: int) -> float """
        pass

    def GetSubSelection(self, rowMin, rowMax, colMin, colMax):
        """ GetSubSelection(self: AcadTableClass) -> (int, int, int, int) """
        pass

    def GetText(self, row, col):
        """ GetText(self: AcadTableClass, row: int, col: int) -> str """
        pass

    def GetTextHeight(self, rowType):
        """ GetTextHeight(self: AcadTableClass, rowType: AcRowType) -> float """
        pass

    def GetTextHeight2(self, nRow, nCol, nContent):
        """ GetTextHeight2(self: AcadTableClass, nRow: int, nCol: int, nContent: int) -> float """
        pass

    def GetTextRotation(self, row, col):
        """ GetTextRotation(self: AcadTableClass, row: int, col: int) -> AcRotationAngle """
        pass

    def GetTextString(self, nRow, nCol, nContent):
        """ GetTextString(self: AcadTableClass, nRow: int, nCol: int, nContent: int) -> str """
        pass

    def GetTextStyle(self, rowType):
        """ GetTextStyle(self: AcadTableClass, rowType: AcRowType) -> str """
        pass

    def GetTextStyle2(self, nRow, nCol, nContent):
        """ GetTextStyle2(self: AcadTableClass, nRow: int, nCol: int, nContent: int) -> str """
        pass

    def GetValue(self, nRow, nCol, nContent):
        """ GetValue(self: AcadTableClass, nRow: int, nCol: int, nContent: int) -> object """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: AcadTableClass, AppName: str) -> (object, object) """
        pass

    def Highlight(self, HighlightFlag):
        """ Highlight(self: AcadTableClass, HighlightFlag: bool) """
        pass

    def HitTest(self, wpt, wviewVec, resultRowIndex, resultColumnIndex):
        """ HitTest(self: AcadTableClass, wpt: object, wviewVec: object) -> (bool, int, int) """
        pass

    def InsertColumns(self, col, Width, cols):
        """ InsertColumns(self: AcadTableClass, col: int, Width: float, cols: int) """
        pass

    def InsertColumnsAndInherit(self, col, nInheritFrom, nNumCols):
        """ InsertColumnsAndInherit(self: AcadTableClass, col: int, nInheritFrom: int, nNumCols: int) """
        pass

    def InsertRows(self, row, Height, Rows):
        """ InsertRows(self: AcadTableClass, row: int, Height: float, Rows: int) """
        pass

    def InsertRowsAndInherit(self, nIndex, nInheritFrom, nNumRows):
        """ InsertRowsAndInherit(self: AcadTableClass, nIndex: int, nInheritFrom: int, nNumRows: int) """
        pass

    def IntersectWith(self, IntersectObject, option):
        """ IntersectWith(self: AcadTableClass, IntersectObject: object, option: AcExtendOption) -> object """
        pass

    def IsContentEditable(self, nRow, nCol):
        """ IsContentEditable(self: AcadTableClass, nRow: int, nCol: int) -> bool """
        pass

    def IsEmpty(self, nRow, nCol):
        """ IsEmpty(self: AcadTableClass, nRow: int, nCol: int) -> bool """
        pass

    def IsFormatEditable(self, nRow, nCol):
        """ IsFormatEditable(self: AcadTableClass, nRow: int, nCol: int) -> bool """
        pass

    def IsMergeAllEnabled(self, nRow, nCol):
        """ IsMergeAllEnabled(self: AcadTableClass, nRow: int, nCol: int) -> bool """
        pass

    def IsMergedCell(self, row, col, minRow, maxRow, minCol, maxCol):
        """ IsMergedCell(self: AcadTableClass, row: int, col: int) -> (bool, int, int, int, int) """
        pass

    def MergeCells(self, minRow, maxRow, minCol, maxCol):
        """ MergeCells(self: AcadTableClass, minRow: int, maxRow: int, minCol: int, maxCol: int) """
        pass

    def Mirror(self, Point1, Point2):
        """ Mirror(self: AcadTableClass, Point1: object, Point2: object) -> object """
        pass

    def Mirror3D(self, Point1, Point2, point3):
        """ Mirror3D(self: AcadTableClass, Point1: object, Point2: object, point3: object) -> object """
        pass

    def Move(self, FromPoint, ToPoint):
        """ Move(self: AcadTableClass, FromPoint: object, ToPoint: object) """
        pass

    def MoveContent(self, nRow, nCol, nFromIndex, nToIndex):
        """ MoveContent(self: AcadTableClass, nRow: int, nCol: int, nFromIndex: int, nToIndex: int) """
        pass

    def RecomputeTableBlock(self, bForceUpdate):
        """ RecomputeTableBlock(self: AcadTableClass, bForceUpdate: bool) """
        pass

    def RemoveAllOverrides(self, nRow, nCol):
        """ RemoveAllOverrides(self: AcadTableClass, nRow: int, nCol: int) """
        pass

    def remove_Modified(self, A_1):
        """ remove_Modified(self: AcadTableClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def ReselectSubRegion(self):
        """ ReselectSubRegion(self: AcadTableClass) """
        pass

    def ResetCellValue(self, row, col):
        """ ResetCellValue(self: AcadTableClass, row: int, col: int) """
        pass

    def Rotate(self, BasePoint, RotationAngle):
        """ Rotate(self: AcadTableClass, BasePoint: object, RotationAngle: float) """
        pass

    def Rotate3D(self, Point1, Point2, RotationAngle):
        """ Rotate3D(self: AcadTableClass, Point1: object, Point2: object, RotationAngle: float) """
        pass

    def ScaleEntity(self, BasePoint, ScaleFactor):
        """ ScaleEntity(self: AcadTableClass, BasePoint: object, ScaleFactor: float) """
        pass

    def Select(self, wpt, wvwVec, wvwxVec, wxaper, wyaper, allowOutside, resultRowIndex, resultColumnIndex):
        """ Select(self: AcadTableClass, wpt: object, wvwVec: object, wvwxVec: object, wxaper: float, wyaper: float, allowOutside: bool) -> (int, int) """
        pass

    def SelectSubRegion(self, wpt1, wpt2, wvwVec, wvwxVec, seltype, bIncludeCurrentSelection, rowMin, rowMax, colMin, colMax):
        """ SelectSubRegion(self: AcadTableClass, wpt1: object, wpt2: object, wvwVec: object, wvwxVec: object, seltype: AcSelectType, bIncludeCurrentSelection: bool) -> (int, int, int, int) """
        pass

    def SetAlignment(self, rowTypes, cellAlignment):
        """ SetAlignment(self: AcadTableClass, rowTypes: int, cellAlignment: AcCellAlignment) """
        pass

    def SetAutoScale(self, row, col, bValue):
        """ SetAutoScale(self: AcadTableClass, row: int, col: int, bValue: bool) -> bool """
        pass

    def SetAutoScale2(self, nRow, nCol, nContent, bAutoFit):
        """ SetAutoScale2(self: AcadTableClass, nRow: int, nCol: int, nContent: int, bAutoFit: bool) """
        pass

    def SetBackgroundColor(self, rowTypes, pColor):
        """ SetBackgroundColor(self: AcadTableClass, rowTypes: int, pColor: AcadAcCmColor) """
        pass

    def SetBackgroundColorNone(self, rowTypes, bValue):
        """ SetBackgroundColorNone(self: AcadTableClass, rowTypes: int, bValue: bool) -> bool """
        pass

    def SetBlockAttributeValue(self, row, col, attdefId, bstrValue):
        """ SetBlockAttributeValue(self: AcadTableClass, row: int, col: int, attdefId: Int64, bstrValue: str) """
        pass

    def SetBlockAttributeValue2(self, nRow, nCol, nContent, blkId, Value):
        """ SetBlockAttributeValue2(self: AcadTableClass, nRow: int, nCol: int, nContent: int, blkId: Int64, Value: str) """
        pass

    def SetBlockRotation(self, row, col, blkRotation):
        """ SetBlockRotation(self: AcadTableClass, row: int, col: int, blkRotation: float) """
        pass

    def SetBlockScale(self, row, col, blkScale):
        """ SetBlockScale(self: AcadTableClass, row: int, col: int, blkScale: float) """
        pass

    def SetBlockTableRecordId(self, row, col, blkId, bAutoFit):
        """ SetBlockTableRecordId(self: AcadTableClass, row: int, col: int, blkId: Int64, bAutoFit: bool) """
        pass

    def SetBlockTableRecordId2(self, nRow, nCol, nContent, blkId, autoFit):
        """ SetBlockTableRecordId2(self: AcadTableClass, nRow: int, nCol: int, nContent: int, blkId: Int64, autoFit: bool) """
        pass

    def SetBreakHeight(self, nIndex, Height):
        """ SetBreakHeight(self: AcadTableClass, nIndex: int, Height: float) """
        pass

    def SetCellAlignment(self, row, col, cellAlignment):
        """ SetCellAlignment(self: AcadTableClass, row: int, col: int, cellAlignment: AcCellAlignment) """
        pass

    def SetCellBackgroundColor(self, row, col, pColor):
        """ SetCellBackgroundColor(self: AcadTableClass, row: int, col: int, pColor: AcadAcCmColor) """
        pass

    def SetCellBackgroundColorNone(self, row, col, bValue):
        """ SetCellBackgroundColorNone(self: AcadTableClass, row: int, col: int, bValue: bool) -> bool """
        pass

    def SetCellContentColor(self, row, col, pColor):
        """ SetCellContentColor(self: AcadTableClass, row: int, col: int, pColor: AcadAcCmColor) """
        pass

    def SetCellDataType(self, row, col, dataType, unitType):
        """ SetCellDataType(self: AcadTableClass, row: int, col: int, dataType: AcValueDataType, unitType: AcValueUnitType) """
        pass

    def SetCellFormat(self, row, col, pFormat):
        """ SetCellFormat(self: AcadTableClass, row: int, col: int, pFormat: str) """
        pass

    def SetCellGridColor(self, row, col, edges, pColor):
        """ SetCellGridColor(self: AcadTableClass, row: int, col: int, edges: int, pColor: AcadAcCmColor) """
        pass

    def SetCellGridLineWeight(self, row, col, edges, Lineweight):
        """ SetCellGridLineWeight(self: AcadTableClass, row: int, col: int, edges: int, Lineweight: ACAD_LWEIGHT) """
        pass

    def SetCellGridVisibility(self, row, col, edges, bValue):
        """ SetCellGridVisibility(self: AcadTableClass, row: int, col: int, edges: int, bValue: bool) """
        pass

    def SetCellState(self, nRow, nCol, nLock):
        """ SetCellState(self: AcadTableClass, nRow: int, nCol: int, nLock: AcCellState) """
        pass

    def SetCellStyle(self, nRow, nCol, szCellStyle):
        """ SetCellStyle(self: AcadTableClass, nRow: int, nCol: int, szCellStyle: str) """
        pass

    def SetCellTextHeight(self, row, col, TextHeight):
        """ SetCellTextHeight(self: AcadTableClass, row: int, col: int, TextHeight: float) """
        pass

    def SetCellTextStyle(self, row, col, bstrName):
        """ SetCellTextStyle(self: AcadTableClass, row: int, col: int, bstrName: str) """
        pass

    def SetCellType(self, row, col, CellType):
        """ SetCellType(self: AcadTableClass, row: int, col: int, CellType: AcCellType) """
        pass

    def SetCellValue(self, row, col, val):
        """ SetCellValue(self: AcadTableClass, row: int, col: int, val: object) """
        pass

    def SetCellValueFromText(self, row, col, val, nOption):
        """ SetCellValueFromText(self: AcadTableClass, row: int, col: int, val: str, nOption: AcParseOption) """
        pass

    def SetColumnName(self, nIndex, Name):
        """ SetColumnName(self: AcadTableClass, nIndex: int, Name: str) """
        pass

    def SetColumnWidth(self, col, Width):
        """ SetColumnWidth(self: AcadTableClass, col: int, Width: float) """
        pass

    def SetContentColor(self, rowTypes, pColor):
        """ SetContentColor(self: AcadTableClass, rowTypes: int, pColor: AcadAcCmColor) """
        pass

    def SetContentColor2(self, nRow, nCol, nContent, pColor):
        """ SetContentColor2(self: AcadTableClass, nRow: int, nCol: int, nContent: int, pColor: AcadAcCmColor) """
        pass

    def SetContentLayout(self, row, col, nLayout):
        """ SetContentLayout(self: AcadTableClass, row: int, col: int, nLayout: AcCellContentLayout) """
        pass

    def SetCustomData(self, nRow, nCol, szKey, data):
        """ SetCustomData(self: AcadTableClass, nRow: int, nCol: int, szKey: str, data: object) """
        pass

    def SetDataFormat(self, nRow, nCol, nContent, szFormat):
        """ SetDataFormat(self: AcadTableClass, nRow: int, nCol: int, nContent: int, szFormat: str) """
        pass

    def SetDataType(self, rowTypes, dataType, unitType):
        """ SetDataType(self: AcadTableClass, rowTypes: int, dataType: AcValueDataType, unitType: AcValueUnitType) """
        pass

    def SetDataType2(self, nRow, nCol, nContent, dataType, unitType):
        """ SetDataType2(self: AcadTableClass, nRow: int, nCol: int, nContent: int, dataType: AcValueDataType, unitType: AcValueUnitType) """
        pass

    def SetFieldId(self, row, col, fieldId):
        """ SetFieldId(self: AcadTableClass, row: int, col: int, fieldId: Int64) """
        pass

    def SetFieldId2(self, nRow, nCol, nContent, acDbObjectId, nflag):
        """ SetFieldId2(self: AcadTableClass, nRow: int, nCol: int, nContent: int, acDbObjectId: Int64, nflag: AcCellOption) """
        pass

    def SetFormat(self, rowTypes, pFormat):
        """ SetFormat(self: AcadTableClass, rowTypes: int, pFormat: str) """
        pass

    def SetFormula(self, nRow, nCol, nContent, pszFormula):
        """ SetFormula(self: AcadTableClass, nRow: int, nCol: int, nContent: int, pszFormula: str) """
        pass

    def SetGridColor(self, gridLineTypes, rowTypes, pColor):
        """ SetGridColor(self: AcadTableClass, gridLineTypes: int, rowTypes: int, pColor: AcadAcCmColor) """
        pass

    def SetGridColor2(self, nRow, nCol, nGridLineType, pColor):
        """ SetGridColor2(self: AcadTableClass, nRow: int, nCol: int, nGridLineType: AcGridLineType, pColor: AcadAcCmColor) """
        pass

    def SetGridDoubleLineSpacing(self, nRow, nCol, nGridLineType, fSpacing):
        """ SetGridDoubleLineSpacing(self: AcadTableClass, nRow: int, nCol: int, nGridLineType: AcGridLineType, fSpacing: float) """
        pass

    def SetGridLineStyle(self, nRow, nCol, nGridLineTypes, nLineStyle):
        """ SetGridLineStyle(self: AcadTableClass, nRow: int, nCol: int, nGridLineTypes: AcGridLineType, nLineStyle: AcGridLineStyle) """
        pass

    def SetGridLinetype(self, nRow, nCol, nGridLineType, idLinetype):
        """ SetGridLinetype(self: AcadTableClass, nRow: int, nCol: int, nGridLineType: AcGridLineType, idLinetype: Int64) """
        pass

    def SetGridLineWeight(self, gridLineTypes, rowTypes, Lineweight):
        """ SetGridLineWeight(self: AcadTableClass, gridLineTypes: int, rowTypes: int, Lineweight: ACAD_LWEIGHT) """
        pass

    def SetGridLineWeight2(self, nRow, nCol, nGridLineType, Lineweight):
        """ SetGridLineWeight2(self: AcadTableClass, nRow: int, nCol: int, nGridLineType: AcGridLineType, Lineweight: ACAD_LWEIGHT) """
        pass

    def SetGridVisibility(self, gridLineTypes, rowTypes, bValue):
        """ SetGridVisibility(self: AcadTableClass, gridLineTypes: int, rowTypes: int, bValue: bool) """
        pass

    def SetGridVisibility2(self, nRow, nCol, nGridLineType, bVisible):
        """ SetGridVisibility2(self: AcadTableClass, nRow: int, nCol: int, nGridLineType: AcGridLineType, bVisible: bool) """
        pass

    def SetMargin(self, nRow, nCol, nMargins, fMargin):
        """ SetMargin(self: AcadTableClass, nRow: int, nCol: int, nMargins: AcCellMargin, fMargin: float) """
        pass

    def SetOverride(self, nRow, nCol, nContent, nProp):
        """ SetOverride(self: AcadTableClass, nRow: int, nCol: int, nContent: int, nProp: AcCellProperty) """
        pass

    def SetRotation(self, nRow, nCol, nContent, Value):
        """ SetRotation(self: AcadTableClass, nRow: int, nCol: int, nContent: int, Value: float) """
        pass

    def SetRowHeight(self, row, Height):
        """ SetRowHeight(self: AcadTableClass, row: int, Height: float) """
        pass

    def SetScale(self, nRow, nCol, nContent, scale):
        """ SetScale(self: AcadTableClass, nRow: int, nCol: int, nContent: int, scale: float) """
        pass

    def SetSubSelection(self, rowMin, rowMax, colMin, colMax):
        """ SetSubSelection(self: AcadTableClass, rowMin: int, rowMax: int, colMin: int, colMax: int) """
        pass

    def SetText(self, row, col, pStr):
        """ SetText(self: AcadTableClass, row: int, col: int, pStr: str) """
        pass

    def SetTextHeight(self, rowTypes, TextHeight):
        """ SetTextHeight(self: AcadTableClass, rowTypes: int, TextHeight: float) """
        pass

    def SetTextHeight2(self, nRow, nCol, nContent, Height):
        """ SetTextHeight2(self: AcadTableClass, nRow: int, nCol: int, nContent: int, Height: float) """
        pass

    def SetTextRotation(self, row, col, TextRotation):
        """ SetTextRotation(self: AcadTableClass, row: int, col: int, TextRotation: AcRotationAngle) """
        pass

    def SetTextString(self, nRow, nCol, nContent, Text):
        """ SetTextString(self: AcadTableClass, nRow: int, nCol: int, nContent: int, Text: str) """
        pass

    def SetTextStyle(self, rowTypes, bstrName):
        """ SetTextStyle(self: AcadTableClass, rowTypes: int, bstrName: str) """
        pass

    def SetTextStyle2(self, nRow, nCol, nContent, bstrStyleName):
        """ SetTextStyle2(self: AcadTableClass, nRow: int, nCol: int, nContent: int, bstrStyleName: str) """
        pass

    def SetToolTip(self, nRow, nCol, tip):
        """ SetToolTip(self: AcadTableClass, nRow: int, nCol: int, tip: str) """
        pass

    def SetValue(self, nRow, nCol, nContent, acValue):
        """ SetValue(self: AcadTableClass, nRow: int, nCol: int, nContent: int, acValue: object) """
        pass

    def SetValueFromText(self, nRow, nCol, nContent, szText, nOption):
        """ SetValueFromText(self: AcadTableClass, nRow: int, nCol: int, nContent: int, szText: str, nOption: AcParseOption) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: AcadTableClass, XDataType: object, XDataValue: object) """
        pass

    def TransformBy(self, TransformationMatrix):
        """ TransformBy(self: AcadTableClass, TransformationMatrix: object) """
        pass

    def UnmergeCells(self, minRow, maxRow, minCol, maxCol):
        """ UnmergeCells(self: AcadTableClass, minRow: int, maxRow: int, minCol: int, maxCol: int) """
        pass

    def Update(self):
        """ Update(self: AcadTableClass) """
        pass

    AllowManualHeights = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AllowManualHeights(self: AcadTableClass) -> bool

Set: AllowManualHeights(self: AcadTableClass) = value
"""

    AllowManualPositions = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AllowManualPositions(self: AcadTableClass) -> bool

Set: AllowManualPositions(self: AcadTableClass) = value
"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: AcadTableClass) -> object

"""

    BreaksEnabled = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BreaksEnabled(self: AcadTableClass) -> bool

Set: BreaksEnabled(self: AcadTableClass) = value
"""

    BreakSpacing = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BreakSpacing(self: AcadTableClass) -> float

Set: BreakSpacing(self: AcadTableClass) = value
"""

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: AcadTableClass) -> ACAD_COLOR

Set: color(self: AcadTableClass) = value
"""

    Columns = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Columns(self: AcadTableClass) -> int

Set: Columns(self: AcadTableClass) = value
"""

    ColumnWidth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Set: ColumnWidth(self: AcadTableClass) = value
"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: AcadTableClass) -> AcadDatabase

"""

    Direction = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Direction(self: AcadTableClass) -> object

Set: Direction(self: AcadTableClass) = value
"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: AcadTableClass) -> object

"""

    EnableBreak = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Set: EnableBreak(self: AcadTableClass) = value
"""

    EntityName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityName(self: AcadTableClass) -> str

"""

    EntityTransparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityTransparency(self: AcadTableClass) -> str

Set: EntityTransparency(self: AcadTableClass) = value
"""

    EntityType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityType(self: AcadTableClass) -> int

"""

    FlowDirection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FlowDirection(self: AcadTableClass) -> AcTableDirection

Set: FlowDirection(self: AcadTableClass) = value
"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: AcadTableClass) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: AcadTableClass) -> bool

"""

    HasSubSelection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasSubSelection(self: AcadTableClass) -> bool

"""

    HeaderSuppressed = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HeaderSuppressed(self: AcadTableClass) -> bool

Set: HeaderSuppressed(self: AcadTableClass) = value
"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: AcadTableClass) -> float

Set: Height(self: AcadTableClass) = value
"""

    HorzCellMargin = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HorzCellMargin(self: AcadTableClass) -> float

Set: HorzCellMargin(self: AcadTableClass) = value
"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: AcadTableClass) -> AcadHyperlinks

"""

    InsertionPoint = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: InsertionPoint(self: AcadTableClass) -> object

Set: InsertionPoint(self: AcadTableClass) = value
"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layer(self: AcadTableClass) -> str

Set: Layer(self: AcadTableClass) = value
"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: AcadTableClass) -> str

Set: Linetype(self: AcadTableClass) = value
"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeScale(self: AcadTableClass) -> float

Set: LinetypeScale(self: AcadTableClass) = value
"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: AcadTableClass) -> ACAD_LWEIGHT

Set: Lineweight(self: AcadTableClass) = value
"""

    Material = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Material(self: AcadTableClass) -> str

Set: Material(self: AcadTableClass) = value
"""

    MinimumTableHeight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MinimumTableHeight(self: AcadTableClass) -> float

"""

    MinimumTableWidth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: MinimumTableWidth(self: AcadTableClass) -> float

"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: AcadTableClass) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: AcadTableClass) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: AcadTableClass) -> Int64

"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: AcadTableClass) -> str

Set: PlotStyleName(self: AcadTableClass) = value
"""

    RegenerateTableSuppressed = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RegenerateTableSuppressed(self: AcadTableClass) -> bool

Set: RegenerateTableSuppressed(self: AcadTableClass) = value
"""

    RepeatBottomLabels = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RepeatBottomLabels(self: AcadTableClass) -> bool

Set: RepeatBottomLabels(self: AcadTableClass) = value
"""

    RepeatTopLabels = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RepeatTopLabels(self: AcadTableClass) -> bool

Set: RepeatTopLabels(self: AcadTableClass) = value
"""

    RowHeight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Set: RowHeight(self: AcadTableClass) = value
"""

    Rows = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Rows(self: AcadTableClass) -> int

Set: Rows(self: AcadTableClass) = value
"""

    StyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: StyleName(self: AcadTableClass) -> str

Set: StyleName(self: AcadTableClass) = value
"""

    TableBreakFlowDirection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TableBreakFlowDirection(self: AcadTableClass) -> AcTableFlowDirection

Set: TableBreakFlowDirection(self: AcadTableClass) = value
"""

    TableBreakHeight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TableBreakHeight(self: AcadTableClass) -> float

Set: TableBreakHeight(self: AcadTableClass) = value
"""

    TableStyleOverrides = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TableStyleOverrides(self: AcadTableClass) -> object

"""

    TitleSuppressed = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TitleSuppressed(self: AcadTableClass) -> bool

Set: TitleSuppressed(self: AcadTableClass) = value
"""

    TrueColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TrueColor(self: AcadTableClass) -> AcadAcCmColor

Set: TrueColor(self: AcadTableClass) = value
"""

    VertCellMargin = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VertCellMargin(self: AcadTableClass) -> float

Set: VertCellMargin(self: AcadTableClass) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: AcadTableClass) -> bool

Set: Visible(self: AcadTableClass) = value
"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: AcadTableClass) -> float

Set: Width(self: AcadTableClass) = value
"""


    Modified = None


class IAcadTableStyle(IAcadObject):
    # no doc
    def CreateCellStyle(self, bstrCellStyle):
        """ CreateCellStyle(self: IAcadTableStyle, bstrCellStyle: str) """
        pass

    def CreateCellStyleFromStyle(self, bstrCellStyle, bstrSourceCellStyle):
        """ CreateCellStyleFromStyle(self: IAcadTableStyle, bstrCellStyle: str, bstrSourceCellStyle: str) """
        pass

    def Delete(self):
        """ Delete(self: IAcadTableStyle) """
        pass

    def DeleteCellStyle(self, bstrCellStyle):
        """ DeleteCellStyle(self: IAcadTableStyle, bstrCellStyle: str) """
        pass

    def EnableMergeAll(self, bstrCellStyle, bEnable):
        """ EnableMergeAll(self: IAcadTableStyle, bstrCellStyle: str, bEnable: bool) """
        pass

    def Erase(self):
        """ Erase(self: IAcadTableStyle) """
        pass

    def GetAlignment(self, rowType):
        """ GetAlignment(self: IAcadTableStyle, rowType: AcRowType) -> AcCellAlignment """
        pass

    def GetAlignment2(self, bstrCellStyle):
        """ GetAlignment2(self: IAcadTableStyle, bstrCellStyle: str) -> AcCellAlignment """
        pass

    def GetBackgroundColor(self, rowType):
        """ GetBackgroundColor(self: IAcadTableStyle, rowType: AcRowType) -> AcadAcCmColor """
        pass

    def GetBackgroundColor2(self, bstrCellStyle):
        """ GetBackgroundColor2(self: IAcadTableStyle, bstrCellStyle: str) -> AcadAcCmColor """
        pass

    def GetBackgroundColorNone(self, rowType):
        """ GetBackgroundColorNone(self: IAcadTableStyle, rowType: AcRowType) -> bool """
        pass

    def GetCellClass(self, bstrCellStyle):
        """ GetCellClass(self: IAcadTableStyle, bstrCellStyle: str) -> int """
        pass

    def GetCellStyles(self, cellStylesArray):
        """ GetCellStyles(self: IAcadTableStyle, cellStylesArray: object) -> object """
        pass

    def GetColor(self, rowType):
        """ GetColor(self: IAcadTableStyle, rowType: AcRowType) -> AcadAcCmColor """
        pass

    def GetColor2(self, bstrCellStyle):
        """ GetColor2(self: IAcadTableStyle, bstrCellStyle: str) -> AcadAcCmColor """
        pass

    def GetDataType(self, rowType, pDataType, pUnitType):
        """ GetDataType(self: IAcadTableStyle, rowType: AcRowType) -> (AcValueDataType, AcValueUnitType) """
        pass

    def GetDataType2(self, bstrCellStyle, pDataType, pUnitType):
        """ GetDataType2(self: IAcadTableStyle, bstrCellStyle: str) -> (AcValueDataType, AcValueUnitType) """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: IAcadTableStyle) -> AcadDictionary """
        pass

    def GetFormat(self, rowType):
        """ GetFormat(self: IAcadTableStyle, rowType: AcRowType) -> str """
        pass

    def GetFormat2(self, bstrCellStyle, pbstrFormat):
        """ GetFormat2(self: IAcadTableStyle, bstrCellStyle: str) -> str """
        pass

    def GetGridColor(self, gridLineType, rowType):
        """ GetGridColor(self: IAcadTableStyle, gridLineType: AcGridLineType, rowType: AcRowType) -> AcadAcCmColor """
        pass

    def GetGridColor2(self, bstrCellStyle, gridLineType):
        """ GetGridColor2(self: IAcadTableStyle, bstrCellStyle: str, gridLineType: AcGridLineType) -> AcadAcCmColor """
        pass

    def GetGridLineWeight(self, gridLineType, rowType):
        """ GetGridLineWeight(self: IAcadTableStyle, gridLineType: AcGridLineType, rowType: AcRowType) -> ACAD_LWEIGHT """
        pass

    def GetGridLineWeight2(self, bstrCellStyle, gridLineType):
        """ GetGridLineWeight2(self: IAcadTableStyle, bstrCellStyle: str, gridLineType: AcGridLineType) -> ACAD_LWEIGHT """
        pass

    def GetGridVisibility(self, gridLineType, rowType):
        """ GetGridVisibility(self: IAcadTableStyle, gridLineType: AcGridLineType, rowType: AcRowType) -> bool """
        pass

    def GetGridVisibility2(self, bstrCellStyle, gridLineType):
        """ GetGridVisibility2(self: IAcadTableStyle, bstrCellStyle: str, gridLineType: AcGridLineType) -> bool """
        pass

    def GetIsCellStyleInUse(self, pszCellStyle):
        """ GetIsCellStyleInUse(self: IAcadTableStyle, pszCellStyle: str) -> bool """
        pass

    def GetIsMergeAllEnabled(self, bstrCellStyle):
        """ GetIsMergeAllEnabled(self: IAcadTableStyle, bstrCellStyle: str) -> bool """
        pass

    def GetRotation(self, bstrCellStyle):
        """ GetRotation(self: IAcadTableStyle, bstrCellStyle: str) -> float """
        pass

    def GetTextHeight(self, rowType):
        """ GetTextHeight(self: IAcadTableStyle, rowType: AcRowType) -> float """
        pass

    def GetTextHeight2(self, bstrCellStyle):
        """ GetTextHeight2(self: IAcadTableStyle, bstrCellStyle: str) -> float """
        pass

    def GetTextStyle(self, rowType):
        """ GetTextStyle(self: IAcadTableStyle, rowType: AcRowType) -> str """
        pass

    def GetTextStyleId(self, bstrCellStyle):
        """ GetTextStyleId(self: IAcadTableStyle, bstrCellStyle: str) -> Int64 """
        pass

    def GetUniqueCellStyleName(self, pszBaseName):
        """ GetUniqueCellStyleName(self: IAcadTableStyle, pszBaseName: str) -> str """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: IAcadTableStyle, AppName: str) -> (object, object) """
        pass

    def RenameCellStyle(self, bstrOldName, bstrNewName):
        """ RenameCellStyle(self: IAcadTableStyle, bstrOldName: str, bstrNewName: str) """
        pass

    def SetAlignment(self, rowTypes, cellAlignment):
        """ SetAlignment(self: IAcadTableStyle, rowTypes: int, cellAlignment: AcCellAlignment) """
        pass

    def SetAlignment2(self, bstrCellStyle, cellAlignment):
        """ SetAlignment2(self: IAcadTableStyle, bstrCellStyle: str, cellAlignment: AcCellAlignment) """
        pass

    def SetBackgroundColor(self, rowTypes, pColor):
        """ SetBackgroundColor(self: IAcadTableStyle, rowTypes: int, pColor: AcadAcCmColor) """
        pass

    def SetBackgroundColor2(self, bstrCellStyle, color):
        """ SetBackgroundColor2(self: IAcadTableStyle, bstrCellStyle: str, color: AcadAcCmColor) """
        pass

    def SetBackgroundColorNone(self, rowTypes, bValue):
        """ SetBackgroundColorNone(self: IAcadTableStyle, rowTypes: int, bValue: bool) -> bool """
        pass

    def SetCellClass(self, bstrCellStyle, cellClass):
        """ SetCellClass(self: IAcadTableStyle, bstrCellStyle: str, cellClass: int) """
        pass

    def SetColor(self, rowTypes, pColor):
        """ SetColor(self: IAcadTableStyle, rowTypes: int, pColor: AcadAcCmColor) """
        pass

    def SetColor2(self, bstrCellStyle, color):
        """ SetColor2(self: IAcadTableStyle, bstrCellStyle: str, color: AcadAcCmColor) """
        pass

    def SetDataType(self, rowTypes, nDataType, nUnitType):
        """ SetDataType(self: IAcadTableStyle, rowTypes: int, nDataType: AcValueDataType, nUnitType: AcValueUnitType) """
        pass

    def SetDataType2(self, bstrCellStyle, nDataType, nUnitType):
        """ SetDataType2(self: IAcadTableStyle, bstrCellStyle: str, nDataType: AcValueDataType, nUnitType: AcValueUnitType) """
        pass

    def SetFormat(self, rowTypes, val):
        """ SetFormat(self: IAcadTableStyle, rowTypes: int, val: str) """
        pass

    def SetFormat2(self, bstrCellStyle, bstrFormat):
        """ SetFormat2(self: IAcadTableStyle, bstrCellStyle: str, bstrFormat: str) """
        pass

    def SetGridColor(self, gridLineTypes, rowTypes, pColor):
        """ SetGridColor(self: IAcadTableStyle, gridLineTypes: int, rowTypes: int, pColor: AcadAcCmColor) """
        pass

    def SetGridColor2(self, bstrCellStyle, gridLineTypes, pColor):
        """ SetGridColor2(self: IAcadTableStyle, bstrCellStyle: str, gridLineTypes: AcGridLineType, pColor: AcadAcCmColor) """
        pass

    def SetGridLineWeight(self, gridLineTypes, rowTypes, Lineweight):
        """ SetGridLineWeight(self: IAcadTableStyle, gridLineTypes: int, rowTypes: int, Lineweight: ACAD_LWEIGHT) """
        pass

    def SetGridLineWeight2(self, bstrCellStyle, gridLineTypes, Lineweight):
        """ SetGridLineWeight2(self: IAcadTableStyle, bstrCellStyle: str, gridLineTypes: AcGridLineType, Lineweight: ACAD_LWEIGHT) """
        pass

    def SetGridVisibility(self, gridLineTypes, rowTypes, bValue):
        """ SetGridVisibility(self: IAcadTableStyle, gridLineTypes: int, rowTypes: int, bValue: bool) """
        pass

    def SetGridVisibility2(self, bstrCellStyle, gridLineTypes, bValue):
        """ SetGridVisibility2(self: IAcadTableStyle, bstrCellStyle: str, gridLineTypes: AcGridLineType, bValue: bool) """
        pass

    def SetRotation(self, bstrCellStyle, Rotation):
        """ SetRotation(self: IAcadTableStyle, bstrCellStyle: str, Rotation: float) """
        pass

    def SetTemplateId(self, val, option):
        """ SetTemplateId(self: IAcadTableStyle, val: Int64, option: AcMergeCellStyleOption) """
        pass

    def SetTextHeight(self, rowTypes, TextHeight):
        """ SetTextHeight(self: IAcadTableStyle, rowTypes: int, TextHeight: float) """
        pass

    def SetTextHeight2(self, bstrCellStyle, Height):
        """ SetTextHeight2(self: IAcadTableStyle, bstrCellStyle: str, Height: float) """
        pass

    def SetTextStyle(self, rowTypes, bstrName):
        """ SetTextStyle(self: IAcadTableStyle, rowTypes: int, bstrName: str) """
        pass

    def SetTextStyleId(self, bstrCellStyle, val):
        """ SetTextStyleId(self: IAcadTableStyle, bstrCellStyle: str, val: Int64) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: IAcadTableStyle, XDataType: object, XDataValue: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IAcadTableStyle) -> object

"""

    BitFlags = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BitFlags(self: IAcadTableStyle) -> int

Set: BitFlags(self: IAcadTableStyle) = value
"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: IAcadTableStyle) -> AcadDatabase

"""

    Description = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Description(self: IAcadTableStyle) -> str

Set: Description(self: IAcadTableStyle) = value
"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: IAcadTableStyle) -> object

"""

    FlowDirection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FlowDirection(self: IAcadTableStyle) -> AcTableDirection

Set: FlowDirection(self: IAcadTableStyle) = value
"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: IAcadTableStyle) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: IAcadTableStyle) -> bool

"""

    HeaderSuppressed = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HeaderSuppressed(self: IAcadTableStyle) -> bool

Set: HeaderSuppressed(self: IAcadTableStyle) = value
"""

    HorzCellMargin = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HorzCellMargin(self: IAcadTableStyle) -> float

Set: HorzCellMargin(self: IAcadTableStyle) = value
"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: IAcadTableStyle) -> str

Set: Name(self: IAcadTableStyle) = value
"""

    NumCellStyles = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: NumCellStyles(self: IAcadTableStyle) -> int

"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: IAcadTableStyle) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: IAcadTableStyle) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: IAcadTableStyle) -> Int64

"""

    TemplateId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TemplateId(self: IAcadTableStyle) -> Int64

Set: TemplateId(self: IAcadTableStyle) = value
"""

    TitleSuppressed = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TitleSuppressed(self: IAcadTableStyle) -> bool

Set: TitleSuppressed(self: IAcadTableStyle) = value
"""

    VertCellMargin = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VertCellMargin(self: IAcadTableStyle) -> float

Set: VertCellMargin(self: IAcadTableStyle) = value
"""



class AcadTableStyle(IAcadTableStyle, IAcadObject, IAcadObjectEvents_Event):
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class AcadTableStyleClass(__ComObject):
    """ AcadTableStyleClass() """
    def add_Modified(self, A_1):
        """ add_Modified(self: AcadTableStyleClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def CreateCellStyle(self, bstrCellStyle):
        """ CreateCellStyle(self: AcadTableStyleClass, bstrCellStyle: str) """
        pass

    def CreateCellStyleFromStyle(self, bstrCellStyle, bstrSourceCellStyle):
        """ CreateCellStyleFromStyle(self: AcadTableStyleClass, bstrCellStyle: str, bstrSourceCellStyle: str) """
        pass

    def Delete(self):
        """ Delete(self: AcadTableStyleClass) """
        pass

    def DeleteCellStyle(self, bstrCellStyle):
        """ DeleteCellStyle(self: AcadTableStyleClass, bstrCellStyle: str) """
        pass

    def EnableMergeAll(self, bstrCellStyle, bEnable):
        """ EnableMergeAll(self: AcadTableStyleClass, bstrCellStyle: str, bEnable: bool) """
        pass

    def Erase(self):
        """ Erase(self: AcadTableStyleClass) """
        pass

    def GetAlignment(self, rowType):
        """ GetAlignment(self: AcadTableStyleClass, rowType: AcRowType) -> AcCellAlignment """
        pass

    def GetAlignment2(self, bstrCellStyle):
        """ GetAlignment2(self: AcadTableStyleClass, bstrCellStyle: str) -> AcCellAlignment """
        pass

    def GetBackgroundColor(self, rowType):
        """ GetBackgroundColor(self: AcadTableStyleClass, rowType: AcRowType) -> AcadAcCmColor """
        pass

    def GetBackgroundColor2(self, bstrCellStyle):
        """ GetBackgroundColor2(self: AcadTableStyleClass, bstrCellStyle: str) -> AcadAcCmColor """
        pass

    def GetBackgroundColorNone(self, rowType):
        """ GetBackgroundColorNone(self: AcadTableStyleClass, rowType: AcRowType) -> bool """
        pass

    def GetCellClass(self, bstrCellStyle):
        """ GetCellClass(self: AcadTableStyleClass, bstrCellStyle: str) -> int """
        pass

    def GetCellStyles(self, cellStylesArray):
        """ GetCellStyles(self: AcadTableStyleClass, cellStylesArray: object) -> object """
        pass

    def GetColor(self, rowType):
        """ GetColor(self: AcadTableStyleClass, rowType: AcRowType) -> AcadAcCmColor """
        pass

    def GetColor2(self, bstrCellStyle):
        """ GetColor2(self: AcadTableStyleClass, bstrCellStyle: str) -> AcadAcCmColor """
        pass

    def GetDataType(self, rowType, pDataType, pUnitType):
        """ GetDataType(self: AcadTableStyleClass, rowType: AcRowType) -> (AcValueDataType, AcValueUnitType) """
        pass

    def GetDataType2(self, bstrCellStyle, pDataType, pUnitType):
        """ GetDataType2(self: AcadTableStyleClass, bstrCellStyle: str) -> (AcValueDataType, AcValueUnitType) """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: AcadTableStyleClass) -> AcadDictionary """
        pass

    def GetFormat(self, rowType):
        """ GetFormat(self: AcadTableStyleClass, rowType: AcRowType) -> str """
        pass

    def GetFormat2(self, bstrCellStyle, pbstrFormat):
        """ GetFormat2(self: AcadTableStyleClass, bstrCellStyle: str) -> str """
        pass

    def GetGridColor(self, gridLineType, rowType):
        """ GetGridColor(self: AcadTableStyleClass, gridLineType: AcGridLineType, rowType: AcRowType) -> AcadAcCmColor """
        pass

    def GetGridColor2(self, bstrCellStyle, gridLineType):
        """ GetGridColor2(self: AcadTableStyleClass, bstrCellStyle: str, gridLineType: AcGridLineType) -> AcadAcCmColor """
        pass

    def GetGridLineWeight(self, gridLineType, rowType):
        """ GetGridLineWeight(self: AcadTableStyleClass, gridLineType: AcGridLineType, rowType: AcRowType) -> ACAD_LWEIGHT """
        pass

    def GetGridLineWeight2(self, bstrCellStyle, gridLineType):
        """ GetGridLineWeight2(self: AcadTableStyleClass, bstrCellStyle: str, gridLineType: AcGridLineType) -> ACAD_LWEIGHT """
        pass

    def GetGridVisibility(self, gridLineType, rowType):
        """ GetGridVisibility(self: AcadTableStyleClass, gridLineType: AcGridLineType, rowType: AcRowType) -> bool """
        pass

    def GetGridVisibility2(self, bstrCellStyle, gridLineType):
        """ GetGridVisibility2(self: AcadTableStyleClass, bstrCellStyle: str, gridLineType: AcGridLineType) -> bool """
        pass

    def GetIsCellStyleInUse(self, pszCellStyle):
        """ GetIsCellStyleInUse(self: AcadTableStyleClass, pszCellStyle: str) -> bool """
        pass

    def GetIsMergeAllEnabled(self, bstrCellStyle):
        """ GetIsMergeAllEnabled(self: AcadTableStyleClass, bstrCellStyle: str) -> bool """
        pass

    def GetRotation(self, bstrCellStyle):
        """ GetRotation(self: AcadTableStyleClass, bstrCellStyle: str) -> float """
        pass

    def GetTextHeight(self, rowType):
        """ GetTextHeight(self: AcadTableStyleClass, rowType: AcRowType) -> float """
        pass

    def GetTextHeight2(self, bstrCellStyle):
        """ GetTextHeight2(self: AcadTableStyleClass, bstrCellStyle: str) -> float """
        pass

    def GetTextStyle(self, rowType):
        """ GetTextStyle(self: AcadTableStyleClass, rowType: AcRowType) -> str """
        pass

    def GetTextStyleId(self, bstrCellStyle):
        """ GetTextStyleId(self: AcadTableStyleClass, bstrCellStyle: str) -> Int64 """
        pass

    def GetUniqueCellStyleName(self, pszBaseName):
        """ GetUniqueCellStyleName(self: AcadTableStyleClass, pszBaseName: str) -> str """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: AcadTableStyleClass, AppName: str) -> (object, object) """
        pass

    def remove_Modified(self, A_1):
        """ remove_Modified(self: AcadTableStyleClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def RenameCellStyle(self, bstrOldName, bstrNewName):
        """ RenameCellStyle(self: AcadTableStyleClass, bstrOldName: str, bstrNewName: str) """
        pass

    def SetAlignment(self, rowTypes, cellAlignment):
        """ SetAlignment(self: AcadTableStyleClass, rowTypes: int, cellAlignment: AcCellAlignment) """
        pass

    def SetAlignment2(self, bstrCellStyle, cellAlignment):
        """ SetAlignment2(self: AcadTableStyleClass, bstrCellStyle: str, cellAlignment: AcCellAlignment) """
        pass

    def SetBackgroundColor(self, rowTypes, pColor):
        """ SetBackgroundColor(self: AcadTableStyleClass, rowTypes: int, pColor: AcadAcCmColor) """
        pass

    def SetBackgroundColor2(self, bstrCellStyle, color):
        """ SetBackgroundColor2(self: AcadTableStyleClass, bstrCellStyle: str, color: AcadAcCmColor) """
        pass

    def SetBackgroundColorNone(self, rowTypes, bValue):
        """ SetBackgroundColorNone(self: AcadTableStyleClass, rowTypes: int, bValue: bool) -> bool """
        pass

    def SetCellClass(self, bstrCellStyle, cellClass):
        """ SetCellClass(self: AcadTableStyleClass, bstrCellStyle: str, cellClass: int) """
        pass

    def SetColor(self, rowTypes, pColor):
        """ SetColor(self: AcadTableStyleClass, rowTypes: int, pColor: AcadAcCmColor) """
        pass

    def SetColor2(self, bstrCellStyle, color):
        """ SetColor2(self: AcadTableStyleClass, bstrCellStyle: str, color: AcadAcCmColor) """
        pass

    def SetDataType(self, rowTypes, nDataType, nUnitType):
        """ SetDataType(self: AcadTableStyleClass, rowTypes: int, nDataType: AcValueDataType, nUnitType: AcValueUnitType) """
        pass

    def SetDataType2(self, bstrCellStyle, nDataType, nUnitType):
        """ SetDataType2(self: AcadTableStyleClass, bstrCellStyle: str, nDataType: AcValueDataType, nUnitType: AcValueUnitType) """
        pass

    def SetFormat(self, rowTypes, val):
        """ SetFormat(self: AcadTableStyleClass, rowTypes: int, val: str) """
        pass

    def SetFormat2(self, bstrCellStyle, bstrFormat):
        """ SetFormat2(self: AcadTableStyleClass, bstrCellStyle: str, bstrFormat: str) """
        pass

    def SetGridColor(self, gridLineTypes, rowTypes, pColor):
        """ SetGridColor(self: AcadTableStyleClass, gridLineTypes: int, rowTypes: int, pColor: AcadAcCmColor) """
        pass

    def SetGridColor2(self, bstrCellStyle, gridLineTypes, pColor):
        """ SetGridColor2(self: AcadTableStyleClass, bstrCellStyle: str, gridLineTypes: AcGridLineType, pColor: AcadAcCmColor) """
        pass

    def SetGridLineWeight(self, gridLineTypes, rowTypes, Lineweight):
        """ SetGridLineWeight(self: AcadTableStyleClass, gridLineTypes: int, rowTypes: int, Lineweight: ACAD_LWEIGHT) """
        pass

    def SetGridLineWeight2(self, bstrCellStyle, gridLineTypes, Lineweight):
        """ SetGridLineWeight2(self: AcadTableStyleClass, bstrCellStyle: str, gridLineTypes: AcGridLineType, Lineweight: ACAD_LWEIGHT) """
        pass

    def SetGridVisibility(self, gridLineTypes, rowTypes, bValue):
        """ SetGridVisibility(self: AcadTableStyleClass, gridLineTypes: int, rowTypes: int, bValue: bool) """
        pass

    def SetGridVisibility2(self, bstrCellStyle, gridLineTypes, bValue):
        """ SetGridVisibility2(self: AcadTableStyleClass, bstrCellStyle: str, gridLineTypes: AcGridLineType, bValue: bool) """
        pass

    def SetRotation(self, bstrCellStyle, Rotation):
        """ SetRotation(self: AcadTableStyleClass, bstrCellStyle: str, Rotation: float) """
        pass

    def SetTemplateId(self, val, option):
        """ SetTemplateId(self: AcadTableStyleClass, val: Int64, option: AcMergeCellStyleOption) """
        pass

    def SetTextHeight(self, rowTypes, TextHeight):
        """ SetTextHeight(self: AcadTableStyleClass, rowTypes: int, TextHeight: float) """
        pass

    def SetTextHeight2(self, bstrCellStyle, Height):
        """ SetTextHeight2(self: AcadTableStyleClass, bstrCellStyle: str, Height: float) """
        pass

    def SetTextStyle(self, rowTypes, bstrName):
        """ SetTextStyle(self: AcadTableStyleClass, rowTypes: int, bstrName: str) """
        pass

    def SetTextStyleId(self, bstrCellStyle, val):
        """ SetTextStyleId(self: AcadTableStyleClass, bstrCellStyle: str, val: Int64) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: AcadTableStyleClass, XDataType: object, XDataValue: object) """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: AcadTableStyleClass) -> object

"""

    BitFlags = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BitFlags(self: AcadTableStyleClass) -> int

Set: BitFlags(self: AcadTableStyleClass) = value
"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: AcadTableStyleClass) -> AcadDatabase

"""

    Description = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Description(self: AcadTableStyleClass) -> str

Set: Description(self: AcadTableStyleClass) = value
"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: AcadTableStyleClass) -> object

"""

    FlowDirection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: FlowDirection(self: AcadTableStyleClass) -> AcTableDirection

Set: FlowDirection(self: AcadTableStyleClass) = value
"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: AcadTableStyleClass) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: AcadTableStyleClass) -> bool

"""

    HeaderSuppressed = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HeaderSuppressed(self: AcadTableStyleClass) -> bool

Set: HeaderSuppressed(self: AcadTableStyleClass) = value
"""

    HorzCellMargin = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HorzCellMargin(self: AcadTableStyleClass) -> float

Set: HorzCellMargin(self: AcadTableStyleClass) = value
"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: AcadTableStyleClass) -> str

Set: Name(self: AcadTableStyleClass) = value
"""

    NumCellStyles = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: NumCellStyles(self: AcadTableStyleClass) -> int

"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: AcadTableStyleClass) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: AcadTableStyleClass) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: AcadTableStyleClass) -> Int64

"""

    TemplateId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TemplateId(self: AcadTableStyleClass) -> Int64

Set: TemplateId(self: AcadTableStyleClass) = value
"""

    TitleSuppressed = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TitleSuppressed(self: AcadTableStyleClass) -> bool

Set: TitleSuppressed(self: AcadTableStyleClass) = value
"""

    VertCellMargin = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VertCellMargin(self: AcadTableStyleClass) -> float

Set: VertCellMargin(self: AcadTableStyleClass) = value
"""


    Modified = None


class IAcadText(IAcadEntity, IAcadObject):
    # no doc
    def ArrayPolar(self, NumberOfObjects, AngleToFill, CenterPoint):
        """ ArrayPolar(self: IAcadText, NumberOfObjects: int, AngleToFill: float, CenterPoint: object) -> object """
        pass

    def ArrayRectangular(self, NumberOfRows, NumberOfColumns, NumberOfLevels, DistBetweenRows, DistBetweenCols, DistBetweenLevels):
        """ ArrayRectangular(self: IAcadText, NumberOfRows: int, NumberOfColumns: int, NumberOfLevels: int, DistBetweenRows: float, DistBetweenCols: float, DistBetweenLevels: float) -> object """
        pass

    def Copy(self):
        """ Copy(self: IAcadText) -> object """
        pass

    def Delete(self):
        """ Delete(self: IAcadText) """
        pass

    def Erase(self):
        """ Erase(self: IAcadText) """
        pass

    def FieldCode(self):
        """ FieldCode(self: IAcadText) -> str """
        pass

    def GetBoundingBox(self, MinPoint, MaxPoint):
        """ GetBoundingBox(self: IAcadText) -> (object, object) """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: IAcadText) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: IAcadText, AppName: str) -> (object, object) """
        pass

    def Highlight(self, HighlightFlag):
        """ Highlight(self: IAcadText, HighlightFlag: bool) """
        pass

    def IntersectWith(self, IntersectObject, option):
        """ IntersectWith(self: IAcadText, IntersectObject: object, option: AcExtendOption) -> object """
        pass

    def Mirror(self, Point1, Point2):
        """ Mirror(self: IAcadText, Point1: object, Point2: object) -> object """
        pass

    def Mirror3D(self, Point1, Point2, point3):
        """ Mirror3D(self: IAcadText, Point1: object, Point2: object, point3: object) -> object """
        pass

    def Move(self, FromPoint, ToPoint):
        """ Move(self: IAcadText, FromPoint: object, ToPoint: object) """
        pass

    def Rotate(self, BasePoint, RotationAngle):
        """ Rotate(self: IAcadText, BasePoint: object, RotationAngle: float) """
        pass

    def Rotate3D(self, Point1, Point2, RotationAngle):
        """ Rotate3D(self: IAcadText, Point1: object, Point2: object, RotationAngle: float) """
        pass

    def ScaleEntity(self, BasePoint, ScaleFactor):
        """ ScaleEntity(self: IAcadText, BasePoint: object, ScaleFactor: float) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: IAcadText, XDataType: object, XDataValue: object) """
        pass

    def TransformBy(self, TransformationMatrix):
        """ TransformBy(self: IAcadText, TransformationMatrix: object) """
        pass

    def Update(self):
        """ Update(self: IAcadText) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Alignment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Alignment(self: IAcadText) -> AcAlignment

Set: Alignment(self: IAcadText) = value
"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IAcadText) -> object

"""

    Backward = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Backward(self: IAcadText) -> bool

Set: Backward(self: IAcadText) = value
"""

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: IAcadText) -> ACAD_COLOR

Set: color(self: IAcadText) = value
"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: IAcadText) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: IAcadText) -> object

"""

    EntityName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityName(self: IAcadText) -> str

"""

    EntityTransparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityTransparency(self: IAcadText) -> str

Set: EntityTransparency(self: IAcadText) = value
"""

    EntityType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityType(self: IAcadText) -> int

"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: IAcadText) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: IAcadText) -> bool

"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: IAcadText) -> float

Set: Height(self: IAcadText) = value
"""

    HorizontalAlignment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HorizontalAlignment(self: IAcadText) -> AcHorizontalAlignment

Set: HorizontalAlignment(self: IAcadText) = value
"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: IAcadText) -> AcadHyperlinks

"""

    InsertionPoint = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: InsertionPoint(self: IAcadText) -> object

Set: InsertionPoint(self: IAcadText) = value
"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layer(self: IAcadText) -> str

Set: Layer(self: IAcadText) = value
"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: IAcadText) -> str

Set: Linetype(self: IAcadText) = value
"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeScale(self: IAcadText) -> float

Set: LinetypeScale(self: IAcadText) = value
"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: IAcadText) -> ACAD_LWEIGHT

Set: Lineweight(self: IAcadText) = value
"""

    Material = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Material(self: IAcadText) -> str

Set: Material(self: IAcadText) = value
"""

    Normal = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Normal(self: IAcadText) -> object

Set: Normal(self: IAcadText) = value
"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: IAcadText) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: IAcadText) -> str

"""

    ObliqueAngle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObliqueAngle(self: IAcadText) -> float

Set: ObliqueAngle(self: IAcadText) = value
"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: IAcadText) -> Int64

"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: IAcadText) -> str

Set: PlotStyleName(self: IAcadText) = value
"""

    Rotation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Rotation(self: IAcadText) -> float

Set: Rotation(self: IAcadText) = value
"""

    ScaleFactor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ScaleFactor(self: IAcadText) -> float

Set: ScaleFactor(self: IAcadText) = value
"""

    StyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: StyleName(self: IAcadText) -> str

Set: StyleName(self: IAcadText) = value
"""

    TextAlignmentPoint = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextAlignmentPoint(self: IAcadText) -> object

Set: TextAlignmentPoint(self: IAcadText) = value
"""

    TextGenerationFlag = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextGenerationFlag(self: IAcadText) -> int

Set: TextGenerationFlag(self: IAcadText) = value
"""

    TextString = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextString(self: IAcadText) -> str

Set: TextString(self: IAcadText) = value
"""

    Thickness = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Thickness(self: IAcadText) -> float

Set: Thickness(self: IAcadText) = value
"""

    TrueColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TrueColor(self: IAcadText) -> AcadAcCmColor

Set: TrueColor(self: IAcadText) = value
"""

    UpsideDown = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: UpsideDown(self: IAcadText) -> bool

Set: UpsideDown(self: IAcadText) = value
"""

    VerticalAlignment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VerticalAlignment(self: IAcadText) -> AcVerticalAlignment

Set: VerticalAlignment(self: IAcadText) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: IAcadText) -> bool

Set: Visible(self: IAcadText) = value
"""



class AcadText(IAcadText, IAcadEntity, IAcadObject, IAcadObjectEvents_Event):
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class AcadTextClass(__ComObject):
    # no doc
    def add_Modified(self, A_1):
        """ add_Modified(self: AcadTextClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def ArrayPolar(self, NumberOfObjects, AngleToFill, CenterPoint):
        """ ArrayPolar(self: AcadTextClass, NumberOfObjects: int, AngleToFill: float, CenterPoint: object) -> object """
        pass

    def ArrayRectangular(self, NumberOfRows, NumberOfColumns, NumberOfLevels, DistBetweenRows, DistBetweenCols, DistBetweenLevels):
        """ ArrayRectangular(self: AcadTextClass, NumberOfRows: int, NumberOfColumns: int, NumberOfLevels: int, DistBetweenRows: float, DistBetweenCols: float, DistBetweenLevels: float) -> object """
        pass

    def Copy(self):
        """ Copy(self: AcadTextClass) -> object """
        pass

    def Delete(self):
        """ Delete(self: AcadTextClass) """
        pass

    def Erase(self):
        """ Erase(self: AcadTextClass) """
        pass

    def FieldCode(self):
        """ FieldCode(self: AcadTextClass) -> str """
        pass

    def GetBoundingBox(self, MinPoint, MaxPoint):
        """ GetBoundingBox(self: AcadTextClass) -> (object, object) """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: AcadTextClass) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: AcadTextClass, AppName: str) -> (object, object) """
        pass

    def Highlight(self, HighlightFlag):
        """ Highlight(self: AcadTextClass, HighlightFlag: bool) """
        pass

    def IntersectWith(self, IntersectObject, option):
        """ IntersectWith(self: AcadTextClass, IntersectObject: object, option: AcExtendOption) -> object """
        pass

    def Mirror(self, Point1, Point2):
        """ Mirror(self: AcadTextClass, Point1: object, Point2: object) -> object """
        pass

    def Mirror3D(self, Point1, Point2, point3):
        """ Mirror3D(self: AcadTextClass, Point1: object, Point2: object, point3: object) -> object """
        pass

    def Move(self, FromPoint, ToPoint):
        """ Move(self: AcadTextClass, FromPoint: object, ToPoint: object) """
        pass

    def remove_Modified(self, A_1):
        """ remove_Modified(self: AcadTextClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def Rotate(self, BasePoint, RotationAngle):
        """ Rotate(self: AcadTextClass, BasePoint: object, RotationAngle: float) """
        pass

    def Rotate3D(self, Point1, Point2, RotationAngle):
        """ Rotate3D(self: AcadTextClass, Point1: object, Point2: object, RotationAngle: float) """
        pass

    def ScaleEntity(self, BasePoint, ScaleFactor):
        """ ScaleEntity(self: AcadTextClass, BasePoint: object, ScaleFactor: float) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: AcadTextClass, XDataType: object, XDataValue: object) """
        pass

    def TransformBy(self, TransformationMatrix):
        """ TransformBy(self: AcadTextClass, TransformationMatrix: object) """
        pass

    def Update(self):
        """ Update(self: AcadTextClass) """
        pass

    Alignment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Alignment(self: AcadTextClass) -> AcAlignment

Set: Alignment(self: AcadTextClass) = value
"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: AcadTextClass) -> object

"""

    Backward = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Backward(self: AcadTextClass) -> bool

Set: Backward(self: AcadTextClass) = value
"""

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: AcadTextClass) -> ACAD_COLOR

Set: color(self: AcadTextClass) = value
"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: AcadTextClass) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: AcadTextClass) -> object

"""

    EntityName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityName(self: AcadTextClass) -> str

"""

    EntityTransparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityTransparency(self: AcadTextClass) -> str

Set: EntityTransparency(self: AcadTextClass) = value
"""

    EntityType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityType(self: AcadTextClass) -> int

"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: AcadTextClass) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: AcadTextClass) -> bool

"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: AcadTextClass) -> float

Set: Height(self: AcadTextClass) = value
"""

    HorizontalAlignment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HorizontalAlignment(self: AcadTextClass) -> AcHorizontalAlignment

Set: HorizontalAlignment(self: AcadTextClass) = value
"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: AcadTextClass) -> AcadHyperlinks

"""

    InsertionPoint = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: InsertionPoint(self: AcadTextClass) -> object

Set: InsertionPoint(self: AcadTextClass) = value
"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layer(self: AcadTextClass) -> str

Set: Layer(self: AcadTextClass) = value
"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: AcadTextClass) -> str

Set: Linetype(self: AcadTextClass) = value
"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeScale(self: AcadTextClass) -> float

Set: LinetypeScale(self: AcadTextClass) = value
"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: AcadTextClass) -> ACAD_LWEIGHT

Set: Lineweight(self: AcadTextClass) = value
"""

    Material = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Material(self: AcadTextClass) -> str

Set: Material(self: AcadTextClass) = value
"""

    Normal = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Normal(self: AcadTextClass) -> object

Set: Normal(self: AcadTextClass) = value
"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: AcadTextClass) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: AcadTextClass) -> str

"""

    ObliqueAngle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObliqueAngle(self: AcadTextClass) -> float

Set: ObliqueAngle(self: AcadTextClass) = value
"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: AcadTextClass) -> Int64

"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: AcadTextClass) -> str

Set: PlotStyleName(self: AcadTextClass) = value
"""

    Rotation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Rotation(self: AcadTextClass) -> float

Set: Rotation(self: AcadTextClass) = value
"""

    ScaleFactor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ScaleFactor(self: AcadTextClass) -> float

Set: ScaleFactor(self: AcadTextClass) = value
"""

    StyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: StyleName(self: AcadTextClass) -> str

Set: StyleName(self: AcadTextClass) = value
"""

    TextAlignmentPoint = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextAlignmentPoint(self: AcadTextClass) -> object

Set: TextAlignmentPoint(self: AcadTextClass) = value
"""

    TextGenerationFlag = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextGenerationFlag(self: AcadTextClass) -> int

Set: TextGenerationFlag(self: AcadTextClass) = value
"""

    TextString = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextString(self: AcadTextClass) -> str

Set: TextString(self: AcadTextClass) = value
"""

    Thickness = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Thickness(self: AcadTextClass) -> float

Set: Thickness(self: AcadTextClass) = value
"""

    TrueColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TrueColor(self: AcadTextClass) -> AcadAcCmColor

Set: TrueColor(self: AcadTextClass) = value
"""

    UpsideDown = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: UpsideDown(self: AcadTextClass) -> bool

Set: UpsideDown(self: AcadTextClass) = value
"""

    VerticalAlignment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: VerticalAlignment(self: AcadTextClass) -> AcVerticalAlignment

Set: VerticalAlignment(self: AcadTextClass) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: AcadTextClass) -> bool

Set: Visible(self: AcadTextClass) = value
"""


    Modified = None


class IAcadTextStyle(IAcadObject):
    # no doc
    def Delete(self):
        """ Delete(self: IAcadTextStyle) """
        pass

    def Erase(self):
        """ Erase(self: IAcadTextStyle) """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: IAcadTextStyle) -> AcadDictionary """
        pass

    def GetFont(self, TypeFace, Bold, Italic, Charset, PitchAndFamily):
        """ GetFont(self: IAcadTextStyle) -> (str, bool, bool, int, int) """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: IAcadTextStyle, AppName: str) -> (object, object) """
        pass

    def SetFont(self, TypeFace, Bold, Italic, Charset, PitchAndFamily):
        """ SetFont(self: IAcadTextStyle, TypeFace: str, Bold: bool, Italic: bool, Charset: int, PitchAndFamily: int) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: IAcadTextStyle, XDataType: object, XDataValue: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IAcadTextStyle) -> object

"""

    BigFontFile = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BigFontFile(self: IAcadTextStyle) -> str

Set: BigFontFile(self: IAcadTextStyle) = value
"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: IAcadTextStyle) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: IAcadTextStyle) -> object

"""

    fontFile = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: fontFile(self: IAcadTextStyle) -> str

Set: fontFile(self: IAcadTextStyle) = value
"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: IAcadTextStyle) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: IAcadTextStyle) -> bool

"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: IAcadTextStyle) -> float

Set: Height(self: IAcadTextStyle) = value
"""

    LastHeight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LastHeight(self: IAcadTextStyle) -> float

Set: LastHeight(self: IAcadTextStyle) = value
"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: IAcadTextStyle) -> str

"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: IAcadTextStyle) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: IAcadTextStyle) -> str

"""

    ObliqueAngle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObliqueAngle(self: IAcadTextStyle) -> float

Set: ObliqueAngle(self: IAcadTextStyle) = value
"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: IAcadTextStyle) -> Int64

"""

    TextGenerationFlag = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextGenerationFlag(self: IAcadTextStyle) -> int

Set: TextGenerationFlag(self: IAcadTextStyle) = value
"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: IAcadTextStyle) -> float

Set: Width(self: IAcadTextStyle) = value
"""



class AcadTextStyle(IAcadTextStyle, IAcadObject, IAcadObjectEvents_Event):
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class AcadTextStyleClass(__ComObject):
    # no doc
    def add_Modified(self, A_1):
        """ add_Modified(self: AcadTextStyleClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def Delete(self):
        """ Delete(self: AcadTextStyleClass) """
        pass

    def Erase(self):
        """ Erase(self: AcadTextStyleClass) """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: AcadTextStyleClass) -> AcadDictionary """
        pass

    def GetFont(self, TypeFace, Bold, Italic, Charset, PitchAndFamily):
        """ GetFont(self: AcadTextStyleClass) -> (str, bool, bool, int, int) """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: AcadTextStyleClass, AppName: str) -> (object, object) """
        pass

    def remove_Modified(self, A_1):
        """ remove_Modified(self: AcadTextStyleClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def SetFont(self, TypeFace, Bold, Italic, Charset, PitchAndFamily):
        """ SetFont(self: AcadTextStyleClass, TypeFace: str, Bold: bool, Italic: bool, Charset: int, PitchAndFamily: int) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: AcadTextStyleClass, XDataType: object, XDataValue: object) """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: AcadTextStyleClass) -> object

"""

    BigFontFile = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BigFontFile(self: AcadTextStyleClass) -> str

Set: BigFontFile(self: AcadTextStyleClass) = value
"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: AcadTextStyleClass) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: AcadTextStyleClass) -> object

"""

    fontFile = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: fontFile(self: AcadTextStyleClass) -> str

Set: fontFile(self: AcadTextStyleClass) = value
"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: AcadTextStyleClass) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: AcadTextStyleClass) -> bool

"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: AcadTextStyleClass) -> float

Set: Height(self: AcadTextStyleClass) = value
"""

    LastHeight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LastHeight(self: AcadTextStyleClass) -> float

Set: LastHeight(self: AcadTextStyleClass) = value
"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: AcadTextStyleClass) -> str

"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: AcadTextStyleClass) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: AcadTextStyleClass) -> str

"""

    ObliqueAngle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObliqueAngle(self: AcadTextStyleClass) -> float

Set: ObliqueAngle(self: AcadTextStyleClass) = value
"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: AcadTextStyleClass) -> Int64

"""

    TextGenerationFlag = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextGenerationFlag(self: AcadTextStyleClass) -> int

Set: TextGenerationFlag(self: AcadTextStyleClass) = value
"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: AcadTextStyleClass) -> float

Set: Width(self: AcadTextStyleClass) = value
"""


    Modified = None


class IAcadTextStyles(IAcadObject, IEnumerable):
    # no doc
    def Add(self, Name):
        """ Add(self: IAcadTextStyles, Name: str) -> AcadTextStyle """
        pass

    def Delete(self):
        """ Delete(self: IAcadTextStyles) """
        pass

    def Erase(self):
        """ Erase(self: IAcadTextStyles) """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: IAcadTextStyles) -> IEnumerator """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: IAcadTextStyles) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: IAcadTextStyles, AppName: str) -> (object, object) """
        pass

    def Item(self, Index):
        """ Item(self: IAcadTextStyles, Index: object) -> AcadTextStyle """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: IAcadTextStyles, XDataType: object, XDataValue: object) """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerable) -> object """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IAcadTextStyles) -> object

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: IAcadTextStyles) -> int

"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: IAcadTextStyles) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: IAcadTextStyles) -> object

"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: IAcadTextStyles) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: IAcadTextStyles) -> bool

"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: IAcadTextStyles) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: IAcadTextStyles) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: IAcadTextStyles) -> Int64

"""



class AcadTextStyles(IAcadTextStyles, IAcadObject, IEnumerable, IAcadObjectEvents_Event):
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerable) -> object """
        pass


class AcadTextStylesClass(__ComObject):
    # no doc
    def Add(self, Name):
        """ Add(self: AcadTextStylesClass, Name: str) -> AcadTextStyle """
        pass

    def add_Modified(self, A_1):
        """ add_Modified(self: AcadTextStylesClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def Delete(self):
        """ Delete(self: AcadTextStylesClass) """
        pass

    def Erase(self):
        """ Erase(self: AcadTextStylesClass) """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: AcadTextStylesClass) -> IEnumerator """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: AcadTextStylesClass) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: AcadTextStylesClass, AppName: str) -> (object, object) """
        pass

    def Item(self, Index):
        """ Item(self: AcadTextStylesClass, Index: object) -> AcadTextStyle """
        pass

    def remove_Modified(self, A_1):
        """ remove_Modified(self: AcadTextStylesClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: AcadTextStylesClass, XDataType: object, XDataValue: object) """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerable) -> object """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: AcadTextStylesClass) -> object

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: AcadTextStylesClass) -> int

"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: AcadTextStylesClass) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: AcadTextStylesClass) -> object

"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: AcadTextStylesClass) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: AcadTextStylesClass) -> bool

"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: AcadTextStylesClass) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: AcadTextStylesClass) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: AcadTextStylesClass) -> Int64

"""


    Modified = None


class IAcadTolerance(IAcadEntity, IAcadObject):
    # no doc
    def ArrayPolar(self, NumberOfObjects, AngleToFill, CenterPoint):
        """ ArrayPolar(self: IAcadTolerance, NumberOfObjects: int, AngleToFill: float, CenterPoint: object) -> object """
        pass

    def ArrayRectangular(self, NumberOfRows, NumberOfColumns, NumberOfLevels, DistBetweenRows, DistBetweenCols, DistBetweenLevels):
        """ ArrayRectangular(self: IAcadTolerance, NumberOfRows: int, NumberOfColumns: int, NumberOfLevels: int, DistBetweenRows: float, DistBetweenCols: float, DistBetweenLevels: float) -> object """
        pass

    def Copy(self):
        """ Copy(self: IAcadTolerance) -> object """
        pass

    def Delete(self):
        """ Delete(self: IAcadTolerance) """
        pass

    def Erase(self):
        """ Erase(self: IAcadTolerance) """
        pass

    def GetBoundingBox(self, MinPoint, MaxPoint):
        """ GetBoundingBox(self: IAcadTolerance) -> (object, object) """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: IAcadTolerance) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: IAcadTolerance, AppName: str) -> (object, object) """
        pass

    def Highlight(self, HighlightFlag):
        """ Highlight(self: IAcadTolerance, HighlightFlag: bool) """
        pass

    def IntersectWith(self, IntersectObject, option):
        """ IntersectWith(self: IAcadTolerance, IntersectObject: object, option: AcExtendOption) -> object """
        pass

    def Mirror(self, Point1, Point2):
        """ Mirror(self: IAcadTolerance, Point1: object, Point2: object) -> object """
        pass

    def Mirror3D(self, Point1, Point2, point3):
        """ Mirror3D(self: IAcadTolerance, Point1: object, Point2: object, point3: object) -> object """
        pass

    def Move(self, FromPoint, ToPoint):
        """ Move(self: IAcadTolerance, FromPoint: object, ToPoint: object) """
        pass

    def Rotate(self, BasePoint, RotationAngle):
        """ Rotate(self: IAcadTolerance, BasePoint: object, RotationAngle: float) """
        pass

    def Rotate3D(self, Point1, Point2, RotationAngle):
        """ Rotate3D(self: IAcadTolerance, Point1: object, Point2: object, RotationAngle: float) """
        pass

    def ScaleEntity(self, BasePoint, ScaleFactor):
        """ ScaleEntity(self: IAcadTolerance, BasePoint: object, ScaleFactor: float) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: IAcadTolerance, XDataType: object, XDataValue: object) """
        pass

    def TransformBy(self, TransformationMatrix):
        """ TransformBy(self: IAcadTolerance, TransformationMatrix: object) """
        pass

    def Update(self):
        """ Update(self: IAcadTolerance) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IAcadTolerance) -> object

"""

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: IAcadTolerance) -> ACAD_COLOR

Set: color(self: IAcadTolerance) = value
"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: IAcadTolerance) -> AcadDatabase

"""

    DimensionLineColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimensionLineColor(self: IAcadTolerance) -> ACAD_COLOR

Set: DimensionLineColor(self: IAcadTolerance) = value
"""

    DirectionVector = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DirectionVector(self: IAcadTolerance) -> object

Set: DirectionVector(self: IAcadTolerance) = value
"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: IAcadTolerance) -> object

"""

    EntityName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityName(self: IAcadTolerance) -> str

"""

    EntityTransparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityTransparency(self: IAcadTolerance) -> str

Set: EntityTransparency(self: IAcadTolerance) = value
"""

    EntityType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityType(self: IAcadTolerance) -> int

"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: IAcadTolerance) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: IAcadTolerance) -> bool

"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: IAcadTolerance) -> AcadHyperlinks

"""

    InsertionPoint = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: InsertionPoint(self: IAcadTolerance) -> object

Set: InsertionPoint(self: IAcadTolerance) = value
"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layer(self: IAcadTolerance) -> str

Set: Layer(self: IAcadTolerance) = value
"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: IAcadTolerance) -> str

Set: Linetype(self: IAcadTolerance) = value
"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeScale(self: IAcadTolerance) -> float

Set: LinetypeScale(self: IAcadTolerance) = value
"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: IAcadTolerance) -> ACAD_LWEIGHT

Set: Lineweight(self: IAcadTolerance) = value
"""

    Material = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Material(self: IAcadTolerance) -> str

Set: Material(self: IAcadTolerance) = value
"""

    Normal = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Normal(self: IAcadTolerance) -> object

Set: Normal(self: IAcadTolerance) = value
"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: IAcadTolerance) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: IAcadTolerance) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: IAcadTolerance) -> Int64

"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: IAcadTolerance) -> str

Set: PlotStyleName(self: IAcadTolerance) = value
"""

    ScaleFactor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ScaleFactor(self: IAcadTolerance) -> float

Set: ScaleFactor(self: IAcadTolerance) = value
"""

    StyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: StyleName(self: IAcadTolerance) -> str

Set: StyleName(self: IAcadTolerance) = value
"""

    TextColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextColor(self: IAcadTolerance) -> ACAD_COLOR

Set: TextColor(self: IAcadTolerance) = value
"""

    TextHeight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextHeight(self: IAcadTolerance) -> float

Set: TextHeight(self: IAcadTolerance) = value
"""

    TextString = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextString(self: IAcadTolerance) -> str

Set: TextString(self: IAcadTolerance) = value
"""

    TextStyle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextStyle(self: IAcadTolerance) -> str

Set: TextStyle(self: IAcadTolerance) = value
"""

    TrueColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TrueColor(self: IAcadTolerance) -> AcadAcCmColor

Set: TrueColor(self: IAcadTolerance) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: IAcadTolerance) -> bool

Set: Visible(self: IAcadTolerance) = value
"""



class AcadTolerance(IAcadTolerance, IAcadEntity, IAcadObject, IAcadObjectEvents_Event):
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class AcadToleranceClass(__ComObject):
    # no doc
    def add_Modified(self, A_1):
        """ add_Modified(self: AcadToleranceClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def ArrayPolar(self, NumberOfObjects, AngleToFill, CenterPoint):
        """ ArrayPolar(self: AcadToleranceClass, NumberOfObjects: int, AngleToFill: float, CenterPoint: object) -> object """
        pass

    def ArrayRectangular(self, NumberOfRows, NumberOfColumns, NumberOfLevels, DistBetweenRows, DistBetweenCols, DistBetweenLevels):
        """ ArrayRectangular(self: AcadToleranceClass, NumberOfRows: int, NumberOfColumns: int, NumberOfLevels: int, DistBetweenRows: float, DistBetweenCols: float, DistBetweenLevels: float) -> object """
        pass

    def Copy(self):
        """ Copy(self: AcadToleranceClass) -> object """
        pass

    def Delete(self):
        """ Delete(self: AcadToleranceClass) """
        pass

    def Erase(self):
        """ Erase(self: AcadToleranceClass) """
        pass

    def GetBoundingBox(self, MinPoint, MaxPoint):
        """ GetBoundingBox(self: AcadToleranceClass) -> (object, object) """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: AcadToleranceClass) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: AcadToleranceClass, AppName: str) -> (object, object) """
        pass

    def Highlight(self, HighlightFlag):
        """ Highlight(self: AcadToleranceClass, HighlightFlag: bool) """
        pass

    def IntersectWith(self, IntersectObject, option):
        """ IntersectWith(self: AcadToleranceClass, IntersectObject: object, option: AcExtendOption) -> object """
        pass

    def Mirror(self, Point1, Point2):
        """ Mirror(self: AcadToleranceClass, Point1: object, Point2: object) -> object """
        pass

    def Mirror3D(self, Point1, Point2, point3):
        """ Mirror3D(self: AcadToleranceClass, Point1: object, Point2: object, point3: object) -> object """
        pass

    def Move(self, FromPoint, ToPoint):
        """ Move(self: AcadToleranceClass, FromPoint: object, ToPoint: object) """
        pass

    def remove_Modified(self, A_1):
        """ remove_Modified(self: AcadToleranceClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def Rotate(self, BasePoint, RotationAngle):
        """ Rotate(self: AcadToleranceClass, BasePoint: object, RotationAngle: float) """
        pass

    def Rotate3D(self, Point1, Point2, RotationAngle):
        """ Rotate3D(self: AcadToleranceClass, Point1: object, Point2: object, RotationAngle: float) """
        pass

    def ScaleEntity(self, BasePoint, ScaleFactor):
        """ ScaleEntity(self: AcadToleranceClass, BasePoint: object, ScaleFactor: float) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: AcadToleranceClass, XDataType: object, XDataValue: object) """
        pass

    def TransformBy(self, TransformationMatrix):
        """ TransformBy(self: AcadToleranceClass, TransformationMatrix: object) """
        pass

    def Update(self):
        """ Update(self: AcadToleranceClass) """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: AcadToleranceClass) -> object

"""

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: AcadToleranceClass) -> ACAD_COLOR

Set: color(self: AcadToleranceClass) = value
"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: AcadToleranceClass) -> AcadDatabase

"""

    DimensionLineColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimensionLineColor(self: AcadToleranceClass) -> ACAD_COLOR

Set: DimensionLineColor(self: AcadToleranceClass) = value
"""

    DirectionVector = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DirectionVector(self: AcadToleranceClass) -> object

Set: DirectionVector(self: AcadToleranceClass) = value
"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: AcadToleranceClass) -> object

"""

    EntityName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityName(self: AcadToleranceClass) -> str

"""

    EntityTransparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityTransparency(self: AcadToleranceClass) -> str

Set: EntityTransparency(self: AcadToleranceClass) = value
"""

    EntityType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityType(self: AcadToleranceClass) -> int

"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: AcadToleranceClass) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: AcadToleranceClass) -> bool

"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: AcadToleranceClass) -> AcadHyperlinks

"""

    InsertionPoint = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: InsertionPoint(self: AcadToleranceClass) -> object

Set: InsertionPoint(self: AcadToleranceClass) = value
"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layer(self: AcadToleranceClass) -> str

Set: Layer(self: AcadToleranceClass) = value
"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: AcadToleranceClass) -> str

Set: Linetype(self: AcadToleranceClass) = value
"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeScale(self: AcadToleranceClass) -> float

Set: LinetypeScale(self: AcadToleranceClass) = value
"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: AcadToleranceClass) -> ACAD_LWEIGHT

Set: Lineweight(self: AcadToleranceClass) = value
"""

    Material = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Material(self: AcadToleranceClass) -> str

Set: Material(self: AcadToleranceClass) = value
"""

    Normal = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Normal(self: AcadToleranceClass) -> object

Set: Normal(self: AcadToleranceClass) = value
"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: AcadToleranceClass) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: AcadToleranceClass) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: AcadToleranceClass) -> Int64

"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: AcadToleranceClass) -> str

Set: PlotStyleName(self: AcadToleranceClass) = value
"""

    ScaleFactor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ScaleFactor(self: AcadToleranceClass) -> float

Set: ScaleFactor(self: AcadToleranceClass) = value
"""

    StyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: StyleName(self: AcadToleranceClass) -> str

Set: StyleName(self: AcadToleranceClass) = value
"""

    TextColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextColor(self: AcadToleranceClass) -> ACAD_COLOR

Set: TextColor(self: AcadToleranceClass) = value
"""

    TextHeight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextHeight(self: AcadToleranceClass) -> float

Set: TextHeight(self: AcadToleranceClass) = value
"""

    TextString = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextString(self: AcadToleranceClass) -> str

Set: TextString(self: AcadToleranceClass) = value
"""

    TextStyle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextStyle(self: AcadToleranceClass) -> str

Set: TextStyle(self: AcadToleranceClass) = value
"""

    TrueColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TrueColor(self: AcadToleranceClass) -> AcadAcCmColor

Set: TrueColor(self: AcadToleranceClass) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: AcadToleranceClass) -> bool

Set: Visible(self: AcadToleranceClass) = value
"""


    Modified = None


class IAcadTrace(IAcadEntity, IAcadObject):
    # no doc
    def ArrayPolar(self, NumberOfObjects, AngleToFill, CenterPoint):
        """ ArrayPolar(self: IAcadTrace, NumberOfObjects: int, AngleToFill: float, CenterPoint: object) -> object """
        pass

    def ArrayRectangular(self, NumberOfRows, NumberOfColumns, NumberOfLevels, DistBetweenRows, DistBetweenCols, DistBetweenLevels):
        """ ArrayRectangular(self: IAcadTrace, NumberOfRows: int, NumberOfColumns: int, NumberOfLevels: int, DistBetweenRows: float, DistBetweenCols: float, DistBetweenLevels: float) -> object """
        pass

    def Copy(self):
        """ Copy(self: IAcadTrace) -> object """
        pass

    def Delete(self):
        """ Delete(self: IAcadTrace) """
        pass

    def Erase(self):
        """ Erase(self: IAcadTrace) """
        pass

    def GetBoundingBox(self, MinPoint, MaxPoint):
        """ GetBoundingBox(self: IAcadTrace) -> (object, object) """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: IAcadTrace) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: IAcadTrace, AppName: str) -> (object, object) """
        pass

    def Highlight(self, HighlightFlag):
        """ Highlight(self: IAcadTrace, HighlightFlag: bool) """
        pass

    def IntersectWith(self, IntersectObject, option):
        """ IntersectWith(self: IAcadTrace, IntersectObject: object, option: AcExtendOption) -> object """
        pass

    def Mirror(self, Point1, Point2):
        """ Mirror(self: IAcadTrace, Point1: object, Point2: object) -> object """
        pass

    def Mirror3D(self, Point1, Point2, point3):
        """ Mirror3D(self: IAcadTrace, Point1: object, Point2: object, point3: object) -> object """
        pass

    def Move(self, FromPoint, ToPoint):
        """ Move(self: IAcadTrace, FromPoint: object, ToPoint: object) """
        pass

    def Rotate(self, BasePoint, RotationAngle):
        """ Rotate(self: IAcadTrace, BasePoint: object, RotationAngle: float) """
        pass

    def Rotate3D(self, Point1, Point2, RotationAngle):
        """ Rotate3D(self: IAcadTrace, Point1: object, Point2: object, RotationAngle: float) """
        pass

    def ScaleEntity(self, BasePoint, ScaleFactor):
        """ ScaleEntity(self: IAcadTrace, BasePoint: object, ScaleFactor: float) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: IAcadTrace, XDataType: object, XDataValue: object) """
        pass

    def TransformBy(self, TransformationMatrix):
        """ TransformBy(self: IAcadTrace, TransformationMatrix: object) """
        pass

    def Update(self):
        """ Update(self: IAcadTrace) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IAcadTrace) -> object

"""

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: IAcadTrace) -> ACAD_COLOR

Set: color(self: IAcadTrace) = value
"""

    Coordinates = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Coordinates(self: IAcadTrace) -> object

Set: Coordinates(self: IAcadTrace) = value
"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: IAcadTrace) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: IAcadTrace) -> object

"""

    EntityName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityName(self: IAcadTrace) -> str

"""

    EntityTransparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityTransparency(self: IAcadTrace) -> str

Set: EntityTransparency(self: IAcadTrace) = value
"""

    EntityType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityType(self: IAcadTrace) -> int

"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: IAcadTrace) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: IAcadTrace) -> bool

"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: IAcadTrace) -> AcadHyperlinks

"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layer(self: IAcadTrace) -> str

Set: Layer(self: IAcadTrace) = value
"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: IAcadTrace) -> str

Set: Linetype(self: IAcadTrace) = value
"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeScale(self: IAcadTrace) -> float

Set: LinetypeScale(self: IAcadTrace) = value
"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: IAcadTrace) -> ACAD_LWEIGHT

Set: Lineweight(self: IAcadTrace) = value
"""

    Material = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Material(self: IAcadTrace) -> str

Set: Material(self: IAcadTrace) = value
"""

    Normal = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Normal(self: IAcadTrace) -> object

Set: Normal(self: IAcadTrace) = value
"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: IAcadTrace) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: IAcadTrace) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: IAcadTrace) -> Int64

"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: IAcadTrace) -> str

Set: PlotStyleName(self: IAcadTrace) = value
"""

    Thickness = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Thickness(self: IAcadTrace) -> float

Set: Thickness(self: IAcadTrace) = value
"""

    TrueColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TrueColor(self: IAcadTrace) -> AcadAcCmColor

Set: TrueColor(self: IAcadTrace) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: IAcadTrace) -> bool

Set: Visible(self: IAcadTrace) = value
"""



class AcadTrace(IAcadTrace, IAcadEntity, IAcadObject, IAcadObjectEvents_Event):
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class AcadTraceClass(__ComObject):
    # no doc
    def add_Modified(self, A_1):
        """ add_Modified(self: AcadTraceClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def ArrayPolar(self, NumberOfObjects, AngleToFill, CenterPoint):
        """ ArrayPolar(self: AcadTraceClass, NumberOfObjects: int, AngleToFill: float, CenterPoint: object) -> object """
        pass

    def ArrayRectangular(self, NumberOfRows, NumberOfColumns, NumberOfLevels, DistBetweenRows, DistBetweenCols, DistBetweenLevels):
        """ ArrayRectangular(self: AcadTraceClass, NumberOfRows: int, NumberOfColumns: int, NumberOfLevels: int, DistBetweenRows: float, DistBetweenCols: float, DistBetweenLevels: float) -> object """
        pass

    def Copy(self):
        """ Copy(self: AcadTraceClass) -> object """
        pass

    def Delete(self):
        """ Delete(self: AcadTraceClass) """
        pass

    def Erase(self):
        """ Erase(self: AcadTraceClass) """
        pass

    def GetBoundingBox(self, MinPoint, MaxPoint):
        """ GetBoundingBox(self: AcadTraceClass) -> (object, object) """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: AcadTraceClass) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: AcadTraceClass, AppName: str) -> (object, object) """
        pass

    def Highlight(self, HighlightFlag):
        """ Highlight(self: AcadTraceClass, HighlightFlag: bool) """
        pass

    def IntersectWith(self, IntersectObject, option):
        """ IntersectWith(self: AcadTraceClass, IntersectObject: object, option: AcExtendOption) -> object """
        pass

    def Mirror(self, Point1, Point2):
        """ Mirror(self: AcadTraceClass, Point1: object, Point2: object) -> object """
        pass

    def Mirror3D(self, Point1, Point2, point3):
        """ Mirror3D(self: AcadTraceClass, Point1: object, Point2: object, point3: object) -> object """
        pass

    def Move(self, FromPoint, ToPoint):
        """ Move(self: AcadTraceClass, FromPoint: object, ToPoint: object) """
        pass

    def remove_Modified(self, A_1):
        """ remove_Modified(self: AcadTraceClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def Rotate(self, BasePoint, RotationAngle):
        """ Rotate(self: AcadTraceClass, BasePoint: object, RotationAngle: float) """
        pass

    def Rotate3D(self, Point1, Point2, RotationAngle):
        """ Rotate3D(self: AcadTraceClass, Point1: object, Point2: object, RotationAngle: float) """
        pass

    def ScaleEntity(self, BasePoint, ScaleFactor):
        """ ScaleEntity(self: AcadTraceClass, BasePoint: object, ScaleFactor: float) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: AcadTraceClass, XDataType: object, XDataValue: object) """
        pass

    def TransformBy(self, TransformationMatrix):
        """ TransformBy(self: AcadTraceClass, TransformationMatrix: object) """
        pass

    def Update(self):
        """ Update(self: AcadTraceClass) """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: AcadTraceClass) -> object

"""

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: AcadTraceClass) -> ACAD_COLOR

Set: color(self: AcadTraceClass) = value
"""

    Coordinates = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Coordinates(self: AcadTraceClass) -> object

Set: Coordinates(self: AcadTraceClass) = value
"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: AcadTraceClass) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: AcadTraceClass) -> object

"""

    EntityName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityName(self: AcadTraceClass) -> str

"""

    EntityTransparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityTransparency(self: AcadTraceClass) -> str

Set: EntityTransparency(self: AcadTraceClass) = value
"""

    EntityType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityType(self: AcadTraceClass) -> int

"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: AcadTraceClass) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: AcadTraceClass) -> bool

"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: AcadTraceClass) -> AcadHyperlinks

"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layer(self: AcadTraceClass) -> str

Set: Layer(self: AcadTraceClass) = value
"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: AcadTraceClass) -> str

Set: Linetype(self: AcadTraceClass) = value
"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeScale(self: AcadTraceClass) -> float

Set: LinetypeScale(self: AcadTraceClass) = value
"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: AcadTraceClass) -> ACAD_LWEIGHT

Set: Lineweight(self: AcadTraceClass) = value
"""

    Material = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Material(self: AcadTraceClass) -> str

Set: Material(self: AcadTraceClass) = value
"""

    Normal = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Normal(self: AcadTraceClass) -> object

Set: Normal(self: AcadTraceClass) = value
"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: AcadTraceClass) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: AcadTraceClass) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: AcadTraceClass) -> Int64

"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: AcadTraceClass) -> str

Set: PlotStyleName(self: AcadTraceClass) = value
"""

    Thickness = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Thickness(self: AcadTraceClass) -> float

Set: Thickness(self: AcadTraceClass) = value
"""

    TrueColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TrueColor(self: AcadTraceClass) -> AcadAcCmColor

Set: TrueColor(self: AcadTraceClass) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: AcadTraceClass) -> bool

Set: Visible(self: AcadTraceClass) = value
"""


    Modified = None


class IAcadUCS(IAcadObject):
    # no doc
    def Delete(self):
        """ Delete(self: IAcadUCS) """
        pass

    def Erase(self):
        """ Erase(self: IAcadUCS) """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: IAcadUCS) -> AcadDictionary """
        pass

    def GetUCSMatrix(self):
        """ GetUCSMatrix(self: IAcadUCS) -> object """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: IAcadUCS, AppName: str) -> (object, object) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: IAcadUCS, XDataType: object, XDataValue: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IAcadUCS) -> object

"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: IAcadUCS) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: IAcadUCS) -> object

"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: IAcadUCS) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: IAcadUCS) -> bool

"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: IAcadUCS) -> str

Set: Name(self: IAcadUCS) = value
"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: IAcadUCS) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: IAcadUCS) -> str

"""

    Origin = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Origin(self: IAcadUCS) -> object

Set: Origin(self: IAcadUCS) = value
"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: IAcadUCS) -> Int64

"""

    XVector = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: XVector(self: IAcadUCS) -> object

Set: XVector(self: IAcadUCS) = value
"""

    YVector = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: YVector(self: IAcadUCS) -> object

Set: YVector(self: IAcadUCS) = value
"""



class AcadUCS(IAcadUCS, IAcadObject, IAcadObjectEvents_Event):
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class AcadUCSClass(__ComObject):
    # no doc
    def add_Modified(self, A_1):
        """ add_Modified(self: AcadUCSClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def Delete(self):
        """ Delete(self: AcadUCSClass) """
        pass

    def Erase(self):
        """ Erase(self: AcadUCSClass) """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: AcadUCSClass) -> AcadDictionary """
        pass

    def GetUCSMatrix(self):
        """ GetUCSMatrix(self: AcadUCSClass) -> object """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: AcadUCSClass, AppName: str) -> (object, object) """
        pass

    def remove_Modified(self, A_1):
        """ remove_Modified(self: AcadUCSClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: AcadUCSClass, XDataType: object, XDataValue: object) """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: AcadUCSClass) -> object

"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: AcadUCSClass) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: AcadUCSClass) -> object

"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: AcadUCSClass) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: AcadUCSClass) -> bool

"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: AcadUCSClass) -> str

Set: Name(self: AcadUCSClass) = value
"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: AcadUCSClass) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: AcadUCSClass) -> str

"""

    Origin = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Origin(self: AcadUCSClass) -> object

Set: Origin(self: AcadUCSClass) = value
"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: AcadUCSClass) -> Int64

"""

    XVector = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: XVector(self: AcadUCSClass) -> object

Set: XVector(self: AcadUCSClass) = value
"""

    YVector = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: YVector(self: AcadUCSClass) -> object

Set: YVector(self: AcadUCSClass) = value
"""


    Modified = None


class IAcadUCSs(IAcadObject, IEnumerable):
    # no doc
    def Add(self, Origin, XAxisPoint, YAxisPoint, Name):
        """ Add(self: IAcadUCSs, Origin: object, XAxisPoint: object, YAxisPoint: object, Name: str) -> AcadUCS """
        pass

    def Delete(self):
        """ Delete(self: IAcadUCSs) """
        pass

    def Erase(self):
        """ Erase(self: IAcadUCSs) """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: IAcadUCSs) -> IEnumerator """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: IAcadUCSs) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: IAcadUCSs, AppName: str) -> (object, object) """
        pass

    def Item(self, Index):
        """ Item(self: IAcadUCSs, Index: object) -> AcadUCS """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: IAcadUCSs, XDataType: object, XDataValue: object) """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerable) -> object """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IAcadUCSs) -> object

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: IAcadUCSs) -> int

"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: IAcadUCSs) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: IAcadUCSs) -> object

"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: IAcadUCSs) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: IAcadUCSs) -> bool

"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: IAcadUCSs) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: IAcadUCSs) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: IAcadUCSs) -> Int64

"""



class AcadUCSs(IAcadUCSs, IAcadObject, IEnumerable, IAcadObjectEvents_Event):
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerable) -> object """
        pass


class AcadUCSsClass(__ComObject):
    # no doc
    def Add(self, Origin, XAxisPoint, YAxisPoint, Name):
        """ Add(self: AcadUCSsClass, Origin: object, XAxisPoint: object, YAxisPoint: object, Name: str) -> AcadUCS """
        pass

    def add_Modified(self, A_1):
        """ add_Modified(self: AcadUCSsClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def Delete(self):
        """ Delete(self: AcadUCSsClass) """
        pass

    def Erase(self):
        """ Erase(self: AcadUCSsClass) """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: AcadUCSsClass) -> IEnumerator """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: AcadUCSsClass) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: AcadUCSsClass, AppName: str) -> (object, object) """
        pass

    def Item(self, Index):
        """ Item(self: AcadUCSsClass, Index: object) -> AcadUCS """
        pass

    def remove_Modified(self, A_1):
        """ remove_Modified(self: AcadUCSsClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: AcadUCSsClass, XDataType: object, XDataValue: object) """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerable) -> object """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: AcadUCSsClass) -> object

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: AcadUCSsClass) -> int

"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: AcadUCSsClass) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: AcadUCSsClass) -> object

"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: AcadUCSsClass) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: AcadUCSsClass) -> bool

"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: AcadUCSsClass) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: AcadUCSsClass) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: AcadUCSsClass) -> Int64

"""


    Modified = None


class IAcadView(IAcadObject):
    # no doc
    def Delete(self):
        """ Delete(self: IAcadView) """
        pass

    def Erase(self):
        """ Erase(self: IAcadView) """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: IAcadView) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: IAcadView, AppName: str) -> (object, object) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: IAcadView, XDataType: object, XDataValue: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IAcadView) -> object

"""

    CategoryName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CategoryName(self: IAcadView) -> str

Set: CategoryName(self: IAcadView) = value
"""

    Center = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Center(self: IAcadView) -> object

Set: Center(self: IAcadView) = value
"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: IAcadView) -> AcadDatabase

"""

    Direction = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Direction(self: IAcadView) -> object

Set: Direction(self: IAcadView) = value
"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: IAcadView) -> object

"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: IAcadView) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: IAcadView) -> bool

"""

    HasVpAssociation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasVpAssociation(self: IAcadView) -> bool

Set: HasVpAssociation(self: IAcadView) = value
"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: IAcadView) -> float

Set: Height(self: IAcadView) = value
"""

    LayerState = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LayerState(self: IAcadView) -> str

Set: LayerState(self: IAcadView) = value
"""

    LayoutId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LayoutId(self: IAcadView) -> Int64

Set: LayoutId(self: IAcadView) = value
"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: IAcadView) -> str

Set: Name(self: IAcadView) = value
"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: IAcadView) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: IAcadView) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: IAcadView) -> Int64

"""

    Target = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Target(self: IAcadView) -> object

Set: Target(self: IAcadView) = value
"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: IAcadView) -> float

Set: Width(self: IAcadView) = value
"""



class AcadView(IAcadView, IAcadObject, IAcadObjectEvents_Event):
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class AcadViewClass(__ComObject):
    # no doc
    def add_Modified(self, A_1):
        """ add_Modified(self: AcadViewClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def Delete(self):
        """ Delete(self: AcadViewClass) """
        pass

    def Erase(self):
        """ Erase(self: AcadViewClass) """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: AcadViewClass) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: AcadViewClass, AppName: str) -> (object, object) """
        pass

    def remove_Modified(self, A_1):
        """ remove_Modified(self: AcadViewClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: AcadViewClass, XDataType: object, XDataValue: object) """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: AcadViewClass) -> object

"""

    CategoryName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: CategoryName(self: AcadViewClass) -> str

Set: CategoryName(self: AcadViewClass) = value
"""

    Center = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Center(self: AcadViewClass) -> object

Set: Center(self: AcadViewClass) = value
"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: AcadViewClass) -> AcadDatabase

"""

    Direction = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Direction(self: AcadViewClass) -> object

Set: Direction(self: AcadViewClass) = value
"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: AcadViewClass) -> object

"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: AcadViewClass) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: AcadViewClass) -> bool

"""

    HasVpAssociation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasVpAssociation(self: AcadViewClass) -> bool

Set: HasVpAssociation(self: AcadViewClass) = value
"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: AcadViewClass) -> float

Set: Height(self: AcadViewClass) = value
"""

    LayerState = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LayerState(self: AcadViewClass) -> str

Set: LayerState(self: AcadViewClass) = value
"""

    LayoutId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LayoutId(self: AcadViewClass) -> Int64

Set: LayoutId(self: AcadViewClass) = value
"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: AcadViewClass) -> str

Set: Name(self: AcadViewClass) = value
"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: AcadViewClass) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: AcadViewClass) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: AcadViewClass) -> Int64

"""

    Target = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Target(self: AcadViewClass) -> object

Set: Target(self: AcadViewClass) = value
"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: AcadViewClass) -> float

Set: Width(self: AcadViewClass) = value
"""


    Modified = None


class IAcadViewport(IAcadObject):
    # no doc
    def Delete(self):
        """ Delete(self: IAcadViewport) """
        pass

    def Erase(self):
        """ Erase(self: IAcadViewport) """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: IAcadViewport) -> AcadDictionary """
        pass

    def GetGridSpacing(self, XSpacing, YSpacing):
        """ GetGridSpacing(self: IAcadViewport) -> (float, float) """
        pass

    def GetSnapSpacing(self, XSpacing, YSpacing):
        """ GetSnapSpacing(self: IAcadViewport) -> (float, float) """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: IAcadViewport, AppName: str) -> (object, object) """
        pass

    def SetGridSpacing(self, XSpacing, YSpacing):
        """ SetGridSpacing(self: IAcadViewport, XSpacing: float, YSpacing: float) """
        pass

    def SetSnapSpacing(self, XSpacing, YSpacing):
        """ SetSnapSpacing(self: IAcadViewport, XSpacing: float, YSpacing: float) """
        pass

    def SetView(self, View):
        """ SetView(self: IAcadViewport, View: AcadView) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: IAcadViewport, XDataType: object, XDataValue: object) """
        pass

    def Split(self, NumWins):
        """ Split(self: IAcadViewport, NumWins: AcViewportSplitType) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IAcadViewport) -> object

"""

    ArcSmoothness = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ArcSmoothness(self: IAcadViewport) -> int

Set: ArcSmoothness(self: IAcadViewport) = value
"""

    Center = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Center(self: IAcadViewport) -> object

Set: Center(self: IAcadViewport) = value
"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: IAcadViewport) -> AcadDatabase

"""

    Direction = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Direction(self: IAcadViewport) -> object

Set: Direction(self: IAcadViewport) = value
"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: IAcadViewport) -> object

"""

    GridOn = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: GridOn(self: IAcadViewport) -> bool

Set: GridOn(self: IAcadViewport) = value
"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: IAcadViewport) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: IAcadViewport) -> bool

"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: IAcadViewport) -> float

Set: Height(self: IAcadViewport) = value
"""

    LowerLeftCorner = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LowerLeftCorner(self: IAcadViewport) -> object

"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: IAcadViewport) -> str

Set: Name(self: IAcadViewport) = value
"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: IAcadViewport) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: IAcadViewport) -> str

"""

    OrthoOn = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OrthoOn(self: IAcadViewport) -> bool

Set: OrthoOn(self: IAcadViewport) = value
"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: IAcadViewport) -> Int64

"""

    SnapBasePoint = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SnapBasePoint(self: IAcadViewport) -> object

Set: SnapBasePoint(self: IAcadViewport) = value
"""

    SnapOn = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SnapOn(self: IAcadViewport) -> bool

Set: SnapOn(self: IAcadViewport) = value
"""

    SnapRotationAngle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SnapRotationAngle(self: IAcadViewport) -> float

Set: SnapRotationAngle(self: IAcadViewport) = value
"""

    Target = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Target(self: IAcadViewport) -> object

Set: Target(self: IAcadViewport) = value
"""

    UCSIconAtOrigin = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: UCSIconAtOrigin(self: IAcadViewport) -> bool

Set: UCSIconAtOrigin(self: IAcadViewport) = value
"""

    UCSIconOn = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: UCSIconOn(self: IAcadViewport) -> bool

Set: UCSIconOn(self: IAcadViewport) = value
"""

    UpperRightCorner = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: UpperRightCorner(self: IAcadViewport) -> object

"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: IAcadViewport) -> float

Set: Width(self: IAcadViewport) = value
"""



class AcadViewport(IAcadViewport, IAcadObject, IAcadObjectEvents_Event):
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class AcadViewportClass(__ComObject):
    # no doc
    def add_Modified(self, A_1):
        """ add_Modified(self: AcadViewportClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def Delete(self):
        """ Delete(self: AcadViewportClass) """
        pass

    def Erase(self):
        """ Erase(self: AcadViewportClass) """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: AcadViewportClass) -> AcadDictionary """
        pass

    def GetGridSpacing(self, XSpacing, YSpacing):
        """ GetGridSpacing(self: AcadViewportClass) -> (float, float) """
        pass

    def GetSnapSpacing(self, XSpacing, YSpacing):
        """ GetSnapSpacing(self: AcadViewportClass) -> (float, float) """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: AcadViewportClass, AppName: str) -> (object, object) """
        pass

    def remove_Modified(self, A_1):
        """ remove_Modified(self: AcadViewportClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def SetGridSpacing(self, XSpacing, YSpacing):
        """ SetGridSpacing(self: AcadViewportClass, XSpacing: float, YSpacing: float) """
        pass

    def SetSnapSpacing(self, XSpacing, YSpacing):
        """ SetSnapSpacing(self: AcadViewportClass, XSpacing: float, YSpacing: float) """
        pass

    def SetView(self, View):
        """ SetView(self: AcadViewportClass, View: AcadView) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: AcadViewportClass, XDataType: object, XDataValue: object) """
        pass

    def Split(self, NumWins):
        """ Split(self: AcadViewportClass, NumWins: AcViewportSplitType) """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: AcadViewportClass) -> object

"""

    ArcSmoothness = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ArcSmoothness(self: AcadViewportClass) -> int

Set: ArcSmoothness(self: AcadViewportClass) = value
"""

    Center = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Center(self: AcadViewportClass) -> object

Set: Center(self: AcadViewportClass) = value
"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: AcadViewportClass) -> AcadDatabase

"""

    Direction = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Direction(self: AcadViewportClass) -> object

Set: Direction(self: AcadViewportClass) = value
"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: AcadViewportClass) -> object

"""

    GridOn = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: GridOn(self: AcadViewportClass) -> bool

Set: GridOn(self: AcadViewportClass) = value
"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: AcadViewportClass) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: AcadViewportClass) -> bool

"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: AcadViewportClass) -> float

Set: Height(self: AcadViewportClass) = value
"""

    LowerLeftCorner = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LowerLeftCorner(self: AcadViewportClass) -> object

"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: AcadViewportClass) -> str

Set: Name(self: AcadViewportClass) = value
"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: AcadViewportClass) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: AcadViewportClass) -> str

"""

    OrthoOn = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OrthoOn(self: AcadViewportClass) -> bool

Set: OrthoOn(self: AcadViewportClass) = value
"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: AcadViewportClass) -> Int64

"""

    SnapBasePoint = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SnapBasePoint(self: AcadViewportClass) -> object

Set: SnapBasePoint(self: AcadViewportClass) = value
"""

    SnapOn = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SnapOn(self: AcadViewportClass) -> bool

Set: SnapOn(self: AcadViewportClass) = value
"""

    SnapRotationAngle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SnapRotationAngle(self: AcadViewportClass) -> float

Set: SnapRotationAngle(self: AcadViewportClass) = value
"""

    Target = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Target(self: AcadViewportClass) -> object

Set: Target(self: AcadViewportClass) = value
"""

    UCSIconAtOrigin = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: UCSIconAtOrigin(self: AcadViewportClass) -> bool

Set: UCSIconAtOrigin(self: AcadViewportClass) = value
"""

    UCSIconOn = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: UCSIconOn(self: AcadViewportClass) -> bool

Set: UCSIconOn(self: AcadViewportClass) = value
"""

    UpperRightCorner = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: UpperRightCorner(self: AcadViewportClass) -> object

"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: AcadViewportClass) -> float

Set: Width(self: AcadViewportClass) = value
"""


    Modified = None


class IAcadViewports(IAcadObject, IEnumerable):
    # no doc
    def Add(self, Name):
        """ Add(self: IAcadViewports, Name: str) -> AcadViewport """
        pass

    def Delete(self):
        """ Delete(self: IAcadViewports) """
        pass

    def DeleteConfiguration(self, Name):
        """ DeleteConfiguration(self: IAcadViewports, Name: str) """
        pass

    def Erase(self):
        """ Erase(self: IAcadViewports) """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: IAcadViewports) -> IEnumerator """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: IAcadViewports) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: IAcadViewports, AppName: str) -> (object, object) """
        pass

    def Item(self, Index):
        """ Item(self: IAcadViewports, Index: object) -> AcadViewport """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: IAcadViewports, XDataType: object, XDataValue: object) """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerable) -> object """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IAcadViewports) -> object

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: IAcadViewports) -> int

"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: IAcadViewports) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: IAcadViewports) -> object

"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: IAcadViewports) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: IAcadViewports) -> bool

"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: IAcadViewports) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: IAcadViewports) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: IAcadViewports) -> Int64

"""



class AcadViewports(IAcadViewports, IAcadObject, IEnumerable, IAcadObjectEvents_Event):
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerable) -> object """
        pass


class AcadViewportsClass(__ComObject):
    # no doc
    def Add(self, Name):
        """ Add(self: AcadViewportsClass, Name: str) -> AcadViewport """
        pass

    def add_Modified(self, A_1):
        """ add_Modified(self: AcadViewportsClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def Delete(self):
        """ Delete(self: AcadViewportsClass) """
        pass

    def DeleteConfiguration(self, Name):
        """ DeleteConfiguration(self: AcadViewportsClass, Name: str) """
        pass

    def Erase(self):
        """ Erase(self: AcadViewportsClass) """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: AcadViewportsClass) -> IEnumerator """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: AcadViewportsClass) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: AcadViewportsClass, AppName: str) -> (object, object) """
        pass

    def Item(self, Index):
        """ Item(self: AcadViewportsClass, Index: object) -> AcadViewport """
        pass

    def remove_Modified(self, A_1):
        """ remove_Modified(self: AcadViewportsClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: AcadViewportsClass, XDataType: object, XDataValue: object) """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerable) -> object """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: AcadViewportsClass) -> object

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: AcadViewportsClass) -> int

"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: AcadViewportsClass) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: AcadViewportsClass) -> object

"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: AcadViewportsClass) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: AcadViewportsClass) -> bool

"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: AcadViewportsClass) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: AcadViewportsClass) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: AcadViewportsClass) -> Int64

"""


    Modified = None


class IAcadViews(IAcadObject, IEnumerable):
    # no doc
    def Add(self, Name):
        """ Add(self: IAcadViews, Name: str) -> AcadView """
        pass

    def Delete(self):
        """ Delete(self: IAcadViews) """
        pass

    def Erase(self):
        """ Erase(self: IAcadViews) """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: IAcadViews) -> IEnumerator """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: IAcadViews) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: IAcadViews, AppName: str) -> (object, object) """
        pass

    def Item(self, Index):
        """ Item(self: IAcadViews, Index: object) -> AcadView """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: IAcadViews, XDataType: object, XDataValue: object) """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerable) -> object """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IAcadViews) -> object

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: IAcadViews) -> int

"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: IAcadViews) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: IAcadViews) -> object

"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: IAcadViews) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: IAcadViews) -> bool

"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: IAcadViews) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: IAcadViews) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: IAcadViews) -> Int64

"""



class AcadViews(IAcadViews, IAcadObject, IEnumerable, IAcadObjectEvents_Event):
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerable) -> object """
        pass


class AcadViewsClass(__ComObject):
    # no doc
    def Add(self, Name):
        """ Add(self: AcadViewsClass, Name: str) -> AcadView """
        pass

    def add_Modified(self, A_1):
        """ add_Modified(self: AcadViewsClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def Delete(self):
        """ Delete(self: AcadViewsClass) """
        pass

    def Erase(self):
        """ Erase(self: AcadViewsClass) """
        pass

    def GetEnumerator(self):
        """ GetEnumerator(self: AcadViewsClass) -> IEnumerator """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: AcadViewsClass) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: AcadViewsClass, AppName: str) -> (object, object) """
        pass

    def Item(self, Index):
        """ Item(self: AcadViewsClass, Index: object) -> AcadView """
        pass

    def remove_Modified(self, A_1):
        """ remove_Modified(self: AcadViewsClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: AcadViewsClass, XDataType: object, XDataValue: object) """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerable) -> object """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: AcadViewsClass) -> object

"""

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Count(self: AcadViewsClass) -> int

"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: AcadViewsClass) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: AcadViewsClass) -> object

"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: AcadViewsClass) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: AcadViewsClass) -> bool

"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: AcadViewsClass) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: AcadViewsClass) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: AcadViewsClass) -> Int64

"""


    Modified = None


class IAcadWipeout(IAcadRasterImage, IAcadEntity, IAcadObject):
    # no doc
    def ArrayPolar(self, NumberOfObjects, AngleToFill, CenterPoint):
        """ ArrayPolar(self: IAcadWipeout, NumberOfObjects: int, AngleToFill: float, CenterPoint: object) -> object """
        pass

    def ArrayRectangular(self, NumberOfRows, NumberOfColumns, NumberOfLevels, DistBetweenRows, DistBetweenCols, DistBetweenLevels):
        """ ArrayRectangular(self: IAcadWipeout, NumberOfRows: int, NumberOfColumns: int, NumberOfLevels: int, DistBetweenRows: float, DistBetweenCols: float, DistBetweenLevels: float) -> object """
        pass

    def ClipBoundary(self, boundry):
        """ ClipBoundary(self: IAcadWipeout, boundry: object) """
        pass

    def Copy(self):
        """ Copy(self: IAcadWipeout) -> object """
        pass

    def Delete(self):
        """ Delete(self: IAcadWipeout) """
        pass

    def Erase(self):
        """ Erase(self: IAcadWipeout) """
        pass

    def GetBoundingBox(self, MinPoint, MaxPoint):
        """ GetBoundingBox(self: IAcadWipeout) -> (object, object) """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: IAcadWipeout) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: IAcadWipeout, AppName: str) -> (object, object) """
        pass

    def Highlight(self, HighlightFlag):
        """ Highlight(self: IAcadWipeout, HighlightFlag: bool) """
        pass

    def IntersectWith(self, IntersectObject, option):
        """ IntersectWith(self: IAcadWipeout, IntersectObject: object, option: AcExtendOption) -> object """
        pass

    def Mirror(self, Point1, Point2):
        """ Mirror(self: IAcadWipeout, Point1: object, Point2: object) -> object """
        pass

    def Mirror3D(self, Point1, Point2, point3):
        """ Mirror3D(self: IAcadWipeout, Point1: object, Point2: object, point3: object) -> object """
        pass

    def Move(self, FromPoint, ToPoint):
        """ Move(self: IAcadWipeout, FromPoint: object, ToPoint: object) """
        pass

    def Rotate(self, BasePoint, RotationAngle):
        """ Rotate(self: IAcadWipeout, BasePoint: object, RotationAngle: float) """
        pass

    def Rotate3D(self, Point1, Point2, RotationAngle):
        """ Rotate3D(self: IAcadWipeout, Point1: object, Point2: object, RotationAngle: float) """
        pass

    def ScaleEntity(self, BasePoint, ScaleFactor):
        """ ScaleEntity(self: IAcadWipeout, BasePoint: object, ScaleFactor: float) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: IAcadWipeout, XDataType: object, XDataValue: object) """
        pass

    def TransformBy(self, TransformationMatrix):
        """ TransformBy(self: IAcadWipeout, TransformationMatrix: object) """
        pass

    def Update(self):
        """ Update(self: IAcadWipeout) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IAcadWipeout) -> object

"""

    Brightness = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Brightness(self: IAcadWipeout) -> int

Set: Brightness(self: IAcadWipeout) = value
"""

    ClippingEnabled = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ClippingEnabled(self: IAcadWipeout) -> bool

Set: ClippingEnabled(self: IAcadWipeout) = value
"""

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: IAcadWipeout) -> ACAD_COLOR

Set: color(self: IAcadWipeout) = value
"""

    Contrast = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Contrast(self: IAcadWipeout) -> int

Set: Contrast(self: IAcadWipeout) = value
"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: IAcadWipeout) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: IAcadWipeout) -> object

"""

    EntityName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityName(self: IAcadWipeout) -> str

"""

    EntityTransparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityTransparency(self: IAcadWipeout) -> str

Set: EntityTransparency(self: IAcadWipeout) = value
"""

    EntityType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityType(self: IAcadWipeout) -> int

"""

    Fade = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Fade(self: IAcadWipeout) -> int

Set: Fade(self: IAcadWipeout) = value
"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: IAcadWipeout) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: IAcadWipeout) -> bool

"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: IAcadWipeout) -> float

"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: IAcadWipeout) -> AcadHyperlinks

"""

    ImageFile = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ImageFile(self: IAcadWipeout) -> str

Set: ImageFile(self: IAcadWipeout) = value
"""

    ImageHeight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ImageHeight(self: IAcadWipeout) -> float

Set: ImageHeight(self: IAcadWipeout) = value
"""

    ImageVisibility = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ImageVisibility(self: IAcadWipeout) -> bool

Set: ImageVisibility(self: IAcadWipeout) = value
"""

    ImageWidth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ImageWidth(self: IAcadWipeout) -> float

Set: ImageWidth(self: IAcadWipeout) = value
"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layer(self: IAcadWipeout) -> str

Set: Layer(self: IAcadWipeout) = value
"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: IAcadWipeout) -> str

Set: Linetype(self: IAcadWipeout) = value
"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeScale(self: IAcadWipeout) -> float

Set: LinetypeScale(self: IAcadWipeout) = value
"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: IAcadWipeout) -> ACAD_LWEIGHT

Set: Lineweight(self: IAcadWipeout) = value
"""

    Material = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Material(self: IAcadWipeout) -> str

Set: Material(self: IAcadWipeout) = value
"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: IAcadWipeout) -> str

Set: Name(self: IAcadWipeout) = value
"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: IAcadWipeout) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: IAcadWipeout) -> str

"""

    Origin = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Origin(self: IAcadWipeout) -> object

Set: Origin(self: IAcadWipeout) = value
"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: IAcadWipeout) -> Int64

"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: IAcadWipeout) -> str

Set: PlotStyleName(self: IAcadWipeout) = value
"""

    Rotation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Rotation(self: IAcadWipeout) -> float

Set: Rotation(self: IAcadWipeout) = value
"""

    ScaleFactor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ScaleFactor(self: IAcadWipeout) -> float

Set: ScaleFactor(self: IAcadWipeout) = value
"""

    ShowRotation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowRotation(self: IAcadWipeout) -> bool

Set: ShowRotation(self: IAcadWipeout) = value
"""

    transparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: transparency(self: IAcadWipeout) -> bool

Set: transparency(self: IAcadWipeout) = value
"""

    TrueColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TrueColor(self: IAcadWipeout) -> AcadAcCmColor

Set: TrueColor(self: IAcadWipeout) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: IAcadWipeout) -> bool

Set: Visible(self: IAcadWipeout) = value
"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: IAcadWipeout) -> float

"""



class AcadWipeout(IAcadWipeout, IAcadRasterImage, IAcadEntity, IAcadObject):
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class AcadWipeoutClass(__ComObject):
    # no doc
    def ArrayPolar(self, NumberOfObjects, AngleToFill, CenterPoint):
        """ ArrayPolar(self: AcadWipeoutClass, NumberOfObjects: int, AngleToFill: float, CenterPoint: object) -> object """
        pass

    def ArrayRectangular(self, NumberOfRows, NumberOfColumns, NumberOfLevels, DistBetweenRows, DistBetweenCols, DistBetweenLevels):
        """ ArrayRectangular(self: AcadWipeoutClass, NumberOfRows: int, NumberOfColumns: int, NumberOfLevels: int, DistBetweenRows: float, DistBetweenCols: float, DistBetweenLevels: float) -> object """
        pass

    def ClipBoundary(self, boundry):
        """ ClipBoundary(self: AcadWipeoutClass, boundry: object) """
        pass

    def Copy(self):
        """ Copy(self: AcadWipeoutClass) -> object """
        pass

    def Delete(self):
        """ Delete(self: AcadWipeoutClass) """
        pass

    def Erase(self):
        """ Erase(self: AcadWipeoutClass) """
        pass

    def GetBoundingBox(self, MinPoint, MaxPoint):
        """ GetBoundingBox(self: AcadWipeoutClass) -> (object, object) """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: AcadWipeoutClass) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: AcadWipeoutClass, AppName: str) -> (object, object) """
        pass

    def Highlight(self, HighlightFlag):
        """ Highlight(self: AcadWipeoutClass, HighlightFlag: bool) """
        pass

    def IntersectWith(self, IntersectObject, option):
        """ IntersectWith(self: AcadWipeoutClass, IntersectObject: object, option: AcExtendOption) -> object """
        pass

    def Mirror(self, Point1, Point2):
        """ Mirror(self: AcadWipeoutClass, Point1: object, Point2: object) -> object """
        pass

    def Mirror3D(self, Point1, Point2, point3):
        """ Mirror3D(self: AcadWipeoutClass, Point1: object, Point2: object, point3: object) -> object """
        pass

    def Move(self, FromPoint, ToPoint):
        """ Move(self: AcadWipeoutClass, FromPoint: object, ToPoint: object) """
        pass

    def Rotate(self, BasePoint, RotationAngle):
        """ Rotate(self: AcadWipeoutClass, BasePoint: object, RotationAngle: float) """
        pass

    def Rotate3D(self, Point1, Point2, RotationAngle):
        """ Rotate3D(self: AcadWipeoutClass, Point1: object, Point2: object, RotationAngle: float) """
        pass

    def ScaleEntity(self, BasePoint, ScaleFactor):
        """ ScaleEntity(self: AcadWipeoutClass, BasePoint: object, ScaleFactor: float) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: AcadWipeoutClass, XDataType: object, XDataValue: object) """
        pass

    def TransformBy(self, TransformationMatrix):
        """ TransformBy(self: AcadWipeoutClass, TransformationMatrix: object) """
        pass

    def Update(self):
        """ Update(self: AcadWipeoutClass) """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: AcadWipeoutClass) -> object

"""

    Brightness = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Brightness(self: AcadWipeoutClass) -> int

Set: Brightness(self: AcadWipeoutClass) = value
"""

    ClippingEnabled = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ClippingEnabled(self: AcadWipeoutClass) -> bool

Set: ClippingEnabled(self: AcadWipeoutClass) = value
"""

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: AcadWipeoutClass) -> ACAD_COLOR

Set: color(self: AcadWipeoutClass) = value
"""

    Contrast = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Contrast(self: AcadWipeoutClass) -> int

Set: Contrast(self: AcadWipeoutClass) = value
"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: AcadWipeoutClass) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: AcadWipeoutClass) -> object

"""

    EntityName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityName(self: AcadWipeoutClass) -> str

"""

    EntityTransparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityTransparency(self: AcadWipeoutClass) -> str

Set: EntityTransparency(self: AcadWipeoutClass) = value
"""

    EntityType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityType(self: AcadWipeoutClass) -> int

"""

    Fade = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Fade(self: AcadWipeoutClass) -> int

Set: Fade(self: AcadWipeoutClass) = value
"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: AcadWipeoutClass) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: AcadWipeoutClass) -> bool

"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: AcadWipeoutClass) -> float

"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: AcadWipeoutClass) -> AcadHyperlinks

"""

    ImageFile = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ImageFile(self: AcadWipeoutClass) -> str

Set: ImageFile(self: AcadWipeoutClass) = value
"""

    ImageHeight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ImageHeight(self: AcadWipeoutClass) -> float

Set: ImageHeight(self: AcadWipeoutClass) = value
"""

    ImageVisibility = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ImageVisibility(self: AcadWipeoutClass) -> bool

Set: ImageVisibility(self: AcadWipeoutClass) = value
"""

    ImageWidth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ImageWidth(self: AcadWipeoutClass) -> float

Set: ImageWidth(self: AcadWipeoutClass) = value
"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layer(self: AcadWipeoutClass) -> str

Set: Layer(self: AcadWipeoutClass) = value
"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: AcadWipeoutClass) -> str

Set: Linetype(self: AcadWipeoutClass) = value
"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeScale(self: AcadWipeoutClass) -> float

Set: LinetypeScale(self: AcadWipeoutClass) = value
"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: AcadWipeoutClass) -> ACAD_LWEIGHT

Set: Lineweight(self: AcadWipeoutClass) = value
"""

    Material = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Material(self: AcadWipeoutClass) -> str

Set: Material(self: AcadWipeoutClass) = value
"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: AcadWipeoutClass) -> str

Set: Name(self: AcadWipeoutClass) = value
"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: AcadWipeoutClass) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: AcadWipeoutClass) -> str

"""

    Origin = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Origin(self: AcadWipeoutClass) -> object

Set: Origin(self: AcadWipeoutClass) = value
"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: AcadWipeoutClass) -> Int64

"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: AcadWipeoutClass) -> str

Set: PlotStyleName(self: AcadWipeoutClass) = value
"""

    Rotation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Rotation(self: AcadWipeoutClass) -> float

Set: Rotation(self: AcadWipeoutClass) = value
"""

    ScaleFactor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ScaleFactor(self: AcadWipeoutClass) -> float

Set: ScaleFactor(self: AcadWipeoutClass) = value
"""

    ShowRotation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShowRotation(self: AcadWipeoutClass) -> bool

Set: ShowRotation(self: AcadWipeoutClass) = value
"""

    transparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: transparency(self: AcadWipeoutClass) -> bool

Set: transparency(self: AcadWipeoutClass) = value
"""

    TrueColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TrueColor(self: AcadWipeoutClass) -> AcadAcCmColor

Set: TrueColor(self: AcadWipeoutClass) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: AcadWipeoutClass) -> bool

Set: Visible(self: AcadWipeoutClass) = value
"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: AcadWipeoutClass) -> float

"""



class IAcadXline(IAcadEntity, IAcadObject):
    # no doc
    def ArrayPolar(self, NumberOfObjects, AngleToFill, CenterPoint):
        """ ArrayPolar(self: IAcadXline, NumberOfObjects: int, AngleToFill: float, CenterPoint: object) -> object """
        pass

    def ArrayRectangular(self, NumberOfRows, NumberOfColumns, NumberOfLevels, DistBetweenRows, DistBetweenCols, DistBetweenLevels):
        """ ArrayRectangular(self: IAcadXline, NumberOfRows: int, NumberOfColumns: int, NumberOfLevels: int, DistBetweenRows: float, DistBetweenCols: float, DistBetweenLevels: float) -> object """
        pass

    def Copy(self):
        """ Copy(self: IAcadXline) -> object """
        pass

    def Delete(self):
        """ Delete(self: IAcadXline) """
        pass

    def Erase(self):
        """ Erase(self: IAcadXline) """
        pass

    def GetBoundingBox(self, MinPoint, MaxPoint):
        """ GetBoundingBox(self: IAcadXline) -> (object, object) """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: IAcadXline) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: IAcadXline, AppName: str) -> (object, object) """
        pass

    def Highlight(self, HighlightFlag):
        """ Highlight(self: IAcadXline, HighlightFlag: bool) """
        pass

    def IntersectWith(self, IntersectObject, option):
        """ IntersectWith(self: IAcadXline, IntersectObject: object, option: AcExtendOption) -> object """
        pass

    def Mirror(self, Point1, Point2):
        """ Mirror(self: IAcadXline, Point1: object, Point2: object) -> object """
        pass

    def Mirror3D(self, Point1, Point2, point3):
        """ Mirror3D(self: IAcadXline, Point1: object, Point2: object, point3: object) -> object """
        pass

    def Move(self, FromPoint, ToPoint):
        """ Move(self: IAcadXline, FromPoint: object, ToPoint: object) """
        pass

    def Offset(self, Distance):
        """ Offset(self: IAcadXline, Distance: float) -> object """
        pass

    def Rotate(self, BasePoint, RotationAngle):
        """ Rotate(self: IAcadXline, BasePoint: object, RotationAngle: float) """
        pass

    def Rotate3D(self, Point1, Point2, RotationAngle):
        """ Rotate3D(self: IAcadXline, Point1: object, Point2: object, RotationAngle: float) """
        pass

    def ScaleEntity(self, BasePoint, ScaleFactor):
        """ ScaleEntity(self: IAcadXline, BasePoint: object, ScaleFactor: float) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: IAcadXline, XDataType: object, XDataValue: object) """
        pass

    def TransformBy(self, TransformationMatrix):
        """ TransformBy(self: IAcadXline, TransformationMatrix: object) """
        pass

    def Update(self):
        """ Update(self: IAcadXline) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IAcadXline) -> object

"""

    BasePoint = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BasePoint(self: IAcadXline) -> object

Set: BasePoint(self: IAcadXline) = value
"""

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: IAcadXline) -> ACAD_COLOR

Set: color(self: IAcadXline) = value
"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: IAcadXline) -> AcadDatabase

"""

    DirectionVector = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DirectionVector(self: IAcadXline) -> object

Set: DirectionVector(self: IAcadXline) = value
"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: IAcadXline) -> object

"""

    EntityName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityName(self: IAcadXline) -> str

"""

    EntityTransparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityTransparency(self: IAcadXline) -> str

Set: EntityTransparency(self: IAcadXline) = value
"""

    EntityType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityType(self: IAcadXline) -> int

"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: IAcadXline) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: IAcadXline) -> bool

"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: IAcadXline) -> AcadHyperlinks

"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layer(self: IAcadXline) -> str

Set: Layer(self: IAcadXline) = value
"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: IAcadXline) -> str

Set: Linetype(self: IAcadXline) = value
"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeScale(self: IAcadXline) -> float

Set: LinetypeScale(self: IAcadXline) = value
"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: IAcadXline) -> ACAD_LWEIGHT

Set: Lineweight(self: IAcadXline) = value
"""

    Material = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Material(self: IAcadXline) -> str

Set: Material(self: IAcadXline) = value
"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: IAcadXline) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: IAcadXline) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: IAcadXline) -> Int64

"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: IAcadXline) -> str

Set: PlotStyleName(self: IAcadXline) = value
"""

    SecondPoint = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SecondPoint(self: IAcadXline) -> object

Set: SecondPoint(self: IAcadXline) = value
"""

    TrueColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TrueColor(self: IAcadXline) -> AcadAcCmColor

Set: TrueColor(self: IAcadXline) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: IAcadXline) -> bool

Set: Visible(self: IAcadXline) = value
"""



class AcadXline(IAcadXline, IAcadEntity, IAcadObject, IAcadObjectEvents_Event):
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class AcadXlineClass(__ComObject):
    # no doc
    def add_Modified(self, A_1):
        """ add_Modified(self: AcadXlineClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def ArrayPolar(self, NumberOfObjects, AngleToFill, CenterPoint):
        """ ArrayPolar(self: AcadXlineClass, NumberOfObjects: int, AngleToFill: float, CenterPoint: object) -> object """
        pass

    def ArrayRectangular(self, NumberOfRows, NumberOfColumns, NumberOfLevels, DistBetweenRows, DistBetweenCols, DistBetweenLevels):
        """ ArrayRectangular(self: AcadXlineClass, NumberOfRows: int, NumberOfColumns: int, NumberOfLevels: int, DistBetweenRows: float, DistBetweenCols: float, DistBetweenLevels: float) -> object """
        pass

    def Copy(self):
        """ Copy(self: AcadXlineClass) -> object """
        pass

    def Delete(self):
        """ Delete(self: AcadXlineClass) """
        pass

    def Erase(self):
        """ Erase(self: AcadXlineClass) """
        pass

    def GetBoundingBox(self, MinPoint, MaxPoint):
        """ GetBoundingBox(self: AcadXlineClass) -> (object, object) """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: AcadXlineClass) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: AcadXlineClass, AppName: str) -> (object, object) """
        pass

    def Highlight(self, HighlightFlag):
        """ Highlight(self: AcadXlineClass, HighlightFlag: bool) """
        pass

    def IntersectWith(self, IntersectObject, option):
        """ IntersectWith(self: AcadXlineClass, IntersectObject: object, option: AcExtendOption) -> object """
        pass

    def Mirror(self, Point1, Point2):
        """ Mirror(self: AcadXlineClass, Point1: object, Point2: object) -> object """
        pass

    def Mirror3D(self, Point1, Point2, point3):
        """ Mirror3D(self: AcadXlineClass, Point1: object, Point2: object, point3: object) -> object """
        pass

    def Move(self, FromPoint, ToPoint):
        """ Move(self: AcadXlineClass, FromPoint: object, ToPoint: object) """
        pass

    def Offset(self, Distance):
        """ Offset(self: AcadXlineClass, Distance: float) -> object """
        pass

    def remove_Modified(self, A_1):
        """ remove_Modified(self: AcadXlineClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def Rotate(self, BasePoint, RotationAngle):
        """ Rotate(self: AcadXlineClass, BasePoint: object, RotationAngle: float) """
        pass

    def Rotate3D(self, Point1, Point2, RotationAngle):
        """ Rotate3D(self: AcadXlineClass, Point1: object, Point2: object, RotationAngle: float) """
        pass

    def ScaleEntity(self, BasePoint, ScaleFactor):
        """ ScaleEntity(self: AcadXlineClass, BasePoint: object, ScaleFactor: float) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: AcadXlineClass, XDataType: object, XDataValue: object) """
        pass

    def TransformBy(self, TransformationMatrix):
        """ TransformBy(self: AcadXlineClass, TransformationMatrix: object) """
        pass

    def Update(self):
        """ Update(self: AcadXlineClass) """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: AcadXlineClass) -> object

"""

    BasePoint = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: BasePoint(self: AcadXlineClass) -> object

Set: BasePoint(self: AcadXlineClass) = value
"""

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: AcadXlineClass) -> ACAD_COLOR

Set: color(self: AcadXlineClass) = value
"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: AcadXlineClass) -> AcadDatabase

"""

    DirectionVector = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DirectionVector(self: AcadXlineClass) -> object

Set: DirectionVector(self: AcadXlineClass) = value
"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: AcadXlineClass) -> object

"""

    EntityName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityName(self: AcadXlineClass) -> str

"""

    EntityTransparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityTransparency(self: AcadXlineClass) -> str

Set: EntityTransparency(self: AcadXlineClass) = value
"""

    EntityType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityType(self: AcadXlineClass) -> int

"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: AcadXlineClass) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: AcadXlineClass) -> bool

"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: AcadXlineClass) -> AcadHyperlinks

"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layer(self: AcadXlineClass) -> str

Set: Layer(self: AcadXlineClass) = value
"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: AcadXlineClass) -> str

Set: Linetype(self: AcadXlineClass) = value
"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeScale(self: AcadXlineClass) -> float

Set: LinetypeScale(self: AcadXlineClass) = value
"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: AcadXlineClass) -> ACAD_LWEIGHT

Set: Lineweight(self: AcadXlineClass) = value
"""

    Material = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Material(self: AcadXlineClass) -> str

Set: Material(self: AcadXlineClass) = value
"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: AcadXlineClass) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: AcadXlineClass) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: AcadXlineClass) -> Int64

"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: AcadXlineClass) -> str

Set: PlotStyleName(self: AcadXlineClass) = value
"""

    SecondPoint = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SecondPoint(self: AcadXlineClass) -> object

Set: SecondPoint(self: AcadXlineClass) = value
"""

    TrueColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TrueColor(self: AcadXlineClass) -> AcadAcCmColor

Set: TrueColor(self: AcadXlineClass) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: AcadXlineClass) -> bool

Set: Visible(self: AcadXlineClass) = value
"""


    Modified = None


class IAcadXRecord(IAcadObject):
    # no doc
    def Delete(self):
        """ Delete(self: IAcadXRecord) """
        pass

    def Erase(self):
        """ Erase(self: IAcadXRecord) """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: IAcadXRecord) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: IAcadXRecord, AppName: str) -> (object, object) """
        pass

    def GetXRecordData(self, XRecordDataType, XRecordDataValue):
        """ GetXRecordData(self: IAcadXRecord) -> (object, object) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: IAcadXRecord, XDataType: object, XDataValue: object) """
        pass

    def SetXRecordData(self, XRecordDataType, XRecordDataValue):
        """ SetXRecordData(self: IAcadXRecord, XRecordDataType: object, XRecordDataValue: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IAcadXRecord) -> object

"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: IAcadXRecord) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: IAcadXRecord) -> object

"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: IAcadXRecord) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: IAcadXRecord) -> bool

"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: IAcadXRecord) -> str

Set: Name(self: IAcadXRecord) = value
"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: IAcadXRecord) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: IAcadXRecord) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: IAcadXRecord) -> Int64

"""

    TranslateIDs = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TranslateIDs(self: IAcadXRecord) -> bool

Set: TranslateIDs(self: IAcadXRecord) = value
"""



class AcadXRecord(IAcadXRecord, IAcadObject, IAcadObjectEvents_Event):
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class AcadXRecordClass(__ComObject):
    # no doc
    def add_Modified(self, A_1):
        """ add_Modified(self: AcadXRecordClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def Delete(self):
        """ Delete(self: AcadXRecordClass) """
        pass

    def Erase(self):
        """ Erase(self: AcadXRecordClass) """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: AcadXRecordClass) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: AcadXRecordClass, AppName: str) -> (object, object) """
        pass

    def GetXRecordData(self, XRecordDataType, XRecordDataValue):
        """ GetXRecordData(self: AcadXRecordClass) -> (object, object) """
        pass

    def remove_Modified(self, A_1):
        """ remove_Modified(self: AcadXRecordClass, A_1: IAcadObjectEvents_ModifiedEventHandler) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: AcadXRecordClass, XDataType: object, XDataValue: object) """
        pass

    def SetXRecordData(self, XRecordDataType, XRecordDataValue):
        """ SetXRecordData(self: AcadXRecordClass, XRecordDataType: object, XRecordDataValue: object) """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: AcadXRecordClass) -> object

"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: AcadXRecordClass) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: AcadXRecordClass) -> object

"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: AcadXRecordClass) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: AcadXRecordClass) -> bool

"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: AcadXRecordClass) -> str

Set: Name(self: AcadXRecordClass) = value
"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: AcadXRecordClass) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: AcadXRecordClass) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: AcadXRecordClass) -> Int64

"""

    TranslateIDs = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TranslateIDs(self: AcadXRecordClass) -> bool

Set: TranslateIDs(self: AcadXRecordClass) = value
"""


    Modified = None


class ACAD_COLOR(Enum):
    """ enum ACAD_COLOR, values: acBlue (5), acByBlock (0), acByLayer (256), acCyan (4), acGreen (3), acMagenta (6), acRed (1), acWhite (7), acYellow (2) """
    acBlue = None
    acByBlock = None
    acByLayer = None
    acCyan = None
    acGreen = None
    acMagenta = None
    acRed = None
    acWhite = None
    acYellow = None
    value__ = None


class ACAD_LWEIGHT(Enum):
    """ enum ACAD_LWEIGHT, values: acLnWt000 (0), acLnWt005 (5), acLnWt009 (9), acLnWt013 (13), acLnWt015 (15), acLnWt018 (18), acLnWt020 (20), acLnWt025 (25), acLnWt030 (30), acLnWt035 (35), acLnWt040 (40), acLnWt050 (50), acLnWt053 (53), acLnWt060 (60), acLnWt070 (70), acLnWt080 (80), acLnWt090 (90), acLnWt100 (100), acLnWt106 (106), acLnWt120 (120), acLnWt140 (140), acLnWt158 (158), acLnWt200 (200), acLnWt211 (211), acLnWtByBlock (-2), acLnWtByLayer (-1), acLnWtByLwDefault (-3) """
    acLnWt000 = None
    acLnWt005 = None
    acLnWt009 = None
    acLnWt013 = None
    acLnWt015 = None
    acLnWt018 = None
    acLnWt020 = None
    acLnWt025 = None
    acLnWt030 = None
    acLnWt035 = None
    acLnWt040 = None
    acLnWt050 = None
    acLnWt053 = None
    acLnWt060 = None
    acLnWt070 = None
    acLnWt080 = None
    acLnWt090 = None
    acLnWt100 = None
    acLnWt106 = None
    acLnWt120 = None
    acLnWt140 = None
    acLnWt158 = None
    acLnWt200 = None
    acLnWt211 = None
    acLnWtByBlock = None
    acLnWtByLayer = None
    acLnWtByLwDefault = None
    value__ = None


class AcAlignment(Enum):
    """ enum AcAlignment, values: acAlignmentAligned (3), acAlignmentBottomCenter (13), acAlignmentBottomLeft (12), acAlignmentBottomRight (14), acAlignmentCenter (1), acAlignmentFit (5), acAlignmentLeft (0), acAlignmentMiddle (4), acAlignmentMiddleCenter (10), acAlignmentMiddleLeft (9), acAlignmentMiddleRight (11), acAlignmentRight (2), acAlignmentTopCenter (7), acAlignmentTopLeft (6), acAlignmentTopRight (8) """
    acAlignmentAligned = None
    acAlignmentBottomCenter = None
    acAlignmentBottomLeft = None
    acAlignmentBottomRight = None
    acAlignmentCenter = None
    acAlignmentFit = None
    acAlignmentLeft = None
    acAlignmentMiddle = None
    acAlignmentMiddleCenter = None
    acAlignmentMiddleLeft = None
    acAlignmentMiddleRight = None
    acAlignmentRight = None
    acAlignmentTopCenter = None
    acAlignmentTopLeft = None
    acAlignmentTopRight = None
    value__ = None


class AcAlignmentPointAcquisition(Enum):
    """ enum AcAlignmentPointAcquisition, values: acAlignPntAcquisitionAutomatic (0), acAlignPntAcquisitionShiftToAcquire (1) """
    acAlignPntAcquisitionAutomatic = None
    acAlignPntAcquisitionShiftToAcquire = None
    value__ = None


class AcAngleUnits(Enum):
    """ enum AcAngleUnits, values: acDegreeMinuteSeconds (1), acDegrees (0), acGrads (2), acRadians (3) """
    acDegreeMinuteSeconds = None
    acDegrees = None
    acGrads = None
    acRadians = None
    value__ = None


class AcARXDemandLoad(Enum):
    """ enum AcARXDemandLoad, values: acDemandLoadCmdInvoke (2), acDemandLoadOnObjectDetect (1), acDemanLoadDisable (0) """
    acDemandLoadCmdInvoke = None
    acDemandLoadOnObjectDetect = None
    acDemanLoadDisable = None
    value__ = None


class AcAttachmentPoint(Enum):
    """ enum AcAttachmentPoint, values: acAttachmentPointBottomCenter (8), acAttachmentPointBottomLeft (7), acAttachmentPointBottomRight (9), acAttachmentPointMiddleCenter (5), acAttachmentPointMiddleLeft (4), acAttachmentPointMiddleRight (6), acAttachmentPointTopCenter (2), acAttachmentPointTopLeft (1), acAttachmentPointTopRight (3) """
    acAttachmentPointBottomCenter = None
    acAttachmentPointBottomLeft = None
    acAttachmentPointBottomRight = None
    acAttachmentPointMiddleCenter = None
    acAttachmentPointMiddleLeft = None
    acAttachmentPointMiddleRight = None
    acAttachmentPointTopCenter = None
    acAttachmentPointTopLeft = None
    acAttachmentPointTopRight = None
    value__ = None


class AcAttributeMode(Enum):
    """ enum AcAttributeMode, values: acAttributeModeConstant (2), acAttributeModeInvisible (1), acAttributeModeLockPosition (16), acAttributeModeMultipleLine (32), acAttributeModeNormal (0), acAttributeModePreset (8), acAttributeModeVerify (4) """
    acAttributeModeConstant = None
    acAttributeModeInvisible = None
    acAttributeModeLockPosition = None
    acAttributeModeMultipleLine = None
    acAttributeModeNormal = None
    acAttributeModePreset = None
    acAttributeModeVerify = None
    value__ = None


class AcBlockConnectionType(Enum):
    """ enum AcBlockConnectionType, values: acConnectBase (1), acConnectExtents (0) """
    acConnectBase = None
    acConnectExtents = None
    value__ = None


class AcBlockScaling(Enum):
    """ enum AcBlockScaling, values: acAny (0), acUniform (1) """
    acAny = None
    acUniform = None
    value__ = None


class AcBoolean(Enum):
    """ enum AcBoolean, values: acFalse (0), acTrue (1) """
    acFalse = None
    acTrue = None
    value__ = None


class AcBooleanType(Enum):
    """ enum AcBooleanType, values: acIntersection (1), acSubtraction (2), acUnion (0) """
    acIntersection = None
    acSubtraction = None
    acUnion = None
    value__ = None


class AcCellAlignment(Enum):
    """ enum AcCellAlignment, values: acBottomCenter (8), acBottomLeft (7), acBottomRight (9), acMiddleCenter (5), acMiddleLeft (4), acMiddleRight (6), acTopCenter (2), acTopLeft (1), acTopRight (3) """
    acBottomCenter = None
    acBottomLeft = None
    acBottomRight = None
    acMiddleCenter = None
    acMiddleLeft = None
    acMiddleRight = None
    acTopCenter = None
    acTopLeft = None
    acTopRight = None
    value__ = None


class AcCellContentLayout(Enum):
    """ enum AcCellContentLayout, values: acCellContentLayoutFlow (1), acCellContentLayoutStackedHorizontal (2), acCellContentLayoutStackedVertical (4) """
    acCellContentLayoutFlow = None
    acCellContentLayoutStackedHorizontal = None
    acCellContentLayoutStackedVertical = None
    value__ = None


class AcCellContentType(Enum):
    """ enum AcCellContentType, values: acCellContentTypeBlock (4), acCellContentTypeField (2), acCellContentTypeUnknown (0), acCellContentTypeValue (1) """
    acCellContentTypeBlock = None
    acCellContentTypeField = None
    acCellContentTypeUnknown = None
    acCellContentTypeValue = None
    value__ = None


class AcCellEdgeMask(Enum):
    """ enum AcCellEdgeMask, values: acBottomMask (4), acLeftMask (8), acRightMask (2), acTopMask (1) """
    acBottomMask = None
    acLeftMask = None
    acRightMask = None
    acTopMask = None
    value__ = None


class AcCellMargin(Enum):
    """ enum AcCellMargin, values: acCellMarginBottom (4), acCellMarginHorzSpacing (16), acCellMarginLeft (2), acCellMarginRight (8), acCellMarginTop (1), acCellMarginVertSpacing (32) """
    acCellMarginBottom = None
    acCellMarginHorzSpacing = None
    acCellMarginLeft = None
    acCellMarginRight = None
    acCellMarginTop = None
    acCellMarginVertSpacing = None
    value__ = None


class AcCellOption(Enum):
    """ enum AcCellOption, values: kCellOptionNone (0), kInheritCellFormat (1) """
    kCellOptionNone = None
    kInheritCellFormat = None
    value__ = None


class AcCellProperty(Enum):
    """ enum AcCellProperty, values: acAlignmentProperty (32), acAllCellProperties (524287), acAutoScale (32768), acBackgroundColor (128), acBitProperties (245760), acContentColor (64), acContentLayout (262144), acContentProperties (33662), acDataFormat (4), acDataType (2), acDataTypeAndFormat (6), acEnableBackgroundColor (16384), acFlowDirBtoT (131072), acInvalidCellProperty (0), acLock (1), acMarginBottom (8192), acMarginLeft (1024), acMarginRight (4096), acMarginTop (2048), acMergeAll (65536), acRotation (8), acScale (16), acTextHeight (512), acTextStyle (256) """
    acAlignmentProperty = None
    acAllCellProperties = None
    acAutoScale = None
    acBackgroundColor = None
    acBitProperties = None
    acContentColor = None
    acContentLayout = None
    acContentProperties = None
    acDataFormat = None
    acDataType = None
    acDataTypeAndFormat = None
    acEnableBackgroundColor = None
    acFlowDirBtoT = None
    acInvalidCellProperty = None
    acLock = None
    acMarginBottom = None
    acMarginLeft = None
    acMarginRight = None
    acMarginTop = None
    acMergeAll = None
    acRotation = None
    acScale = None
    acTextHeight = None
    acTextStyle = None
    value__ = None


class AcCellState(Enum):
    """ enum AcCellState, values: acCellStateContentLocked (1), acCellStateContentModified (32), acCellStateContentReadOnly (2), acCellStateFormatLocked (4), acCellStateFormatModified (64), acCellStateFormatReadOnly (8), acCellStateLinked (16), acCellStateNone (0) """
    acCellStateContentLocked = None
    acCellStateContentModified = None
    acCellStateContentReadOnly = None
    acCellStateFormatLocked = None
    acCellStateFormatModified = None
    acCellStateFormatReadOnly = None
    acCellStateLinked = None
    acCellStateNone = None
    value__ = None


class AcCellType(Enum):
    """ enum AcCellType, values: acBlockCell (2), acTextCell (1), acUnknownCell (0) """
    acBlockCell = None
    acTextCell = None
    acUnknownCell = None
    value__ = None


class AcColor(Enum):
    """ enum AcColor, values: acBlue (5), acByBlock (0), acByLayer (256), acCyan (4), acGreen (3), acMagenta (6), acRed (1), acWhite (7), acYellow (2) """
    acBlue = None
    acByBlock = None
    acByLayer = None
    acCyan = None
    acGreen = None
    acMagenta = None
    acRed = None
    acWhite = None
    acYellow = None
    value__ = None


class AcColorMethod(Enum):
    """ enum AcColorMethod, values: acColorMethodByACI (195), acColorMethodByBlock (193), acColorMethodByLayer (192), acColorMethodByRGB (194), acColorMethodForeground (197) """
    acColorMethodByACI = None
    acColorMethodByBlock = None
    acColorMethodByLayer = None
    acColorMethodByRGB = None
    acColorMethodForeground = None
    value__ = None


class AcCoordinateSystem(Enum):
    """ enum AcCoordinateSystem, values: acDisplayDCS (2), acOCS (4), acPaperSpaceDCS (3), acUCS (1), acWorld (0) """
    acDisplayDCS = None
    acOCS = None
    acPaperSpaceDCS = None
    acUCS = None
    acWorld = None
    value__ = None


class AcDataLinkUpdateDirection(Enum):
    """ enum AcDataLinkUpdateDirection, values: acUpdateDataFromSource (1), acUpdateSourceFromData (2) """
    acUpdateDataFromSource = None
    acUpdateSourceFromData = None
    value__ = None


class AcDataLinkUpdateOption(Enum):
    """ enum AcDataLinkUpdateOption, values: acUpdateOptionIncludeXrefs (1048576), acUpdateOptionNone (0), acUpdateOptionOverwriteContentModifiedAfterUpdate (131072), acUpdateOptionOverwriteFormatModifiedAfterUpdate (262144), acUpdateOptionUpdateFullSourceRange (524288) """
    acUpdateOptionIncludeXrefs = None
    acUpdateOptionNone = None
    acUpdateOptionOverwriteContentModifiedAfterUpdate = None
    acUpdateOptionOverwriteFormatModifiedAfterUpdate = None
    acUpdateOptionUpdateFullSourceRange = None
    value__ = None


class AcDimArcLengthSymbol(Enum):
    """ enum AcDimArcLengthSymbol, values: acSymAbove (1), acSymInFront (0), acSymNone (2) """
    acSymAbove = None
    acSymInFront = None
    acSymNone = None
    value__ = None


class AcDimArrowheadType(Enum):
    """ enum AcDimArrowheadType, values: acArrowArchTick (4), acArrowBoxBlank (14), acArrowBoxFilled (15), acArrowClosed (2), acArrowClosedBlank (1), acArrowDatumBlank (16), acArrowDatumFilled (17), acArrowDefault (0), acArrowDot (3), acArrowDotBlank (12), acArrowDotSmall (11), acArrowIntegral (18), acArrowNone (19), acArrowOblique (5), acArrowOpen (6), acArrowOpen30 (10), acArrowOpen90 (9), acArrowOrigin (7), acArrowOrigin2 (8), acArrowSmall (13), acArrowUserDefined (20) """
    acArrowArchTick = None
    acArrowBoxBlank = None
    acArrowBoxFilled = None
    acArrowClosed = None
    acArrowClosedBlank = None
    acArrowDatumBlank = None
    acArrowDatumFilled = None
    acArrowDefault = None
    acArrowDot = None
    acArrowDotBlank = None
    acArrowDotSmall = None
    acArrowIntegral = None
    acArrowNone = None
    acArrowOblique = None
    acArrowOpen = None
    acArrowOpen30 = None
    acArrowOpen90 = None
    acArrowOrigin = None
    acArrowOrigin2 = None
    acArrowSmall = None
    acArrowUserDefined = None
    value__ = None


class AcDimCenterType(Enum):
    """ enum AcDimCenterType, values: acCenterLine (1), acCenterMark (0), acCenterNone (2) """
    acCenterLine = None
    acCenterMark = None
    acCenterNone = None
    value__ = None


class AcDimFit(Enum):
    """ enum AcDimFit, values: acArrowsOnly (1), acBestFit (3), acTextAndArrows (0), acTextOnly (2) """
    acArrowsOnly = None
    acBestFit = None
    acTextAndArrows = None
    acTextOnly = None
    value__ = None


class AcDimFractionType(Enum):
    """ enum AcDimFractionType, values: acDiagonal (1), acHorizontal (0), acNotStacked (2) """
    acDiagonal = None
    acHorizontal = None
    acNotStacked = None
    value__ = None


class AcDimHorizontalJustification(Enum):
    """ enum AcDimHorizontalJustification, values: acFirstExtensionLine (1), acHorzCentered (0), acOverFirstExtension (3), acOverSecondExtension (4), acSecondExtensionLine (2) """
    acFirstExtensionLine = None
    acHorzCentered = None
    acOverFirstExtension = None
    acOverSecondExtension = None
    acSecondExtensionLine = None
    value__ = None


class AcDimLUnits(Enum):
    """ enum AcDimLUnits, values: acDimLArchitectural (4), acDimLDecimal (2), acDimLEngineering (3), acDimLFractional (5), acDimLScientific (1), acDimLWindowsDesktop (6) """
    acDimLArchitectural = None
    acDimLDecimal = None
    acDimLEngineering = None
    acDimLFractional = None
    acDimLScientific = None
    acDimLWindowsDesktop = None
    value__ = None


class AcDimPrecision(Enum):
    """ enum AcDimPrecision, values: acDimPrecisionEight (8), acDimPrecisionFive (5), acDimPrecisionFour (4), acDimPrecisionOne (1), acDimPrecisionSeven (7), acDimPrecisionSix (6), acDimPrecisionThree (3), acDimPrecisionTwo (2), acDimPrecisionZero (0) """
    acDimPrecisionEight = None
    acDimPrecisionFive = None
    acDimPrecisionFour = None
    acDimPrecisionOne = None
    acDimPrecisionSeven = None
    acDimPrecisionSix = None
    acDimPrecisionThree = None
    acDimPrecisionTwo = None
    acDimPrecisionZero = None
    value__ = None


class AcDimTextMovement(Enum):
    """ enum AcDimTextMovement, values: acDimLineWithText (0), acMoveTextAddLeader (1), acMoveTextNoLeader (2) """
    acDimLineWithText = None
    acMoveTextAddLeader = None
    acMoveTextNoLeader = None
    value__ = None


class AcDimToleranceJustify(Enum):
    """ enum AcDimToleranceJustify, values: acTolBottom (0), acTolMiddle (1), acTolTop (2) """
    acTolBottom = None
    acTolMiddle = None
    acTolTop = None
    value__ = None


class AcDimToleranceMethod(Enum):
    """ enum AcDimToleranceMethod, values: acTolBasic (4), acTolDeviation (2), acTolLimits (3), acTolNone (0), acTolSymmetrical (1) """
    acTolBasic = None
    acTolDeviation = None
    acTolLimits = None
    acTolNone = None
    acTolSymmetrical = None
    value__ = None


class AcDimUnits(Enum):
    """ enum AcDimUnits, values: acDimArchitectural (6), acDimArchitecturalStacked (4), acDimDecimal (2), acDimEngineering (3), acDimFractional (7), acDimFractionalStacked (5), acDimScientific (1), acDimWindowsDesktop (8) """
    acDimArchitectural = None
    acDimArchitecturalStacked = None
    acDimDecimal = None
    acDimEngineering = None
    acDimFractional = None
    acDimFractionalStacked = None
    acDimScientific = None
    acDimWindowsDesktop = None
    value__ = None


class AcDimVerticalJustification(Enum):
    """ enum AcDimVerticalJustification, values: acAbove (1), acJIS (3), acOutside (2), acUnder (4), acVertCentered (0) """
    acAbove = None
    acJIS = None
    acOutside = None
    acUnder = None
    acVertCentered = None
    value__ = None


class AcDragDisplayMode(Enum):
    """ enum AcDragDisplayMode, values: acDragDisplayAutomatically (2), acDragDisplayOnRequest (1), acDragDoNotDisplay (0) """
    acDragDisplayAutomatically = None
    acDragDisplayOnRequest = None
    acDragDoNotDisplay = None
    value__ = None


class AcDrawingAreaSCMCommand(Enum):
    """ enum AcDrawingAreaSCMCommand, values: acEnableSCM (2), acEnableSCMOptions (1), acEnter (0) """
    acEnableSCM = None
    acEnableSCMOptions = None
    acEnter = None
    value__ = None


class AcDrawingAreaSCMDefault(Enum):
    """ enum AcDrawingAreaSCMDefault, values: acRepeatLastCommand (0), acSCM (1) """
    acRepeatLastCommand = None
    acSCM = None
    value__ = None


class AcDrawingAreaSCMEdit(Enum):
    """ enum AcDrawingAreaSCMEdit, values: acEdRepeatLastCommand (0), acEdSCM (1) """
    acEdRepeatLastCommand = None
    acEdSCM = None
    value__ = None


class AcDrawingAreaShortCutMenu(Enum):
    """ enum AcDrawingAreaShortCutMenu, values: acNoDrawingAreaShortCutMenu (0), acUseDefaultDrawingAreaShortCutMenu (1) """
    acNoDrawingAreaShortCutMenu = None
    acUseDefaultDrawingAreaShortCutMenu = None
    value__ = None


class AcDrawingDirection(Enum):
    """ enum AcDrawingDirection, values: acBottomToTop (4), acByStyle (5), acLeftToRight (1), acRightToLeft (2), acTopToBottom (3) """
    acBottomToTop = None
    acByStyle = None
    acLeftToRight = None
    acRightToLeft = None
    acTopToBottom = None
    value__ = None


class AcDrawLeaderOrderType(Enum):
    """ enum AcDrawLeaderOrderType, values: acDrawLeaderHeadFirst (0), acDrawLeaderTailFirst (1) """
    acDrawLeaderHeadFirst = None
    acDrawLeaderTailFirst = None
    value__ = None


class AcDrawMLeaderOrderType(Enum):
    """ enum AcDrawMLeaderOrderType, values: acDrawContentFirst (0), acDrawLeaderFirst (1) """
    acDrawContentFirst = None
    acDrawLeaderFirst = None
    value__ = None


class AcDynamicBlockReferencePropertyUnitsType(Enum):
    """ enum AcDynamicBlockReferencePropertyUnitsType, values: acAngular (1), acArea (3), acDistance (2), acNoUnits (0) """
    acAngular = None
    acArea = None
    acDistance = None
    acNoUnits = None
    value__ = None


class AcEntityName(Enum):
    """ enum AcEntityName, values: ac3dFace (1), ac3dPolyline (2), ac3dSolid (3), acArc (4), acAttribute (5), acAttributeReference (6), acBlockReference (7), acCircle (8), acDgnUnderlay (47), acDim3PointAngular (41), acDimAligned (9), acDimAngular (10), acDimArcLength (44), acDimDiametric (12), acDimOrdinate (13), acDimRadial (14), acDimRadialLarge (45), acDimRotated (15), acDwfUnderlay (46), acEllipse (16), acExternalReference (42), acGroup (37), acHatch (17), acLeader (18), acLine (19), acMInsertBlock (38), acMLeader (48), acMLine (40), acMtext (21), acNurbSurface (51), acPdfUnderlay (50), acPoint (22), acPolyfaceMesh (39), acPolyline (23), acPolylineLight (24), acPolymesh (25), acPViewport (35), acRaster (26), acRay (27), acRegion (28), acShape (29), acSolid (30), acSpline (31), acSubDMesh (49), acTable (43), acText (32), acTolerance (33), acTrace (34), acXline (36) """
    ac3dFace = None
    ac3dPolyline = None
    ac3dSolid = None
    acArc = None
    acAttribute = None
    acAttributeReference = None
    acBlockReference = None
    acCircle = None
    acDgnUnderlay = None
    acDim3PointAngular = None
    acDimAligned = None
    acDimAngular = None
    acDimArcLength = None
    acDimDiametric = None
    acDimOrdinate = None
    acDimRadial = None
    acDimRadialLarge = None
    acDimRotated = None
    acDwfUnderlay = None
    acEllipse = None
    acExternalReference = None
    acGroup = None
    acHatch = None
    acLeader = None
    acLine = None
    acMInsertBlock = None
    acMLeader = None
    acMLine = None
    acMtext = None
    acNurbSurface = None
    acPdfUnderlay = None
    acPoint = None
    acPolyfaceMesh = None
    acPolyline = None
    acPolylineLight = None
    acPolymesh = None
    acPViewport = None
    acRaster = None
    acRay = None
    acRegion = None
    acShape = None
    acSolid = None
    acSpline = None
    acSubDMesh = None
    acTable = None
    acText = None
    acTolerance = None
    acTrace = None
    acXline = None
    value__ = None


class AcExtendOption(Enum):
    """ enum AcExtendOption, values: acExtendBoth (3), acExtendNone (0), acExtendOtherEntity (2), acExtendThisEntity (1) """
    acExtendBoth = None
    acExtendNone = None
    acExtendOtherEntity = None
    acExtendThisEntity = None
    value__ = None


class AcFormatOption(Enum):
    """ enum AcFormatOption, values: acForEditing (1), acForExpression (2), acIgnoreMtextFormat (8), acUseMaximumPrecision (4), kFormatOptionNone (0) """
    acForEditing = None
    acForExpression = None
    acIgnoreMtextFormat = None
    acUseMaximumPrecision = None
    kFormatOptionNone = None
    value__ = None


class AcGradientPatternType(Enum):
    """ enum AcGradientPatternType, values: acPreDefinedGradient (0), acUserDefinedGradient (1) """
    acPreDefinedGradient = None
    acUserDefinedGradient = None
    value__ = None


class AcGridLineStyle(Enum):
    """ enum AcGridLineStyle, values: acGridLineStyleDouble (2), acGridLineStyleSingle (1) """
    acGridLineStyleDouble = None
    acGridLineStyleSingle = None
    value__ = None


class AcGridLineType(Enum):
    """ enum AcGridLineType, values: acHorzBottom (4), acHorzInside (2), acHorzTop (1), acInvalidGridLine (0), acVertInside (16), acVertLeft (8), acVertRight (32) """
    acHorzBottom = None
    acHorzInside = None
    acHorzTop = None
    acInvalidGridLine = None
    acVertInside = None
    acVertLeft = None
    acVertRight = None
    value__ = None


class AcHatchObjectType(Enum):
    """ enum AcHatchObjectType, values: acGradientObject (1), acHatchObject (0) """
    acGradientObject = None
    acHatchObject = None
    value__ = None


class AcHatchStyle(Enum):
    """ enum AcHatchStyle, values: acHatchStyleIgnore (2), acHatchStyleNormal (0), acHatchStyleOuter (1) """
    acHatchStyleIgnore = None
    acHatchStyleNormal = None
    acHatchStyleOuter = None
    value__ = None


class AcHelixConstrainType(Enum):
    """ enum AcHelixConstrainType, values: acHeight (2), acTurnHeight (0), acTurns (1) """
    acHeight = None
    acTurnHeight = None
    acTurns = None
    value__ = None


class AcHelixTwistType(Enum):
    """ enum AcHelixTwistType, values: acCCW (0), acCW (1) """
    acCCW = None
    acCW = None
    value__ = None


class AcHorizontalAlignment(Enum):
    """ enum AcHorizontalAlignment, values: acHorizontalAlignmentAligned (3), acHorizontalAlignmentCenter (1), acHorizontalAlignmentFit (5), acHorizontalAlignmentLeft (0), acHorizontalAlignmentMiddle (4), acHorizontalAlignmentRight (2) """
    acHorizontalAlignmentAligned = None
    acHorizontalAlignmentCenter = None
    acHorizontalAlignmentFit = None
    acHorizontalAlignmentLeft = None
    acHorizontalAlignmentMiddle = None
    acHorizontalAlignmentRight = None
    value__ = None


class AcInsertUnits(Enum):
    """ enum AcInsertUnits, values: acInsertUnitsAngstroms (11), acInsertUnitsAstronomicalUnits (18), acInsertUnitsCentimeters (5), acInsertUnitsDecameters (15), acInsertUnitsDecimeters (14), acInsertUnitsFeet (2), acInsertUnitsGigameters (17), acInsertUnitsHectometers (16), acInsertUnitsInches (1), acInsertUnitsKilometers (7), acInsertUnitsLightYears (19), acInsertUnitsMeters (6), acInsertUnitsMicroinches (8), acInsertUnitsMicrons (13), acInsertUnitsMiles (3), acInsertUnitsMillimeters (4), acInsertUnitsMils (9), acInsertUnitsNanometers (12), acInsertUnitsParsecs (20), acInsertUnitsUnitless (0), acInsertUnitsUSSurveyFeet (21), acInsertUnitsUSSurveyInch (22), acInsertUnitsUSSurveyMile (24), acInsertUnitsUSSurveyYard (23), acInsertUnitsYards (10) """
    acInsertUnitsAngstroms = None
    acInsertUnitsAstronomicalUnits = None
    acInsertUnitsCentimeters = None
    acInsertUnitsDecameters = None
    acInsertUnitsDecimeters = None
    acInsertUnitsFeet = None
    acInsertUnitsGigameters = None
    acInsertUnitsHectometers = None
    acInsertUnitsInches = None
    acInsertUnitsKilometers = None
    acInsertUnitsLightYears = None
    acInsertUnitsMeters = None
    acInsertUnitsMicroinches = None
    acInsertUnitsMicrons = None
    acInsertUnitsMiles = None
    acInsertUnitsMillimeters = None
    acInsertUnitsMils = None
    acInsertUnitsNanometers = None
    acInsertUnitsParsecs = None
    acInsertUnitsUnitless = None
    acInsertUnitsUSSurveyFeet = None
    acInsertUnitsUSSurveyInch = None
    acInsertUnitsUSSurveyMile = None
    acInsertUnitsUSSurveyYard = None
    acInsertUnitsYards = None
    value__ = None


class AcInsertUnitsAction(Enum):
    """ enum AcInsertUnitsAction, values: acInsertUnitsAutoAssign (1), acInsertUnitsPrompt (0) """
    acInsertUnitsAutoAssign = None
    acInsertUnitsPrompt = None
    value__ = None


class AcISOPenWidth(Enum):
    """ enum AcISOPenWidth, values: acPenWidth013 (13), acPenWidth018 (18), acPenWidth025 (25), acPenWidth035 (35), acPenWidth050 (50), acPenWidth070 (70), acPenWidth100 (100), acPenWidth140 (140), acPenWidth200 (200), acPenWidthUnk (-1) """
    acPenWidth013 = None
    acPenWidth018 = None
    acPenWidth025 = None
    acPenWidth035 = None
    acPenWidth050 = None
    acPenWidth070 = None
    acPenWidth100 = None
    acPenWidth140 = None
    acPenWidth200 = None
    acPenWidthUnk = None
    value__ = None


class AcKeyboardAccelerator(Enum):
    """ enum AcKeyboardAccelerator, values: acPreferenceClassic (0), acPreferenceCustom (1) """
    acPreferenceClassic = None
    acPreferenceCustom = None
    value__ = None


class AcKeyboardPriority(Enum):
    """ enum AcKeyboardPriority, values: acKeyboardEntry (1), acKeyboardEntryExceptScripts (2), acKeyboardRunningObjSnap (0) """
    acKeyboardEntry = None
    acKeyboardEntryExceptScripts = None
    acKeyboardRunningObjSnap = None
    value__ = None


class AcLayerStateMask(Enum):
    """ enum AcLayerStateMask, values: acLsAll (65535), acLsColor (32), acLsFrozen (2), acLsLineType (64), acLsLineWeight (128), acLsLocked (4), acLsNewViewport (16), acLsNone (0), acLsOn (1), acLsPlot (8), acLsPlotStyle (256) """
    acLsAll = None
    acLsColor = None
    acLsFrozen = None
    acLsLineType = None
    acLsLineWeight = None
    acLsLocked = None
    acLsNewViewport = None
    acLsNone = None
    acLsOn = None
    acLsPlot = None
    acLsPlotStyle = None
    value__ = None


class AcLeaderType(Enum):
    """ enum AcLeaderType, values: acLineNoArrow (0), acLineWithArrow (2), acSplineNoArrow (1), acSplineWithArrow (3) """
    acLineNoArrow = None
    acLineWithArrow = None
    acSplineNoArrow = None
    acSplineWithArrow = None
    value__ = None


class AcLineSpacingStyle(Enum):
    """ enum AcLineSpacingStyle, values: acLineSpacingStyleAtLeast (1), acLineSpacingStyleExactly (2) """
    acLineSpacingStyleAtLeast = None
    acLineSpacingStyleExactly = None
    value__ = None


class AcLineWeight(Enum):
    """ enum AcLineWeight, values: acLnWt000 (0), acLnWt005 (5), acLnWt009 (9), acLnWt013 (13), acLnWt015 (15), acLnWt018 (18), acLnWt020 (20), acLnWt025 (25), acLnWt030 (30), acLnWt035 (35), acLnWt040 (40), acLnWt050 (50), acLnWt053 (53), acLnWt060 (60), acLnWt070 (70), acLnWt080 (80), acLnWt090 (90), acLnWt100 (100), acLnWt106 (106), acLnWt120 (120), acLnWt140 (140), acLnWt158 (158), acLnWt200 (200), acLnWt211 (211), acLnWtByBlock (-2), acLnWtByLayer (-1), acLnWtByLwDefault (-3) """
    acLnWt000 = None
    acLnWt005 = None
    acLnWt009 = None
    acLnWt013 = None
    acLnWt015 = None
    acLnWt018 = None
    acLnWt020 = None
    acLnWt025 = None
    acLnWt030 = None
    acLnWt035 = None
    acLnWt040 = None
    acLnWt050 = None
    acLnWt053 = None
    acLnWt060 = None
    acLnWt070 = None
    acLnWt080 = None
    acLnWt090 = None
    acLnWt100 = None
    acLnWt106 = None
    acLnWt120 = None
    acLnWt140 = None
    acLnWt158 = None
    acLnWt200 = None
    acLnWt211 = None
    acLnWtByBlock = None
    acLnWtByLayer = None
    acLnWtByLwDefault = None
    value__ = None


class AcLoadPalette(Enum):
    """ enum AcLoadPalette, values: acPaletteByDrawing (0), acPaletteBySession (1) """
    acPaletteByDrawing = None
    acPaletteBySession = None
    value__ = None


class AcLoftedSurfaceNormalType(Enum):
    """ enum AcLoftedSurfaceNormalType, values: acAllNormal (5), acEndsNormal (4), acFirstNormal (2), acLastNormal (3), acRuled (0), acSmooth (1), acUseDraftAngles (6) """
    acAllNormal = None
    acEndsNormal = None
    acFirstNormal = None
    acLastNormal = None
    acRuled = None
    acSmooth = None
    acUseDraftAngles = None
    value__ = None


class AcLoopType(Enum):
    """ enum AcLoopType, values: acHatchLoopTypeDefault (0), acHatchLoopTypeDerived (4), acHatchLoopTypeExternal (1), acHatchLoopTypePolyline (2), acHatchLoopTypeTextbox (8) """
    acHatchLoopTypeDefault = None
    acHatchLoopTypeDerived = None
    acHatchLoopTypeExternal = None
    acHatchLoopTypePolyline = None
    acHatchLoopTypeTextbox = None
    value__ = None


class AcMeasurementUnits(Enum):
    """ enum AcMeasurementUnits, values: acEnglish (0), acMetric (1) """
    acEnglish = None
    acMetric = None
    value__ = None


class AcMenuFileType(Enum):
    """ enum AcMenuFileType, values: acMenuFileCompiled (0), acMenuFileSource (1) """
    acMenuFileCompiled = None
    acMenuFileSource = None
    value__ = None


class AcMenuGroupType(Enum):
    """ enum AcMenuGroupType, values: acBaseMenuGroup (0), acPartialMenuGroup (1) """
    acBaseMenuGroup = None
    acPartialMenuGroup = None
    value__ = None


class AcMenuItemType(Enum):
    """ enum AcMenuItemType, values: acMenuItem (0), acMenuSeparator (1), acMenuSubMenu (2) """
    acMenuItem = None
    acMenuSeparator = None
    acMenuSubMenu = None
    value__ = None


class AcMergeCellStyleOption(Enum):
    """ enum AcMergeCellStyleOption, values: acMergeCellStyleConvertDuplicatesToOverrides (4), acMergeCellStyleCopyDuplicates (1), acMergeCellStyleIgnoreNewStyles (8), acMergeCellStyleNone (0), acMergeCellStyleOverwriteDuplicates (2) """
    acMergeCellStyleConvertDuplicatesToOverrides = None
    acMergeCellStyleCopyDuplicates = None
    acMergeCellStyleIgnoreNewStyles = None
    acMergeCellStyleNone = None
    acMergeCellStyleOverwriteDuplicates = None
    value__ = None


class AcMeshCreaseType(Enum):
    """ enum AcMeshCreaseType, values: acAlwaysCrease (1), acCreaseByLevel (2), acNoneCrease (0) """
    acAlwaysCrease = None
    acCreaseByLevel = None
    acNoneCrease = None
    value__ = None


class AcMLeaderContentType(Enum):
    """ enum AcMLeaderContentType, values: acBlockContent (1), acMTextContent (2), acNoneContent (0) """
    acBlockContent = None
    acMTextContent = None
    acNoneContent = None
    value__ = None


class AcMLeaderType(Enum):
    """ enum AcMLeaderType, values: acInVisibleLeader (0), acSplineLeader (2), acStraightLeader (1) """
    acInVisibleLeader = None
    acSplineLeader = None
    acStraightLeader = None
    value__ = None


class AcMLineJustification(Enum):
    """ enum AcMLineJustification, values: acBottom (2), acTop (0), acZero (1) """
    acBottom = None
    acTop = None
    acZero = None
    value__ = None


class AcOlePlotQuality(Enum):
    """ enum AcOlePlotQuality, values: acOPQHighGraphics (2), acOPQLowGraphics (1), acOPQMonochrome (0) """
    acOPQHighGraphics = None
    acOPQLowGraphics = None
    acOPQMonochrome = None
    value__ = None


class AcOleQuality(Enum):
    """ enum AcOleQuality, values: acOQGraphics (2), acOQHighPhoto (4), acOQLineArt (0), acOQPhoto (3), acOQText (1) """
    acOQGraphics = None
    acOQHighPhoto = None
    acOQLineArt = None
    acOQPhoto = None
    acOQText = None
    value__ = None


class AcOleType(Enum):
    """ enum AcOleType, values: acOTEmbedded (2), acOTLink (1), acOTStatic (3) """
    acOTEmbedded = None
    acOTLink = None
    acOTStatic = None
    value__ = None


class AcOnOff(Enum):
    """ enum AcOnOff, values: acOff (0), acOn (1) """
    acOff = None
    acOn = None
    value__ = None


class AcParseOption(Enum):
    """ enum AcParseOption, values: acParseOptionNone (0), acPreserveMtextFormat (2), acSetDefaultFormat (1) """
    acParseOptionNone = None
    acPreserveMtextFormat = None
    acSetDefaultFormat = None
    value__ = None


class AcPatternType(Enum):
    """ enum AcPatternType, values: acHatchPatternTypeCustomDefined (2), acHatchPatternTypePreDefined (1), acHatchPatternTypeUserDefined (0) """
    acHatchPatternTypeCustomDefined = None
    acHatchPatternTypePreDefined = None
    acHatchPatternTypeUserDefined = None
    value__ = None


class AcPlotOrientation(Enum):
    """ enum AcPlotOrientation, values: acPlotOrientationLandscape (1), acPlotOrientationPortrait (0) """
    acPlotOrientationLandscape = None
    acPlotOrientationPortrait = None
    value__ = None


class AcPlotPaperUnits(Enum):
    """ enum AcPlotPaperUnits, values: acInches (0), acMillimeters (1), acPixels (2) """
    acInches = None
    acMillimeters = None
    acPixels = None
    value__ = None


class AcPlotPolicy(Enum):
    """ enum AcPlotPolicy, values: acPolicyLegacy (1), acPolicyNamed (0) """
    acPolicyLegacy = None
    acPolicyNamed = None
    value__ = None


class AcPlotPolicyForLegacyDwgs(Enum):
    """ enum AcPlotPolicyForLegacyDwgs, values: acPolicyLegacyDefault (0), acPolicyLegacyLegacy (2), acPolicyLegacyQuery (1) """
    acPolicyLegacyDefault = None
    acPolicyLegacyLegacy = None
    acPolicyLegacyQuery = None
    value__ = None


class AcPlotPolicyForNewDwgs(Enum):
    """ enum AcPlotPolicyForNewDwgs, values: acPolicyNewDefault (0), acPolicyNewLegacy (1) """
    acPolicyNewDefault = None
    acPolicyNewLegacy = None
    value__ = None


class AcPlotRotation(Enum):
    """ enum AcPlotRotation, values: ac0degrees (0), ac180degrees (2), ac270degrees (3), ac90degrees (1) """
    ac0degrees = None
    ac180degrees = None
    ac270degrees = None
    ac90degrees = None
    value__ = None


class AcPlotScale(Enum):
    """ enum AcPlotScale, values: ac1_1 (16), ac1_10 (21), ac1_100 (27), ac1_128in_1ft (1), ac1_16 (22), ac1_16in_1ft (4), ac1_2 (17), ac1_20 (23), ac1_2in_1ft (10), ac1_30 (24), ac1_32in_1ft (3), ac1_4 (18), ac1_40 (25), ac1_4in_1ft (8), ac1_5 (19), ac1_50 (26), ac1_64in_1ft (2), ac1_8 (20), ac1_8in_1ft (6), ac10_1 (31), ac100_1 (32), ac1ft_1ft (15), ac1in_1ft (12), ac2_1 (28), ac3_16in_1ft (7), ac3_32in_1ft (5), ac3_4in_1ft (11), ac3_8in_1ft (9), ac3in_1ft (13), ac4_1 (29), ac6in_1ft (14), ac8_1 (30), acScaleToFit (0) """
    ac100_1 = None
    ac10_1 = None
    ac1ft_1ft = None
    ac1in_1ft = None
    ac1_1 = None
    ac1_10 = None
    ac1_100 = None
    ac1_128in_1ft = None
    ac1_16 = None
    ac1_16in_1ft = None
    ac1_2 = None
    ac1_20 = None
    ac1_2in_1ft = None
    ac1_30 = None
    ac1_32in_1ft = None
    ac1_4 = None
    ac1_40 = None
    ac1_4in_1ft = None
    ac1_5 = None
    ac1_50 = None
    ac1_64in_1ft = None
    ac1_8 = None
    ac1_8in_1ft = None
    ac2_1 = None
    ac3in_1ft = None
    ac3_16in_1ft = None
    ac3_32in_1ft = None
    ac3_4in_1ft = None
    ac3_8in_1ft = None
    ac4_1 = None
    ac6in_1ft = None
    ac8_1 = None
    acScaleToFit = None
    value__ = None


class AcPlotType(Enum):
    """ enum AcPlotType, values: acDisplay (0), acExtents (1), acLayout (5), acLimits (2), acView (3), acWindow (4) """
    acDisplay = None
    acExtents = None
    acLayout = None
    acLimits = None
    acView = None
    acWindow = None
    value__ = None


class AcPointCloudColorType(Enum):
    """ enum AcPointCloudColorType, values: acByColor (1), acTrueColor (0) """
    acByColor = None
    acTrueColor = None
    value__ = None


class AcPointCloudExStylizationType(Enum):
    """ enum AcPointCloudExStylizationType, values: acClassification (5), acElevation (4), acIntensities (3), acNormals (2), acObject (1), acRGB (0) """
    acClassification = None
    acElevation = None
    acIntensities = None
    acNormals = None
    acObject = None
    acRGB = None
    value__ = None


class AcPointCloudIntensityStyle(Enum):
    """ enum AcPointCloudIntensityStyle, values: acIntensityBlue (4), acIntensityEditableFlag (5), acIntensityGrayscale (0), acIntensityGreen (3), acIntensityRainbow (1), acIntensityRed (2) """
    acIntensityBlue = None
    acIntensityEditableFlag = None
    acIntensityGrayscale = None
    acIntensityGreen = None
    acIntensityRainbow = None
    acIntensityRed = None
    value__ = None


class AcPointCloudStylizationType(Enum):
    """ enum AcPointCloudStylizationType, values: acIntensity (3), acNormal (2), acObjectColor (1), acScanColor (0) """
    acIntensity = None
    acNormal = None
    acObjectColor = None
    acScanColor = None
    value__ = None


class AcPolylineType(Enum):
    """ enum AcPolylineType, values: acCubicSplinePoly (3), acFitCurvePoly (1), acQuadSplinePoly (2), acSimplePoly (0) """
    acCubicSplinePoly = None
    acFitCurvePoly = None
    acQuadSplinePoly = None
    acSimplePoly = None
    value__ = None


class AcPolymeshType(Enum):
    """ enum AcPolymeshType, values: acBezierSurfaceMesh (8), acCubicSurfaceMesh (6), acQuadSurfaceMesh (5), acSimpleMesh (0) """
    acBezierSurfaceMesh = None
    acCubicSurfaceMesh = None
    acQuadSurfaceMesh = None
    acSimpleMesh = None
    value__ = None


class AcPredefBlockType(Enum):
    """ enum AcPredefBlockType, values: acBlockBox (3), acBlockCircle (2), acBlockHexagon (4), acBlockImperial (0), acBlockSlot (1), acBlockTriangle (5), acBlockUserDefined (6) """
    acBlockBox = None
    acBlockCircle = None
    acBlockHexagon = None
    acBlockImperial = None
    acBlockSlot = None
    acBlockTriangle = None
    acBlockUserDefined = None
    value__ = None


class AcPreviewMode(Enum):
    """ enum AcPreviewMode, values: acFullPreview (1), acPartialPreview (0) """
    acFullPreview = None
    acPartialPreview = None
    value__ = None


class AcPrinterSpoolAlert(Enum):
    """ enum AcPrinterSpoolAlert, values: acPrinterAlertOnce (1), acPrinterAlwaysAlert (0), acPrinterNeverAlert (3), acPrinterNeverAlertLogOnce (2) """
    acPrinterAlertOnce = None
    acPrinterAlwaysAlert = None
    acPrinterNeverAlert = None
    acPrinterNeverAlertLogOnce = None
    value__ = None


class AcProxyImage(Enum):
    """ enum AcProxyImage, values: acProxyBoundingBox (2), acProxyNotShow (0), acProxyShow (1) """
    acProxyBoundingBox = None
    acProxyNotShow = None
    acProxyShow = None
    value__ = None


class AcRegenType(Enum):
    """ enum AcRegenType, values: acActiveViewport (0), acAllViewports (1) """
    acActiveViewport = None
    acAllViewports = None
    value__ = None


class AcRotationAngle(Enum):
    """ enum AcRotationAngle, values: acDegrees000 (0), acDegrees090 (1), acDegrees180 (2), acDegrees270 (3), acDegreesUnknown (-1) """
    acDegrees000 = None
    acDegrees090 = None
    acDegrees180 = None
    acDegrees270 = None
    acDegreesUnknown = None
    value__ = None


class AcRowType(Enum):
    """ enum AcRowType, values: acDataRow (1), acHeaderRow (4), acTitleRow (2), acUnknownRow (0) """
    acDataRow = None
    acHeaderRow = None
    acTitleRow = None
    acUnknownRow = None
    value__ = None


class AcSaveAsType(Enum):
    """ enum AcSaveAsType, values: ac2000_dwg (12), ac2000_dxf (13), ac2000_Template (14), ac2004_dwg (24), ac2004_dxf (25), ac2004_Template (26), ac2007_dwg (36), ac2007_dxf (37), ac2007_Template (38), ac2010_dwg (48), ac2010_dxf (49), ac2010_Template (50), ac2013_dwg (60), ac2013_dxf (61), ac2013_Template (62), ac2018_dwg (64), ac2018_dxf (65), ac2018_Template (66), acNative (64), acR12_dxf (1), acR13_dwg (4), acR13_dxf (5), acR14_dwg (8), acR14_dxf (9), acR15_dwg (12), acR15_dxf (13), acR15_Template (14), acR18_dwg (24), acR18_dxf (25), acR18_Template (26), acUnknown (-1) """
    ac2000_dwg = None
    ac2000_dxf = None
    ac2000_Template = None
    ac2004_dwg = None
    ac2004_dxf = None
    ac2004_Template = None
    ac2007_dwg = None
    ac2007_dxf = None
    ac2007_Template = None
    ac2010_dwg = None
    ac2010_dxf = None
    ac2010_Template = None
    ac2013_dwg = None
    ac2013_dxf = None
    ac2013_Template = None
    ac2018_dwg = None
    ac2018_dxf = None
    ac2018_Template = None
    acNative = None
    acR12_dxf = None
    acR13_dwg = None
    acR13_dxf = None
    acR14_dwg = None
    acR14_dxf = None
    acR15_dwg = None
    acR15_dxf = None
    acR15_Template = None
    acR18_dwg = None
    acR18_dxf = None
    acR18_Template = None
    acUnknown = None
    value__ = None


class AcSectionGeneration(Enum):
    """ enum AcSectionGeneration, values: acSectionGenerationDestinationFile (64), acSectionGenerationDestinationNewBlock (16), acSectionGenerationDestinationReplaceBlock (32), acSectionGenerationSourceAllObjects (1), acSectionGenerationSourceSelectedObjects (2) """
    acSectionGenerationDestinationFile = None
    acSectionGenerationDestinationNewBlock = None
    acSectionGenerationDestinationReplaceBlock = None
    acSectionGenerationSourceAllObjects = None
    acSectionGenerationSourceSelectedObjects = None
    value__ = None


class AcSectionState(Enum):
    """ enum AcSectionState, values: acSectionStateBoundary (2), acSectionStatePlane (1), acSectionStateVolume (4) """
    acSectionStateBoundary = None
    acSectionStatePlane = None
    acSectionStateVolume = None
    value__ = None


class AcSectionState2(Enum):
    """ enum AcSectionState2, values: acSectionState2Boundary (4), acSectionState2Plane (1), acSectionState2Slice (2), acSectionState2Volume (8) """
    acSectionState2Boundary = None
    acSectionState2Plane = None
    acSectionState2Slice = None
    acSectionState2Volume = None
    value__ = None


class AcSectionSubItem(Enum):
    """ enum AcSectionSubItem, values: acSectionSubItemBackLine (8), acSectionSubItemBackLineBottom (32), acSectionSubItemBackLineTop (16), acSectionSubItemkNone (0), acSectionSubItemSectionLine (1), acSectionSubItemSectionLineBottom (4), acSectionSubItemSectionLineTop (2), acSectionSubItemVerticalLineBottom (128), acSectionSubItemVerticalLineTop (64) """
    acSectionSubItemBackLine = None
    acSectionSubItemBackLineBottom = None
    acSectionSubItemBackLineTop = None
    acSectionSubItemkNone = None
    acSectionSubItemSectionLine = None
    acSectionSubItemSectionLineBottom = None
    acSectionSubItemSectionLineTop = None
    acSectionSubItemVerticalLineBottom = None
    acSectionSubItemVerticalLineTop = None
    value__ = None


class AcSectionType(Enum):
    """ enum AcSectionType, values: acSectionType2dSection (2), acSectionType3dSection (4), acSectionTypeLiveSection (1) """
    acSectionType2dSection = None
    acSectionType3dSection = None
    acSectionTypeLiveSection = None
    value__ = None


class AcSegmentAngleType(Enum):
    """ enum AcSegmentAngleType, values: acDegrees15 (1), acDegrees30 (2), acDegrees45 (3), acDegrees60 (4), acDegrees90 (6), acDegreesAny (0), acDegreesHorz (12) """
    acDegrees15 = None
    acDegrees30 = None
    acDegrees45 = None
    acDegrees60 = None
    acDegrees90 = None
    acDegreesAny = None
    acDegreesHorz = None
    value__ = None


class AcSelect(Enum):
    """ enum AcSelect, values: acSelectionSetAll (5), acSelectionSetCrossing (1), acSelectionSetCrossingPolygon (7), acSelectionSetFence (2), acSelectionSetLast (4), acSelectionSetPrevious (3), acSelectionSetWindow (0), acSelectionSetWindowPolygon (6) """
    acSelectionSetAll = None
    acSelectionSetCrossing = None
    acSelectionSetCrossingPolygon = None
    acSelectionSetFence = None
    acSelectionSetLast = None
    acSelectionSetPrevious = None
    acSelectionSetWindow = None
    acSelectionSetWindowPolygon = None
    value__ = None


class AcSelectType(Enum):
    """ enum AcSelectType, values: acTableSelectCrossing (2), acTableSelectWindow (1) """
    acTableSelectCrossing = None
    acTableSelectWindow = None
    value__ = None


class AcShadePlot(Enum):
    """ enum AcShadePlot, values: acShadePlotAsDisplayed (0), acShadePlotHidden (2), acShadePlotRendered (3), acShadePlotWireframe (1) """
    acShadePlotAsDisplayed = None
    acShadePlotHidden = None
    acShadePlotRendered = None
    acShadePlotWireframe = None
    value__ = None


class AcShadowDisplayType(Enum):
    """ enum AcShadowDisplayType, values: acCastsAndReceivesShadows (0), acCastsShadows (1), acIgnoreShadows (3), acReceivesShadows (2) """
    acCastsAndReceivesShadows = None
    acCastsShadows = None
    acIgnoreShadows = None
    acReceivesShadows = None
    value__ = None


class AcSplineFrameType(Enum):
    """ enum AcSplineFrameType, values: acHide (1), acShow (0) """
    acHide = None
    acShow = None
    value__ = None


class AcSplineKnotParameterizationType(Enum):
    """ enum AcSplineKnotParameterizationType, values: acChord (0), acCustomParameterization (15), acSqrtChord (1), acUniformParam (2) """
    acChord = None
    acCustomParameterization = None
    acSqrtChord = None
    acUniformParam = None
    value__ = None


class AcSplineMethodType(Enum):
    """ enum AcSplineMethodType, values: acControlVertices (1), acFit (0) """
    acControlVertices = None
    acFit = None
    value__ = None


class AcTableDirection(Enum):
    """ enum AcTableDirection, values: acTableBottomToTop (1), acTableTopToBottom (0) """
    acTableBottomToTop = None
    acTableTopToBottom = None
    value__ = None


class AcTableFlowDirection(Enum):
    """ enum AcTableFlowDirection, values: acTableFlowDownOrUp (2), acTableFlowLeft (4), acTableFlowRight (1) """
    acTableFlowDownOrUp = None
    acTableFlowLeft = None
    acTableFlowRight = None
    value__ = None


class AcTableStyleOverrides(Enum):
    """ enum AcTableStyleOverrides, values: acCellAlign (130), acCellBackgroundColor (132), acCellBackgroundFillNone (131), acCellBottomGridColor (138), acCellBottomGridLineWeight (142), acCellBottomVisibility (146), acCellContentColor (133), acCellDataType (148), acCellLeftGridColor (139), acCellLeftGridLineWeight (143), acCellLeftVisibility (147), acCellRightGridColor (137), acCellRightGridLineWeight (141), acCellRightVisibility (145), acCellTextHeight (135), acCellTextStyle (134), acCellTopGridColor (136), acCellTopGridLineWeight (140), acCellTopVisibility (144), acDataHorzBottomColor (54), acDataHorzBottomLineWeight (84), acDataHorzBottomVisibility (114), acDataHorzInsideColor (53), acDataHorzInsideLineWeight (83), acDataHorzInsideVisibility (113), acDataHorzTopColor (52), acDataHorzTopLineWeight (82), acDataHorzTopVisibility (112), acDataRowAlignment (17), acDataRowColor (8), acDataRowDataType (26), acDataRowFillColor (14), acDataRowFillNone (11), acDataRowTextHeight (23), acDataRowTextStyle (20), acDataVertInsideColor (56), acDataVertInsideLineWeight (86), acDataVertInsideVisibility (116), acDataVertLeftColor (55), acDataVertLeftLineWeight (85), acDataVertLeftVisibility (115), acDataVertRightColor (57), acDataVertRightLineWeight (87), acDataVertRightVisibility (117), acFlowDirection (3), acHeaderHorzBottomColor (48), acHeaderHorzBottomLineWeight (78), acHeaderHorzBottomVisibility (108), acHeaderHorzInsideColor (47), acHeaderHorzInsideLineWeight (77), acHeaderHorzInsideVisibility (107), acHeaderHorzTopColor (46), acHeaderHorzTopLineWeight (76), acHeaderHorzTopVisibility (106), acHeaderRowAlignment (16), acHeaderRowColor (7), acHeaderRowDataType (25), acHeaderRowFillColor (13), acHeaderRowFillNone (10), acHeaderRowTextHeight (22), acHeaderRowTextStyle (19), acHeaderSuppressed (2), acHeaderVertInsideColor (50), acHeaderVertInsideLineWeight (80), acHeaderVertInsideVisibility (110), acHeaderVertLeftColor (49), acHeaderVertLeftLineWeight (79), acHeaderVertLeftVisibility (109), acHeaderVertRightColor (51), acHeaderVertRightLineWeight (81), acHeaderVertRightVisibility (111), acHorzCellMargin (4), acTitleHorzBottomColor (42), acTitleHorzBottomLineWeight (72), acTitleHorzBottomVisibility (102), acTitleHorzInsideColor (41), acTitleHorzInsideLineWeight (71), acTitleHorzInsideVisibility (101), acTitleHorzTopColor (40), acTitleHorzTopLineWeight (70), acTitleHorzTopVisibility (100), acTitleRowAlignment (15), acTitleRowColor (6), acTitleRowDataType (24), acTitleRowFillColor (12), acTitleRowFillNone (9), acTitleRowTextHeight (21), acTitleRowTextStyle (18), acTitleSuppressed (1), acTitleVertInsideColor (44), acTitleVertInsideLineWeight (74), acTitleVertInsideVisibility (104), acTitleVertLeftColor (43), acTitleVertLeftLineWeight (73), acTitleVertLeftVisibility (103), acTitleVertRightColor (45), acTitleVertRightLineWeight (75), acTitleVertRightVisibility (105), acVertCellMargin (5) """
    acCellAlign = None
    acCellBackgroundColor = None
    acCellBackgroundFillNone = None
    acCellBottomGridColor = None
    acCellBottomGridLineWeight = None
    acCellBottomVisibility = None
    acCellContentColor = None
    acCellDataType = None
    acCellLeftGridColor = None
    acCellLeftGridLineWeight = None
    acCellLeftVisibility = None
    acCellRightGridColor = None
    acCellRightGridLineWeight = None
    acCellRightVisibility = None
    acCellTextHeight = None
    acCellTextStyle = None
    acCellTopGridColor = None
    acCellTopGridLineWeight = None
    acCellTopVisibility = None
    acDataHorzBottomColor = None
    acDataHorzBottomLineWeight = None
    acDataHorzBottomVisibility = None
    acDataHorzInsideColor = None
    acDataHorzInsideLineWeight = None
    acDataHorzInsideVisibility = None
    acDataHorzTopColor = None
    acDataHorzTopLineWeight = None
    acDataHorzTopVisibility = None
    acDataRowAlignment = None
    acDataRowColor = None
    acDataRowDataType = None
    acDataRowFillColor = None
    acDataRowFillNone = None
    acDataRowTextHeight = None
    acDataRowTextStyle = None
    acDataVertInsideColor = None
    acDataVertInsideLineWeight = None
    acDataVertInsideVisibility = None
    acDataVertLeftColor = None
    acDataVertLeftLineWeight = None
    acDataVertLeftVisibility = None
    acDataVertRightColor = None
    acDataVertRightLineWeight = None
    acDataVertRightVisibility = None
    acFlowDirection = None
    acHeaderHorzBottomColor = None
    acHeaderHorzBottomLineWeight = None
    acHeaderHorzBottomVisibility = None
    acHeaderHorzInsideColor = None
    acHeaderHorzInsideLineWeight = None
    acHeaderHorzInsideVisibility = None
    acHeaderHorzTopColor = None
    acHeaderHorzTopLineWeight = None
    acHeaderHorzTopVisibility = None
    acHeaderRowAlignment = None
    acHeaderRowColor = None
    acHeaderRowDataType = None
    acHeaderRowFillColor = None
    acHeaderRowFillNone = None
    acHeaderRowTextHeight = None
    acHeaderRowTextStyle = None
    acHeaderSuppressed = None
    acHeaderVertInsideColor = None
    acHeaderVertInsideLineWeight = None
    acHeaderVertInsideVisibility = None
    acHeaderVertLeftColor = None
    acHeaderVertLeftLineWeight = None
    acHeaderVertLeftVisibility = None
    acHeaderVertRightColor = None
    acHeaderVertRightLineWeight = None
    acHeaderVertRightVisibility = None
    acHorzCellMargin = None
    acTitleHorzBottomColor = None
    acTitleHorzBottomLineWeight = None
    acTitleHorzBottomVisibility = None
    acTitleHorzInsideColor = None
    acTitleHorzInsideLineWeight = None
    acTitleHorzInsideVisibility = None
    acTitleHorzTopColor = None
    acTitleHorzTopLineWeight = None
    acTitleHorzTopVisibility = None
    acTitleRowAlignment = None
    acTitleRowColor = None
    acTitleRowDataType = None
    acTitleRowFillColor = None
    acTitleRowFillNone = None
    acTitleRowTextHeight = None
    acTitleRowTextStyle = None
    acTitleSuppressed = None
    acTitleVertInsideColor = None
    acTitleVertInsideLineWeight = None
    acTitleVertInsideVisibility = None
    acTitleVertLeftColor = None
    acTitleVertLeftLineWeight = None
    acTitleVertLeftVisibility = None
    acTitleVertRightColor = None
    acTitleVertRightLineWeight = None
    acTitleVertRightVisibility = None
    acVertCellMargin = None
    value__ = None


class AcTextAlignmentType(Enum):
    """ enum AcTextAlignmentType, values: acCenterAlignment (1), acLeftAlignment (0), acRightAlignment (2) """
    acCenterAlignment = None
    acLeftAlignment = None
    acRightAlignment = None
    value__ = None


class AcTextAngleType(Enum):
    """ enum AcTextAngleType, values: acAlwaysRightReadingAngle (2), acHorizontalAngle (1), acInsertAngle (0) """
    acAlwaysRightReadingAngle = None
    acHorizontalAngle = None
    acInsertAngle = None
    value__ = None


class AcTextAttachmentDirection(Enum):
    """ enum AcTextAttachmentDirection, values: acAttachmentHorizontal (0), acAttachmentVertical (1) """
    acAttachmentHorizontal = None
    acAttachmentVertical = None
    value__ = None


class AcTextAttachmentType(Enum):
    """ enum AcTextAttachmentType, values: acAttachmentAllLine (8), acAttachmentBottomLine (7), acAttachmentBottomOfBottom (6), acAttachmentBottomOfTop (2), acAttachmentBottomOfTopLine (3), acAttachmentMiddle (4), acAttachmentMiddleOfBottom (5), acAttachmentMiddleOfTop (1), acAttachmentTopOfTop (0) """
    acAttachmentAllLine = None
    acAttachmentBottomLine = None
    acAttachmentBottomOfBottom = None
    acAttachmentBottomOfTop = None
    acAttachmentBottomOfTopLine = None
    acAttachmentMiddle = None
    acAttachmentMiddleOfBottom = None
    acAttachmentMiddleOfTop = None
    acAttachmentTopOfTop = None
    value__ = None


class AcTextFontStyle(Enum):
    """ enum AcTextFontStyle, values: acFontBold (2), acFontBoldItalic (3), acFontItalic (1), acFontRegular (0) """
    acFontBold = None
    acFontBoldItalic = None
    acFontItalic = None
    acFontRegular = None
    value__ = None


class AcTextGenerationFlag(Enum):
    """ enum AcTextGenerationFlag, values: acTextFlagBackward (2), acTextFlagUpsideDown (4) """
    acTextFlagBackward = None
    acTextFlagUpsideDown = None
    value__ = None


class AcToolbarDockStatus(Enum):
    """ enum AcToolbarDockStatus, values: acToolbarDockBottom (1), acToolbarDockLeft (2), acToolbarDockRight (3), acToolbarDockTop (0), acToolbarFloating (4) """
    acToolbarDockBottom = None
    acToolbarDockLeft = None
    acToolbarDockRight = None
    acToolbarDockTop = None
    acToolbarFloating = None
    value__ = None


class AcToolbarItemType(Enum):
    """ enum AcToolbarItemType, values: acToolbarButton (0), acToolbarControl (2), acToolbarFlyout (3), acToolbarSeparator (1) """
    acToolbarButton = None
    acToolbarControl = None
    acToolbarFlyout = None
    acToolbarSeparator = None
    value__ = None


class AcUnderlayLayerOverrideType(Enum):
    """ enum AcUnderlayLayerOverrideType, values: acApplied (1), acNoOverrides (0) """
    acApplied = None
    acNoOverrides = None
    value__ = None


class AcUnits(Enum):
    """ enum AcUnits, values: acArchitectural (4), acDecimal (2), acDefaultUnits (-1), acEngineering (3), acFractional (5), acScientific (1) """
    acArchitectural = None
    acDecimal = None
    acDefaultUnits = None
    acEngineering = None
    acFractional = None
    acScientific = None
    value__ = None


class AcValueDataType(Enum):
    """ enum AcValueDataType, values: acBuffer (128), acDate (8), acDouble (2), acGeneral (512), acLong (1), acObjectId (64), acPoint2d (16), acPoint3d (32), acResbuf (256), acString (4), acUnknownDataType (0) """
    acBuffer = None
    acDate = None
    acDouble = None
    acGeneral = None
    acLong = None
    acObjectId = None
    acPoint2d = None
    acPoint3d = None
    acResbuf = None
    acString = None
    acUnknownDataType = None
    value__ = None


class AcValueUnitType(Enum):
    """ enum AcValueUnitType, values: acUnitAngle (2), acUnitArea (4), acUnitDistance (1), acUnitless (0), acUnitVolume (8) """
    acUnitAngle = None
    acUnitArea = None
    acUnitDistance = None
    acUnitless = None
    acUnitVolume = None
    value__ = None


class AcVerticalAlignment(Enum):
    """ enum AcVerticalAlignment, values: acVerticalAlignmentBaseline (0), acVerticalAlignmentBottom (1), acVerticalAlignmentMiddle (2), acVerticalAlignmentTop (3) """
    acVerticalAlignmentBaseline = None
    acVerticalAlignmentBottom = None
    acVerticalAlignmentMiddle = None
    acVerticalAlignmentTop = None
    value__ = None


class AcVerticalTextAttachmentType(Enum):
    """ enum AcVerticalTextAttachmentType, values: acAttachmentCenter (0), acAttachmentLinedCenter (1) """
    acAttachmentCenter = None
    acAttachmentLinedCenter = None
    value__ = None


class AcViewportScale(Enum):
    """ enum AcViewportScale, values: acVp1_1 (2), acVp1_10 (7), acVp1_100 (13), acVp1_128in_1ft (19), acVp1_16 (8), acVp1_16in_1ft (22), acVp1_2 (3), acVp1_20 (9), acVp1_2in_1ft (28), acVp1_30 (10), acVp1_32in_1ft (21), acVp1_4 (4), acVp1_40 (11), acVp1_4in_1ft (26), acVp1_5 (5), acVp1_50 (12), acVp1_64in_1ft (20), acVp1_8 (6), acVp1_8in_1ft (24), acVp10_1 (17), acVp100_1 (18), acVp1and1_2in_1ft (31), acVp1ft_1ft (34), acVp1in_1ft (30), acVp2_1 (14), acVp3_16in_1ft (25), acVp3_32in_1ft (23), acVp3_4in_1ft (29), acVp3_8in_1ft (27), acVp3in_1ft (32), acVp4_1 (15), acVp6in_1ft (33), acVp8_1 (16), acVpCustomScale (1), acVpScaleToFit (0) """
    acVp100_1 = None
    acVp10_1 = None
    acVp1and1_2in_1ft = None
    acVp1ft_1ft = None
    acVp1in_1ft = None
    acVp1_1 = None
    acVp1_10 = None
    acVp1_100 = None
    acVp1_128in_1ft = None
    acVp1_16 = None
    acVp1_16in_1ft = None
    acVp1_2 = None
    acVp1_20 = None
    acVp1_2in_1ft = None
    acVp1_30 = None
    acVp1_32in_1ft = None
    acVp1_4 = None
    acVp1_40 = None
    acVp1_4in_1ft = None
    acVp1_5 = None
    acVp1_50 = None
    acVp1_64in_1ft = None
    acVp1_8 = None
    acVp1_8in_1ft = None
    acVp2_1 = None
    acVp3in_1ft = None
    acVp3_16in_1ft = None
    acVp3_32in_1ft = None
    acVp3_4in_1ft = None
    acVp3_8in_1ft = None
    acVp4_1 = None
    acVp6in_1ft = None
    acVp8_1 = None
    acVpCustomScale = None
    acVpScaleToFit = None
    value__ = None


class AcViewportSplitType(Enum):
    """ enum AcViewportSplitType, values: acViewport2Horizontal (0), acViewport2Vertical (1), acViewport3Above (6), acViewport3Below (7), acViewport3Horizontal (4), acViewport3Left (2), acViewport3Right (3), acViewport3Vertical (5), acViewport4 (8) """
    acViewport2Horizontal = None
    acViewport2Vertical = None
    acViewport3Above = None
    acViewport3Below = None
    acViewport3Horizontal = None
    acViewport3Left = None
    acViewport3Right = None
    acViewport3Vertical = None
    acViewport4 = None
    value__ = None


class AcWindowState(Enum):
    """ enum AcWindowState, values: acMax (3), acMin (2), acNorm (1) """
    acMax = None
    acMin = None
    acNorm = None
    value__ = None


class AcWireframeType(Enum):
    """ enum AcWireframeType, values: acIsolines (0), acIsoparms (1) """
    acIsolines = None
    acIsoparms = None
    value__ = None


class AcXRefDemandLoad(Enum):
    """ enum AcXRefDemandLoad, values: acDemandLoadDisabled (0), acDemandLoadEnabled (1), acDemandLoadEnabledWithCopy (2) """
    acDemandLoadDisabled = None
    acDemandLoadEnabled = None
    acDemandLoadEnabledWithCopy = None
    value__ = None


class AcZoomScaleType(Enum):
    """ enum AcZoomScaleType, values: acZoomScaledAbsolute (0), acZoomScaledRelative (1), acZoomScaledRelativePSpace (2) """
    acZoomScaledAbsolute = None
    acZoomScaledRelative = None
    acZoomScaledRelativePSpace = None
    value__ = None


class IAxDbDocument(IAcadDatabase):
    # no doc
    def CopyObjects(self, Objects, Owner, IdPairs):
        """ CopyObjects(self: IAxDbDocument, Objects: object, Owner: object) -> (object, object) """
        pass

    def DxfIn(self, FileName, LogFileName):
        """ DxfIn(self: IAxDbDocument, FileName: str, LogFileName: object) """
        pass

    def DxfOut(self, FileName, precision, SaveThumbnailImage):
        """ DxfOut(self: IAxDbDocument, FileName: str, precision: object, SaveThumbnailImage: object) """
        pass

    def HandleToObject(self, Handle):
        """ HandleToObject(self: IAxDbDocument, Handle: str) -> object """
        pass

    def ObjectIdToObject(self, ObjectID):
        """ ObjectIdToObject(self: IAxDbDocument, ObjectID: Int64) -> object """
        pass

    def Open(self, FileName, Password):
        """ Open(self: IAxDbDocument, FileName: str, Password: object) """
        pass

    def Save(self):
        """ Save(self: IAxDbDocument) """
        pass

    def SaveAs(self, FileName, vSecurityParams):
        """ SaveAs(self: IAxDbDocument, FileName: str, vSecurityParams: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IAxDbDocument) -> object

"""

    Blocks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Blocks(self: IAxDbDocument) -> AcadBlocks

"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: IAxDbDocument) -> AcadDatabase

"""

    Dictionaries = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Dictionaries(self: IAxDbDocument) -> AcadDictionaries

"""

    DimStyles = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimStyles(self: IAxDbDocument) -> AcadDimStyles

"""

    ElevationModelSpace = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ElevationModelSpace(self: IAxDbDocument) -> float

Set: ElevationModelSpace(self: IAxDbDocument) = value
"""

    ElevationPaperSpace = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ElevationPaperSpace(self: IAxDbDocument) -> float

Set: ElevationPaperSpace(self: IAxDbDocument) = value
"""

    Groups = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Groups(self: IAxDbDocument) -> AcadGroups

"""

    Layers = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layers(self: IAxDbDocument) -> AcadLayers

"""

    Layouts = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layouts(self: IAxDbDocument) -> AcadLayouts

"""

    Limits = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Limits(self: IAxDbDocument) -> object

Set: Limits(self: IAxDbDocument) = value
"""

    Linetypes = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetypes(self: IAxDbDocument) -> AcadLineTypes

"""

    Materials = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Materials(self: IAxDbDocument) -> AcadMaterials

"""

    ModelSpace = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ModelSpace(self: IAxDbDocument) -> AcadModelSpace

"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: IAxDbDocument) -> str

Set: Name(self: IAxDbDocument) = value
"""

    PaperSpace = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PaperSpace(self: IAxDbDocument) -> AcadPaperSpace

"""

    PlotConfigurations = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotConfigurations(self: IAxDbDocument) -> AcadPlotConfigurations

"""

    Preferences = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Preferences(self: IAxDbDocument) -> AcadDatabasePreferences

"""

    RegisteredApplications = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RegisteredApplications(self: IAxDbDocument) -> AcadRegisteredApplications

"""

    SectionManager = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SectionManager(self: IAxDbDocument) -> AcadSectionManager

"""

    SummaryInfo = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SummaryInfo(self: IAxDbDocument) -> AcadSummaryInfo

"""

    TextStyles = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextStyles(self: IAxDbDocument) -> AcadTextStyles

"""

    UserCoordinateSystems = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: UserCoordinateSystems(self: IAxDbDocument) -> AcadUCSs

"""

    Viewports = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Viewports(self: IAxDbDocument) -> AcadViewports

"""

    Views = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Views(self: IAxDbDocument) -> AcadViews

"""



class IAxDbDocumentEvents_Event:
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class AxDbDocument(IAxDbDocument, IAcadDatabase, IAxDbDocumentEvents_Event):
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class AxDbDocumentClass(__ComObject):
    """ AxDbDocumentClass() """
    def CopyObjects(self, Objects, Owner, IdPairs):
        """ CopyObjects(self: AxDbDocumentClass, Objects: object, Owner: object) -> (object, object) """
        pass

    def DxfIn(self, FileName, LogFileName):
        """ DxfIn(self: AxDbDocumentClass, FileName: str, LogFileName: object) """
        pass

    def DxfOut(self, FileName, precision, SaveThumbnailImage):
        """ DxfOut(self: AxDbDocumentClass, FileName: str, precision: object, SaveThumbnailImage: object) """
        pass

    def HandleToObject(self, Handle):
        """ HandleToObject(self: AxDbDocumentClass, Handle: str) -> object """
        pass

    def ObjectIdToObject(self, ObjectID):
        """ ObjectIdToObject(self: AxDbDocumentClass, ObjectID: Int64) -> object """
        pass

    def Open(self, FileName, Password):
        """ Open(self: AxDbDocumentClass, FileName: str, Password: object) """
        pass

    def Save(self):
        """ Save(self: AxDbDocumentClass) """
        pass

    def SaveAs(self, FileName, vSecurityParams):
        """ SaveAs(self: AxDbDocumentClass, FileName: str, vSecurityParams: object) """
        pass

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: AxDbDocumentClass) -> object

"""

    Blocks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Blocks(self: AxDbDocumentClass) -> AcadBlocks

"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: AxDbDocumentClass) -> AcadDatabase

"""

    Dictionaries = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Dictionaries(self: AxDbDocumentClass) -> AcadDictionaries

"""

    DimStyles = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DimStyles(self: AxDbDocumentClass) -> AcadDimStyles

"""

    ElevationModelSpace = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ElevationModelSpace(self: AxDbDocumentClass) -> float

Set: ElevationModelSpace(self: AxDbDocumentClass) = value
"""

    ElevationPaperSpace = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ElevationPaperSpace(self: AxDbDocumentClass) -> float

Set: ElevationPaperSpace(self: AxDbDocumentClass) = value
"""

    Groups = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Groups(self: AxDbDocumentClass) -> AcadGroups

"""

    Layers = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layers(self: AxDbDocumentClass) -> AcadLayers

"""

    Layouts = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layouts(self: AxDbDocumentClass) -> AcadLayouts

"""

    Limits = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Limits(self: AxDbDocumentClass) -> object

Set: Limits(self: AxDbDocumentClass) = value
"""

    Linetypes = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetypes(self: AxDbDocumentClass) -> AcadLineTypes

"""

    Materials = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Materials(self: AxDbDocumentClass) -> AcadMaterials

"""

    ModelSpace = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ModelSpace(self: AxDbDocumentClass) -> AcadModelSpace

"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: AxDbDocumentClass) -> str

Set: Name(self: AxDbDocumentClass) = value
"""

    PaperSpace = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PaperSpace(self: AxDbDocumentClass) -> AcadPaperSpace

"""

    PlotConfigurations = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotConfigurations(self: AxDbDocumentClass) -> AcadPlotConfigurations

"""

    Preferences = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Preferences(self: AxDbDocumentClass) -> AcadDatabasePreferences

"""

    RegisteredApplications = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: RegisteredApplications(self: AxDbDocumentClass) -> AcadRegisteredApplications

"""

    SectionManager = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SectionManager(self: AxDbDocumentClass) -> AcadSectionManager

"""

    SummaryInfo = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: SummaryInfo(self: AxDbDocumentClass) -> AcadSummaryInfo

"""

    TextStyles = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TextStyles(self: AxDbDocumentClass) -> AcadTextStyles

"""

    UserCoordinateSystems = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: UserCoordinateSystems(self: AxDbDocumentClass) -> AcadUCSs

"""

    Viewports = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Viewports(self: AxDbDocumentClass) -> AcadViewports

"""

    Views = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Views(self: AxDbDocumentClass) -> AcadViews

"""



class IAcadDwfUnderlay(IAcadUnderlay, IAcadEntity, IAcadObject):
    # no doc
    def ArrayPolar(self, NumberOfObjects, AngleToFill, CenterPoint):
        """ ArrayPolar(self: IAcadDwfUnderlay, NumberOfObjects: int, AngleToFill: float, CenterPoint: object) -> object """
        pass

    def ArrayRectangular(self, NumberOfRows, NumberOfColumns, NumberOfLevels, DistBetweenRows, DistBetweenCols, DistBetweenLevels):
        """ ArrayRectangular(self: IAcadDwfUnderlay, NumberOfRows: int, NumberOfColumns: int, NumberOfLevels: int, DistBetweenRows: float, DistBetweenCols: float, DistBetweenLevels: float) -> object """
        pass

    def ClipBoundary(self, boundry):
        """ ClipBoundary(self: IAcadDwfUnderlay, boundry: object) """
        pass

    def Copy(self):
        """ Copy(self: IAcadDwfUnderlay) -> object """
        pass

    def Delete(self):
        """ Delete(self: IAcadDwfUnderlay) """
        pass

    def Erase(self):
        """ Erase(self: IAcadDwfUnderlay) """
        pass

    def GetBoundingBox(self, MinPoint, MaxPoint):
        """ GetBoundingBox(self: IAcadDwfUnderlay) -> (object, object) """
        pass

    def GetExtensionDictionary(self):
        """ GetExtensionDictionary(self: IAcadDwfUnderlay) -> AcadDictionary """
        pass

    def GetXData(self, AppName, XDataType, XDataValue):
        """ GetXData(self: IAcadDwfUnderlay, AppName: str) -> (object, object) """
        pass

    def Highlight(self, HighlightFlag):
        """ Highlight(self: IAcadDwfUnderlay, HighlightFlag: bool) """
        pass

    def IntersectWith(self, IntersectObject, option):
        """ IntersectWith(self: IAcadDwfUnderlay, IntersectObject: object, option: AcExtendOption) -> object """
        pass

    def Mirror(self, Point1, Point2):
        """ Mirror(self: IAcadDwfUnderlay, Point1: object, Point2: object) -> object """
        pass

    def Mirror3D(self, Point1, Point2, point3):
        """ Mirror3D(self: IAcadDwfUnderlay, Point1: object, Point2: object, point3: object) -> object """
        pass

    def Move(self, FromPoint, ToPoint):
        """ Move(self: IAcadDwfUnderlay, FromPoint: object, ToPoint: object) """
        pass

    def Rotate(self, BasePoint, RotationAngle):
        """ Rotate(self: IAcadDwfUnderlay, BasePoint: object, RotationAngle: float) """
        pass

    def Rotate3D(self, Point1, Point2, RotationAngle):
        """ Rotate3D(self: IAcadDwfUnderlay, Point1: object, Point2: object, RotationAngle: float) """
        pass

    def ScaleEntity(self, BasePoint, ScaleFactor):
        """ ScaleEntity(self: IAcadDwfUnderlay, BasePoint: object, ScaleFactor: float) """
        pass

    def SetXData(self, XDataType, XDataValue):
        """ SetXData(self: IAcadDwfUnderlay, XDataType: object, XDataValue: object) """
        pass

    def TransformBy(self, TransformationMatrix):
        """ TransformBy(self: IAcadDwfUnderlay, TransformationMatrix: object) """
        pass

    def Update(self):
        """ Update(self: IAcadDwfUnderlay) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    AdjustForBackground = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: AdjustForBackground(self: IAcadDwfUnderlay) -> bool

Set: AdjustForBackground(self: IAcadDwfUnderlay) = value
"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Application(self: IAcadDwfUnderlay) -> object

"""

    ClippingEnabled = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ClippingEnabled(self: IAcadDwfUnderlay) -> bool

Set: ClippingEnabled(self: IAcadDwfUnderlay) = value
"""

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: color(self: IAcadDwfUnderlay) -> ACAD_COLOR

Set: color(self: IAcadDwfUnderlay) = value
"""

    Contrast = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Contrast(self: IAcadDwfUnderlay) -> int

Set: Contrast(self: IAcadDwfUnderlay) = value
"""

    Database = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Database(self: IAcadDwfUnderlay) -> AcadDatabase

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Document(self: IAcadDwfUnderlay) -> object

"""

    DWFFormat = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: DWFFormat(self: IAcadDwfUnderlay) -> str

Set: DWFFormat(self: IAcadDwfUnderlay) = value
"""

    EntityName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityName(self: IAcadDwfUnderlay) -> str

"""

    EntityTransparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityTransparency(self: IAcadDwfUnderlay) -> str

Set: EntityTransparency(self: IAcadDwfUnderlay) = value
"""

    EntityType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EntityType(self: IAcadDwfUnderlay) -> int

"""

    Fade = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Fade(self: IAcadDwfUnderlay) -> int

Set: Fade(self: IAcadDwfUnderlay) = value
"""

    File = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: File(self: IAcadDwfUnderlay) -> str

Set: File(self: IAcadDwfUnderlay) = value
"""

    Handle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Handle(self: IAcadDwfUnderlay) -> str

"""

    HasExtensionDictionary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: HasExtensionDictionary(self: IAcadDwfUnderlay) -> bool

"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Height(self: IAcadDwfUnderlay) -> float

Set: Height(self: IAcadDwfUnderlay) = value
"""

    Hyperlinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Hyperlinks(self: IAcadDwfUnderlay) -> AcadHyperlinks

"""

    ItemName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ItemName(self: IAcadDwfUnderlay) -> str

Set: ItemName(self: IAcadDwfUnderlay) = value
"""

    Layer = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Layer(self: IAcadDwfUnderlay) -> str

Set: Layer(self: IAcadDwfUnderlay) = value
"""

    Linetype = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Linetype(self: IAcadDwfUnderlay) -> str

Set: Linetype(self: IAcadDwfUnderlay) = value
"""

    LinetypeScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: LinetypeScale(self: IAcadDwfUnderlay) -> float

Set: LinetypeScale(self: IAcadDwfUnderlay) = value
"""

    Lineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Lineweight(self: IAcadDwfUnderlay) -> ACAD_LWEIGHT

Set: Lineweight(self: IAcadDwfUnderlay) = value
"""

    Material = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Material(self: IAcadDwfUnderlay) -> str

Set: Material(self: IAcadDwfUnderlay) = value
"""

    Monochrome = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Monochrome(self: IAcadDwfUnderlay) -> bool

Set: Monochrome(self: IAcadDwfUnderlay) = value
"""

    ObjectID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectID(self: IAcadDwfUnderlay) -> Int64

"""

    ObjectName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ObjectName(self: IAcadDwfUnderlay) -> str

"""

    OwnerID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: OwnerID(self: IAcadDwfUnderlay) -> Int64

"""

    PlotStyleName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: PlotStyleName(self: IAcadDwfUnderlay) -> str

Set: PlotStyleName(self: IAcadDwfUnderlay) = value
"""

    Position = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Position(self: IAcadDwfUnderlay) -> object

Set: Position(self: IAcadDwfUnderlay) = value
"""

    Rotation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Rotation(self: IAcadDwfUnderlay) -> float

Set: Rotation(self: IAcadDwfUnderlay) = value
"""

    ScaleFactor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ScaleFactor(self: IAcadDwfUnderlay) -> float

Set: ScaleFactor(self: IAcadDwfUnderlay) = value
"""

    TrueColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: TrueColor(self: IAcadDwfUnderlay) -> AcadAcCmColor

Set: TrueColor(self: IAcadDwfUnderlay) = value
"""

    UnderlayLayerOverrideApplied = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: UnderlayLayerOverrideApplied(self: IAcadDwfUnderlay) -> AcUnderlayLayerOverrideType

Set: UnderlayLayerOverrideApplied(self: IAcadDwfUnderlay) = value
"""

    UnderlayName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: UnderlayName(self: IAcadDwfUnderlay) -> str

Set: UnderlayName(self: IAcadDwfUnderlay) = value
"""

    UnderlayVisibility = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: UnderlayVisibility(self: IAcadDwfUnderlay) -> bool

Set: UnderlayVisibility(self: IAcadDwfUnderlay) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Visible(self: IAcadDwfUnderlay) -> bool

Set: Visible(self: IAcadDwfUnderlay) = value
"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Width(self: IAcadDwfUnderlay) -> float

Set: Width(self: IAcadDwfUnderlay) = value
"""



class IAcadObjectEvents:
    # no doc
    def Modified(self, pObject):
        """ Modified(self: IAcadObjectEvents, pObject: AcadObject) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class IAcadObjectEvents_ModifiedEventHandler(MulticastDelegate):
    """ IAcadObjectEvents_ModifiedEventHandler(A_1: object, A_2: UIntPtr) """
    def Invoke(self, pObject):
        """ Invoke(self: IAcadObjectEvents_ModifiedEventHandler, pObject: AcadObject) """
        pass

    @staticmethod # known case of __new__
    def __new__(self, A_1, A_2):
        """ __new__(cls: type, A_1: object, A_2: UIntPtr) """
        pass


class IAcadObjectEvents_SinkHelper(object):
    # no doc
    def Modified(self, A_1):
        """ Modified(self: IAcadObjectEvents_SinkHelper, A_1: AcadObject) """
        pass

    m_dwCookie = None
    m_ModifiedDelegate = None


class IAcadShadowDisplay:
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    EnableShadowDisplay = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: EnableShadowDisplay(self: IAcadShadowDisplay) -> int

"""

    ShadowDisplay = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: ShadowDisplay(self: IAcadShadowDisplay) -> AcShadowDisplayType

Set: ShadowDisplay(self: IAcadShadowDisplay) = value
"""



class IAxDbDocumentEvents:
    # no doc
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class IAxDbDocumentEvents_SinkHelper(object):
    # no doc
    m_dwCookie = None


